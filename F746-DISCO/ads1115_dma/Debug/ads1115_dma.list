
ads1115_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c4c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08008e20  08008e20  00009e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800926c  0800926c  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800926c  0800926c  0000a26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009274  08009274  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009274  08009274  0000a274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009278  08009278  0000a278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800927c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001d8  08009454  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08009454  0000b490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef49  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002323  00000000  00000000  0001a151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0001c478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000935  00000000  00000000  0001d068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265e1  00000000  00000000  0001d99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011296  00000000  00000000  00043f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e93e9  00000000  00000000  00055214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e5fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040f8  00000000  00000000  0013e640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00142738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008e04 	.word	0x08008e04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08008e04 	.word	0x08008e04

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <writeRegister16>:
volatile uint8_t ads_dma_done = 0;
volatile uint8_t ads_ready_flag = 0; // set by EXTI when ALERT/RDY pulses

/* Helper: write 16-bit register (big-endian) */
static int writeRegister16(uint8_t reg, uint16_t value)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af04      	add	r7, sp, #16
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2];
    data[0] = (uint8_t)(value >> 8);
 8000f24:	88bb      	ldrh	r3, [r7, #4]
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	733b      	strb	r3, [r7, #12]
    data[1] = (uint8_t)(value & 0xFF);
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Mem_Write(ads_hi2c, ads_devaddr_8bit, reg, I2C_MEMADD_SIZE_8BIT, data, 2, 200) != HAL_OK) {
 8000f34:	4b0d      	ldr	r3, [pc, #52]	@ (8000f6c <writeRegister16+0x58>)
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <writeRegister16+0x5c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	23c8      	movs	r3, #200	@ 0xc8
 8000f44:	9302      	str	r3, [sp, #8]
 8000f46:	2302      	movs	r3, #2
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2301      	movs	r3, #1
 8000f52:	f001 fcab 	bl	80028ac <HAL_I2C_Mem_Write>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <writeRegister16+0x4e>
        return -1;
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	e000      	b.n	8000f64 <writeRegister16+0x50>
    }
    return 0;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200001f4 	.word	0x200001f4
 8000f70:	200001f8 	.word	0x200001f8

08000f74 <ADS1115_Init>:
        default: return 2.048f;
    }
}

void ADS1115_Init(I2C_HandleTypeDef *hi2c, uint8_t addr7bit, ADS1115_PGA_t pga, ADS1115_DR_t dr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4611      	mov	r1, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	4603      	mov	r3, r0
 8000f84:	70fb      	strb	r3, [r7, #3]
 8000f86:	460b      	mov	r3, r1
 8000f88:	70bb      	strb	r3, [r7, #2]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	707b      	strb	r3, [r7, #1]
    ads_hi2c = hi2c;
 8000f8e:	4a22      	ldr	r2, [pc, #136]	@ (8001018 <ADS1115_Init+0xa4>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6013      	str	r3, [r2, #0]
    ads_devaddr_8bit = (uint8_t)(addr7bit << 1);
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b20      	ldr	r3, [pc, #128]	@ (800101c <ADS1115_Init+0xa8>)
 8000f9c:	701a      	strb	r2, [r3, #0]
    ads_pga = pga;
 8000f9e:	4a20      	ldr	r2, [pc, #128]	@ (8001020 <ADS1115_Init+0xac>)
 8000fa0:	78bb      	ldrb	r3, [r7, #2]
 8000fa2:	7013      	strb	r3, [r2, #0]
    ads_dr = dr;
 8000fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8001024 <ADS1115_Init+0xb0>)
 8000fa6:	787b      	ldrb	r3, [r7, #1]
 8000fa8:	7013      	strb	r3, [r2, #0]
     * - COMP_QUE = 00 (assert after one conversion -> use as RDY pulse)
     *
     * Config bits layout: [15:0] OS(15) MUX(14:12) PGA(11:9) MODE(8) DR(7:5) COMP_MODE(4) COMP_POL(3)
     * COMP_LAT(2) COMP_QUE(1:0)
     */
    uint16_t cfg = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	81fb      	strh	r3, [r7, #14]
    // MUX = 100 -> AIN0 single-ended
    cfg |= (0x4 << 12);
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb4:	81fb      	strh	r3, [r7, #14]
    // PGA
    cfg |= ((uint16_t)( ( (uint16_t)pga ) & 0x7) << 9);
 8000fb6:	78bb      	ldrb	r3, [r7, #2]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	025b      	lsls	r3, r3, #9
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	81fb      	strh	r3, [r7, #14]
    // MODE = 0 -> continuous
    // DR
    cfg |= ((uint16_t)( ( (uint16_t)dr ) & 0x7) << 5);
 8000fce:	787b      	ldrb	r3, [r7, #1]
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	015b      	lsls	r3, r3, #5
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	81fb      	strh	r3, [r7, #14]
    // COMP_MODE = 0; COMP_POL = 0; COMP_LAT = 0;
    // COMP_QUE = 00 -> assert after one conversion
    cfg |= 0x0; // nothing extra

    // Write config
    writeRegister16(ADS1115_REG_CONFIG, cfg);
 8000fe4:	89fb      	ldrh	r3, [r7, #14]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f7ff ff93 	bl	8000f14 <writeRegister16>

    // Optionally set thresholds to extremes (so comparator will assert every conversion)
    // set hi_thresh = 0x7FFF, lo_thresh = 0x8000
    writeRegister16(ADS1115_REG_HI_THRESH, 0x7FFF);
 8000fee:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f7ff ff8e 	bl	8000f14 <writeRegister16>
    writeRegister16(ADS1115_REG_LO_THRESH, 0x8000);
 8000ff8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f7ff ff89 	bl	8000f14 <writeRegister16>

    /* Clear flags */
    ads_dma_done = 0;
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <ADS1115_Init+0xb4>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
    ads_ready_flag = 0;
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <ADS1115_Init+0xb8>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001f4 	.word	0x200001f4
 800101c:	200001f8 	.word	0x200001f8
 8001020:	20000000 	.word	0x20000000
 8001024:	20000001 	.word	0x20000001
 8001028:	200001f9 	.word	0x200001f9
 800102c:	200001fa 	.word	0x200001fa

08001030 <ADS1115_StartRead_DMA>:
    return 0;
}

/* Start DMA read (non-blocking). Caller can wait for ads_dma_done flag or use blocking wrapper. */
static int ADS1115_StartRead_DMA(uint8_t *buf2)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af02      	add	r7, sp, #8
 8001036:	6078      	str	r0, [r7, #4]
    if (ads_hi2c == NULL) return -1;
 8001038:	4b10      	ldr	r3, [pc, #64]	@ (800107c <ADS1115_StartRead_DMA+0x4c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <ADS1115_StartRead_DMA+0x16>
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	e016      	b.n	8001074 <ADS1115_StartRead_DMA+0x44>
    ads_dma_done = 0;
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <ADS1115_StartRead_DMA+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_Mem_Read_DMA(ads_hi2c, ads_devaddr_8bit, ADS1115_REG_CONVERSION, I2C_MEMADD_SIZE_8BIT, buf2, 2) != HAL_OK) {
 800104c:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <ADS1115_StartRead_DMA+0x4c>)
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <ADS1115_StartRead_DMA+0x54>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	2302      	movs	r3, #2
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	2200      	movs	r2, #0
 8001062:	f001 fd37 	bl	8002ad4 <HAL_I2C_Mem_Read_DMA>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <ADS1115_StartRead_DMA+0x42>
        return -1;
 800106c:	f04f 33ff 	mov.w	r3, #4294967295
 8001070:	e000      	b.n	8001074 <ADS1115_StartRead_DMA+0x44>
    }
    return 0;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200001f4 	.word	0x200001f4
 8001080:	200001f9 	.word	0x200001f9
 8001084:	200001f8 	.word	0x200001f8

08001088 <ADS1115_ReadRaw_DMA_Blocking>:

/* Blocking wrapper */
int ADS1115_ReadRaw_DMA_Blocking(int16_t *raw_out, uint32_t timeout_ms)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
    uint8_t buf[2];
    if (ADS1115_StartRead_DMA(buf) != 0) return -1;
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffca 	bl	8001030 <ADS1115_StartRead_DMA>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d002      	beq.n	80010a8 <ADS1115_ReadRaw_DMA_Blocking+0x20>
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	e024      	b.n	80010f2 <ADS1115_ReadRaw_DMA_Blocking+0x6a>

    uint32_t start = HAL_GetTick();
 80010a8:	f000 fcc2 	bl	8001a30 <HAL_GetTick>
 80010ac:	60f8      	str	r0, [r7, #12]
    while (!ads_dma_done) {
 80010ae:	e00a      	b.n	80010c6 <ADS1115_ReadRaw_DMA_Blocking+0x3e>
        if ((HAL_GetTick() - start) > timeout_ms) {
 80010b0:	f000 fcbe 	bl	8001a30 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d202      	bcs.n	80010c6 <ADS1115_ReadRaw_DMA_Blocking+0x3e>
            return -1; // timeout
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	e015      	b.n	80010f2 <ADS1115_ReadRaw_DMA_Blocking+0x6a>
    while (!ads_dma_done) {
 80010c6:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <ADS1115_ReadRaw_DMA_Blocking+0x74>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0ef      	beq.n	80010b0 <ADS1115_ReadRaw_DMA_Blocking+0x28>
        }
    }
    ads_dma_done = 0;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <ADS1115_ReadRaw_DMA_Blocking+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
    uint16_t tmp = ((uint16_t)buf[0] << 8) | buf[1];
 80010d6:	7a3b      	ldrb	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	7a7b      	ldrb	r3, [r7, #9]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	817b      	strh	r3, [r7, #10]
    *raw_out = (int16_t)tmp;
 80010e8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	801a      	strh	r2, [r3, #0]
    return 0;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200001f9 	.word	0x200001f9

08001100 <__io_putchar>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
int __io_putchar(int ch)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    uint8_t c = (uint8_t)ch;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart1, &c, 1, HAL_MAX_DELAY);
 800110e:	f107 010f 	add.w	r1, r7, #15
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	2201      	movs	r2, #1
 8001118:	4803      	ldr	r0, [pc, #12]	@ (8001128 <__io_putchar+0x28>)
 800111a:	f004 fcc7 	bl	8005aac <HAL_UART_Transmit>
    return ch;
 800111e:	687b      	ldr	r3, [r7, #4]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200002b0 	.word	0x200002b0

0800112c <HAL_I2C_MemRxCpltCallback>:
static void MX_DMA_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    if (hi2c == &hi2c1) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a06      	ldr	r2, [pc, #24]	@ (8001150 <HAL_I2C_MemRxCpltCallback+0x24>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d102      	bne.n	8001142 <HAL_I2C_MemRxCpltCallback+0x16>
        extern volatile uint8_t ads_dma_done;
        ads_dma_done = 1;
 800113c:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <HAL_I2C_MemRxCpltCallback+0x28>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
    }
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	200001fc 	.word	0x200001fc
 8001154:	200001f9 	.word	0x200001f9

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115e:	f000 fc16 	bl	800198e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001162:	f000 f85b 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001166:	f000 f955 	bl	8001414 <MX_GPIO_Init>
  MX_DMA_Init();
 800116a:	f000 f935 	bl	80013d8 <MX_DMA_Init>
  MX_I2C1_Init();
 800116e:	f000 f8c3 	bl	80012f8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001172:	f000 f901 	bl	8001378 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Inform user */
  printf("\r\n---- ADS1115 DMA demo (STM32F746G-DISCO) ----\r\n");
 8001176:	4821      	ldr	r0, [pc, #132]	@ (80011fc <main+0xa4>)
 8001178:	f005 fed0 	bl	8006f1c <puts>

     /* Init ADS1115: hi2c1, address 0x48 (ADDR->GND), PGA +/-2.048, DR 250SPS */
  ADS1115_Init(&hi2c1, ADS1115_ADDRESS_GND, ADS_PGA_2_048, ADS_DR_250SPS);
 800117c:	2305      	movs	r3, #5
 800117e:	2202      	movs	r2, #2
 8001180:	2148      	movs	r1, #72	@ 0x48
 8001182:	481f      	ldr	r0, [pc, #124]	@ (8001200 <main+0xa8>)
 8001184:	f7ff fef6 	bl	8000f74 <ADS1115_Init>
  printf("ADS1115 init done. Waiting for ALERT (PA2) to pulse each conversion...\r\n");
 8001188:	481e      	ldr	r0, [pc, #120]	@ (8001204 <main+0xac>)
 800118a:	f005 fec7 	bl	8006f1c <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	/* Wait for ALERT EXTI (rising or falling depending on comp_pol), exti_alert_flag set in EXTI callback */
	if (exti_alert_flag) {
 800118e:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <main+0xb0>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d02c      	beq.n	80011f2 <main+0x9a>
		exti_alert_flag = 0;
 8001198:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <main+0xb0>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]

	    /* Start DMA read and block for completion (timeout 200 ms) */
	    int16_t raw;
	    if (ADS1115_ReadRaw_DMA_Blocking(&raw, 200) == 0) {
 800119e:	1dbb      	adds	r3, r7, #6
 80011a0:	21c8      	movs	r1, #200	@ 0xc8
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff70 	bl	8001088 <ADS1115_ReadRaw_DMA_Blocking>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d11e      	bne.n	80011ec <main+0x94>
	    	float volts;
	        float fs = 2.048f; // as configured PGA
 80011ae:	4b17      	ldr	r3, [pc, #92]	@ (800120c <main+0xb4>)
 80011b0:	60fb      	str	r3, [r7, #12]
	        volts = ((float)raw) * (fs / 32768.0f);
 80011b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011be:	edd7 6a03 	vldr	s13, [r7, #12]
 80011c2:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8001210 <main+0xb8>
 80011c6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80011ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ce:	edc7 7a02 	vstr	s15, [r7, #8]
	        printf("RAW: %d, V = %.6f V\r\n", raw, volts);
 80011d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d6:	461c      	mov	r4, r3
 80011d8:	68b8      	ldr	r0, [r7, #8]
 80011da:	f7ff f9d5 	bl	8000588 <__aeabi_f2d>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4621      	mov	r1, r4
 80011e4:	480b      	ldr	r0, [pc, #44]	@ (8001214 <main+0xbc>)
 80011e6:	f005 fe31 	bl	8006e4c <iprintf>
 80011ea:	e002      	b.n	80011f2 <main+0x9a>
	    } else {
	    	printf("ADS1115 DMA read timeout/error\r\n");
 80011ec:	480a      	ldr	r0, [pc, #40]	@ (8001218 <main+0xc0>)
 80011ee:	f005 fe95 	bl	8006f1c <puts>
	    }
	}
	HAL_Delay(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f000 fc28 	bl	8001a48 <HAL_Delay>
	if (exti_alert_flag) {
 80011f8:	e7c9      	b.n	800118e <main+0x36>
 80011fa:	bf00      	nop
 80011fc:	08008e20 	.word	0x08008e20
 8001200:	200001fc 	.word	0x200001fc
 8001204:	08008e54 	.word	0x08008e54
 8001208:	20000338 	.word	0x20000338
 800120c:	4003126f 	.word	0x4003126f
 8001210:	47000000 	.word	0x47000000
 8001214:	08008e9c 	.word	0x08008e9c
 8001218:	08008eb4 	.word	0x08008eb4

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b094      	sub	sp, #80	@ 0x50
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 0320 	add.w	r3, r7, #32
 8001226:	2230      	movs	r2, #48	@ 0x30
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f005 ff56 	bl	80070dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001240:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <SystemClock_Config+0xd4>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	4a2a      	ldr	r2, [pc, #168]	@ (80012f0 <SystemClock_Config+0xd4>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124a:	6413      	str	r3, [r2, #64]	@ 0x40
 800124c:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <SystemClock_Config+0xd4>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <SystemClock_Config+0xd8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a25      	ldr	r2, [pc, #148]	@ (80012f4 <SystemClock_Config+0xd8>)
 800125e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	4b23      	ldr	r3, [pc, #140]	@ (80012f4 <SystemClock_Config+0xd8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001270:	2301      	movs	r3, #1
 8001272:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001274:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127a:	2302      	movs	r3, #2
 800127c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001284:	2319      	movs	r3, #25
 8001286:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001288:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 800128c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800128e:	2302      	movs	r3, #2
 8001290:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001292:	2309      	movs	r3, #9
 8001294:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001296:	f107 0320 	add.w	r3, r7, #32
 800129a:	4618      	mov	r0, r3
 800129c:	f003 fb3e 	bl	800491c <HAL_RCC_OscConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012a6:	f000 f8f9 	bl	800149c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012aa:	f003 fae7 	bl	800487c <HAL_PWREx_EnableOverDrive>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012b4:	f000 f8f2 	bl	800149c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	230f      	movs	r3, #15
 80012ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012bc:	2302      	movs	r3, #2
 80012be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2107      	movs	r1, #7
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 fdc4 	bl	8004e64 <HAL_RCC_ClockConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012e2:	f000 f8db 	bl	800149c <Error_Handler>
  }
}
 80012e6:	bf00      	nop
 80012e8:	3750      	adds	r7, #80	@ 0x50
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40007000 	.word	0x40007000

080012f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <MX_I2C1_Init+0x74>)
 80012fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001370 <MX_I2C1_Init+0x78>)
 8001300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001302:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <MX_I2C1_Init+0x74>)
 8001304:	4a1b      	ldr	r2, [pc, #108]	@ (8001374 <MX_I2C1_Init+0x7c>)
 8001306:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001308:	4b18      	ldr	r3, [pc, #96]	@ (800136c <MX_I2C1_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130e:	4b17      	ldr	r3, [pc, #92]	@ (800136c <MX_I2C1_Init+0x74>)
 8001310:	2201      	movs	r2, #1
 8001312:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <MX_I2C1_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800131a:	4b14      	ldr	r3, [pc, #80]	@ (800136c <MX_I2C1_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001320:	4b12      	ldr	r3, [pc, #72]	@ (800136c <MX_I2C1_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001326:	4b11      	ldr	r3, [pc, #68]	@ (800136c <MX_I2C1_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132c:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <MX_I2C1_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001332:	480e      	ldr	r0, [pc, #56]	@ (800136c <MX_I2C1_Init+0x74>)
 8001334:	f001 fa1e 	bl	8002774 <HAL_I2C_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800133e:	f000 f8ad 	bl	800149c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001342:	2100      	movs	r1, #0
 8001344:	4809      	ldr	r0, [pc, #36]	@ (800136c <MX_I2C1_Init+0x74>)
 8001346:	f003 fa01 	bl	800474c <HAL_I2CEx_ConfigAnalogFilter>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001350:	f000 f8a4 	bl	800149c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001354:	2100      	movs	r1, #0
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_I2C1_Init+0x74>)
 8001358:	f003 fa43 	bl	80047e2 <HAL_I2CEx_ConfigDigitalFilter>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001362:	f000 f89b 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001fc 	.word	0x200001fc
 8001370:	40005400 	.word	0x40005400
 8001374:	6000030d 	.word	0x6000030d

08001378 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <MX_USART1_UART_Init+0x58>)
 800137e:	4a15      	ldr	r2, [pc, #84]	@ (80013d4 <MX_USART1_UART_Init+0x5c>)
 8001380:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <MX_USART1_UART_Init+0x58>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <MX_USART1_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <MX_USART1_UART_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <MX_USART1_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <MX_USART1_UART_Init+0x58>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <MX_USART1_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <MX_USART1_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <MX_USART1_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <MX_USART1_UART_Init+0x58>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_USART1_UART_Init+0x58>)
 80013bc:	f004 fb28 	bl	8005a10 <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013c6:	f000 f869 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200002b0 	.word	0x200002b0
 80013d4:	40011000 	.word	0x40011000

080013d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013de:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <MX_DMA_Init+0x38>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001410 <MX_DMA_Init+0x38>)
 80013e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <MX_DMA_Init+0x38>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	200b      	movs	r0, #11
 80013fc:	f000 fc23 	bl	8001c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001400:	200b      	movs	r0, #11
 8001402:	f000 fc3c 	bl	8001c7e <HAL_NVIC_EnableIRQ>

}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_GPIO_Init+0x80>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a19      	ldr	r2, [pc, #100]	@ (8001494 <MX_GPIO_Init+0x80>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <MX_GPIO_Init+0x80>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <MX_GPIO_Init+0x80>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a13      	ldr	r2, [pc, #76]	@ (8001494 <MX_GPIO_Init+0x80>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_GPIO_Init+0x80>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_GPIO_Init+0x80>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a0d      	ldr	r2, [pc, #52]	@ (8001494 <MX_GPIO_Init+0x80>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <MX_GPIO_Init+0x80>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001472:	2301      	movs	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001476:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800147a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	4619      	mov	r1, r3
 8001486:	4804      	ldr	r0, [pc, #16]	@ (8001498 <MX_GPIO_Init+0x84>)
 8001488:	f000 ffc8 	bl	800241c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800148c:	bf00      	nop
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000

0800149c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a0:	b672      	cpsid	i
}
 80014a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <Error_Handler+0x8>

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <HAL_MspInit+0x44>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	4a0e      	ldr	r2, [pc, #56]	@ (80014ec <HAL_MspInit+0x44>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ba:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <HAL_MspInit+0x44>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <HAL_MspInit+0x44>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	4a08      	ldr	r2, [pc, #32]	@ (80014ec <HAL_MspInit+0x44>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_MspInit+0x44>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800

080014f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0aa      	sub	sp, #168	@ 0xa8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	2284      	movs	r2, #132	@ 0x84
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f005 fde3 	bl	80070dc <memset>
  if(hi2c->Instance==I2C1)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a39      	ldr	r2, [pc, #228]	@ (8001600 <HAL_I2C_MspInit+0x110>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d16a      	bne.n	80015f6 <HAL_I2C_MspInit+0x106>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001520:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001524:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001526:	2300      	movs	r3, #0
 8001528:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	4618      	mov	r0, r3
 8001530:	f003 fe7e 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800153a:	f7ff ffaf 	bl	800149c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	4b31      	ldr	r3, [pc, #196]	@ (8001604 <HAL_I2C_MspInit+0x114>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a30      	ldr	r2, [pc, #192]	@ (8001604 <HAL_I2C_MspInit+0x114>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b2e      	ldr	r3, [pc, #184]	@ (8001604 <HAL_I2C_MspInit+0x114>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001556:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800155a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155e:	2312      	movs	r3, #18
 8001560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001570:	2304      	movs	r3, #4
 8001572:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001576:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800157a:	4619      	mov	r1, r3
 800157c:	4822      	ldr	r0, [pc, #136]	@ (8001608 <HAL_I2C_MspInit+0x118>)
 800157e:	f000 ff4d 	bl	800241c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_I2C_MspInit+0x114>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	4a1f      	ldr	r2, [pc, #124]	@ (8001604 <HAL_I2C_MspInit+0x114>)
 8001588:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800158c:	6413      	str	r3, [r2, #64]	@ 0x40
 800158e:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <HAL_I2C_MspInit+0x114>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800159a:	4b1c      	ldr	r3, [pc, #112]	@ (800160c <HAL_I2C_MspInit+0x11c>)
 800159c:	4a1c      	ldr	r2, [pc, #112]	@ (8001610 <HAL_I2C_MspInit+0x120>)
 800159e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <HAL_I2C_MspInit+0x11c>)
 80015a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015a6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a8:	4b18      	ldr	r3, [pc, #96]	@ (800160c <HAL_I2C_MspInit+0x11c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ae:	4b17      	ldr	r3, [pc, #92]	@ (800160c <HAL_I2C_MspInit+0x11c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015b4:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_I2C_MspInit+0x11c>)
 80015b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015bc:	4b13      	ldr	r3, [pc, #76]	@ (800160c <HAL_I2C_MspInit+0x11c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c2:	4b12      	ldr	r3, [pc, #72]	@ (800160c <HAL_I2C_MspInit+0x11c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80015c8:	4b10      	ldr	r3, [pc, #64]	@ (800160c <HAL_I2C_MspInit+0x11c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015ce:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <HAL_I2C_MspInit+0x11c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <HAL_I2C_MspInit+0x11c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80015da:	480c      	ldr	r0, [pc, #48]	@ (800160c <HAL_I2C_MspInit+0x11c>)
 80015dc:	f000 fb6a 	bl	8001cb4 <HAL_DMA_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 80015e6:	f7ff ff59 	bl	800149c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a07      	ldr	r2, [pc, #28]	@ (800160c <HAL_I2C_MspInit+0x11c>)
 80015ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015f0:	4a06      	ldr	r2, [pc, #24]	@ (800160c <HAL_I2C_MspInit+0x11c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015f6:	bf00      	nop
 80015f8:	37a8      	adds	r7, #168	@ 0xa8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40005400 	.word	0x40005400
 8001604:	40023800 	.word	0x40023800
 8001608:	40020400 	.word	0x40020400
 800160c:	20000250 	.word	0x20000250
 8001610:	40026010 	.word	0x40026010

08001614 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0ac      	sub	sp, #176	@ 0xb0
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800162c:	f107 0318 	add.w	r3, r7, #24
 8001630:	2284      	movs	r2, #132	@ 0x84
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f005 fd51 	bl	80070dc <memset>
  if(huart->Instance==USART1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a32      	ldr	r2, [pc, #200]	@ (8001708 <HAL_UART_MspInit+0xf4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d15c      	bne.n	80016fe <HAL_UART_MspInit+0xea>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001644:	2340      	movs	r3, #64	@ 0x40
 8001646:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001648:	2300      	movs	r3, #0
 800164a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800164c:	f107 0318 	add.w	r3, r7, #24
 8001650:	4618      	mov	r0, r3
 8001652:	f003 fded 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800165c:	f7ff ff1e 	bl	800149c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001660:	4b2a      	ldr	r3, [pc, #168]	@ (800170c <HAL_UART_MspInit+0xf8>)
 8001662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001664:	4a29      	ldr	r2, [pc, #164]	@ (800170c <HAL_UART_MspInit+0xf8>)
 8001666:	f043 0310 	orr.w	r3, r3, #16
 800166a:	6453      	str	r3, [r2, #68]	@ 0x44
 800166c:	4b27      	ldr	r3, [pc, #156]	@ (800170c <HAL_UART_MspInit+0xf8>)
 800166e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001678:	4b24      	ldr	r3, [pc, #144]	@ (800170c <HAL_UART_MspInit+0xf8>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167c:	4a23      	ldr	r2, [pc, #140]	@ (800170c <HAL_UART_MspInit+0xf8>)
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	6313      	str	r3, [r2, #48]	@ 0x30
 8001684:	4b21      	ldr	r3, [pc, #132]	@ (800170c <HAL_UART_MspInit+0xf8>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <HAL_UART_MspInit+0xf8>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001694:	4a1d      	ldr	r2, [pc, #116]	@ (800170c <HAL_UART_MspInit+0xf8>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6313      	str	r3, [r2, #48]	@ 0x30
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_UART_MspInit+0xf8>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c0:	2307      	movs	r3, #7
 80016c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016ca:	4619      	mov	r1, r3
 80016cc:	4810      	ldr	r0, [pc, #64]	@ (8001710 <HAL_UART_MspInit+0xfc>)
 80016ce:	f000 fea5 	bl	800241c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ec:	2307      	movs	r3, #7
 80016ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016f6:	4619      	mov	r1, r3
 80016f8:	4806      	ldr	r0, [pc, #24]	@ (8001714 <HAL_UART_MspInit+0x100>)
 80016fa:	f000 fe8f 	bl	800241c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80016fe:	bf00      	nop
 8001700:	37b0      	adds	r7, #176	@ 0xb0
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40011000 	.word	0x40011000
 800170c:	40023800 	.word	0x40023800
 8001710:	40020400 	.word	0x40020400
 8001714:	40020000 	.word	0x40020000

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <NMI_Handler+0x4>

08001720 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <HardFault_Handler+0x4>

08001728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <MemManage_Handler+0x4>

08001730 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <UsageFault_Handler+0x4>

08001740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176e:	f000 f94b 	bl	8001a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <DMA1_Stream0_IRQHandler+0x10>)
 800177e:	f000 fbc9 	bl	8001f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000250 	.word	0x20000250

0800178c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return 1;
 8001790:	2301      	movs	r3, #1
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <_kill>:

int _kill(int pid, int sig)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017a6:	f005 fceb 	bl	8007180 <__errno>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2216      	movs	r2, #22
 80017ae:	601a      	str	r2, [r3, #0]
  return -1;
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_exit>:

void _exit (int status)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ffe7 	bl	800179c <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ce:	bf00      	nop
 80017d0:	e7fd      	b.n	80017ce <_exit+0x12>

080017d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	e00a      	b.n	80017fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017e4:	f3af 8000 	nop.w
 80017e8:	4601      	mov	r1, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	60ba      	str	r2, [r7, #8]
 80017f0:	b2ca      	uxtb	r2, r1
 80017f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3301      	adds	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	429a      	cmp	r2, r3
 8001800:	dbf0      	blt.n	80017e4 <_read+0x12>
  }

  return len;
 8001802:	687b      	ldr	r3, [r7, #4]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	e009      	b.n	8001832 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	60ba      	str	r2, [r7, #8]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fc6a 	bl	8001100 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3301      	adds	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	429a      	cmp	r2, r3
 8001838:	dbf1      	blt.n	800181e <_write+0x12>
  }
  return len;
 800183a:	687b      	ldr	r3, [r7, #4]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_close>:

int _close(int file)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800186c:	605a      	str	r2, [r3, #4]
  return 0;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_isatty>:

int _isatty(int file)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001884:	2301      	movs	r3, #1
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001892:	b480      	push	{r7}
 8001894:	b085      	sub	sp, #20
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	@ (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d207      	bcs.n	80018ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018dc:	f005 fc50 	bl	8007180 <__errno>
 80018e0:	4603      	mov	r3, r0
 80018e2:	220c      	movs	r2, #12
 80018e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e009      	b.n	8001900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f2:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a05      	ldr	r2, [pc, #20]	@ (8001910 <_sbrk+0x64>)
 80018fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20050000 	.word	0x20050000
 800190c:	00000400 	.word	0x00000400
 8001910:	2000033c 	.word	0x2000033c
 8001914:	20000490 	.word	0x20000490

08001918 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <SystemInit+0x20>)
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001922:	4a05      	ldr	r2, [pc, #20]	@ (8001938 <SystemInit+0x20>)
 8001924:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001928:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800193c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001974 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001940:	f7ff ffea 	bl	8001918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001944:	480c      	ldr	r0, [pc, #48]	@ (8001978 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001946:	490d      	ldr	r1, [pc, #52]	@ (800197c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001948:	4a0d      	ldr	r2, [pc, #52]	@ (8001980 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800195c:	4c0a      	ldr	r4, [pc, #40]	@ (8001988 <LoopFillZerobss+0x22>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800196a:	f005 fc0f 	bl	800718c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196e:	f7ff fbf3 	bl	8001158 <main>
  bx  lr    
 8001972:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001974:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001980:	0800927c 	.word	0x0800927c
  ldr r2, =_sbss
 8001984:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001988:	20000490 	.word	0x20000490

0800198c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC_IRQHandler>

0800198e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001992:	2003      	movs	r0, #3
 8001994:	f000 f94c 	bl	8001c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001998:	200f      	movs	r0, #15
 800199a:	f000 f805 	bl	80019a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800199e:	f7ff fd83 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b0:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <HAL_InitTick+0x54>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_InitTick+0x58>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019be:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f967 	bl	8001c9a <HAL_SYSTICK_Config>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00e      	b.n	80019f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b0f      	cmp	r3, #15
 80019da:	d80a      	bhi.n	80019f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019dc:	2200      	movs	r2, #0
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f000 f92f 	bl	8001c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e8:	4a06      	ldr	r2, [pc, #24]	@ (8001a04 <HAL_InitTick+0x5c>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e000      	b.n	80019f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000004 	.word	0x20000004
 8001a00:	2000000c 	.word	0x2000000c
 8001a04:	20000008 	.word	0x20000008

08001a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_IncTick+0x20>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_IncTick+0x24>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	4a04      	ldr	r2, [pc, #16]	@ (8001a2c <HAL_IncTick+0x24>)
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	2000000c 	.word	0x2000000c
 8001a2c:	20000340 	.word	0x20000340

08001a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;
 8001a34:	4b03      	ldr	r3, [pc, #12]	@ (8001a44 <HAL_GetTick+0x14>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000340 	.word	0x20000340

08001a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff ffee 	bl	8001a30 <HAL_GetTick>
 8001a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d005      	beq.n	8001a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a62:	4b0a      	ldr	r3, [pc, #40]	@ (8001a8c <HAL_Delay+0x44>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a6e:	bf00      	nop
 8001a70:	f7ff ffde 	bl	8001a30 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d8f7      	bhi.n	8001a70 <HAL_Delay+0x28>
  {
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000000c 	.word	0x2000000c

08001a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001abe:	4a04      	ldr	r2, [pc, #16]	@ (8001ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	60d3      	str	r3, [r2, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00
 8001ad4:	05fa0000 	.word	0x05fa0000

08001ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001adc:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	f003 0307 	and.w	r3, r3, #7
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db0b      	blt.n	8001b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4907      	ldr	r1, [pc, #28]	@ (8001b2c <__NVIC_EnableIRQ+0x38>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	2001      	movs	r0, #1
 8001b16:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db0a      	blt.n	8001b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	490c      	ldr	r1, [pc, #48]	@ (8001b7c <__NVIC_SetPriority+0x4c>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b58:	e00a      	b.n	8001b70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4908      	ldr	r1, [pc, #32]	@ (8001b80 <__NVIC_SetPriority+0x50>)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	3b04      	subs	r3, #4
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	761a      	strb	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	@ 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f1c3 0307 	rsb	r3, r3, #7
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	bf28      	it	cs
 8001ba2:	2304      	movcs	r3, #4
 8001ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d902      	bls.n	8001bb4 <NVIC_EncodePriority+0x30>
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3b03      	subs	r3, #3
 8001bb2:	e000      	b.n	8001bb6 <NVIC_EncodePriority+0x32>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	4313      	orrs	r3, r2
         );
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	@ 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bfc:	d301      	bcc.n	8001c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00f      	b.n	8001c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c02:	4a0a      	ldr	r2, [pc, #40]	@ (8001c2c <SysTick_Config+0x40>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c0a:	210f      	movs	r1, #15
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f7ff ff8e 	bl	8001b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c14:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <SysTick_Config+0x40>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1a:	4b04      	ldr	r3, [pc, #16]	@ (8001c2c <SysTick_Config+0x40>)
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	e000e010 	.word	0xe000e010

08001c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff29 	bl	8001a90 <__NVIC_SetPriorityGrouping>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c58:	f7ff ff3e 	bl	8001ad8 <__NVIC_GetPriorityGrouping>
 8001c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	6978      	ldr	r0, [r7, #20]
 8001c64:	f7ff ff8e 	bl	8001b84 <NVIC_EncodePriority>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff5d 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c76:	bf00      	nop
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff31 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ffa2 	bl	8001bec <SysTick_Config>
 8001ca8:	4603      	mov	r3, r0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff feb6 	bl	8001a30 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e099      	b.n	8001e04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf0:	e00f      	b.n	8001d12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cf2:	f7ff fe9d 	bl	8001a30 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d908      	bls.n	8001d12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2220      	movs	r2, #32
 8001d04:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e078      	b.n	8001e04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e8      	bne.n	8001cf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	4b38      	ldr	r3, [pc, #224]	@ (8001e0c <HAL_DMA_Init+0x158>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d107      	bne.n	8001d7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d74:	4313      	orrs	r3, r2
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f023 0307 	bic.w	r3, r3, #7
 8001d92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d117      	bne.n	8001dd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00e      	beq.n	8001dd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 fab3 	bl	8002324 <DMA_CheckFifoParam>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2240      	movs	r2, #64	@ 0x40
 8001dc8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e016      	b.n	8001e04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fa6a 	bl	80022b8 <DMA_CalcBaseAndBitshift>
 8001de4:	4603      	mov	r3, r0
 8001de6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dec:	223f      	movs	r2, #63	@ 0x3f
 8001dee:	409a      	lsls	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	f010803f 	.word	0xf010803f

08001e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_DMA_Start_IT+0x26>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e048      	b.n	8001ec8 <HAL_DMA_Start_IT+0xb8>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d137      	bne.n	8001eba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f9fc 	bl	800225c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e68:	223f      	movs	r2, #63	@ 0x3f
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0216 	orr.w	r2, r2, #22
 8001e7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695a      	ldr	r2, [r3, #20]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e8e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d007      	beq.n	8001ea8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0208 	orr.w	r2, r2, #8
 8001ea6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e005      	b.n	8001ec6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d004      	beq.n	8001eee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2280      	movs	r2, #128	@ 0x80
 8001ee8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00c      	b.n	8001f08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2205      	movs	r2, #5
 8001ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0201 	bic.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001f20:	4b8e      	ldr	r3, [pc, #568]	@ (800215c <HAL_DMA_IRQHandler+0x248>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a8e      	ldr	r2, [pc, #568]	@ (8002160 <HAL_DMA_IRQHandler+0x24c>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	0a9b      	lsrs	r3, r3, #10
 8001f2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3e:	2208      	movs	r2, #8
 8001f40:	409a      	lsls	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01a      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0204 	bic.w	r2, r2, #4
 8001f66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f78:	f043 0201 	orr.w	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	2201      	movs	r2, #1
 8001f86:	409a      	lsls	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d012      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fae:	f043 0202 	orr.w	r2, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fba:	2204      	movs	r2, #4
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d012      	beq.n	8001fec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00b      	beq.n	8001fec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd8:	2204      	movs	r2, #4
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe4:	f043 0204 	orr.w	r2, r3, #4
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d043      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d03c      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200e:	2210      	movs	r2, #16
 8002010:	409a      	lsls	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d018      	beq.n	8002056 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d108      	bne.n	8002044 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	2b00      	cmp	r3, #0
 8002038:	d024      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	4798      	blx	r3
 8002042:	e01f      	b.n	8002084 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01b      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
 8002054:	e016      	b.n	8002084 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0208 	bic.w	r2, r2, #8
 8002072:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002088:	2220      	movs	r2, #32
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 808f 	beq.w	80021b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 8087 	beq.w	80021b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020aa:	2220      	movs	r2, #32
 80020ac:	409a      	lsls	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d136      	bne.n	800212c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0216 	bic.w	r2, r2, #22
 80020cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d103      	bne.n	80020ee <HAL_DMA_IRQHandler+0x1da>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0208 	bic.w	r2, r2, #8
 80020fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002102:	223f      	movs	r2, #63	@ 0x3f
 8002104:	409a      	lsls	r2, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800211e:	2b00      	cmp	r3, #0
 8002120:	d07e      	beq.n	8002220 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
        }
        return;
 800212a:	e079      	b.n	8002220 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d01d      	beq.n	8002176 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10d      	bne.n	8002164 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214c:	2b00      	cmp	r3, #0
 800214e:	d031      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
 8002158:	e02c      	b.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
 800215a:	bf00      	nop
 800215c:	20000004 	.word	0x20000004
 8002160:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002168:	2b00      	cmp	r3, #0
 800216a:	d023      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4798      	blx	r3
 8002174:	e01e      	b.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10f      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0210 	bic.w	r2, r2, #16
 8002192:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d032      	beq.n	8002222 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d022      	beq.n	800220e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2205      	movs	r2, #5
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	3301      	adds	r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d307      	bcc.n	80021fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f2      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x2cc>
 80021fa:	e000      	b.n	80021fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4798      	blx	r3
 800221e:	e000      	b.n	8002222 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002220:	bf00      	nop
    }
  }
}
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002236:	b2db      	uxtb	r3, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002278:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b40      	cmp	r3, #64	@ 0x40
 8002288:	d108      	bne.n	800229c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800229a:	e007      	b.n	80022ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	60da      	str	r2, [r3, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3b10      	subs	r3, #16
 80022c8:	4a13      	ldr	r2, [pc, #76]	@ (8002318 <DMA_CalcBaseAndBitshift+0x60>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022d2:	4a12      	ldr	r2, [pc, #72]	@ (800231c <DMA_CalcBaseAndBitshift+0x64>)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d908      	bls.n	80022f8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <DMA_CalcBaseAndBitshift+0x68>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	1d1a      	adds	r2, r3, #4
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80022f6:	e006      	b.n	8002306 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <DMA_CalcBaseAndBitshift+0x68>)
 8002300:	4013      	ands	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	aaaaaaab 	.word	0xaaaaaaab
 800231c:	08008eec 	.word	0x08008eec
 8002320:	fffffc00 	.word	0xfffffc00

08002324 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002334:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11f      	bne.n	800237e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d856      	bhi.n	80023f2 <DMA_CheckFifoParam+0xce>
 8002344:	a201      	add	r2, pc, #4	@ (adr r2, 800234c <DMA_CheckFifoParam+0x28>)
 8002346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234a:	bf00      	nop
 800234c:	0800235d 	.word	0x0800235d
 8002350:	0800236f 	.word	0x0800236f
 8002354:	0800235d 	.word	0x0800235d
 8002358:	080023f3 	.word	0x080023f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002360:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d046      	beq.n	80023f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800236c:	e043      	b.n	80023f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002372:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002376:	d140      	bne.n	80023fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800237c:	e03d      	b.n	80023fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002386:	d121      	bne.n	80023cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b03      	cmp	r3, #3
 800238c:	d837      	bhi.n	80023fe <DMA_CheckFifoParam+0xda>
 800238e:	a201      	add	r2, pc, #4	@ (adr r2, 8002394 <DMA_CheckFifoParam+0x70>)
 8002390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002394:	080023a5 	.word	0x080023a5
 8002398:	080023ab 	.word	0x080023ab
 800239c:	080023a5 	.word	0x080023a5
 80023a0:	080023bd 	.word	0x080023bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
      break;
 80023a8:	e030      	b.n	800240c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d025      	beq.n	8002402 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ba:	e022      	b.n	8002402 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023c4:	d11f      	bne.n	8002406 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023ca:	e01c      	b.n	8002406 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d903      	bls.n	80023da <DMA_CheckFifoParam+0xb6>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d003      	beq.n	80023e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023d8:	e018      	b.n	800240c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      break;
 80023de:	e015      	b.n	800240c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00e      	beq.n	800240a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      break;
 80023f0:	e00b      	b.n	800240a <DMA_CheckFifoParam+0xe6>
      break;
 80023f2:	bf00      	nop
 80023f4:	e00a      	b.n	800240c <DMA_CheckFifoParam+0xe8>
      break;
 80023f6:	bf00      	nop
 80023f8:	e008      	b.n	800240c <DMA_CheckFifoParam+0xe8>
      break;
 80023fa:	bf00      	nop
 80023fc:	e006      	b.n	800240c <DMA_CheckFifoParam+0xe8>
      break;
 80023fe:	bf00      	nop
 8002400:	e004      	b.n	800240c <DMA_CheckFifoParam+0xe8>
      break;
 8002402:	bf00      	nop
 8002404:	e002      	b.n	800240c <DMA_CheckFifoParam+0xe8>
      break;   
 8002406:	bf00      	nop
 8002408:	e000      	b.n	800240c <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
    }
  } 
  
  return status; 
 800240c:	7bfb      	ldrb	r3, [r7, #15]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	@ 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	e175      	b.n	8002728 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800243c:	2201      	movs	r2, #1
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	429a      	cmp	r2, r3
 8002456:	f040 8164 	bne.w	8002722 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d005      	beq.n	8002472 <HAL_GPIO_Init+0x56>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d130      	bne.n	80024d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2203      	movs	r2, #3
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a8:	2201      	movs	r2, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 0201 	and.w	r2, r3, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d017      	beq.n	8002510 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2203      	movs	r2, #3
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d123      	bne.n	8002564 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	08da      	lsrs	r2, r3, #3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3208      	adds	r2, #8
 8002524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	220f      	movs	r2, #15
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	08da      	lsrs	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3208      	adds	r2, #8
 800255e:	69b9      	ldr	r1, [r7, #24]
 8002560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0203 	and.w	r2, r3, #3
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80be 	beq.w	8002722 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a6:	4b66      	ldr	r3, [pc, #408]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	4a65      	ldr	r2, [pc, #404]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b2:	4b63      	ldr	r3, [pc, #396]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025be:	4a61      	ldr	r2, [pc, #388]	@ (8002744 <HAL_GPIO_Init+0x328>)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3302      	adds	r3, #2
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a58      	ldr	r2, [pc, #352]	@ (8002748 <HAL_GPIO_Init+0x32c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d037      	beq.n	800265a <HAL_GPIO_Init+0x23e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a57      	ldr	r2, [pc, #348]	@ (800274c <HAL_GPIO_Init+0x330>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d031      	beq.n	8002656 <HAL_GPIO_Init+0x23a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a56      	ldr	r2, [pc, #344]	@ (8002750 <HAL_GPIO_Init+0x334>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d02b      	beq.n	8002652 <HAL_GPIO_Init+0x236>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a55      	ldr	r2, [pc, #340]	@ (8002754 <HAL_GPIO_Init+0x338>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d025      	beq.n	800264e <HAL_GPIO_Init+0x232>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a54      	ldr	r2, [pc, #336]	@ (8002758 <HAL_GPIO_Init+0x33c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d01f      	beq.n	800264a <HAL_GPIO_Init+0x22e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a53      	ldr	r2, [pc, #332]	@ (800275c <HAL_GPIO_Init+0x340>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d019      	beq.n	8002646 <HAL_GPIO_Init+0x22a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a52      	ldr	r2, [pc, #328]	@ (8002760 <HAL_GPIO_Init+0x344>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_GPIO_Init+0x226>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a51      	ldr	r2, [pc, #324]	@ (8002764 <HAL_GPIO_Init+0x348>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00d      	beq.n	800263e <HAL_GPIO_Init+0x222>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a50      	ldr	r2, [pc, #320]	@ (8002768 <HAL_GPIO_Init+0x34c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d007      	beq.n	800263a <HAL_GPIO_Init+0x21e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4f      	ldr	r2, [pc, #316]	@ (800276c <HAL_GPIO_Init+0x350>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d101      	bne.n	8002636 <HAL_GPIO_Init+0x21a>
 8002632:	2309      	movs	r3, #9
 8002634:	e012      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002636:	230a      	movs	r3, #10
 8002638:	e010      	b.n	800265c <HAL_GPIO_Init+0x240>
 800263a:	2308      	movs	r3, #8
 800263c:	e00e      	b.n	800265c <HAL_GPIO_Init+0x240>
 800263e:	2307      	movs	r3, #7
 8002640:	e00c      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002642:	2306      	movs	r3, #6
 8002644:	e00a      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002646:	2305      	movs	r3, #5
 8002648:	e008      	b.n	800265c <HAL_GPIO_Init+0x240>
 800264a:	2304      	movs	r3, #4
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x240>
 800264e:	2303      	movs	r3, #3
 8002650:	e004      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002652:	2302      	movs	r3, #2
 8002654:	e002      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x240>
 800265a:	2300      	movs	r3, #0
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f002 0203 	and.w	r2, r2, #3
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	4093      	lsls	r3, r2
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800266c:	4935      	ldr	r1, [pc, #212]	@ (8002744 <HAL_GPIO_Init+0x328>)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3302      	adds	r3, #2
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267a:	4b3d      	ldr	r3, [pc, #244]	@ (8002770 <HAL_GPIO_Init+0x354>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800269e:	4a34      	ldr	r2, [pc, #208]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a4:	4b32      	ldr	r3, [pc, #200]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c8:	4a29      	ldr	r2, [pc, #164]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ce:	4b28      	ldr	r3, [pc, #160]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800271c:	4a14      	ldr	r2, [pc, #80]	@ (8002770 <HAL_GPIO_Init+0x354>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3301      	adds	r3, #1
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b0f      	cmp	r3, #15
 800272c:	f67f ae86 	bls.w	800243c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	3724      	adds	r7, #36	@ 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	40013800 	.word	0x40013800
 8002748:	40020000 	.word	0x40020000
 800274c:	40020400 	.word	0x40020400
 8002750:	40020800 	.word	0x40020800
 8002754:	40020c00 	.word	0x40020c00
 8002758:	40021000 	.word	0x40021000
 800275c:	40021400 	.word	0x40021400
 8002760:	40021800 	.word	0x40021800
 8002764:	40021c00 	.word	0x40021c00
 8002768:	40022000 	.word	0x40022000
 800276c:	40022400 	.word	0x40022400
 8002770:	40013c00 	.word	0x40013c00

08002774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e08b      	b.n	800289e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe fea8 	bl	80014f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2224      	movs	r2, #36	@ 0x24
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0201 	bic.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d107      	bne.n	80027ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	e006      	b.n	80027fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80027fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d108      	bne.n	8002816 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	e007      	b.n	8002826 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002824:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6859      	ldr	r1, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b1d      	ldr	r3, [pc, #116]	@ (80028a8 <HAL_I2C_Init+0x134>)
 8002832:	430b      	orrs	r3, r1
 8002834:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002844:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69d9      	ldr	r1, [r3, #28]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1a      	ldr	r2, [r3, #32]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	02008000 	.word	0x02008000

080028ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	4608      	mov	r0, r1
 80028b6:	4611      	mov	r1, r2
 80028b8:	461a      	mov	r2, r3
 80028ba:	4603      	mov	r3, r0
 80028bc:	817b      	strh	r3, [r7, #10]
 80028be:	460b      	mov	r3, r1
 80028c0:	813b      	strh	r3, [r7, #8]
 80028c2:	4613      	mov	r3, r2
 80028c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	f040 80f9 	bne.w	8002ac6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_I2C_Mem_Write+0x34>
 80028da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d105      	bne.n	80028ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0ed      	b.n	8002ac8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_I2C_Mem_Write+0x4e>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e0e6      	b.n	8002ac8 <HAL_I2C_Mem_Write+0x21c>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002902:	f7ff f895 	bl	8001a30 <HAL_GetTick>
 8002906:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2319      	movs	r3, #25
 800290e:	2201      	movs	r2, #1
 8002910:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f001 fc41 	bl	800419c <I2C_WaitOnFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0d1      	b.n	8002ac8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2221      	movs	r2, #33	@ 0x21
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2240      	movs	r2, #64	@ 0x40
 8002930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a3a      	ldr	r2, [r7, #32]
 800293e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002944:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800294c:	88f8      	ldrh	r0, [r7, #6]
 800294e:	893a      	ldrh	r2, [r7, #8]
 8002950:	8979      	ldrh	r1, [r7, #10]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	4603      	mov	r3, r0
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fe33 	bl	80035c8 <I2C_RequestMemoryWrite>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0a9      	b.n	8002ac8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	2bff      	cmp	r3, #255	@ 0xff
 800297c:	d90e      	bls.n	800299c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	22ff      	movs	r2, #255	@ 0xff
 8002982:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002988:	b2da      	uxtb	r2, r3
 800298a:	8979      	ldrh	r1, [r7, #10]
 800298c:	2300      	movs	r3, #0
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f001 fdc5 	bl	8004524 <I2C_TransferConfig>
 800299a:	e00f      	b.n	80029bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	8979      	ldrh	r1, [r7, #10]
 80029ae:	2300      	movs	r3, #0
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f001 fdb4 	bl	8004524 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f001 fc44 	bl	800424e <I2C_WaitOnTXISFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e07b      	b.n	8002ac8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	781a      	ldrb	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d034      	beq.n	8002a74 <HAL_I2C_Mem_Write+0x1c8>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d130      	bne.n	8002a74 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2180      	movs	r1, #128	@ 0x80
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f001 fbbd 	bl	800419c <I2C_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e04d      	b.n	8002ac8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2bff      	cmp	r3, #255	@ 0xff
 8002a34:	d90e      	bls.n	8002a54 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	22ff      	movs	r2, #255	@ 0xff
 8002a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	8979      	ldrh	r1, [r7, #10]
 8002a44:	2300      	movs	r3, #0
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f001 fd69 	bl	8004524 <I2C_TransferConfig>
 8002a52:	e00f      	b.n	8002a74 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	8979      	ldrh	r1, [r7, #10]
 8002a66:	2300      	movs	r3, #0
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f001 fd58 	bl	8004524 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d19e      	bne.n	80029bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f001 fc2a 	bl	80042dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e01a      	b.n	8002ac8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2220      	movs	r2, #32
 8002a98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad0 <HAL_I2C_Mem_Write+0x224>)
 8002aa6:	400b      	ands	r3, r1
 8002aa8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
  }
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	fe00e800 	.word	0xfe00e800

08002ad4 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	4608      	mov	r0, r1
 8002ade:	4611      	mov	r1, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	817b      	strh	r3, [r7, #10]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	813b      	strh	r3, [r7, #8]
 8002aea:	4613      	mov	r3, r2
 8002aec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	f040 80c2 	bne.w	8002c80 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_I2C_Mem_Read_DMA+0x34>
 8002b02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b0e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0b6      	b.n	8002c82 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b22:	d101      	bne.n	8002b28 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8002b24:	2302      	movs	r3, #2
 8002b26:	e0ac      	b.n	8002c82 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_I2C_Mem_Read_DMA+0x62>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e0a5      	b.n	8002c82 <HAL_I2C_Mem_Read_DMA+0x1ae>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2222      	movs	r2, #34	@ 0x22
 8002b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2240      	movs	r2, #64	@ 0x40
 8002b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a3a      	ldr	r2, [r7, #32]
 8002b58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a4a      	ldr	r2, [pc, #296]	@ (8002c8c <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8002b64:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4a49      	ldr	r2, [pc, #292]	@ (8002c90 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8002b6a:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8002b6c:	897a      	ldrh	r2, [r7, #10]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2bff      	cmp	r3, #255	@ 0xff
 8002b7a:	d903      	bls.n	8002b84 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	22ff      	movs	r2, #255	@ 0xff
 8002b80:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002b82:	e004      	b.n	8002b8e <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d109      	bne.n	8002ba8 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b94:	893b      	ldrh	r3, [r7, #8]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba4:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ba6:	e00b      	b.n	8002bc0 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ba8:	893b      	ldrh	r3, [r7, #8]
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002bb6:	893b      	ldrh	r3, [r7, #8]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d020      	beq.n	8002c0a <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bcc:	4a31      	ldr	r2, [pc, #196]	@ (8002c94 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8002bce:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd4:	4a30      	ldr	r2, [pc, #192]	@ (8002c98 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8002bd6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bdc:	2200      	movs	r2, #0
 8002bde:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be4:	2200      	movs	r2, #0
 8002be6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3324      	adds	r3, #36	@ 0x24
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8002bfa:	f7ff f909 	bl	8001e10 <HAL_DMA_Start_IT>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d127      	bne.n	8002c58 <HAL_I2C_Mem_Read_DMA+0x184>
 8002c08:	e013      	b.n	8002c32 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e027      	b.n	8002c82 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	8979      	ldrh	r1, [r7, #10]
 8002c38:	4b18      	ldr	r3, [pc, #96]	@ (8002c9c <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f001 fc70 	bl	8004524 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f001 fc9a 	bl	8004588 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e014      	b.n	8002c82 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6c:	f043 0210 	orr.w	r2, r3, #16
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
  }
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	ffff0000 	.word	0xffff0000
 8002c90:	08003169 	.word	0x08003169
 8002c94:	0800403b 	.word	0x0800403b
 8002c98:	080040ed 	.word	0x080040ed
 8002c9c:	80002000 	.word	0x80002000

08002ca0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	70fb      	strb	r3, [r7, #3]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <I2C_Slave_ISR_IT+0x24>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e0ed      	b.n	8002f5c <I2C_Slave_ISR_IT+0x200>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d004      	beq.n	8002daa <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002da0:	6939      	ldr	r1, [r7, #16]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fe4e 	bl	8003a44 <I2C_ITSlaveCplt>
 8002da8:	e0d3      	b.n	8002f52 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d04d      	beq.n	8002e52 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d047      	beq.n	8002e52 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d128      	bne.n	8002e1e <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b28      	cmp	r3, #40	@ 0x28
 8002dd6:	d108      	bne.n	8002dea <I2C_Slave_ISR_IT+0x8e>
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002dde:	d104      	bne.n	8002dea <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002de0:	6939      	ldr	r1, [r7, #16]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 ff98 	bl	8003d18 <I2C_ITListenCplt>
 8002de8:	e032      	b.n	8002e50 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b29      	cmp	r3, #41	@ 0x29
 8002df4:	d10e      	bne.n	8002e14 <I2C_Slave_ISR_IT+0xb8>
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002dfc:	d00a      	beq.n	8002e14 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2210      	movs	r2, #16
 8002e04:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f001 f8f3 	bl	8003ff2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fcf0 	bl	80037f2 <I2C_ITSlaveSeqCplt>
 8002e12:	e01d      	b.n	8002e50 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2210      	movs	r2, #16
 8002e1a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002e1c:	e096      	b.n	8002f4c <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2210      	movs	r2, #16
 8002e24:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2a:	f043 0204 	orr.w	r2, r3, #4
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d004      	beq.n	8002e42 <I2C_Slave_ISR_IT+0xe6>
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e3e:	f040 8085 	bne.w	8002f4c <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	4619      	mov	r1, r3
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 ffbb 	bl	8003dc4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002e4e:	e07d      	b.n	8002f4c <I2C_Slave_ISR_IT+0x1f0>
 8002e50:	e07c      	b.n	8002f4c <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d030      	beq.n	8002ec0 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d02a      	beq.n	8002ec0 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d018      	beq.n	8002ea6 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d14f      	bne.n	8002f50 <I2C_Slave_ISR_IT+0x1f4>
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002eb6:	d04b      	beq.n	8002f50 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fc9a 	bl	80037f2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002ebe:	e047      	b.n	8002f50 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	08db      	lsrs	r3, r3, #3
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	08db      	lsrs	r3, r3, #3
 8002ed0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d004      	beq.n	8002ee2 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002ed8:	6939      	ldr	r1, [r7, #16]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 fbc8 	bl	8003670 <I2C_ITAddrCplt>
 8002ee0:	e037      	b.n	8002f52 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	085b      	lsrs	r3, r3, #1
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d031      	beq.n	8002f52 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	085b      	lsrs	r3, r3, #1
 8002ef2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d02b      	beq.n	8002f52 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d018      	beq.n	8002f36 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002f34:	e00d      	b.n	8002f52 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f3c:	d002      	beq.n	8002f44 <I2C_Slave_ISR_IT+0x1e8>
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d106      	bne.n	8002f52 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fc54 	bl	80037f2 <I2C_ITSlaveSeqCplt>
 8002f4a:	e002      	b.n	8002f52 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8002f4c:	bf00      	nop
 8002f4e:	e000      	b.n	8002f52 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8002f50:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <I2C_Master_ISR_DMA+0x1a>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e0f0      	b.n	8003160 <I2C_Master_ISR_DMA+0x1fc>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d017      	beq.n	8002fc2 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d011      	beq.n	8002fc2 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2210      	movs	r2, #16
 8002fa4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002faa:	f043 0204 	orr.w	r2, r3, #4
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002fb2:	2120      	movs	r1, #32
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f001 fae7 	bl	8004588 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f001 f819 	bl	8003ff2 <I2C_Flush_TXDR>
 8002fc0:	e0c9      	b.n	8003156 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	09db      	lsrs	r3, r3, #7
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8081 	beq.w	80030d2 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	099b      	lsrs	r3, r3, #6
 8002fd4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d07a      	beq.n	80030d2 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fea:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d05c      	beq.n	80030b0 <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003002:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003008:	b29b      	uxth	r3, r3
 800300a:	2bff      	cmp	r3, #255	@ 0xff
 800300c:	d914      	bls.n	8003038 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	0c1b      	lsrs	r3, r3, #16
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d103      	bne.n	800302a <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003028:	e002      	b.n	8003030 <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	22ff      	movs	r2, #255	@ 0xff
 800302e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8003030:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	e010      	b.n	800305a <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003046:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800304a:	d003      	beq.n	8003054 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	e002      	b.n	800305a <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003054:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003058:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305e:	b2da      	uxtb	r2, r3
 8003060:	8a79      	ldrh	r1, [r7, #18]
 8003062:	2300      	movs	r3, #0
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f001 fa5b 	bl	8004524 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b22      	cmp	r3, #34	@ 0x22
 800308a:	d108      	bne.n	800309e <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800309a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800309c:	e05b      	b.n	8003156 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030ac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80030ae:	e052      	b.n	8003156 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030be:	d003      	beq.n	80030c8 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fb59 	bl	8003778 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80030c6:	e046      	b.n	8003156 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80030c8:	2140      	movs	r1, #64	@ 0x40
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fe7a 	bl	8003dc4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80030d0:	e041      	b.n	8003156 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d029      	beq.n	8003132 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d023      	beq.n	8003132 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d119      	bne.n	8003128 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003102:	d027      	beq.n	8003154 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003108:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800310c:	d108      	bne.n	8003120 <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800311c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800311e:	e019      	b.n	8003154 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fb29 	bl	8003778 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003126:	e015      	b.n	8003154 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003128:	2140      	movs	r1, #64	@ 0x40
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fe4a 	bl	8003dc4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003130:	e010      	b.n	8003154 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	095b      	lsrs	r3, r3, #5
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fbaf 	bl	80038b0 <I2C_ITMasterCplt>
 8003152:	e000      	b.n	8003156 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8003154:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003174:	4b94      	ldr	r3, [pc, #592]	@ (80033c8 <I2C_Mem_ISR_DMA+0x260>)
 8003176:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <I2C_Mem_ISR_DMA+0x1e>
 8003182:	2302      	movs	r3, #2
 8003184:	e139      	b.n	80033fa <I2C_Mem_ISR_DMA+0x292>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d017      	beq.n	80031ca <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d011      	beq.n	80031ca <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2210      	movs	r2, #16
 80031ac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b2:	f043 0204 	orr.w	r2, r3, #4
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80031ba:	2120      	movs	r1, #32
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f001 f9e3 	bl	8004588 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 ff15 	bl	8003ff2 <I2C_Flush_TXDR>
 80031c8:	e112      	b.n	80033f0 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00f      	beq.n	80031f6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	085b      	lsrs	r3, r3, #1
 80031da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f04f 32ff 	mov.w	r2, #4294967295
 80031f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80031f4:	e0fc      	b.n	80033f0 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	09db      	lsrs	r3, r3, #7
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d06e      	beq.n	80032e0 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	099b      	lsrs	r3, r3, #6
 8003206:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800320a:	2b00      	cmp	r3, #0
 800320c:	d068      	beq.n	80032e0 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800320e:	2101      	movs	r1, #1
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f001 fa3d 	bl	8004690 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003216:	2110      	movs	r1, #16
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f001 f9b5 	bl	8004588 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d056      	beq.n	80032d6 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322c:	b29b      	uxth	r3, r3
 800322e:	2bff      	cmp	r3, #255	@ 0xff
 8003230:	d91e      	bls.n	8003270 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	0c1b      	lsrs	r3, r3, #16
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d103      	bne.n	800324e <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2201      	movs	r2, #1
 800324a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800324c:	e002      	b.n	8003254 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	22ff      	movs	r2, #255	@ 0xff
 8003252:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003258:	b299      	uxth	r1, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325e:	b2da      	uxtb	r2, r3
 8003260:	2300      	movs	r3, #0
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f001 f95b 	bl	8004524 <I2C_TransferConfig>
 800326e:	e011      	b.n	8003294 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327e:	b299      	uxth	r1, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003284:	b2da      	uxtb	r2, r3
 8003286:	2300      	movs	r3, #0
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f001 f948 	bl	8004524 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b22      	cmp	r3, #34	@ 0x22
 80032b0:	d108      	bne.n	80032c4 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032c0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80032c2:	e095      	b.n	80033f0 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032d2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80032d4:	e08c      	b.n	80033f0 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80032d6:	2140      	movs	r1, #64	@ 0x40
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 fd73 	bl	8003dc4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80032de:	e087      	b.n	80033f0 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	099b      	lsrs	r3, r3, #6
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d071      	beq.n	80033d0 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d06b      	beq.n	80033d0 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032f8:	2101      	movs	r1, #1
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f001 f9c8 	bl	8004690 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003300:	2110      	movs	r1, #16
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f001 f940 	bl	8004588 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b22      	cmp	r3, #34	@ 0x22
 8003312:	d101      	bne.n	8003318 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8003314:	4b2d      	ldr	r3, [pc, #180]	@ (80033cc <I2C_Mem_ISR_DMA+0x264>)
 8003316:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	2bff      	cmp	r3, #255	@ 0xff
 8003320:	d91e      	bls.n	8003360 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d103      	bne.n	800333e <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800333c:	e002      	b.n	8003344 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	22ff      	movs	r2, #255	@ 0xff
 8003342:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003348:	b299      	uxth	r1, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334e:	b2da      	uxtb	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f001 f8e3 	bl	8004524 <I2C_TransferConfig>
 800335e:	e011      	b.n	8003384 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336e:	b299      	uxth	r1, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003374:	b2da      	uxtb	r2, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f001 f8d0 	bl	8004524 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b22      	cmp	r3, #34	@ 0x22
 80033a0:	d108      	bne.n	80033b4 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033b0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033b2:	e01d      	b.n	80033f0 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033c2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033c4:	e014      	b.n	80033f0 <I2C_Mem_ISR_DMA+0x288>
 80033c6:	bf00      	nop
 80033c8:	80002000 	.word	0x80002000
 80033cc:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d009      	beq.n	80033f0 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 fa60 	bl	80038b0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop

08003404 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003414:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <I2C_Slave_ISR_DMA+0x24>
 8003424:	2302      	movs	r3, #2
 8003426:	e0ca      	b.n	80035be <I2C_Slave_ISR_DMA+0x1ba>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003444:	2b00      	cmp	r3, #0
 8003446:	d004      	beq.n	8003452 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fafa 	bl	8003a44 <I2C_ITSlaveCplt>
 8003450:	e0b0      	b.n	80035b4 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 809a 	beq.w	8003594 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 8093 	beq.w	8003594 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	0b9b      	lsrs	r3, r3, #14
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	0bdb      	lsrs	r3, r3, #15
 800347e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003482:	2b00      	cmp	r3, #0
 8003484:	d07f      	beq.n	8003586 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00d      	beq.n	80034aa <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	0bdb      	lsrs	r3, r3, #15
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d007      	beq.n	80034aa <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80034a6:	2301      	movs	r3, #1
 80034a8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00d      	beq.n	80034ce <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	0b9b      	lsrs	r3, r3, #14
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d007      	beq.n	80034ce <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80034ca:	2301      	movs	r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d128      	bne.n	8003526 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b28      	cmp	r3, #40	@ 0x28
 80034de:	d108      	bne.n	80034f2 <I2C_Slave_ISR_DMA+0xee>
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034e6:	d104      	bne.n	80034f2 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fc14 	bl	8003d18 <I2C_ITListenCplt>
 80034f0:	e048      	b.n	8003584 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b29      	cmp	r3, #41	@ 0x29
 80034fc:	d10e      	bne.n	800351c <I2C_Slave_ISR_DMA+0x118>
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003504:	d00a      	beq.n	800351c <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2210      	movs	r2, #16
 800350c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 fd6f 	bl	8003ff2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f96c 	bl	80037f2 <I2C_ITSlaveSeqCplt>
 800351a:	e033      	b.n	8003584 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2210      	movs	r2, #16
 8003522:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003524:	e034      	b.n	8003590 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2210      	movs	r2, #16
 800352c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	f043 0204 	orr.w	r2, r3, #4
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003540:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <I2C_Slave_ISR_DMA+0x14c>
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800354e:	d11f      	bne.n	8003590 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003550:	7dfb      	ldrb	r3, [r7, #23]
 8003552:	2b21      	cmp	r3, #33	@ 0x21
 8003554:	d002      	beq.n	800355c <I2C_Slave_ISR_DMA+0x158>
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	2b29      	cmp	r3, #41	@ 0x29
 800355a:	d103      	bne.n	8003564 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2221      	movs	r2, #33	@ 0x21
 8003560:	631a      	str	r2, [r3, #48]	@ 0x30
 8003562:	e008      	b.n	8003576 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	2b22      	cmp	r3, #34	@ 0x22
 8003568:	d002      	beq.n	8003570 <I2C_Slave_ISR_DMA+0x16c>
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	2b2a      	cmp	r3, #42	@ 0x2a
 800356e:	d102      	bne.n	8003576 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2222      	movs	r2, #34	@ 0x22
 8003574:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	4619      	mov	r1, r3
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 fc21 	bl	8003dc4 <I2C_ITError>
      if (treatdmanack == 1U)
 8003582:	e005      	b.n	8003590 <I2C_Slave_ISR_DMA+0x18c>
 8003584:	e004      	b.n	8003590 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2210      	movs	r2, #16
 800358c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800358e:	e011      	b.n	80035b4 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8003590:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003592:	e00f      	b.n	80035b4 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	08db      	lsrs	r3, r3, #3
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d009      	beq.n	80035b4 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	08db      	lsrs	r3, r3, #3
 80035a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f85e 	bl	8003670 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	4608      	mov	r0, r1
 80035d2:	4611      	mov	r1, r2
 80035d4:	461a      	mov	r2, r3
 80035d6:	4603      	mov	r3, r0
 80035d8:	817b      	strh	r3, [r7, #10]
 80035da:	460b      	mov	r3, r1
 80035dc:	813b      	strh	r3, [r7, #8]
 80035de:	4613      	mov	r3, r2
 80035e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	8979      	ldrh	r1, [r7, #10]
 80035e8:	4b20      	ldr	r3, [pc, #128]	@ (800366c <I2C_RequestMemoryWrite+0xa4>)
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 ff97 	bl	8004524 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	69b9      	ldr	r1, [r7, #24]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fe27 	bl	800424e <I2C_WaitOnTXISFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e02c      	b.n	8003664 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d105      	bne.n	800361c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003610:	893b      	ldrh	r3, [r7, #8]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	629a      	str	r2, [r3, #40]	@ 0x28
 800361a:	e015      	b.n	8003648 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800361c:	893b      	ldrh	r3, [r7, #8]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	b29b      	uxth	r3, r3
 8003622:	b2da      	uxtb	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	69b9      	ldr	r1, [r7, #24]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fe0d 	bl	800424e <I2C_WaitOnTXISFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e012      	b.n	8003664 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800363e:	893b      	ldrh	r3, [r7, #8]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2200      	movs	r2, #0
 8003650:	2180      	movs	r1, #128	@ 0x80
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fda2 	bl	800419c <I2C_WaitOnFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	80002000 	.word	0x80002000

08003670 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003686:	2b28      	cmp	r3, #40	@ 0x28
 8003688:	d16a      	bne.n	8003760 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	0c1b      	lsrs	r3, r3, #16
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80036a8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80036c4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d138      	bne.n	8003740 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80036ce:	897b      	ldrh	r3, [r7, #10]
 80036d0:	09db      	lsrs	r3, r3, #7
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	89bb      	ldrh	r3, [r7, #12]
 80036d6:	4053      	eors	r3, r2
 80036d8:	b29b      	uxth	r3, r3
 80036da:	f003 0306 	and.w	r3, r3, #6
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11c      	bne.n	800371c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80036e2:	897b      	ldrh	r3, [r7, #10]
 80036e4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d13b      	bne.n	8003770 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2208      	movs	r2, #8
 8003704:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800370e:	89ba      	ldrh	r2, [r7, #12]
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	4619      	mov	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff faeb 	bl	8002cf0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800371a:	e029      	b.n	8003770 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800371c:	893b      	ldrh	r3, [r7, #8]
 800371e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003720:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 ffb3 	bl	8004690 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003732:	89ba      	ldrh	r2, [r7, #12]
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	4619      	mov	r1, r3
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff fad9 	bl	8002cf0 <HAL_I2C_AddrCallback>
}
 800373e:	e017      	b.n	8003770 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003740:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 ffa3 	bl	8004690 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003752:	89ba      	ldrh	r2, [r7, #12]
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	4619      	mov	r1, r3
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff fac9 	bl	8002cf0 <HAL_I2C_AddrCallback>
}
 800375e:	e007      	b.n	8003770 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2208      	movs	r2, #8
 8003766:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b21      	cmp	r3, #33	@ 0x21
 8003792:	d115      	bne.n	80037c0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2211      	movs	r2, #17
 80037a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80037a8:	2101      	movs	r1, #1
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 ff70 	bl	8004690 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff fa71 	bl	8002ca0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037be:	e014      	b.n	80037ea <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2212      	movs	r2, #18
 80037cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80037d4:	2102      	movs	r1, #2
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 ff5a 	bl	8004690 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fa65 	bl	8002cb4 <HAL_I2C_MasterRxCpltCallback>
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	0b9b      	lsrs	r3, r3, #14
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e00d      	b.n	8003844 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	0bdb      	lsrs	r3, r3, #15
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d007      	beq.n	8003844 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003842:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b29      	cmp	r3, #41	@ 0x29
 800384e:	d112      	bne.n	8003876 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2228      	movs	r2, #40	@ 0x28
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2221      	movs	r2, #33	@ 0x21
 800385c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800385e:	2101      	movs	r1, #1
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 ff15 	bl	8004690 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff fa2a 	bl	8002cc8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003874:	e017      	b.n	80038a6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003880:	d111      	bne.n	80038a6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2228      	movs	r2, #40	@ 0x28
 8003886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2222      	movs	r2, #34	@ 0x22
 800388e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003890:	2102      	movs	r1, #2
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fefc 	bl	8004690 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff fa1b 	bl	8002cdc <HAL_I2C_SlaveRxCpltCallback>
}
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2220      	movs	r2, #32
 80038c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b21      	cmp	r3, #33	@ 0x21
 80038d0:	d107      	bne.n	80038e2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80038d2:	2101      	movs	r1, #1
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fedb 	bl	8004690 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2211      	movs	r2, #17
 80038de:	631a      	str	r2, [r3, #48]	@ 0x30
 80038e0:	e00c      	b.n	80038fc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b22      	cmp	r3, #34	@ 0x22
 80038ec:	d106      	bne.n	80038fc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80038ee:	2102      	movs	r1, #2
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fecd 	bl	8004690 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2212      	movs	r2, #18
 80038fa:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6859      	ldr	r1, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4b4d      	ldr	r3, [pc, #308]	@ (8003a3c <I2C_ITMasterCplt+0x18c>)
 8003908:	400b      	ands	r3, r1
 800390a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a4a      	ldr	r2, [pc, #296]	@ (8003a40 <I2C_ITMasterCplt+0x190>)
 8003916:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d009      	beq.n	8003938 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2210      	movs	r2, #16
 800392a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003930:	f043 0204 	orr.w	r2, r3, #4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b60      	cmp	r3, #96	@ 0x60
 8003942:	d10b      	bne.n	800395c <I2C_ITMasterCplt+0xac>
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	b2db      	uxtb	r3, r3
 8003958:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800395a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fb48 	bl	8003ff2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003966:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b60      	cmp	r3, #96	@ 0x60
 8003972:	d002      	beq.n	800397a <I2C_ITMasterCplt+0xca>
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d006      	beq.n	8003988 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397e:	4619      	mov	r1, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fa1f 	bl	8003dc4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003986:	e054      	b.n	8003a32 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b21      	cmp	r3, #33	@ 0x21
 8003992:	d124      	bne.n	80039de <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b40      	cmp	r3, #64	@ 0x40
 80039ac:	d10b      	bne.n	80039c6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff f9ae 	bl	8002d20 <HAL_I2C_MemTxCpltCallback>
}
 80039c4:	e035      	b.n	8003a32 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff f962 	bl	8002ca0 <HAL_I2C_MasterTxCpltCallback>
}
 80039dc:	e029      	b.n	8003a32 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b22      	cmp	r3, #34	@ 0x22
 80039e8:	d123      	bne.n	8003a32 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b40      	cmp	r3, #64	@ 0x40
 8003a02:	d10b      	bne.n	8003a1c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7fd fb89 	bl	800112c <HAL_I2C_MemRxCpltCallback>
}
 8003a1a:	e00a      	b.n	8003a32 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff f941 	bl	8002cb4 <HAL_I2C_MasterRxCpltCallback>
}
 8003a32:	bf00      	nop
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	fe00e800 	.word	0xfe00e800
 8003a40:	ffff0000 	.word	0xffff0000

08003a44 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a66:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a70:	7afb      	ldrb	r3, [r7, #11]
 8003a72:	2b21      	cmp	r3, #33	@ 0x21
 8003a74:	d002      	beq.n	8003a7c <I2C_ITSlaveCplt+0x38>
 8003a76:	7afb      	ldrb	r3, [r7, #11]
 8003a78:	2b29      	cmp	r3, #41	@ 0x29
 8003a7a:	d108      	bne.n	8003a8e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003a7c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fe05 	bl	8004690 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2221      	movs	r2, #33	@ 0x21
 8003a8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a8c:	e019      	b.n	8003ac2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a8e:	7afb      	ldrb	r3, [r7, #11]
 8003a90:	2b22      	cmp	r3, #34	@ 0x22
 8003a92:	d002      	beq.n	8003a9a <I2C_ITSlaveCplt+0x56>
 8003a94:	7afb      	ldrb	r3, [r7, #11]
 8003a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a98:	d108      	bne.n	8003aac <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003a9a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fdf6 	bl	8004690 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2222      	movs	r2, #34	@ 0x22
 8003aa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003aaa:	e00a      	b.n	8003ac2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003aac:	7afb      	ldrb	r3, [r7, #11]
 8003aae:	2b28      	cmp	r3, #40	@ 0x28
 8003ab0:	d107      	bne.n	8003ac2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003ab2:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fdea 	bl	8004690 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ad0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4b8c      	ldr	r3, [pc, #560]	@ (8003d10 <I2C_ITSlaveCplt+0x2cc>)
 8003ade:	400b      	ands	r3, r1
 8003ae0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fa85 	bl	8003ff2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	0b9b      	lsrs	r3, r3, #14
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d013      	beq.n	8003b1c <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b02:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d020      	beq.n	8003b4e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b1a:	e018      	b.n	8003b4e <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	0bdb      	lsrs	r3, r3, #15
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d012      	beq.n	8003b4e <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b36:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d006      	beq.n	8003b4e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	089b      	lsrs	r3, r3, #2
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d020      	beq.n	8003b9c <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f023 0304 	bic.w	r3, r3, #4
 8003b60:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00c      	beq.n	8003b9c <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003baa:	f043 0204 	orr.w	r2, r3, #4
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d04a      	beq.n	8003c54 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d044      	beq.n	8003c54 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d128      	bne.n	8003c26 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b28      	cmp	r3, #40	@ 0x28
 8003bde:	d108      	bne.n	8003bf2 <I2C_ITSlaveCplt+0x1ae>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003be6:	d104      	bne.n	8003bf2 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003be8:	6979      	ldr	r1, [r7, #20]
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f894 	bl	8003d18 <I2C_ITListenCplt>
 8003bf0:	e030      	b.n	8003c54 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b29      	cmp	r3, #41	@ 0x29
 8003bfc:	d10e      	bne.n	8003c1c <I2C_ITSlaveCplt+0x1d8>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c04:	d00a      	beq.n	8003c1c <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2210      	movs	r2, #16
 8003c0c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f9ef 	bl	8003ff2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff fdec 	bl	80037f2 <I2C_ITSlaveSeqCplt>
 8003c1a:	e01b      	b.n	8003c54 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2210      	movs	r2, #16
 8003c22:	61da      	str	r2, [r3, #28]
 8003c24:	e016      	b.n	8003c54 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2210      	movs	r2, #16
 8003c2c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c32:	f043 0204 	orr.w	r2, r3, #4
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <I2C_ITSlaveCplt+0x204>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c46:	d105      	bne.n	8003c54 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f8b8 	bl	8003dc4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d010      	beq.n	8003c8c <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	4619      	mov	r1, r3
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f8a7 	bl	8003dc4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b28      	cmp	r3, #40	@ 0x28
 8003c80:	d141      	bne.n	8003d06 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003c82:	6979      	ldr	r1, [r7, #20]
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f847 	bl	8003d18 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c8a:	e03c      	b.n	8003d06 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c94:	d014      	beq.n	8003cc0 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff fdab 	bl	80037f2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003d14 <I2C_ITSlaveCplt+0x2d0>)
 8003ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff f827 	bl	8002d0c <HAL_I2C_ListenCpltCallback>
}
 8003cbe:	e022      	b.n	8003d06 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b22      	cmp	r3, #34	@ 0x22
 8003cca:	d10e      	bne.n	8003cea <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fe fffa 	bl	8002cdc <HAL_I2C_SlaveRxCpltCallback>
}
 8003ce8:	e00d      	b.n	8003d06 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7fe ffe1 	bl	8002cc8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003d06:	bf00      	nop
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	fe00e800 	.word	0xfe00e800
 8003d14:	ffff0000 	.word	0xffff0000

08003d18 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a26      	ldr	r2, [pc, #152]	@ (8003dc0 <I2C_ITListenCplt+0xa8>)
 8003d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	089b      	lsrs	r3, r3, #2
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d022      	beq.n	8003d96 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d012      	beq.n	8003d96 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8e:	f043 0204 	orr.w	r2, r3, #4
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003d96:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fc78 	bl	8004690 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2210      	movs	r2, #16
 8003da6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7fe ffab 	bl	8002d0c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	ffff0000 	.word	0xffff0000

08003dc4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a6d      	ldr	r2, [pc, #436]	@ (8003f98 <I2C_ITError+0x1d4>)
 8003de2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2b28      	cmp	r3, #40	@ 0x28
 8003dfa:	d005      	beq.n	8003e08 <I2C_ITError+0x44>
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b29      	cmp	r3, #41	@ 0x29
 8003e00:	d002      	beq.n	8003e08 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e06:	d10b      	bne.n	8003e20 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e08:	2103      	movs	r1, #3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fc40 	bl	8004690 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2228      	movs	r2, #40	@ 0x28
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a60      	ldr	r2, [pc, #384]	@ (8003f9c <I2C_ITError+0x1d8>)
 8003e1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e1e:	e030      	b.n	8003e82 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e20:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fc33 	bl	8004690 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f8e1 	bl	8003ff2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b60      	cmp	r3, #96	@ 0x60
 8003e3a:	d01f      	beq.n	8003e7c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d114      	bne.n	8003e7c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d109      	bne.n	8003e74 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2210      	movs	r2, #16
 8003e66:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6c:	f043 0204 	orr.w	r2, r3, #4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e86:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d039      	beq.n	8003f04 <I2C_ITError+0x140>
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b11      	cmp	r3, #17
 8003e94:	d002      	beq.n	8003e9c <I2C_ITError+0xd8>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b21      	cmp	r3, #33	@ 0x21
 8003e9a:	d133      	bne.n	8003f04 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ea6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eaa:	d107      	bne.n	8003ebc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003eba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7fe f9b1 	bl	8002228 <HAL_DMA_GetState>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d017      	beq.n	8003efc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed0:	4a33      	ldr	r2, [pc, #204]	@ (8003fa0 <I2C_ITError+0x1dc>)
 8003ed2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fd fff5 	bl	8001ed0 <HAL_DMA_Abort_IT>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d04d      	beq.n	8003f88 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003efa:	e045      	b.n	8003f88 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f851 	bl	8003fa4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f02:	e041      	b.n	8003f88 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d039      	beq.n	8003f80 <I2C_ITError+0x1bc>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b12      	cmp	r3, #18
 8003f10:	d002      	beq.n	8003f18 <I2C_ITError+0x154>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b22      	cmp	r3, #34	@ 0x22
 8003f16:	d133      	bne.n	8003f80 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f26:	d107      	bne.n	8003f38 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f36:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe f973 	bl	8002228 <HAL_DMA_GetState>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d017      	beq.n	8003f78 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4c:	4a14      	ldr	r2, [pc, #80]	@ (8003fa0 <I2C_ITError+0x1dc>)
 8003f4e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fd ffb7 	bl	8001ed0 <HAL_DMA_Abort_IT>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d011      	beq.n	8003f8c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f72:	4610      	mov	r0, r2
 8003f74:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f76:	e009      	b.n	8003f8c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f813 	bl	8003fa4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f7e:	e005      	b.n	8003f8c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f80f 	bl	8003fa4 <I2C_TreatErrorCallback>
  }
}
 8003f86:	e002      	b.n	8003f8e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f88:	bf00      	nop
 8003f8a:	e000      	b.n	8003f8e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f8c:	bf00      	nop
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	ffff0000 	.word	0xffff0000
 8003f9c:	08002d5d 	.word	0x08002d5d
 8003fa0:	08004161 	.word	0x08004161

08003fa4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b60      	cmp	r3, #96	@ 0x60
 8003fb6:	d10e      	bne.n	8003fd6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fe feba 	bl	8002d48 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fd4:	e009      	b.n	8003fea <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7fe fea5 	bl	8002d34 <HAL_I2C_ErrorCallback>
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b02      	cmp	r3, #2
 8004006:	d103      	bne.n	8004010 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2200      	movs	r2, #0
 800400e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b01      	cmp	r3, #1
 800401c:	d007      	beq.n	800402e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699a      	ldr	r2, [r3, #24]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	619a      	str	r2, [r3, #24]
  }
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004046:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004056:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d104      	bne.n	800406c <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004062:	2120      	movs	r1, #32
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 fa8f 	bl	8004588 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800406a:	e03b      	b.n	80040e4 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004074:	441a      	add	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	2bff      	cmp	r3, #255	@ 0xff
 8004082:	d911      	bls.n	80040a8 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	0c1b      	lsrs	r3, r3, #16
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	d103      	bne.n	80040a0 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800409e:	e008      	b.n	80040b2 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	22ff      	movs	r2, #255	@ 0xff
 80040a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80040a6:	e004      	b.n	80040b2 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3324      	adds	r3, #36	@ 0x24
 80040bc:	4619      	mov	r1, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80040c8:	f7fd fea2 	bl	8001e10 <HAL_DMA_Start_IT>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d004      	beq.n	80040dc <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80040d2:	2110      	movs	r1, #16
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f7ff fe75 	bl	8003dc4 <I2C_ITError>
}
 80040da:	e003      	b.n	80040e4 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80040dc:	2140      	movs	r1, #64	@ 0x40
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 fa52 	bl	8004588 <I2C_Enable_IRQ>
}
 80040e4:	bf00      	nop
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8004112:	2301      	movs	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 800412a:	2301      	movs	r3, #1
 800412c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fe f888 	bl	8002244 <HAL_DMA_GetError>
 8004134:	4603      	mov	r3, r0
 8004136:	2b02      	cmp	r3, #2
 8004138:	d00e      	beq.n	8004158 <I2C_DMAError+0x6c>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00b      	beq.n	8004158 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800414e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004150:	2110      	movs	r1, #16
 8004152:	68b8      	ldr	r0, [r7, #8]
 8004154:	f7ff fe36 	bl	8003dc4 <I2C_ITError>
  }
}
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417a:	2200      	movs	r2, #0
 800417c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418a:	2200      	movs	r2, #0
 800418c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f7ff ff08 	bl	8003fa4 <I2C_TreatErrorCallback>
}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	4613      	mov	r3, r2
 80041aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ac:	e03b      	b.n	8004226 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	6839      	ldr	r1, [r7, #0]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f8d6 	bl	8004364 <I2C_IsErrorOccurred>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e041      	b.n	8004246 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d02d      	beq.n	8004226 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ca:	f7fd fc31 	bl	8001a30 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d302      	bcc.n	80041e0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d122      	bne.n	8004226 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	4013      	ands	r3, r2
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	bf0c      	ite	eq
 80041f0:	2301      	moveq	r3, #1
 80041f2:	2300      	movne	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d113      	bne.n	8004226 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004202:	f043 0220 	orr.w	r2, r3, #32
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e00f      	b.n	8004246 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699a      	ldr	r2, [r3, #24]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4013      	ands	r3, r2
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	429a      	cmp	r2, r3
 8004234:	bf0c      	ite	eq
 8004236:	2301      	moveq	r3, #1
 8004238:	2300      	movne	r3, #0
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	429a      	cmp	r2, r3
 8004242:	d0b4      	beq.n	80041ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800425a:	e033      	b.n	80042c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f87f 	bl	8004364 <I2C_IsErrorOccurred>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e031      	b.n	80042d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d025      	beq.n	80042c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004278:	f7fd fbda 	bl	8001a30 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	429a      	cmp	r2, r3
 8004286:	d302      	bcc.n	800428e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d11a      	bne.n	80042c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b02      	cmp	r3, #2
 800429a:	d013      	beq.n	80042c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a0:	f043 0220 	orr.w	r2, r3, #32
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e007      	b.n	80042d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d1c4      	bne.n	800425c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042e8:	e02f      	b.n	800434a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f838 	bl	8004364 <I2C_IsErrorOccurred>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e02d      	b.n	800435a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fe:	f7fd fb97 	bl	8001a30 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d11a      	bne.n	800434a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b20      	cmp	r3, #32
 8004320:	d013      	beq.n	800434a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004326:	f043 0220 	orr.w	r2, r3, #32
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e007      	b.n	800435a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b20      	cmp	r3, #32
 8004356:	d1c8      	bne.n	80042ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
	...

08004364 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08a      	sub	sp, #40	@ 0x28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b00      	cmp	r3, #0
 800438e:	d068      	beq.n	8004462 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2210      	movs	r2, #16
 8004396:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004398:	e049      	b.n	800442e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d045      	beq.n	800442e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043a2:	f7fd fb45 	bl	8001a30 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d302      	bcc.n	80043b8 <I2C_IsErrorOccurred+0x54>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d13a      	bne.n	800442e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043da:	d121      	bne.n	8004420 <I2C_IsErrorOccurred+0xbc>
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043e2:	d01d      	beq.n	8004420 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80043e4:	7cfb      	ldrb	r3, [r7, #19]
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d01a      	beq.n	8004420 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80043fa:	f7fd fb19 	bl	8001a30 <HAL_GetTick>
 80043fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004400:	e00e      	b.n	8004420 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004402:	f7fd fb15 	bl	8001a30 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b19      	cmp	r3, #25
 800440e:	d907      	bls.n	8004420 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	f043 0320 	orr.w	r3, r3, #32
 8004416:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800441e:	e006      	b.n	800442e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b20      	cmp	r3, #32
 800442c:	d1e9      	bne.n	8004402 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b20      	cmp	r3, #32
 800443a:	d003      	beq.n	8004444 <I2C_IsErrorOccurred+0xe0>
 800443c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0aa      	beq.n	800439a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004444:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004448:	2b00      	cmp	r3, #0
 800444a:	d103      	bne.n	8004454 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2220      	movs	r2, #32
 8004452:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	f043 0304 	orr.w	r3, r3, #4
 800445a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00b      	beq.n	800448c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004484:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	f043 0308 	orr.w	r3, r3, #8
 800449c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00b      	beq.n	80044d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	f043 0302 	orr.w	r3, r3, #2
 80044be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80044d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01c      	beq.n	8004512 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7ff fd8a 	bl	8003ff2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6859      	ldr	r1, [r3, #4]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <I2C_IsErrorOccurred+0x1bc>)
 80044ea:	400b      	ands	r3, r1
 80044ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	431a      	orrs	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004512:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004516:	4618      	mov	r0, r3
 8004518:	3728      	adds	r7, #40	@ 0x28
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	fe00e800 	.word	0xfe00e800

08004524 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	607b      	str	r3, [r7, #4]
 800452e:	460b      	mov	r3, r1
 8004530:	817b      	strh	r3, [r7, #10]
 8004532:	4613      	mov	r3, r2
 8004534:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004536:	897b      	ldrh	r3, [r7, #10]
 8004538:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800453c:	7a7b      	ldrb	r3, [r7, #9]
 800453e:	041b      	lsls	r3, r3, #16
 8004540:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004544:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	4313      	orrs	r3, r2
 800454e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004552:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	0d5b      	lsrs	r3, r3, #21
 800455e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004562:	4b08      	ldr	r3, [pc, #32]	@ (8004584 <I2C_TransferConfig+0x60>)
 8004564:	430b      	orrs	r3, r1
 8004566:	43db      	mvns	r3, r3
 8004568:	ea02 0103 	and.w	r1, r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	03ff63ff 	.word	0x03ff63ff

08004588 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459c:	4a39      	ldr	r2, [pc, #228]	@ (8004684 <I2C_Enable_IRQ+0xfc>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d032      	beq.n	8004608 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80045a6:	4a38      	ldr	r2, [pc, #224]	@ (8004688 <I2C_Enable_IRQ+0x100>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d02d      	beq.n	8004608 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80045b0:	4a36      	ldr	r2, [pc, #216]	@ (800468c <I2C_Enable_IRQ+0x104>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d028      	beq.n	8004608 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80045b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	da03      	bge.n	80045c6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80045c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80045c6:	887b      	ldrh	r3, [r7, #2]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80045d6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80045d8:	887b      	ldrh	r3, [r7, #2]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80045e8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80045ea:	887b      	ldrh	r3, [r7, #2]
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d103      	bne.n	80045f8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80045f6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80045f8:	887b      	ldrh	r3, [r7, #2]
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d133      	bne.n	8004666 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f043 0320 	orr.w	r3, r3, #32
 8004604:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004606:	e02e      	b.n	8004666 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004608:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800460c:	2b00      	cmp	r3, #0
 800460e:	da03      	bge.n	8004618 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004616:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004618:	887b      	ldrh	r3, [r7, #2]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004628:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800462a:	887b      	ldrh	r3, [r7, #2]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800463a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800463c:	887b      	ldrh	r3, [r7, #2]
 800463e:	2b10      	cmp	r3, #16
 8004640:	d103      	bne.n	800464a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004648:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800464a:	887b      	ldrh	r3, [r7, #2]
 800464c:	2b20      	cmp	r3, #32
 800464e:	d103      	bne.n	8004658 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004656:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004658:	887b      	ldrh	r3, [r7, #2]
 800465a:	2b40      	cmp	r3, #64	@ 0x40
 800465c:	d103      	bne.n	8004666 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004664:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6819      	ldr	r1, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	430a      	orrs	r2, r1
 8004674:	601a      	str	r2, [r3, #0]
}
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	08002f65 	.word	0x08002f65
 8004688:	08003405 	.word	0x08003405
 800468c:	08003169 	.word	0x08003169

08004690 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80046a0:	887b      	ldrh	r3, [r7, #2]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00f      	beq.n	80046ca <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80046b0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046be:	2b28      	cmp	r3, #40	@ 0x28
 80046c0:	d003      	beq.n	80046ca <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80046c8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80046ca:	887b      	ldrh	r3, [r7, #2]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00f      	beq.n	80046f4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80046da:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046e8:	2b28      	cmp	r3, #40	@ 0x28
 80046ea:	d003      	beq.n	80046f4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80046f2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80046f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	da03      	bge.n	8004704 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004702:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004704:	887b      	ldrh	r3, [r7, #2]
 8004706:	2b10      	cmp	r3, #16
 8004708:	d103      	bne.n	8004712 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004710:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004712:	887b      	ldrh	r3, [r7, #2]
 8004714:	2b20      	cmp	r3, #32
 8004716:	d103      	bne.n	8004720 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f043 0320 	orr.w	r3, r3, #32
 800471e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004720:	887b      	ldrh	r3, [r7, #2]
 8004722:	2b40      	cmp	r3, #64	@ 0x40
 8004724:	d103      	bne.n	800472e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800472c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6819      	ldr	r1, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	43da      	mvns	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	400a      	ands	r2, r1
 800473e:	601a      	str	r2, [r3, #0]
}
 8004740:	bf00      	nop
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b20      	cmp	r3, #32
 8004760:	d138      	bne.n	80047d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800476c:	2302      	movs	r3, #2
 800476e:	e032      	b.n	80047d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2224      	movs	r2, #36	@ 0x24
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800479e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6819      	ldr	r1, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	e000      	b.n	80047d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047d4:	2302      	movs	r3, #2
  }
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b085      	sub	sp, #20
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d139      	bne.n	800486c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004802:	2302      	movs	r3, #2
 8004804:	e033      	b.n	800486e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2224      	movs	r2, #36	@ 0x24
 8004812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0201 	bic.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004834:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	e000      	b.n	800486e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800486c:	2302      	movs	r3, #2
  }
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004886:	4b23      	ldr	r3, [pc, #140]	@ (8004914 <HAL_PWREx_EnableOverDrive+0x98>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	4a22      	ldr	r2, [pc, #136]	@ (8004914 <HAL_PWREx_EnableOverDrive+0x98>)
 800488c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004890:	6413      	str	r3, [r2, #64]	@ 0x40
 8004892:	4b20      	ldr	r3, [pc, #128]	@ (8004914 <HAL_PWREx_EnableOverDrive+0x98>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800489e:	4b1e      	ldr	r3, [pc, #120]	@ (8004918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048aa:	f7fd f8c1 	bl	8001a30 <HAL_GetTick>
 80048ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048b0:	e009      	b.n	80048c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048b2:	f7fd f8bd 	bl	8001a30 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048c0:	d901      	bls.n	80048c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e022      	b.n	800490c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048c6:	4b14      	ldr	r3, [pc, #80]	@ (8004918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d2:	d1ee      	bne.n	80048b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80048d4:	4b10      	ldr	r3, [pc, #64]	@ (8004918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a0f      	ldr	r2, [pc, #60]	@ (8004918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048e0:	f7fd f8a6 	bl	8001a30 <HAL_GetTick>
 80048e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048e6:	e009      	b.n	80048fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048e8:	f7fd f8a2 	bl	8001a30 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048f6:	d901      	bls.n	80048fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e007      	b.n	800490c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048fc:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004904:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004908:	d1ee      	bne.n	80048e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40023800 	.word	0x40023800
 8004918:	40007000 	.word	0x40007000

0800491c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004924:	2300      	movs	r3, #0
 8004926:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e291      	b.n	8004e56 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8087 	beq.w	8004a4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004940:	4b96      	ldr	r3, [pc, #600]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 030c 	and.w	r3, r3, #12
 8004948:	2b04      	cmp	r3, #4
 800494a:	d00c      	beq.n	8004966 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800494c:	4b93      	ldr	r3, [pc, #588]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 030c 	and.w	r3, r3, #12
 8004954:	2b08      	cmp	r3, #8
 8004956:	d112      	bne.n	800497e <HAL_RCC_OscConfig+0x62>
 8004958:	4b90      	ldr	r3, [pc, #576]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004960:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004964:	d10b      	bne.n	800497e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004966:	4b8d      	ldr	r3, [pc, #564]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d06c      	beq.n	8004a4c <HAL_RCC_OscConfig+0x130>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d168      	bne.n	8004a4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e26b      	b.n	8004e56 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004986:	d106      	bne.n	8004996 <HAL_RCC_OscConfig+0x7a>
 8004988:	4b84      	ldr	r3, [pc, #528]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a83      	ldr	r2, [pc, #524]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 800498e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	e02e      	b.n	80049f4 <HAL_RCC_OscConfig+0xd8>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10c      	bne.n	80049b8 <HAL_RCC_OscConfig+0x9c>
 800499e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a7e      	ldr	r2, [pc, #504]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 80049a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	4b7c      	ldr	r3, [pc, #496]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a7b      	ldr	r2, [pc, #492]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 80049b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	e01d      	b.n	80049f4 <HAL_RCC_OscConfig+0xd8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049c0:	d10c      	bne.n	80049dc <HAL_RCC_OscConfig+0xc0>
 80049c2:	4b76      	ldr	r3, [pc, #472]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a75      	ldr	r2, [pc, #468]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 80049c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	4b73      	ldr	r3, [pc, #460]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a72      	ldr	r2, [pc, #456]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 80049d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	e00b      	b.n	80049f4 <HAL_RCC_OscConfig+0xd8>
 80049dc:	4b6f      	ldr	r3, [pc, #444]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a6e      	ldr	r2, [pc, #440]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 80049e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	4b6c      	ldr	r3, [pc, #432]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a6b      	ldr	r2, [pc, #428]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 80049ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d013      	beq.n	8004a24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fc:	f7fd f818 	bl	8001a30 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a04:	f7fd f814 	bl	8001a30 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b64      	cmp	r3, #100	@ 0x64
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e21f      	b.n	8004e56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a16:	4b61      	ldr	r3, [pc, #388]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0xe8>
 8004a22:	e014      	b.n	8004a4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a24:	f7fd f804 	bl	8001a30 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a2c:	f7fd f800 	bl	8001a30 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b64      	cmp	r3, #100	@ 0x64
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e20b      	b.n	8004e56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a3e:	4b57      	ldr	r3, [pc, #348]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x110>
 8004a4a:	e000      	b.n	8004a4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d069      	beq.n	8004b2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a5a:	4b50      	ldr	r3, [pc, #320]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 030c 	and.w	r3, r3, #12
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00b      	beq.n	8004a7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a66:	4b4d      	ldr	r3, [pc, #308]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 030c 	and.w	r3, r3, #12
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d11c      	bne.n	8004aac <HAL_RCC_OscConfig+0x190>
 8004a72:	4b4a      	ldr	r3, [pc, #296]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d116      	bne.n	8004aac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7e:	4b47      	ldr	r3, [pc, #284]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d005      	beq.n	8004a96 <HAL_RCC_OscConfig+0x17a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d001      	beq.n	8004a96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e1df      	b.n	8004e56 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a96:	4b41      	ldr	r3, [pc, #260]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	493d      	ldr	r1, [pc, #244]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aaa:	e040      	b.n	8004b2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d023      	beq.n	8004afc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab4:	4b39      	ldr	r3, [pc, #228]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a38      	ldr	r2, [pc, #224]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fc ffb6 	bl	8001a30 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ac8:	f7fc ffb2 	bl	8001a30 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e1bd      	b.n	8004e56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ada:	4b30      	ldr	r3, [pc, #192]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4929      	ldr	r1, [pc, #164]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]
 8004afa:	e018      	b.n	8004b2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004afc:	4b27      	ldr	r3, [pc, #156]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a26      	ldr	r2, [pc, #152]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b08:	f7fc ff92 	bl	8001a30 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b10:	f7fc ff8e 	bl	8001a30 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e199      	b.n	8004e56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b22:	4b1e      	ldr	r3, [pc, #120]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d038      	beq.n	8004bac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d019      	beq.n	8004b76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b42:	4b16      	ldr	r3, [pc, #88]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b46:	4a15      	ldr	r2, [pc, #84]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4e:	f7fc ff6f 	bl	8001a30 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b56:	f7fc ff6b 	bl	8001a30 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e176      	b.n	8004e56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b68:	4b0c      	ldr	r3, [pc, #48]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCC_OscConfig+0x23a>
 8004b74:	e01a      	b.n	8004bac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b76:	4b09      	ldr	r3, [pc, #36]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b7a:	4a08      	ldr	r2, [pc, #32]	@ (8004b9c <HAL_RCC_OscConfig+0x280>)
 8004b7c:	f023 0301 	bic.w	r3, r3, #1
 8004b80:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b82:	f7fc ff55 	bl	8001a30 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b88:	e00a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b8a:	f7fc ff51 	bl	8001a30 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d903      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e15c      	b.n	8004e56 <HAL_RCC_OscConfig+0x53a>
 8004b9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba0:	4b91      	ldr	r3, [pc, #580]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004ba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1ee      	bne.n	8004b8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 80a4 	beq.w	8004d02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bba:	4b8b      	ldr	r3, [pc, #556]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10d      	bne.n	8004be2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc6:	4b88      	ldr	r3, [pc, #544]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bca:	4a87      	ldr	r2, [pc, #540]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bd2:	4b85      	ldr	r3, [pc, #532]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bde:	2301      	movs	r3, #1
 8004be0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be2:	4b82      	ldr	r3, [pc, #520]	@ (8004dec <HAL_RCC_OscConfig+0x4d0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d118      	bne.n	8004c20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004bee:	4b7f      	ldr	r3, [pc, #508]	@ (8004dec <HAL_RCC_OscConfig+0x4d0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a7e      	ldr	r2, [pc, #504]	@ (8004dec <HAL_RCC_OscConfig+0x4d0>)
 8004bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfa:	f7fc ff19 	bl	8001a30 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c02:	f7fc ff15 	bl	8001a30 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b64      	cmp	r3, #100	@ 0x64
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e120      	b.n	8004e56 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c14:	4b75      	ldr	r3, [pc, #468]	@ (8004dec <HAL_RCC_OscConfig+0x4d0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d106      	bne.n	8004c36 <HAL_RCC_OscConfig+0x31a>
 8004c28:	4b6f      	ldr	r3, [pc, #444]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2c:	4a6e      	ldr	r2, [pc, #440]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004c2e:	f043 0301 	orr.w	r3, r3, #1
 8004c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c34:	e02d      	b.n	8004c92 <HAL_RCC_OscConfig+0x376>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10c      	bne.n	8004c58 <HAL_RCC_OscConfig+0x33c>
 8004c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c42:	4a69      	ldr	r2, [pc, #420]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c4a:	4b67      	ldr	r3, [pc, #412]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c4e:	4a66      	ldr	r2, [pc, #408]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004c50:	f023 0304 	bic.w	r3, r3, #4
 8004c54:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c56:	e01c      	b.n	8004c92 <HAL_RCC_OscConfig+0x376>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b05      	cmp	r3, #5
 8004c5e:	d10c      	bne.n	8004c7a <HAL_RCC_OscConfig+0x35e>
 8004c60:	4b61      	ldr	r3, [pc, #388]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c64:	4a60      	ldr	r2, [pc, #384]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004c66:	f043 0304 	orr.w	r3, r3, #4
 8004c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c6c:	4b5e      	ldr	r3, [pc, #376]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c70:	4a5d      	ldr	r2, [pc, #372]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c78:	e00b      	b.n	8004c92 <HAL_RCC_OscConfig+0x376>
 8004c7a:	4b5b      	ldr	r3, [pc, #364]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7e:	4a5a      	ldr	r2, [pc, #360]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004c80:	f023 0301 	bic.w	r3, r3, #1
 8004c84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c86:	4b58      	ldr	r3, [pc, #352]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8a:	4a57      	ldr	r2, [pc, #348]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004c8c:	f023 0304 	bic.w	r3, r3, #4
 8004c90:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d015      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9a:	f7fc fec9 	bl	8001a30 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca0:	e00a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca2:	f7fc fec5 	bl	8001a30 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e0ce      	b.n	8004e56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0ee      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x386>
 8004cc4:	e014      	b.n	8004cf0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc6:	f7fc feb3 	bl	8001a30 <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ccc:	e00a      	b.n	8004ce4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cce:	f7fc feaf 	bl	8001a30 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e0b8      	b.n	8004e56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce4:	4b40      	ldr	r3, [pc, #256]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1ee      	bne.n	8004cce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cf0:	7dfb      	ldrb	r3, [r7, #23]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d105      	bne.n	8004d02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfa:	4a3b      	ldr	r2, [pc, #236]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004cfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d00:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80a4 	beq.w	8004e54 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d0c:	4b36      	ldr	r3, [pc, #216]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 030c 	and.w	r3, r3, #12
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d06b      	beq.n	8004df0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d149      	bne.n	8004db4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d20:	4b31      	ldr	r3, [pc, #196]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a30      	ldr	r2, [pc, #192]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004d26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2c:	f7fc fe80 	bl	8001a30 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d34:	f7fc fe7c 	bl	8001a30 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e087      	b.n	8004e56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d46:	4b28      	ldr	r3, [pc, #160]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f0      	bne.n	8004d34 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	019b      	lsls	r3, r3, #6
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	041b      	lsls	r3, r3, #16
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d74:	061b      	lsls	r3, r3, #24
 8004d76:	4313      	orrs	r3, r2
 8004d78:	4a1b      	ldr	r2, [pc, #108]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004d7a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d7e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d80:	4b19      	ldr	r3, [pc, #100]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a18      	ldr	r2, [pc, #96]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004d86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fc fe50 	bl	8001a30 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fc fe4c 	bl	8001a30 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e057      	b.n	8004e56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da6:	4b10      	ldr	r3, [pc, #64]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x478>
 8004db2:	e04f      	b.n	8004e54 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db4:	4b0c      	ldr	r3, [pc, #48]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a0b      	ldr	r2, [pc, #44]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004dba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc0:	f7fc fe36 	bl	8001a30 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc8:	f7fc fe32 	bl	8001a30 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e03d      	b.n	8004e56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dda:	4b03      	ldr	r3, [pc, #12]	@ (8004de8 <HAL_RCC_OscConfig+0x4cc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x4ac>
 8004de6:	e035      	b.n	8004e54 <HAL_RCC_OscConfig+0x538>
 8004de8:	40023800 	.word	0x40023800
 8004dec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004df0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e60 <HAL_RCC_OscConfig+0x544>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d028      	beq.n	8004e50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d121      	bne.n	8004e50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d11a      	bne.n	8004e50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e20:	4013      	ands	r3, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e26:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d111      	bne.n	8004e50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e36:	085b      	lsrs	r3, r3, #1
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d107      	bne.n	8004e50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800

08004e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e0d0      	b.n	800501e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d910      	bls.n	8004eac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e8a:	4b67      	ldr	r3, [pc, #412]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f023 020f 	bic.w	r2, r3, #15
 8004e92:	4965      	ldr	r1, [pc, #404]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9a:	4b63      	ldr	r3, [pc, #396]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d001      	beq.n	8004eac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0b8      	b.n	800501e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d020      	beq.n	8004efa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ec4:	4b59      	ldr	r3, [pc, #356]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	4a58      	ldr	r2, [pc, #352]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004eca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ece:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004edc:	4b53      	ldr	r3, [pc, #332]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	4a52      	ldr	r2, [pc, #328]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004ee2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ee6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee8:	4b50      	ldr	r3, [pc, #320]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	494d      	ldr	r1, [pc, #308]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d040      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d107      	bne.n	8004f1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0e:	4b47      	ldr	r3, [pc, #284]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d115      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e07f      	b.n	800501e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d107      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f26:	4b41      	ldr	r3, [pc, #260]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e073      	b.n	800501e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f36:	4b3d      	ldr	r3, [pc, #244]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e06b      	b.n	800501e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f46:	4b39      	ldr	r3, [pc, #228]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f023 0203 	bic.w	r2, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4936      	ldr	r1, [pc, #216]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f58:	f7fc fd6a 	bl	8001a30 <HAL_GetTick>
 8004f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f60:	f7fc fd66 	bl	8001a30 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e053      	b.n	800501e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f76:	4b2d      	ldr	r3, [pc, #180]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 020c 	and.w	r2, r3, #12
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d1eb      	bne.n	8004f60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f88:	4b27      	ldr	r3, [pc, #156]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 030f 	and.w	r3, r3, #15
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d210      	bcs.n	8004fb8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f96:	4b24      	ldr	r3, [pc, #144]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f023 020f 	bic.w	r2, r3, #15
 8004f9e:	4922      	ldr	r1, [pc, #136]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa6:	4b20      	ldr	r3, [pc, #128]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d001      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e032      	b.n	800501e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d008      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fc4:	4b19      	ldr	r3, [pc, #100]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4916      	ldr	r1, [pc, #88]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fe2:	4b12      	ldr	r3, [pc, #72]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	490e      	ldr	r1, [pc, #56]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ff6:	f000 f821 	bl	800503c <HAL_RCC_GetSysClockFreq>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	091b      	lsrs	r3, r3, #4
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	490a      	ldr	r1, [pc, #40]	@ (8005030 <HAL_RCC_ClockConfig+0x1cc>)
 8005008:	5ccb      	ldrb	r3, [r1, r3]
 800500a:	fa22 f303 	lsr.w	r3, r2, r3
 800500e:	4a09      	ldr	r2, [pc, #36]	@ (8005034 <HAL_RCC_ClockConfig+0x1d0>)
 8005010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005012:	4b09      	ldr	r3, [pc, #36]	@ (8005038 <HAL_RCC_ClockConfig+0x1d4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7fc fcc6 	bl	80019a8 <HAL_InitTick>

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40023c00 	.word	0x40023c00
 800502c:	40023800 	.word	0x40023800
 8005030:	08008ed4 	.word	0x08008ed4
 8005034:	20000004 	.word	0x20000004
 8005038:	20000008 	.word	0x20000008

0800503c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800503c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005040:	b090      	sub	sp, #64	@ 0x40
 8005042:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	637b      	str	r3, [r7, #52]	@ 0x34
 8005048:	2300      	movs	r3, #0
 800504a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800504c:	2300      	movs	r3, #0
 800504e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005054:	4b59      	ldr	r3, [pc, #356]	@ (80051bc <HAL_RCC_GetSysClockFreq+0x180>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 030c 	and.w	r3, r3, #12
 800505c:	2b08      	cmp	r3, #8
 800505e:	d00d      	beq.n	800507c <HAL_RCC_GetSysClockFreq+0x40>
 8005060:	2b08      	cmp	r3, #8
 8005062:	f200 80a1 	bhi.w	80051a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <HAL_RCC_GetSysClockFreq+0x34>
 800506a:	2b04      	cmp	r3, #4
 800506c:	d003      	beq.n	8005076 <HAL_RCC_GetSysClockFreq+0x3a>
 800506e:	e09b      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005070:	4b53      	ldr	r3, [pc, #332]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005072:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005074:	e09b      	b.n	80051ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005076:	4b53      	ldr	r3, [pc, #332]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005078:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800507a:	e098      	b.n	80051ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800507c:	4b4f      	ldr	r3, [pc, #316]	@ (80051bc <HAL_RCC_GetSysClockFreq+0x180>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005084:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005086:	4b4d      	ldr	r3, [pc, #308]	@ (80051bc <HAL_RCC_GetSysClockFreq+0x180>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d028      	beq.n	80050e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005092:	4b4a      	ldr	r3, [pc, #296]	@ (80051bc <HAL_RCC_GetSysClockFreq+0x180>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	099b      	lsrs	r3, r3, #6
 8005098:	2200      	movs	r2, #0
 800509a:	623b      	str	r3, [r7, #32]
 800509c:	627a      	str	r2, [r7, #36]	@ 0x24
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80050a4:	2100      	movs	r1, #0
 80050a6:	4b47      	ldr	r3, [pc, #284]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80050a8:	fb03 f201 	mul.w	r2, r3, r1
 80050ac:	2300      	movs	r3, #0
 80050ae:	fb00 f303 	mul.w	r3, r0, r3
 80050b2:	4413      	add	r3, r2
 80050b4:	4a43      	ldr	r2, [pc, #268]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80050b6:	fba0 1202 	umull	r1, r2, r0, r2
 80050ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050bc:	460a      	mov	r2, r1
 80050be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80050c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050c2:	4413      	add	r3, r2
 80050c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c8:	2200      	movs	r2, #0
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	61fa      	str	r2, [r7, #28]
 80050ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80050d6:	f7fb fd87 	bl	8000be8 <__aeabi_uldivmod>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4613      	mov	r3, r2
 80050e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050e2:	e053      	b.n	800518c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050e4:	4b35      	ldr	r3, [pc, #212]	@ (80051bc <HAL_RCC_GetSysClockFreq+0x180>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	099b      	lsrs	r3, r3, #6
 80050ea:	2200      	movs	r2, #0
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	617a      	str	r2, [r7, #20]
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80050f6:	f04f 0b00 	mov.w	fp, #0
 80050fa:	4652      	mov	r2, sl
 80050fc:	465b      	mov	r3, fp
 80050fe:	f04f 0000 	mov.w	r0, #0
 8005102:	f04f 0100 	mov.w	r1, #0
 8005106:	0159      	lsls	r1, r3, #5
 8005108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800510c:	0150      	lsls	r0, r2, #5
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	ebb2 080a 	subs.w	r8, r2, sl
 8005116:	eb63 090b 	sbc.w	r9, r3, fp
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005126:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800512a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800512e:	ebb2 0408 	subs.w	r4, r2, r8
 8005132:	eb63 0509 	sbc.w	r5, r3, r9
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	00eb      	lsls	r3, r5, #3
 8005140:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005144:	00e2      	lsls	r2, r4, #3
 8005146:	4614      	mov	r4, r2
 8005148:	461d      	mov	r5, r3
 800514a:	eb14 030a 	adds.w	r3, r4, sl
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	eb45 030b 	adc.w	r3, r5, fp
 8005154:	607b      	str	r3, [r7, #4]
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005162:	4629      	mov	r1, r5
 8005164:	028b      	lsls	r3, r1, #10
 8005166:	4621      	mov	r1, r4
 8005168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800516c:	4621      	mov	r1, r4
 800516e:	028a      	lsls	r2, r1, #10
 8005170:	4610      	mov	r0, r2
 8005172:	4619      	mov	r1, r3
 8005174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005176:	2200      	movs	r2, #0
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	60fa      	str	r2, [r7, #12]
 800517c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005180:	f7fb fd32 	bl	8000be8 <__aeabi_uldivmod>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4613      	mov	r3, r2
 800518a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800518c:	4b0b      	ldr	r3, [pc, #44]	@ (80051bc <HAL_RCC_GetSysClockFreq+0x180>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	0c1b      	lsrs	r3, r3, #16
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	3301      	adds	r3, #1
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800519c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051a6:	e002      	b.n	80051ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051a8:	4b05      	ldr	r3, [pc, #20]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80051aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3740      	adds	r7, #64	@ 0x40
 80051b4:	46bd      	mov	sp, r7
 80051b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ba:	bf00      	nop
 80051bc:	40023800 	.word	0x40023800
 80051c0:	00f42400 	.word	0x00f42400
 80051c4:	017d7840 	.word	0x017d7840

080051c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051cc:	4b03      	ldr	r3, [pc, #12]	@ (80051dc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ce:	681b      	ldr	r3, [r3, #0]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20000004 	.word	0x20000004

080051e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051e4:	f7ff fff0 	bl	80051c8 <HAL_RCC_GetHCLKFreq>
 80051e8:	4602      	mov	r2, r0
 80051ea:	4b05      	ldr	r3, [pc, #20]	@ (8005200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	0a9b      	lsrs	r3, r3, #10
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	4903      	ldr	r1, [pc, #12]	@ (8005204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051f6:	5ccb      	ldrb	r3, [r1, r3]
 80051f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40023800 	.word	0x40023800
 8005204:	08008ee4 	.word	0x08008ee4

08005208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800520c:	f7ff ffdc 	bl	80051c8 <HAL_RCC_GetHCLKFreq>
 8005210:	4602      	mov	r2, r0
 8005212:	4b05      	ldr	r3, [pc, #20]	@ (8005228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	0b5b      	lsrs	r3, r3, #13
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	4903      	ldr	r1, [pc, #12]	@ (800522c <HAL_RCC_GetPCLK2Freq+0x24>)
 800521e:	5ccb      	ldrb	r3, [r1, r3]
 8005220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005224:	4618      	mov	r0, r3
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40023800 	.word	0x40023800
 800522c:	08008ee4 	.word	0x08008ee4

08005230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005244:	2300      	movs	r3, #0
 8005246:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d012      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005258:	4b69      	ldr	r3, [pc, #420]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	4a68      	ldr	r2, [pc, #416]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800525e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005262:	6093      	str	r3, [r2, #8]
 8005264:	4b66      	ldr	r3, [pc, #408]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800526c:	4964      	ldr	r1, [pc, #400]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526e:	4313      	orrs	r3, r2
 8005270:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800527a:	2301      	movs	r3, #1
 800527c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d017      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800528a:	4b5d      	ldr	r3, [pc, #372]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005290:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005298:	4959      	ldr	r1, [pc, #356]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052a8:	d101      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80052aa:	2301      	movs	r3, #1
 80052ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80052b6:	2301      	movs	r3, #1
 80052b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d017      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052c6:	4b4e      	ldr	r3, [pc, #312]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d4:	494a      	ldr	r1, [pc, #296]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052e4:	d101      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80052e6:	2301      	movs	r3, #1
 80052e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80052f2:	2301      	movs	r3, #1
 80052f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005302:	2301      	movs	r3, #1
 8005304:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 808b 	beq.w	800542a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005314:	4b3a      	ldr	r3, [pc, #232]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005318:	4a39      	ldr	r2, [pc, #228]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800531e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005320:	4b37      	ldr	r3, [pc, #220]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005328:	60bb      	str	r3, [r7, #8]
 800532a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800532c:	4b35      	ldr	r3, [pc, #212]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a34      	ldr	r2, [pc, #208]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005338:	f7fc fb7a 	bl	8001a30 <HAL_GetTick>
 800533c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005340:	f7fc fb76 	bl	8001a30 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b64      	cmp	r3, #100	@ 0x64
 800534c:	d901      	bls.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e357      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005352:	4b2c      	ldr	r3, [pc, #176]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f0      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800535e:	4b28      	ldr	r3, [pc, #160]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005366:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d035      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	429a      	cmp	r2, r3
 800537a:	d02e      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800537c:	4b20      	ldr	r3, [pc, #128]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800537e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005384:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005386:	4b1e      	ldr	r3, [pc, #120]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800538a:	4a1d      	ldr	r2, [pc, #116]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800538c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005390:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005392:	4b1b      	ldr	r3, [pc, #108]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005396:	4a1a      	ldr	r2, [pc, #104]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800539c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800539e:	4a18      	ldr	r2, [pc, #96]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053a4:	4b16      	ldr	r3, [pc, #88]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d114      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b0:	f7fc fb3e 	bl	8001a30 <HAL_GetTick>
 80053b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b6:	e00a      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b8:	f7fc fb3a 	bl	8001a30 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d901      	bls.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e319      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0ee      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053e6:	d111      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80053e8:	4b05      	ldr	r3, [pc, #20]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80053f4:	4b04      	ldr	r3, [pc, #16]	@ (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80053f6:	400b      	ands	r3, r1
 80053f8:	4901      	ldr	r1, [pc, #4]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	608b      	str	r3, [r1, #8]
 80053fe:	e00b      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005400:	40023800 	.word	0x40023800
 8005404:	40007000 	.word	0x40007000
 8005408:	0ffffcff 	.word	0x0ffffcff
 800540c:	4baa      	ldr	r3, [pc, #680]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	4aa9      	ldr	r2, [pc, #676]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005412:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005416:	6093      	str	r3, [r2, #8]
 8005418:	4ba7      	ldr	r3, [pc, #668]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800541a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005424:	49a4      	ldr	r1, [pc, #656]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005426:	4313      	orrs	r3, r2
 8005428:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0310 	and.w	r3, r3, #16
 8005432:	2b00      	cmp	r3, #0
 8005434:	d010      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005436:	4ba0      	ldr	r3, [pc, #640]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005438:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800543c:	4a9e      	ldr	r2, [pc, #632]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800543e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005442:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005446:	4b9c      	ldr	r3, [pc, #624]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005448:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005450:	4999      	ldr	r1, [pc, #612]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005464:	4b94      	ldr	r3, [pc, #592]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800546a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005472:	4991      	ldr	r1, [pc, #580]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005486:	4b8c      	ldr	r3, [pc, #560]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800548c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005494:	4988      	ldr	r1, [pc, #544]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054a8:	4b83      	ldr	r3, [pc, #524]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054b6:	4980      	ldr	r1, [pc, #512]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054ca:	4b7b      	ldr	r3, [pc, #492]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d8:	4977      	ldr	r1, [pc, #476]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054ec:	4b72      	ldr	r3, [pc, #456]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f2:	f023 0203 	bic.w	r2, r3, #3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fa:	496f      	ldr	r1, [pc, #444]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800550e:	4b6a      	ldr	r3, [pc, #424]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005514:	f023 020c 	bic.w	r2, r3, #12
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800551c:	4966      	ldr	r1, [pc, #408]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800551e:	4313      	orrs	r3, r2
 8005520:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005530:	4b61      	ldr	r3, [pc, #388]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005536:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800553e:	495e      	ldr	r1, [pc, #376]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005552:	4b59      	ldr	r3, [pc, #356]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005558:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005560:	4955      	ldr	r1, [pc, #340]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00a      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005574:	4b50      	ldr	r3, [pc, #320]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800557a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005582:	494d      	ldr	r1, [pc, #308]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005596:	4b48      	ldr	r3, [pc, #288]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a4:	4944      	ldr	r1, [pc, #272]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80055b8:	4b3f      	ldr	r3, [pc, #252]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055be:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c6:	493c      	ldr	r1, [pc, #240]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80055da:	4b37      	ldr	r3, [pc, #220]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e8:	4933      	ldr	r1, [pc, #204]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055fc:	4b2e      	ldr	r3, [pc, #184]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005602:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800560a:	492b      	ldr	r1, [pc, #172]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800560c:	4313      	orrs	r3, r2
 800560e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d011      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800561e:	4b26      	ldr	r3, [pc, #152]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005624:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800562c:	4922      	ldr	r1, [pc, #136]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005638:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800563c:	d101      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800563e:	2301      	movs	r3, #1
 8005640:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800564e:	2301      	movs	r3, #1
 8005650:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800565e:	4b16      	ldr	r3, [pc, #88]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005664:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800566c:	4912      	ldr	r1, [pc, #72]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00b      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005680:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005686:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005690:	4909      	ldr	r1, [pc, #36]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d006      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 80d9 	beq.w	800585e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056ac:	4b02      	ldr	r3, [pc, #8]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a01      	ldr	r2, [pc, #4]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056b6:	e001      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80056b8:	40023800 	.word	0x40023800
 80056bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056be:	f7fc f9b7 	bl	8001a30 <HAL_GetTick>
 80056c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056c4:	e008      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056c6:	f7fc f9b3 	bl	8001a30 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b64      	cmp	r3, #100	@ 0x64
 80056d2:	d901      	bls.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e194      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056d8:	4b6c      	ldr	r3, [pc, #432]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f0      	bne.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d021      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d11d      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056f8:	4b64      	ldr	r3, [pc, #400]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056fe:	0c1b      	lsrs	r3, r3, #16
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005706:	4b61      	ldr	r3, [pc, #388]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800570c:	0e1b      	lsrs	r3, r3, #24
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	019a      	lsls	r2, r3, #6
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	041b      	lsls	r3, r3, #16
 800571e:	431a      	orrs	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	061b      	lsls	r3, r3, #24
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	071b      	lsls	r3, r3, #28
 800572c:	4957      	ldr	r1, [pc, #348]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d004      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005744:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005748:	d00a      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005752:	2b00      	cmp	r3, #0
 8005754:	d02e      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800575e:	d129      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005760:	4b4a      	ldr	r3, [pc, #296]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005766:	0c1b      	lsrs	r3, r3, #16
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800576e:	4b47      	ldr	r3, [pc, #284]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005774:	0f1b      	lsrs	r3, r3, #28
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	019a      	lsls	r2, r3, #6
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	041b      	lsls	r3, r3, #16
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	061b      	lsls	r3, r3, #24
 800578e:	431a      	orrs	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	071b      	lsls	r3, r3, #28
 8005794:	493d      	ldr	r1, [pc, #244]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800579c:	4b3b      	ldr	r3, [pc, #236]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800579e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057a2:	f023 021f 	bic.w	r2, r3, #31
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057aa:	3b01      	subs	r3, #1
 80057ac:	4937      	ldr	r1, [pc, #220]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01d      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80057c0:	4b32      	ldr	r3, [pc, #200]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057c6:	0e1b      	lsrs	r3, r3, #24
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057ce:	4b2f      	ldr	r3, [pc, #188]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057d4:	0f1b      	lsrs	r3, r3, #28
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	019a      	lsls	r2, r3, #6
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	041b      	lsls	r3, r3, #16
 80057e8:	431a      	orrs	r2, r3
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	061b      	lsls	r3, r3, #24
 80057ee:	431a      	orrs	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	071b      	lsls	r3, r3, #28
 80057f4:	4925      	ldr	r1, [pc, #148]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d011      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	019a      	lsls	r2, r3, #6
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	041b      	lsls	r3, r3, #16
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	061b      	lsls	r3, r3, #24
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	071b      	lsls	r3, r3, #28
 8005824:	4919      	ldr	r1, [pc, #100]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800582c:	4b17      	ldr	r3, [pc, #92]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a16      	ldr	r2, [pc, #88]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005832:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005838:	f7fc f8fa 	bl	8001a30 <HAL_GetTick>
 800583c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005840:	f7fc f8f6 	bl	8001a30 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b64      	cmp	r3, #100	@ 0x64
 800584c:	d901      	bls.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e0d7      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005852:	4b0e      	ldr	r3, [pc, #56]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	2b01      	cmp	r3, #1
 8005862:	f040 80cd 	bne.w	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005866:	4b09      	ldr	r3, [pc, #36]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a08      	ldr	r2, [pc, #32]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800586c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005872:	f7fc f8dd 	bl	8001a30 <HAL_GetTick>
 8005876:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005878:	e00a      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800587a:	f7fc f8d9 	bl	8001a30 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b64      	cmp	r3, #100	@ 0x64
 8005886:	d903      	bls.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e0ba      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800588c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005890:	4b5e      	ldr	r3, [pc, #376]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800589c:	d0ed      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d009      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d02e      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d12a      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058c6:	4b51      	ldr	r3, [pc, #324]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058cc:	0c1b      	lsrs	r3, r3, #16
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058d4:	4b4d      	ldr	r3, [pc, #308]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058da:	0f1b      	lsrs	r3, r3, #28
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	019a      	lsls	r2, r3, #6
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	041b      	lsls	r3, r3, #16
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	061b      	lsls	r3, r3, #24
 80058f4:	431a      	orrs	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	071b      	lsls	r3, r3, #28
 80058fa:	4944      	ldr	r1, [pc, #272]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005902:	4b42      	ldr	r3, [pc, #264]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005908:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005910:	3b01      	subs	r3, #1
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	493d      	ldr	r1, [pc, #244]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d022      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800592c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005930:	d11d      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005932:	4b36      	ldr	r3, [pc, #216]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005938:	0e1b      	lsrs	r3, r3, #24
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005940:	4b32      	ldr	r3, [pc, #200]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005946:	0f1b      	lsrs	r3, r3, #28
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	019a      	lsls	r2, r3, #6
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	041b      	lsls	r3, r3, #16
 800595a:	431a      	orrs	r2, r3
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	061b      	lsls	r3, r3, #24
 8005960:	431a      	orrs	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	071b      	lsls	r3, r3, #28
 8005966:	4929      	ldr	r1, [pc, #164]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b00      	cmp	r3, #0
 8005978:	d028      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800597a:	4b24      	ldr	r3, [pc, #144]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005980:	0e1b      	lsrs	r3, r3, #24
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005988:	4b20      	ldr	r3, [pc, #128]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598e:	0c1b      	lsrs	r3, r3, #16
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	019a      	lsls	r2, r3, #6
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	041b      	lsls	r3, r3, #16
 80059a0:	431a      	orrs	r2, r3
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	061b      	lsls	r3, r3, #24
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	071b      	lsls	r3, r3, #28
 80059ae:	4917      	ldr	r1, [pc, #92]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80059b6:	4b15      	ldr	r3, [pc, #84]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c4:	4911      	ldr	r1, [pc, #68]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80059cc:	4b0f      	ldr	r3, [pc, #60]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a0e      	ldr	r2, [pc, #56]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d8:	f7fc f82a 	bl	8001a30 <HAL_GetTick>
 80059dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059e0:	f7fc f826 	bl	8001a30 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b64      	cmp	r3, #100	@ 0x64
 80059ec:	d901      	bls.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e007      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059f2:	4b06      	ldr	r3, [pc, #24]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059fe:	d1ef      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3720      	adds	r7, #32
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40023800 	.word	0x40023800

08005a10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e040      	b.n	8005aa4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fb fdee 	bl	8001614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2224      	movs	r2, #36	@ 0x24
 8005a3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0201 	bic.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fb16 	bl	8006088 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f8af 	bl	8005bc0 <UART_SetConfig>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e01b      	b.n	8005aa4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fb95 	bl	80061cc <UART_CheckIdleState>
 8005aa2:	4603      	mov	r3, r0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08a      	sub	sp, #40	@ 0x28
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d177      	bne.n	8005bb4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <HAL_UART_Transmit+0x24>
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e070      	b.n	8005bb6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2221      	movs	r2, #33	@ 0x21
 8005ae0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ae2:	f7fb ffa5 	bl	8001a30 <HAL_GetTick>
 8005ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	88fa      	ldrh	r2, [r7, #6]
 8005aec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	88fa      	ldrh	r2, [r7, #6]
 8005af4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b00:	d108      	bne.n	8005b14 <HAL_UART_Transmit+0x68>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d104      	bne.n	8005b14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	e003      	b.n	8005b1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b1c:	e02f      	b.n	8005b7e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2200      	movs	r2, #0
 8005b26:	2180      	movs	r1, #128	@ 0x80
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 fba6 	bl	800627a <UART_WaitOnFlagUntilTimeout>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d004      	beq.n	8005b3e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e03b      	b.n	8005bb6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10b      	bne.n	8005b5c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	3302      	adds	r3, #2
 8005b58:	61bb      	str	r3, [r7, #24]
 8005b5a:	e007      	b.n	8005b6c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	781a      	ldrb	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1c9      	bne.n	8005b1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2200      	movs	r2, #0
 8005b92:	2140      	movs	r1, #64	@ 0x40
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 fb70 	bl	800627a <UART_WaitOnFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d004      	beq.n	8005baa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e005      	b.n	8005bb6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2220      	movs	r2, #32
 8005bae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	e000      	b.n	8005bb6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005bb4:	2302      	movs	r3, #2
  }
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3720      	adds	r7, #32
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4ba6      	ldr	r3, [pc, #664]	@ (8005e84 <UART_SetConfig+0x2c4>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	6979      	ldr	r1, [r7, #20]
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a94      	ldr	r2, [pc, #592]	@ (8005e88 <UART_SetConfig+0x2c8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d120      	bne.n	8005c7e <UART_SetConfig+0xbe>
 8005c3c:	4b93      	ldr	r3, [pc, #588]	@ (8005e8c <UART_SetConfig+0x2cc>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d816      	bhi.n	8005c78 <UART_SetConfig+0xb8>
 8005c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c50 <UART_SetConfig+0x90>)
 8005c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c50:	08005c61 	.word	0x08005c61
 8005c54:	08005c6d 	.word	0x08005c6d
 8005c58:	08005c67 	.word	0x08005c67
 8005c5c:	08005c73 	.word	0x08005c73
 8005c60:	2301      	movs	r3, #1
 8005c62:	77fb      	strb	r3, [r7, #31]
 8005c64:	e150      	b.n	8005f08 <UART_SetConfig+0x348>
 8005c66:	2302      	movs	r3, #2
 8005c68:	77fb      	strb	r3, [r7, #31]
 8005c6a:	e14d      	b.n	8005f08 <UART_SetConfig+0x348>
 8005c6c:	2304      	movs	r3, #4
 8005c6e:	77fb      	strb	r3, [r7, #31]
 8005c70:	e14a      	b.n	8005f08 <UART_SetConfig+0x348>
 8005c72:	2308      	movs	r3, #8
 8005c74:	77fb      	strb	r3, [r7, #31]
 8005c76:	e147      	b.n	8005f08 <UART_SetConfig+0x348>
 8005c78:	2310      	movs	r3, #16
 8005c7a:	77fb      	strb	r3, [r7, #31]
 8005c7c:	e144      	b.n	8005f08 <UART_SetConfig+0x348>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a83      	ldr	r2, [pc, #524]	@ (8005e90 <UART_SetConfig+0x2d0>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d132      	bne.n	8005cee <UART_SetConfig+0x12e>
 8005c88:	4b80      	ldr	r3, [pc, #512]	@ (8005e8c <UART_SetConfig+0x2cc>)
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c8e:	f003 030c 	and.w	r3, r3, #12
 8005c92:	2b0c      	cmp	r3, #12
 8005c94:	d828      	bhi.n	8005ce8 <UART_SetConfig+0x128>
 8005c96:	a201      	add	r2, pc, #4	@ (adr r2, 8005c9c <UART_SetConfig+0xdc>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005cd1 	.word	0x08005cd1
 8005ca0:	08005ce9 	.word	0x08005ce9
 8005ca4:	08005ce9 	.word	0x08005ce9
 8005ca8:	08005ce9 	.word	0x08005ce9
 8005cac:	08005cdd 	.word	0x08005cdd
 8005cb0:	08005ce9 	.word	0x08005ce9
 8005cb4:	08005ce9 	.word	0x08005ce9
 8005cb8:	08005ce9 	.word	0x08005ce9
 8005cbc:	08005cd7 	.word	0x08005cd7
 8005cc0:	08005ce9 	.word	0x08005ce9
 8005cc4:	08005ce9 	.word	0x08005ce9
 8005cc8:	08005ce9 	.word	0x08005ce9
 8005ccc:	08005ce3 	.word	0x08005ce3
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	77fb      	strb	r3, [r7, #31]
 8005cd4:	e118      	b.n	8005f08 <UART_SetConfig+0x348>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	77fb      	strb	r3, [r7, #31]
 8005cda:	e115      	b.n	8005f08 <UART_SetConfig+0x348>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	77fb      	strb	r3, [r7, #31]
 8005ce0:	e112      	b.n	8005f08 <UART_SetConfig+0x348>
 8005ce2:	2308      	movs	r3, #8
 8005ce4:	77fb      	strb	r3, [r7, #31]
 8005ce6:	e10f      	b.n	8005f08 <UART_SetConfig+0x348>
 8005ce8:	2310      	movs	r3, #16
 8005cea:	77fb      	strb	r3, [r7, #31]
 8005cec:	e10c      	b.n	8005f08 <UART_SetConfig+0x348>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a68      	ldr	r2, [pc, #416]	@ (8005e94 <UART_SetConfig+0x2d4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d120      	bne.n	8005d3a <UART_SetConfig+0x17a>
 8005cf8:	4b64      	ldr	r3, [pc, #400]	@ (8005e8c <UART_SetConfig+0x2cc>)
 8005cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cfe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d02:	2b30      	cmp	r3, #48	@ 0x30
 8005d04:	d013      	beq.n	8005d2e <UART_SetConfig+0x16e>
 8005d06:	2b30      	cmp	r3, #48	@ 0x30
 8005d08:	d814      	bhi.n	8005d34 <UART_SetConfig+0x174>
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	d009      	beq.n	8005d22 <UART_SetConfig+0x162>
 8005d0e:	2b20      	cmp	r3, #32
 8005d10:	d810      	bhi.n	8005d34 <UART_SetConfig+0x174>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <UART_SetConfig+0x15c>
 8005d16:	2b10      	cmp	r3, #16
 8005d18:	d006      	beq.n	8005d28 <UART_SetConfig+0x168>
 8005d1a:	e00b      	b.n	8005d34 <UART_SetConfig+0x174>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	77fb      	strb	r3, [r7, #31]
 8005d20:	e0f2      	b.n	8005f08 <UART_SetConfig+0x348>
 8005d22:	2302      	movs	r3, #2
 8005d24:	77fb      	strb	r3, [r7, #31]
 8005d26:	e0ef      	b.n	8005f08 <UART_SetConfig+0x348>
 8005d28:	2304      	movs	r3, #4
 8005d2a:	77fb      	strb	r3, [r7, #31]
 8005d2c:	e0ec      	b.n	8005f08 <UART_SetConfig+0x348>
 8005d2e:	2308      	movs	r3, #8
 8005d30:	77fb      	strb	r3, [r7, #31]
 8005d32:	e0e9      	b.n	8005f08 <UART_SetConfig+0x348>
 8005d34:	2310      	movs	r3, #16
 8005d36:	77fb      	strb	r3, [r7, #31]
 8005d38:	e0e6      	b.n	8005f08 <UART_SetConfig+0x348>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a56      	ldr	r2, [pc, #344]	@ (8005e98 <UART_SetConfig+0x2d8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d120      	bne.n	8005d86 <UART_SetConfig+0x1c6>
 8005d44:	4b51      	ldr	r3, [pc, #324]	@ (8005e8c <UART_SetConfig+0x2cc>)
 8005d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d50:	d013      	beq.n	8005d7a <UART_SetConfig+0x1ba>
 8005d52:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d54:	d814      	bhi.n	8005d80 <UART_SetConfig+0x1c0>
 8005d56:	2b80      	cmp	r3, #128	@ 0x80
 8005d58:	d009      	beq.n	8005d6e <UART_SetConfig+0x1ae>
 8005d5a:	2b80      	cmp	r3, #128	@ 0x80
 8005d5c:	d810      	bhi.n	8005d80 <UART_SetConfig+0x1c0>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <UART_SetConfig+0x1a8>
 8005d62:	2b40      	cmp	r3, #64	@ 0x40
 8005d64:	d006      	beq.n	8005d74 <UART_SetConfig+0x1b4>
 8005d66:	e00b      	b.n	8005d80 <UART_SetConfig+0x1c0>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	77fb      	strb	r3, [r7, #31]
 8005d6c:	e0cc      	b.n	8005f08 <UART_SetConfig+0x348>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	77fb      	strb	r3, [r7, #31]
 8005d72:	e0c9      	b.n	8005f08 <UART_SetConfig+0x348>
 8005d74:	2304      	movs	r3, #4
 8005d76:	77fb      	strb	r3, [r7, #31]
 8005d78:	e0c6      	b.n	8005f08 <UART_SetConfig+0x348>
 8005d7a:	2308      	movs	r3, #8
 8005d7c:	77fb      	strb	r3, [r7, #31]
 8005d7e:	e0c3      	b.n	8005f08 <UART_SetConfig+0x348>
 8005d80:	2310      	movs	r3, #16
 8005d82:	77fb      	strb	r3, [r7, #31]
 8005d84:	e0c0      	b.n	8005f08 <UART_SetConfig+0x348>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a44      	ldr	r2, [pc, #272]	@ (8005e9c <UART_SetConfig+0x2dc>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d125      	bne.n	8005ddc <UART_SetConfig+0x21c>
 8005d90:	4b3e      	ldr	r3, [pc, #248]	@ (8005e8c <UART_SetConfig+0x2cc>)
 8005d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d9e:	d017      	beq.n	8005dd0 <UART_SetConfig+0x210>
 8005da0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005da4:	d817      	bhi.n	8005dd6 <UART_SetConfig+0x216>
 8005da6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005daa:	d00b      	beq.n	8005dc4 <UART_SetConfig+0x204>
 8005dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005db0:	d811      	bhi.n	8005dd6 <UART_SetConfig+0x216>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <UART_SetConfig+0x1fe>
 8005db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dba:	d006      	beq.n	8005dca <UART_SetConfig+0x20a>
 8005dbc:	e00b      	b.n	8005dd6 <UART_SetConfig+0x216>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	77fb      	strb	r3, [r7, #31]
 8005dc2:	e0a1      	b.n	8005f08 <UART_SetConfig+0x348>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	77fb      	strb	r3, [r7, #31]
 8005dc8:	e09e      	b.n	8005f08 <UART_SetConfig+0x348>
 8005dca:	2304      	movs	r3, #4
 8005dcc:	77fb      	strb	r3, [r7, #31]
 8005dce:	e09b      	b.n	8005f08 <UART_SetConfig+0x348>
 8005dd0:	2308      	movs	r3, #8
 8005dd2:	77fb      	strb	r3, [r7, #31]
 8005dd4:	e098      	b.n	8005f08 <UART_SetConfig+0x348>
 8005dd6:	2310      	movs	r3, #16
 8005dd8:	77fb      	strb	r3, [r7, #31]
 8005dda:	e095      	b.n	8005f08 <UART_SetConfig+0x348>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a2f      	ldr	r2, [pc, #188]	@ (8005ea0 <UART_SetConfig+0x2e0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d125      	bne.n	8005e32 <UART_SetConfig+0x272>
 8005de6:	4b29      	ldr	r3, [pc, #164]	@ (8005e8c <UART_SetConfig+0x2cc>)
 8005de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005df0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005df4:	d017      	beq.n	8005e26 <UART_SetConfig+0x266>
 8005df6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dfa:	d817      	bhi.n	8005e2c <UART_SetConfig+0x26c>
 8005dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e00:	d00b      	beq.n	8005e1a <UART_SetConfig+0x25a>
 8005e02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e06:	d811      	bhi.n	8005e2c <UART_SetConfig+0x26c>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <UART_SetConfig+0x254>
 8005e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e10:	d006      	beq.n	8005e20 <UART_SetConfig+0x260>
 8005e12:	e00b      	b.n	8005e2c <UART_SetConfig+0x26c>
 8005e14:	2301      	movs	r3, #1
 8005e16:	77fb      	strb	r3, [r7, #31]
 8005e18:	e076      	b.n	8005f08 <UART_SetConfig+0x348>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	77fb      	strb	r3, [r7, #31]
 8005e1e:	e073      	b.n	8005f08 <UART_SetConfig+0x348>
 8005e20:	2304      	movs	r3, #4
 8005e22:	77fb      	strb	r3, [r7, #31]
 8005e24:	e070      	b.n	8005f08 <UART_SetConfig+0x348>
 8005e26:	2308      	movs	r3, #8
 8005e28:	77fb      	strb	r3, [r7, #31]
 8005e2a:	e06d      	b.n	8005f08 <UART_SetConfig+0x348>
 8005e2c:	2310      	movs	r3, #16
 8005e2e:	77fb      	strb	r3, [r7, #31]
 8005e30:	e06a      	b.n	8005f08 <UART_SetConfig+0x348>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea4 <UART_SetConfig+0x2e4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d138      	bne.n	8005eae <UART_SetConfig+0x2ee>
 8005e3c:	4b13      	ldr	r3, [pc, #76]	@ (8005e8c <UART_SetConfig+0x2cc>)
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e42:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005e46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e4a:	d017      	beq.n	8005e7c <UART_SetConfig+0x2bc>
 8005e4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e50:	d82a      	bhi.n	8005ea8 <UART_SetConfig+0x2e8>
 8005e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e56:	d00b      	beq.n	8005e70 <UART_SetConfig+0x2b0>
 8005e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e5c:	d824      	bhi.n	8005ea8 <UART_SetConfig+0x2e8>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <UART_SetConfig+0x2aa>
 8005e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e66:	d006      	beq.n	8005e76 <UART_SetConfig+0x2b6>
 8005e68:	e01e      	b.n	8005ea8 <UART_SetConfig+0x2e8>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	77fb      	strb	r3, [r7, #31]
 8005e6e:	e04b      	b.n	8005f08 <UART_SetConfig+0x348>
 8005e70:	2302      	movs	r3, #2
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e048      	b.n	8005f08 <UART_SetConfig+0x348>
 8005e76:	2304      	movs	r3, #4
 8005e78:	77fb      	strb	r3, [r7, #31]
 8005e7a:	e045      	b.n	8005f08 <UART_SetConfig+0x348>
 8005e7c:	2308      	movs	r3, #8
 8005e7e:	77fb      	strb	r3, [r7, #31]
 8005e80:	e042      	b.n	8005f08 <UART_SetConfig+0x348>
 8005e82:	bf00      	nop
 8005e84:	efff69f3 	.word	0xefff69f3
 8005e88:	40011000 	.word	0x40011000
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	40004400 	.word	0x40004400
 8005e94:	40004800 	.word	0x40004800
 8005e98:	40004c00 	.word	0x40004c00
 8005e9c:	40005000 	.word	0x40005000
 8005ea0:	40011400 	.word	0x40011400
 8005ea4:	40007800 	.word	0x40007800
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	e02c      	b.n	8005f08 <UART_SetConfig+0x348>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a72      	ldr	r2, [pc, #456]	@ (800607c <UART_SetConfig+0x4bc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d125      	bne.n	8005f04 <UART_SetConfig+0x344>
 8005eb8:	4b71      	ldr	r3, [pc, #452]	@ (8006080 <UART_SetConfig+0x4c0>)
 8005eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ebe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005ec2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005ec6:	d017      	beq.n	8005ef8 <UART_SetConfig+0x338>
 8005ec8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005ecc:	d817      	bhi.n	8005efe <UART_SetConfig+0x33e>
 8005ece:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ed2:	d00b      	beq.n	8005eec <UART_SetConfig+0x32c>
 8005ed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ed8:	d811      	bhi.n	8005efe <UART_SetConfig+0x33e>
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <UART_SetConfig+0x326>
 8005ede:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ee2:	d006      	beq.n	8005ef2 <UART_SetConfig+0x332>
 8005ee4:	e00b      	b.n	8005efe <UART_SetConfig+0x33e>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	77fb      	strb	r3, [r7, #31]
 8005eea:	e00d      	b.n	8005f08 <UART_SetConfig+0x348>
 8005eec:	2302      	movs	r3, #2
 8005eee:	77fb      	strb	r3, [r7, #31]
 8005ef0:	e00a      	b.n	8005f08 <UART_SetConfig+0x348>
 8005ef2:	2304      	movs	r3, #4
 8005ef4:	77fb      	strb	r3, [r7, #31]
 8005ef6:	e007      	b.n	8005f08 <UART_SetConfig+0x348>
 8005ef8:	2308      	movs	r3, #8
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e004      	b.n	8005f08 <UART_SetConfig+0x348>
 8005efe:	2310      	movs	r3, #16
 8005f00:	77fb      	strb	r3, [r7, #31]
 8005f02:	e001      	b.n	8005f08 <UART_SetConfig+0x348>
 8005f04:	2310      	movs	r3, #16
 8005f06:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f10:	d15b      	bne.n	8005fca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f12:	7ffb      	ldrb	r3, [r7, #31]
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d828      	bhi.n	8005f6a <UART_SetConfig+0x3aa>
 8005f18:	a201      	add	r2, pc, #4	@ (adr r2, 8005f20 <UART_SetConfig+0x360>)
 8005f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1e:	bf00      	nop
 8005f20:	08005f45 	.word	0x08005f45
 8005f24:	08005f4d 	.word	0x08005f4d
 8005f28:	08005f55 	.word	0x08005f55
 8005f2c:	08005f6b 	.word	0x08005f6b
 8005f30:	08005f5b 	.word	0x08005f5b
 8005f34:	08005f6b 	.word	0x08005f6b
 8005f38:	08005f6b 	.word	0x08005f6b
 8005f3c:	08005f6b 	.word	0x08005f6b
 8005f40:	08005f63 	.word	0x08005f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f44:	f7ff f94c 	bl	80051e0 <HAL_RCC_GetPCLK1Freq>
 8005f48:	61b8      	str	r0, [r7, #24]
        break;
 8005f4a:	e013      	b.n	8005f74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f4c:	f7ff f95c 	bl	8005208 <HAL_RCC_GetPCLK2Freq>
 8005f50:	61b8      	str	r0, [r7, #24]
        break;
 8005f52:	e00f      	b.n	8005f74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f54:	4b4b      	ldr	r3, [pc, #300]	@ (8006084 <UART_SetConfig+0x4c4>)
 8005f56:	61bb      	str	r3, [r7, #24]
        break;
 8005f58:	e00c      	b.n	8005f74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5a:	f7ff f86f 	bl	800503c <HAL_RCC_GetSysClockFreq>
 8005f5e:	61b8      	str	r0, [r7, #24]
        break;
 8005f60:	e008      	b.n	8005f74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f66:	61bb      	str	r3, [r7, #24]
        break;
 8005f68:	e004      	b.n	8005f74 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	77bb      	strb	r3, [r7, #30]
        break;
 8005f72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d074      	beq.n	8006064 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	005a      	lsls	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	085b      	lsrs	r3, r3, #1
 8005f84:	441a      	add	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	2b0f      	cmp	r3, #15
 8005f94:	d916      	bls.n	8005fc4 <UART_SetConfig+0x404>
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f9c:	d212      	bcs.n	8005fc4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f023 030f 	bic.w	r3, r3, #15
 8005fa6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	89fb      	ldrh	r3, [r7, #14]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	89fa      	ldrh	r2, [r7, #14]
 8005fc0:	60da      	str	r2, [r3, #12]
 8005fc2:	e04f      	b.n	8006064 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	77bb      	strb	r3, [r7, #30]
 8005fc8:	e04c      	b.n	8006064 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fca:	7ffb      	ldrb	r3, [r7, #31]
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d828      	bhi.n	8006022 <UART_SetConfig+0x462>
 8005fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd8 <UART_SetConfig+0x418>)
 8005fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd6:	bf00      	nop
 8005fd8:	08005ffd 	.word	0x08005ffd
 8005fdc:	08006005 	.word	0x08006005
 8005fe0:	0800600d 	.word	0x0800600d
 8005fe4:	08006023 	.word	0x08006023
 8005fe8:	08006013 	.word	0x08006013
 8005fec:	08006023 	.word	0x08006023
 8005ff0:	08006023 	.word	0x08006023
 8005ff4:	08006023 	.word	0x08006023
 8005ff8:	0800601b 	.word	0x0800601b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ffc:	f7ff f8f0 	bl	80051e0 <HAL_RCC_GetPCLK1Freq>
 8006000:	61b8      	str	r0, [r7, #24]
        break;
 8006002:	e013      	b.n	800602c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006004:	f7ff f900 	bl	8005208 <HAL_RCC_GetPCLK2Freq>
 8006008:	61b8      	str	r0, [r7, #24]
        break;
 800600a:	e00f      	b.n	800602c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800600c:	4b1d      	ldr	r3, [pc, #116]	@ (8006084 <UART_SetConfig+0x4c4>)
 800600e:	61bb      	str	r3, [r7, #24]
        break;
 8006010:	e00c      	b.n	800602c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006012:	f7ff f813 	bl	800503c <HAL_RCC_GetSysClockFreq>
 8006016:	61b8      	str	r0, [r7, #24]
        break;
 8006018:	e008      	b.n	800602c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800601a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800601e:	61bb      	str	r3, [r7, #24]
        break;
 8006020:	e004      	b.n	800602c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	77bb      	strb	r3, [r7, #30]
        break;
 800602a:	bf00      	nop
    }

    if (pclk != 0U)
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d018      	beq.n	8006064 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	085a      	lsrs	r2, r3, #1
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	441a      	add	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	fbb2 f3f3 	udiv	r3, r2, r3
 8006044:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	2b0f      	cmp	r3, #15
 800604a:	d909      	bls.n	8006060 <UART_SetConfig+0x4a0>
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006052:	d205      	bcs.n	8006060 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	b29a      	uxth	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60da      	str	r2, [r3, #12]
 800605e:	e001      	b.n	8006064 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006070:	7fbb      	ldrb	r3, [r7, #30]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3720      	adds	r7, #32
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	40007c00 	.word	0x40007c00
 8006080:	40023800 	.word	0x40023800
 8006084:	00f42400 	.word	0x00f42400

08006088 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613e:	f003 0320 	and.w	r3, r3, #32
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01a      	beq.n	800619e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006182:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006186:	d10a      	bne.n	800619e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	605a      	str	r2, [r3, #4]
  }
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b08c      	sub	sp, #48	@ 0x30
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061dc:	f7fb fc28 	bl	8001a30 <HAL_GetTick>
 80061e0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0308 	and.w	r3, r3, #8
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d12e      	bne.n	800624e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	2200      	movs	r2, #0
 80061fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f83b 	bl	800627a <UART_WaitOnFlagUntilTimeout>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d021      	beq.n	800624e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	60fb      	str	r3, [r7, #12]
   return(result);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800621e:	623b      	str	r3, [r7, #32]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	61fb      	str	r3, [r7, #28]
 800622a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	69b9      	ldr	r1, [r7, #24]
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	e841 2300 	strex	r3, r2, [r1]
 8006234:	617b      	str	r3, [r7, #20]
   return(result);
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e6      	bne.n	800620a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e011      	b.n	8006272 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3728      	adds	r7, #40	@ 0x28
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	603b      	str	r3, [r7, #0]
 8006286:	4613      	mov	r3, r2
 8006288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628a:	e04f      	b.n	800632c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006292:	d04b      	beq.n	800632c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006294:	f7fb fbcc 	bl	8001a30 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d302      	bcc.n	80062aa <UART_WaitOnFlagUntilTimeout+0x30>
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e04e      	b.n	800634c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d037      	beq.n	800632c <UART_WaitOnFlagUntilTimeout+0xb2>
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b80      	cmp	r3, #128	@ 0x80
 80062c0:	d034      	beq.n	800632c <UART_WaitOnFlagUntilTimeout+0xb2>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b40      	cmp	r3, #64	@ 0x40
 80062c6:	d031      	beq.n	800632c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f003 0308 	and.w	r3, r3, #8
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	d110      	bne.n	80062f8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2208      	movs	r2, #8
 80062dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 f838 	bl	8006354 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2208      	movs	r2, #8
 80062e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e029      	b.n	800634c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006302:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006306:	d111      	bne.n	800632c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006310:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f81e 	bl	8006354 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2220      	movs	r2, #32
 800631c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e00f      	b.n	800634c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69da      	ldr	r2, [r3, #28]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4013      	ands	r3, r2
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	429a      	cmp	r2, r3
 800633a:	bf0c      	ite	eq
 800633c:	2301      	moveq	r3, #1
 800633e:	2300      	movne	r3, #0
 8006340:	b2db      	uxtb	r3, r3
 8006342:	461a      	mov	r2, r3
 8006344:	79fb      	ldrb	r3, [r7, #7]
 8006346:	429a      	cmp	r2, r3
 8006348:	d0a0      	beq.n	800628c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006354:	b480      	push	{r7}
 8006356:	b095      	sub	sp, #84	@ 0x54
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800636a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006370:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800637a:	643b      	str	r3, [r7, #64]	@ 0x40
 800637c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006380:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1e6      	bne.n	800635c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3308      	adds	r3, #8
 8006394:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	61fb      	str	r3, [r7, #28]
   return(result);
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f023 0301 	bic.w	r3, r3, #1
 80063a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3308      	adds	r3, #8
 80063ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e5      	bne.n	800638e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d118      	bne.n	80063fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f023 0310 	bic.w	r3, r3, #16
 80063de:	647b      	str	r3, [r7, #68]	@ 0x44
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063e8:	61bb      	str	r3, [r7, #24]
 80063ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6979      	ldr	r1, [r7, #20]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	613b      	str	r3, [r7, #16]
   return(result);
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e6      	bne.n	80063ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006410:	bf00      	nop
 8006412:	3754      	adds	r7, #84	@ 0x54
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <__cvt>:
 800641c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006420:	ec57 6b10 	vmov	r6, r7, d0
 8006424:	2f00      	cmp	r7, #0
 8006426:	460c      	mov	r4, r1
 8006428:	4619      	mov	r1, r3
 800642a:	463b      	mov	r3, r7
 800642c:	bfbb      	ittet	lt
 800642e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006432:	461f      	movlt	r7, r3
 8006434:	2300      	movge	r3, #0
 8006436:	232d      	movlt	r3, #45	@ 0x2d
 8006438:	700b      	strb	r3, [r1, #0]
 800643a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800643c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006440:	4691      	mov	r9, r2
 8006442:	f023 0820 	bic.w	r8, r3, #32
 8006446:	bfbc      	itt	lt
 8006448:	4632      	movlt	r2, r6
 800644a:	4616      	movlt	r6, r2
 800644c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006450:	d005      	beq.n	800645e <__cvt+0x42>
 8006452:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006456:	d100      	bne.n	800645a <__cvt+0x3e>
 8006458:	3401      	adds	r4, #1
 800645a:	2102      	movs	r1, #2
 800645c:	e000      	b.n	8006460 <__cvt+0x44>
 800645e:	2103      	movs	r1, #3
 8006460:	ab03      	add	r3, sp, #12
 8006462:	9301      	str	r3, [sp, #4]
 8006464:	ab02      	add	r3, sp, #8
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	ec47 6b10 	vmov	d0, r6, r7
 800646c:	4653      	mov	r3, sl
 800646e:	4622      	mov	r2, r4
 8006470:	f000 ff3e 	bl	80072f0 <_dtoa_r>
 8006474:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006478:	4605      	mov	r5, r0
 800647a:	d119      	bne.n	80064b0 <__cvt+0x94>
 800647c:	f019 0f01 	tst.w	r9, #1
 8006480:	d00e      	beq.n	80064a0 <__cvt+0x84>
 8006482:	eb00 0904 	add.w	r9, r0, r4
 8006486:	2200      	movs	r2, #0
 8006488:	2300      	movs	r3, #0
 800648a:	4630      	mov	r0, r6
 800648c:	4639      	mov	r1, r7
 800648e:	f7fa fb3b 	bl	8000b08 <__aeabi_dcmpeq>
 8006492:	b108      	cbz	r0, 8006498 <__cvt+0x7c>
 8006494:	f8cd 900c 	str.w	r9, [sp, #12]
 8006498:	2230      	movs	r2, #48	@ 0x30
 800649a:	9b03      	ldr	r3, [sp, #12]
 800649c:	454b      	cmp	r3, r9
 800649e:	d31e      	bcc.n	80064de <__cvt+0xc2>
 80064a0:	9b03      	ldr	r3, [sp, #12]
 80064a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064a4:	1b5b      	subs	r3, r3, r5
 80064a6:	4628      	mov	r0, r5
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	b004      	add	sp, #16
 80064ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064b4:	eb00 0904 	add.w	r9, r0, r4
 80064b8:	d1e5      	bne.n	8006486 <__cvt+0x6a>
 80064ba:	7803      	ldrb	r3, [r0, #0]
 80064bc:	2b30      	cmp	r3, #48	@ 0x30
 80064be:	d10a      	bne.n	80064d6 <__cvt+0xba>
 80064c0:	2200      	movs	r2, #0
 80064c2:	2300      	movs	r3, #0
 80064c4:	4630      	mov	r0, r6
 80064c6:	4639      	mov	r1, r7
 80064c8:	f7fa fb1e 	bl	8000b08 <__aeabi_dcmpeq>
 80064cc:	b918      	cbnz	r0, 80064d6 <__cvt+0xba>
 80064ce:	f1c4 0401 	rsb	r4, r4, #1
 80064d2:	f8ca 4000 	str.w	r4, [sl]
 80064d6:	f8da 3000 	ldr.w	r3, [sl]
 80064da:	4499      	add	r9, r3
 80064dc:	e7d3      	b.n	8006486 <__cvt+0x6a>
 80064de:	1c59      	adds	r1, r3, #1
 80064e0:	9103      	str	r1, [sp, #12]
 80064e2:	701a      	strb	r2, [r3, #0]
 80064e4:	e7d9      	b.n	800649a <__cvt+0x7e>

080064e6 <__exponent>:
 80064e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064e8:	2900      	cmp	r1, #0
 80064ea:	bfba      	itte	lt
 80064ec:	4249      	neglt	r1, r1
 80064ee:	232d      	movlt	r3, #45	@ 0x2d
 80064f0:	232b      	movge	r3, #43	@ 0x2b
 80064f2:	2909      	cmp	r1, #9
 80064f4:	7002      	strb	r2, [r0, #0]
 80064f6:	7043      	strb	r3, [r0, #1]
 80064f8:	dd29      	ble.n	800654e <__exponent+0x68>
 80064fa:	f10d 0307 	add.w	r3, sp, #7
 80064fe:	461d      	mov	r5, r3
 8006500:	270a      	movs	r7, #10
 8006502:	461a      	mov	r2, r3
 8006504:	fbb1 f6f7 	udiv	r6, r1, r7
 8006508:	fb07 1416 	mls	r4, r7, r6, r1
 800650c:	3430      	adds	r4, #48	@ 0x30
 800650e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006512:	460c      	mov	r4, r1
 8006514:	2c63      	cmp	r4, #99	@ 0x63
 8006516:	f103 33ff 	add.w	r3, r3, #4294967295
 800651a:	4631      	mov	r1, r6
 800651c:	dcf1      	bgt.n	8006502 <__exponent+0x1c>
 800651e:	3130      	adds	r1, #48	@ 0x30
 8006520:	1e94      	subs	r4, r2, #2
 8006522:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006526:	1c41      	adds	r1, r0, #1
 8006528:	4623      	mov	r3, r4
 800652a:	42ab      	cmp	r3, r5
 800652c:	d30a      	bcc.n	8006544 <__exponent+0x5e>
 800652e:	f10d 0309 	add.w	r3, sp, #9
 8006532:	1a9b      	subs	r3, r3, r2
 8006534:	42ac      	cmp	r4, r5
 8006536:	bf88      	it	hi
 8006538:	2300      	movhi	r3, #0
 800653a:	3302      	adds	r3, #2
 800653c:	4403      	add	r3, r0
 800653e:	1a18      	subs	r0, r3, r0
 8006540:	b003      	add	sp, #12
 8006542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006544:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006548:	f801 6f01 	strb.w	r6, [r1, #1]!
 800654c:	e7ed      	b.n	800652a <__exponent+0x44>
 800654e:	2330      	movs	r3, #48	@ 0x30
 8006550:	3130      	adds	r1, #48	@ 0x30
 8006552:	7083      	strb	r3, [r0, #2]
 8006554:	70c1      	strb	r1, [r0, #3]
 8006556:	1d03      	adds	r3, r0, #4
 8006558:	e7f1      	b.n	800653e <__exponent+0x58>
	...

0800655c <_printf_float>:
 800655c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006560:	b08d      	sub	sp, #52	@ 0x34
 8006562:	460c      	mov	r4, r1
 8006564:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006568:	4616      	mov	r6, r2
 800656a:	461f      	mov	r7, r3
 800656c:	4605      	mov	r5, r0
 800656e:	f000 fdbd 	bl	80070ec <_localeconv_r>
 8006572:	6803      	ldr	r3, [r0, #0]
 8006574:	9304      	str	r3, [sp, #16]
 8006576:	4618      	mov	r0, r3
 8006578:	f7f9 fe9a 	bl	80002b0 <strlen>
 800657c:	2300      	movs	r3, #0
 800657e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006580:	f8d8 3000 	ldr.w	r3, [r8]
 8006584:	9005      	str	r0, [sp, #20]
 8006586:	3307      	adds	r3, #7
 8006588:	f023 0307 	bic.w	r3, r3, #7
 800658c:	f103 0208 	add.w	r2, r3, #8
 8006590:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006594:	f8d4 b000 	ldr.w	fp, [r4]
 8006598:	f8c8 2000 	str.w	r2, [r8]
 800659c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80065a4:	9307      	str	r3, [sp, #28]
 80065a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80065aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80065ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065b2:	4b9c      	ldr	r3, [pc, #624]	@ (8006824 <_printf_float+0x2c8>)
 80065b4:	f04f 32ff 	mov.w	r2, #4294967295
 80065b8:	f7fa fad8 	bl	8000b6c <__aeabi_dcmpun>
 80065bc:	bb70      	cbnz	r0, 800661c <_printf_float+0xc0>
 80065be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065c2:	4b98      	ldr	r3, [pc, #608]	@ (8006824 <_printf_float+0x2c8>)
 80065c4:	f04f 32ff 	mov.w	r2, #4294967295
 80065c8:	f7fa fab2 	bl	8000b30 <__aeabi_dcmple>
 80065cc:	bb30      	cbnz	r0, 800661c <_printf_float+0xc0>
 80065ce:	2200      	movs	r2, #0
 80065d0:	2300      	movs	r3, #0
 80065d2:	4640      	mov	r0, r8
 80065d4:	4649      	mov	r1, r9
 80065d6:	f7fa faa1 	bl	8000b1c <__aeabi_dcmplt>
 80065da:	b110      	cbz	r0, 80065e2 <_printf_float+0x86>
 80065dc:	232d      	movs	r3, #45	@ 0x2d
 80065de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065e2:	4a91      	ldr	r2, [pc, #580]	@ (8006828 <_printf_float+0x2cc>)
 80065e4:	4b91      	ldr	r3, [pc, #580]	@ (800682c <_printf_float+0x2d0>)
 80065e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80065ea:	bf8c      	ite	hi
 80065ec:	4690      	movhi	r8, r2
 80065ee:	4698      	movls	r8, r3
 80065f0:	2303      	movs	r3, #3
 80065f2:	6123      	str	r3, [r4, #16]
 80065f4:	f02b 0304 	bic.w	r3, fp, #4
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	f04f 0900 	mov.w	r9, #0
 80065fe:	9700      	str	r7, [sp, #0]
 8006600:	4633      	mov	r3, r6
 8006602:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006604:	4621      	mov	r1, r4
 8006606:	4628      	mov	r0, r5
 8006608:	f000 f9d2 	bl	80069b0 <_printf_common>
 800660c:	3001      	adds	r0, #1
 800660e:	f040 808d 	bne.w	800672c <_printf_float+0x1d0>
 8006612:	f04f 30ff 	mov.w	r0, #4294967295
 8006616:	b00d      	add	sp, #52	@ 0x34
 8006618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661c:	4642      	mov	r2, r8
 800661e:	464b      	mov	r3, r9
 8006620:	4640      	mov	r0, r8
 8006622:	4649      	mov	r1, r9
 8006624:	f7fa faa2 	bl	8000b6c <__aeabi_dcmpun>
 8006628:	b140      	cbz	r0, 800663c <_printf_float+0xe0>
 800662a:	464b      	mov	r3, r9
 800662c:	2b00      	cmp	r3, #0
 800662e:	bfbc      	itt	lt
 8006630:	232d      	movlt	r3, #45	@ 0x2d
 8006632:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006636:	4a7e      	ldr	r2, [pc, #504]	@ (8006830 <_printf_float+0x2d4>)
 8006638:	4b7e      	ldr	r3, [pc, #504]	@ (8006834 <_printf_float+0x2d8>)
 800663a:	e7d4      	b.n	80065e6 <_printf_float+0x8a>
 800663c:	6863      	ldr	r3, [r4, #4]
 800663e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006642:	9206      	str	r2, [sp, #24]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	d13b      	bne.n	80066c0 <_printf_float+0x164>
 8006648:	2306      	movs	r3, #6
 800664a:	6063      	str	r3, [r4, #4]
 800664c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006650:	2300      	movs	r3, #0
 8006652:	6022      	str	r2, [r4, #0]
 8006654:	9303      	str	r3, [sp, #12]
 8006656:	ab0a      	add	r3, sp, #40	@ 0x28
 8006658:	e9cd a301 	strd	sl, r3, [sp, #4]
 800665c:	ab09      	add	r3, sp, #36	@ 0x24
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	6861      	ldr	r1, [r4, #4]
 8006662:	ec49 8b10 	vmov	d0, r8, r9
 8006666:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800666a:	4628      	mov	r0, r5
 800666c:	f7ff fed6 	bl	800641c <__cvt>
 8006670:	9b06      	ldr	r3, [sp, #24]
 8006672:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006674:	2b47      	cmp	r3, #71	@ 0x47
 8006676:	4680      	mov	r8, r0
 8006678:	d129      	bne.n	80066ce <_printf_float+0x172>
 800667a:	1cc8      	adds	r0, r1, #3
 800667c:	db02      	blt.n	8006684 <_printf_float+0x128>
 800667e:	6863      	ldr	r3, [r4, #4]
 8006680:	4299      	cmp	r1, r3
 8006682:	dd41      	ble.n	8006708 <_printf_float+0x1ac>
 8006684:	f1aa 0a02 	sub.w	sl, sl, #2
 8006688:	fa5f fa8a 	uxtb.w	sl, sl
 800668c:	3901      	subs	r1, #1
 800668e:	4652      	mov	r2, sl
 8006690:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006694:	9109      	str	r1, [sp, #36]	@ 0x24
 8006696:	f7ff ff26 	bl	80064e6 <__exponent>
 800669a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800669c:	1813      	adds	r3, r2, r0
 800669e:	2a01      	cmp	r2, #1
 80066a0:	4681      	mov	r9, r0
 80066a2:	6123      	str	r3, [r4, #16]
 80066a4:	dc02      	bgt.n	80066ac <_printf_float+0x150>
 80066a6:	6822      	ldr	r2, [r4, #0]
 80066a8:	07d2      	lsls	r2, r2, #31
 80066aa:	d501      	bpl.n	80066b0 <_printf_float+0x154>
 80066ac:	3301      	adds	r3, #1
 80066ae:	6123      	str	r3, [r4, #16]
 80066b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0a2      	beq.n	80065fe <_printf_float+0xa2>
 80066b8:	232d      	movs	r3, #45	@ 0x2d
 80066ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066be:	e79e      	b.n	80065fe <_printf_float+0xa2>
 80066c0:	9a06      	ldr	r2, [sp, #24]
 80066c2:	2a47      	cmp	r2, #71	@ 0x47
 80066c4:	d1c2      	bne.n	800664c <_printf_float+0xf0>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1c0      	bne.n	800664c <_printf_float+0xf0>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e7bd      	b.n	800664a <_printf_float+0xee>
 80066ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066d2:	d9db      	bls.n	800668c <_printf_float+0x130>
 80066d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80066d8:	d118      	bne.n	800670c <_printf_float+0x1b0>
 80066da:	2900      	cmp	r1, #0
 80066dc:	6863      	ldr	r3, [r4, #4]
 80066de:	dd0b      	ble.n	80066f8 <_printf_float+0x19c>
 80066e0:	6121      	str	r1, [r4, #16]
 80066e2:	b913      	cbnz	r3, 80066ea <_printf_float+0x18e>
 80066e4:	6822      	ldr	r2, [r4, #0]
 80066e6:	07d0      	lsls	r0, r2, #31
 80066e8:	d502      	bpl.n	80066f0 <_printf_float+0x194>
 80066ea:	3301      	adds	r3, #1
 80066ec:	440b      	add	r3, r1
 80066ee:	6123      	str	r3, [r4, #16]
 80066f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80066f2:	f04f 0900 	mov.w	r9, #0
 80066f6:	e7db      	b.n	80066b0 <_printf_float+0x154>
 80066f8:	b913      	cbnz	r3, 8006700 <_printf_float+0x1a4>
 80066fa:	6822      	ldr	r2, [r4, #0]
 80066fc:	07d2      	lsls	r2, r2, #31
 80066fe:	d501      	bpl.n	8006704 <_printf_float+0x1a8>
 8006700:	3302      	adds	r3, #2
 8006702:	e7f4      	b.n	80066ee <_printf_float+0x192>
 8006704:	2301      	movs	r3, #1
 8006706:	e7f2      	b.n	80066ee <_printf_float+0x192>
 8006708:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800670c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800670e:	4299      	cmp	r1, r3
 8006710:	db05      	blt.n	800671e <_printf_float+0x1c2>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	6121      	str	r1, [r4, #16]
 8006716:	07d8      	lsls	r0, r3, #31
 8006718:	d5ea      	bpl.n	80066f0 <_printf_float+0x194>
 800671a:	1c4b      	adds	r3, r1, #1
 800671c:	e7e7      	b.n	80066ee <_printf_float+0x192>
 800671e:	2900      	cmp	r1, #0
 8006720:	bfd4      	ite	le
 8006722:	f1c1 0202 	rsble	r2, r1, #2
 8006726:	2201      	movgt	r2, #1
 8006728:	4413      	add	r3, r2
 800672a:	e7e0      	b.n	80066ee <_printf_float+0x192>
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	055a      	lsls	r2, r3, #21
 8006730:	d407      	bmi.n	8006742 <_printf_float+0x1e6>
 8006732:	6923      	ldr	r3, [r4, #16]
 8006734:	4642      	mov	r2, r8
 8006736:	4631      	mov	r1, r6
 8006738:	4628      	mov	r0, r5
 800673a:	47b8      	blx	r7
 800673c:	3001      	adds	r0, #1
 800673e:	d12b      	bne.n	8006798 <_printf_float+0x23c>
 8006740:	e767      	b.n	8006612 <_printf_float+0xb6>
 8006742:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006746:	f240 80dd 	bls.w	8006904 <_printf_float+0x3a8>
 800674a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800674e:	2200      	movs	r2, #0
 8006750:	2300      	movs	r3, #0
 8006752:	f7fa f9d9 	bl	8000b08 <__aeabi_dcmpeq>
 8006756:	2800      	cmp	r0, #0
 8006758:	d033      	beq.n	80067c2 <_printf_float+0x266>
 800675a:	4a37      	ldr	r2, [pc, #220]	@ (8006838 <_printf_float+0x2dc>)
 800675c:	2301      	movs	r3, #1
 800675e:	4631      	mov	r1, r6
 8006760:	4628      	mov	r0, r5
 8006762:	47b8      	blx	r7
 8006764:	3001      	adds	r0, #1
 8006766:	f43f af54 	beq.w	8006612 <_printf_float+0xb6>
 800676a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800676e:	4543      	cmp	r3, r8
 8006770:	db02      	blt.n	8006778 <_printf_float+0x21c>
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	07d8      	lsls	r0, r3, #31
 8006776:	d50f      	bpl.n	8006798 <_printf_float+0x23c>
 8006778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800677c:	4631      	mov	r1, r6
 800677e:	4628      	mov	r0, r5
 8006780:	47b8      	blx	r7
 8006782:	3001      	adds	r0, #1
 8006784:	f43f af45 	beq.w	8006612 <_printf_float+0xb6>
 8006788:	f04f 0900 	mov.w	r9, #0
 800678c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006790:	f104 0a1a 	add.w	sl, r4, #26
 8006794:	45c8      	cmp	r8, r9
 8006796:	dc09      	bgt.n	80067ac <_printf_float+0x250>
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	079b      	lsls	r3, r3, #30
 800679c:	f100 8103 	bmi.w	80069a6 <_printf_float+0x44a>
 80067a0:	68e0      	ldr	r0, [r4, #12]
 80067a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067a4:	4298      	cmp	r0, r3
 80067a6:	bfb8      	it	lt
 80067a8:	4618      	movlt	r0, r3
 80067aa:	e734      	b.n	8006616 <_printf_float+0xba>
 80067ac:	2301      	movs	r3, #1
 80067ae:	4652      	mov	r2, sl
 80067b0:	4631      	mov	r1, r6
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b8      	blx	r7
 80067b6:	3001      	adds	r0, #1
 80067b8:	f43f af2b 	beq.w	8006612 <_printf_float+0xb6>
 80067bc:	f109 0901 	add.w	r9, r9, #1
 80067c0:	e7e8      	b.n	8006794 <_printf_float+0x238>
 80067c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	dc39      	bgt.n	800683c <_printf_float+0x2e0>
 80067c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006838 <_printf_float+0x2dc>)
 80067ca:	2301      	movs	r3, #1
 80067cc:	4631      	mov	r1, r6
 80067ce:	4628      	mov	r0, r5
 80067d0:	47b8      	blx	r7
 80067d2:	3001      	adds	r0, #1
 80067d4:	f43f af1d 	beq.w	8006612 <_printf_float+0xb6>
 80067d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80067dc:	ea59 0303 	orrs.w	r3, r9, r3
 80067e0:	d102      	bne.n	80067e8 <_printf_float+0x28c>
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	07d9      	lsls	r1, r3, #31
 80067e6:	d5d7      	bpl.n	8006798 <_printf_float+0x23c>
 80067e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067ec:	4631      	mov	r1, r6
 80067ee:	4628      	mov	r0, r5
 80067f0:	47b8      	blx	r7
 80067f2:	3001      	adds	r0, #1
 80067f4:	f43f af0d 	beq.w	8006612 <_printf_float+0xb6>
 80067f8:	f04f 0a00 	mov.w	sl, #0
 80067fc:	f104 0b1a 	add.w	fp, r4, #26
 8006800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006802:	425b      	negs	r3, r3
 8006804:	4553      	cmp	r3, sl
 8006806:	dc01      	bgt.n	800680c <_printf_float+0x2b0>
 8006808:	464b      	mov	r3, r9
 800680a:	e793      	b.n	8006734 <_printf_float+0x1d8>
 800680c:	2301      	movs	r3, #1
 800680e:	465a      	mov	r2, fp
 8006810:	4631      	mov	r1, r6
 8006812:	4628      	mov	r0, r5
 8006814:	47b8      	blx	r7
 8006816:	3001      	adds	r0, #1
 8006818:	f43f aefb 	beq.w	8006612 <_printf_float+0xb6>
 800681c:	f10a 0a01 	add.w	sl, sl, #1
 8006820:	e7ee      	b.n	8006800 <_printf_float+0x2a4>
 8006822:	bf00      	nop
 8006824:	7fefffff 	.word	0x7fefffff
 8006828:	08008ef8 	.word	0x08008ef8
 800682c:	08008ef4 	.word	0x08008ef4
 8006830:	08008f00 	.word	0x08008f00
 8006834:	08008efc 	.word	0x08008efc
 8006838:	08008f04 	.word	0x08008f04
 800683c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800683e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006842:	4553      	cmp	r3, sl
 8006844:	bfa8      	it	ge
 8006846:	4653      	movge	r3, sl
 8006848:	2b00      	cmp	r3, #0
 800684a:	4699      	mov	r9, r3
 800684c:	dc36      	bgt.n	80068bc <_printf_float+0x360>
 800684e:	f04f 0b00 	mov.w	fp, #0
 8006852:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006856:	f104 021a 	add.w	r2, r4, #26
 800685a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800685c:	9306      	str	r3, [sp, #24]
 800685e:	eba3 0309 	sub.w	r3, r3, r9
 8006862:	455b      	cmp	r3, fp
 8006864:	dc31      	bgt.n	80068ca <_printf_float+0x36e>
 8006866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006868:	459a      	cmp	sl, r3
 800686a:	dc3a      	bgt.n	80068e2 <_printf_float+0x386>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	07da      	lsls	r2, r3, #31
 8006870:	d437      	bmi.n	80068e2 <_printf_float+0x386>
 8006872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006874:	ebaa 0903 	sub.w	r9, sl, r3
 8006878:	9b06      	ldr	r3, [sp, #24]
 800687a:	ebaa 0303 	sub.w	r3, sl, r3
 800687e:	4599      	cmp	r9, r3
 8006880:	bfa8      	it	ge
 8006882:	4699      	movge	r9, r3
 8006884:	f1b9 0f00 	cmp.w	r9, #0
 8006888:	dc33      	bgt.n	80068f2 <_printf_float+0x396>
 800688a:	f04f 0800 	mov.w	r8, #0
 800688e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006892:	f104 0b1a 	add.w	fp, r4, #26
 8006896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006898:	ebaa 0303 	sub.w	r3, sl, r3
 800689c:	eba3 0309 	sub.w	r3, r3, r9
 80068a0:	4543      	cmp	r3, r8
 80068a2:	f77f af79 	ble.w	8006798 <_printf_float+0x23c>
 80068a6:	2301      	movs	r3, #1
 80068a8:	465a      	mov	r2, fp
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	f43f aeae 	beq.w	8006612 <_printf_float+0xb6>
 80068b6:	f108 0801 	add.w	r8, r8, #1
 80068ba:	e7ec      	b.n	8006896 <_printf_float+0x33a>
 80068bc:	4642      	mov	r2, r8
 80068be:	4631      	mov	r1, r6
 80068c0:	4628      	mov	r0, r5
 80068c2:	47b8      	blx	r7
 80068c4:	3001      	adds	r0, #1
 80068c6:	d1c2      	bne.n	800684e <_printf_float+0x2f2>
 80068c8:	e6a3      	b.n	8006612 <_printf_float+0xb6>
 80068ca:	2301      	movs	r3, #1
 80068cc:	4631      	mov	r1, r6
 80068ce:	4628      	mov	r0, r5
 80068d0:	9206      	str	r2, [sp, #24]
 80068d2:	47b8      	blx	r7
 80068d4:	3001      	adds	r0, #1
 80068d6:	f43f ae9c 	beq.w	8006612 <_printf_float+0xb6>
 80068da:	9a06      	ldr	r2, [sp, #24]
 80068dc:	f10b 0b01 	add.w	fp, fp, #1
 80068e0:	e7bb      	b.n	800685a <_printf_float+0x2fe>
 80068e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068e6:	4631      	mov	r1, r6
 80068e8:	4628      	mov	r0, r5
 80068ea:	47b8      	blx	r7
 80068ec:	3001      	adds	r0, #1
 80068ee:	d1c0      	bne.n	8006872 <_printf_float+0x316>
 80068f0:	e68f      	b.n	8006612 <_printf_float+0xb6>
 80068f2:	9a06      	ldr	r2, [sp, #24]
 80068f4:	464b      	mov	r3, r9
 80068f6:	4442      	add	r2, r8
 80068f8:	4631      	mov	r1, r6
 80068fa:	4628      	mov	r0, r5
 80068fc:	47b8      	blx	r7
 80068fe:	3001      	adds	r0, #1
 8006900:	d1c3      	bne.n	800688a <_printf_float+0x32e>
 8006902:	e686      	b.n	8006612 <_printf_float+0xb6>
 8006904:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006908:	f1ba 0f01 	cmp.w	sl, #1
 800690c:	dc01      	bgt.n	8006912 <_printf_float+0x3b6>
 800690e:	07db      	lsls	r3, r3, #31
 8006910:	d536      	bpl.n	8006980 <_printf_float+0x424>
 8006912:	2301      	movs	r3, #1
 8006914:	4642      	mov	r2, r8
 8006916:	4631      	mov	r1, r6
 8006918:	4628      	mov	r0, r5
 800691a:	47b8      	blx	r7
 800691c:	3001      	adds	r0, #1
 800691e:	f43f ae78 	beq.w	8006612 <_printf_float+0xb6>
 8006922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006926:	4631      	mov	r1, r6
 8006928:	4628      	mov	r0, r5
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	f43f ae70 	beq.w	8006612 <_printf_float+0xb6>
 8006932:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006936:	2200      	movs	r2, #0
 8006938:	2300      	movs	r3, #0
 800693a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800693e:	f7fa f8e3 	bl	8000b08 <__aeabi_dcmpeq>
 8006942:	b9c0      	cbnz	r0, 8006976 <_printf_float+0x41a>
 8006944:	4653      	mov	r3, sl
 8006946:	f108 0201 	add.w	r2, r8, #1
 800694a:	4631      	mov	r1, r6
 800694c:	4628      	mov	r0, r5
 800694e:	47b8      	blx	r7
 8006950:	3001      	adds	r0, #1
 8006952:	d10c      	bne.n	800696e <_printf_float+0x412>
 8006954:	e65d      	b.n	8006612 <_printf_float+0xb6>
 8006956:	2301      	movs	r3, #1
 8006958:	465a      	mov	r2, fp
 800695a:	4631      	mov	r1, r6
 800695c:	4628      	mov	r0, r5
 800695e:	47b8      	blx	r7
 8006960:	3001      	adds	r0, #1
 8006962:	f43f ae56 	beq.w	8006612 <_printf_float+0xb6>
 8006966:	f108 0801 	add.w	r8, r8, #1
 800696a:	45d0      	cmp	r8, sl
 800696c:	dbf3      	blt.n	8006956 <_printf_float+0x3fa>
 800696e:	464b      	mov	r3, r9
 8006970:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006974:	e6df      	b.n	8006736 <_printf_float+0x1da>
 8006976:	f04f 0800 	mov.w	r8, #0
 800697a:	f104 0b1a 	add.w	fp, r4, #26
 800697e:	e7f4      	b.n	800696a <_printf_float+0x40e>
 8006980:	2301      	movs	r3, #1
 8006982:	4642      	mov	r2, r8
 8006984:	e7e1      	b.n	800694a <_printf_float+0x3ee>
 8006986:	2301      	movs	r3, #1
 8006988:	464a      	mov	r2, r9
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	f43f ae3e 	beq.w	8006612 <_printf_float+0xb6>
 8006996:	f108 0801 	add.w	r8, r8, #1
 800699a:	68e3      	ldr	r3, [r4, #12]
 800699c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800699e:	1a5b      	subs	r3, r3, r1
 80069a0:	4543      	cmp	r3, r8
 80069a2:	dcf0      	bgt.n	8006986 <_printf_float+0x42a>
 80069a4:	e6fc      	b.n	80067a0 <_printf_float+0x244>
 80069a6:	f04f 0800 	mov.w	r8, #0
 80069aa:	f104 0919 	add.w	r9, r4, #25
 80069ae:	e7f4      	b.n	800699a <_printf_float+0x43e>

080069b0 <_printf_common>:
 80069b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b4:	4616      	mov	r6, r2
 80069b6:	4698      	mov	r8, r3
 80069b8:	688a      	ldr	r2, [r1, #8]
 80069ba:	690b      	ldr	r3, [r1, #16]
 80069bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069c0:	4293      	cmp	r3, r2
 80069c2:	bfb8      	it	lt
 80069c4:	4613      	movlt	r3, r2
 80069c6:	6033      	str	r3, [r6, #0]
 80069c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069cc:	4607      	mov	r7, r0
 80069ce:	460c      	mov	r4, r1
 80069d0:	b10a      	cbz	r2, 80069d6 <_printf_common+0x26>
 80069d2:	3301      	adds	r3, #1
 80069d4:	6033      	str	r3, [r6, #0]
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	0699      	lsls	r1, r3, #26
 80069da:	bf42      	ittt	mi
 80069dc:	6833      	ldrmi	r3, [r6, #0]
 80069de:	3302      	addmi	r3, #2
 80069e0:	6033      	strmi	r3, [r6, #0]
 80069e2:	6825      	ldr	r5, [r4, #0]
 80069e4:	f015 0506 	ands.w	r5, r5, #6
 80069e8:	d106      	bne.n	80069f8 <_printf_common+0x48>
 80069ea:	f104 0a19 	add.w	sl, r4, #25
 80069ee:	68e3      	ldr	r3, [r4, #12]
 80069f0:	6832      	ldr	r2, [r6, #0]
 80069f2:	1a9b      	subs	r3, r3, r2
 80069f4:	42ab      	cmp	r3, r5
 80069f6:	dc26      	bgt.n	8006a46 <_printf_common+0x96>
 80069f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069fc:	6822      	ldr	r2, [r4, #0]
 80069fe:	3b00      	subs	r3, #0
 8006a00:	bf18      	it	ne
 8006a02:	2301      	movne	r3, #1
 8006a04:	0692      	lsls	r2, r2, #26
 8006a06:	d42b      	bmi.n	8006a60 <_printf_common+0xb0>
 8006a08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a0c:	4641      	mov	r1, r8
 8006a0e:	4638      	mov	r0, r7
 8006a10:	47c8      	blx	r9
 8006a12:	3001      	adds	r0, #1
 8006a14:	d01e      	beq.n	8006a54 <_printf_common+0xa4>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	6922      	ldr	r2, [r4, #16]
 8006a1a:	f003 0306 	and.w	r3, r3, #6
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	bf02      	ittt	eq
 8006a22:	68e5      	ldreq	r5, [r4, #12]
 8006a24:	6833      	ldreq	r3, [r6, #0]
 8006a26:	1aed      	subeq	r5, r5, r3
 8006a28:	68a3      	ldr	r3, [r4, #8]
 8006a2a:	bf0c      	ite	eq
 8006a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a30:	2500      	movne	r5, #0
 8006a32:	4293      	cmp	r3, r2
 8006a34:	bfc4      	itt	gt
 8006a36:	1a9b      	subgt	r3, r3, r2
 8006a38:	18ed      	addgt	r5, r5, r3
 8006a3a:	2600      	movs	r6, #0
 8006a3c:	341a      	adds	r4, #26
 8006a3e:	42b5      	cmp	r5, r6
 8006a40:	d11a      	bne.n	8006a78 <_printf_common+0xc8>
 8006a42:	2000      	movs	r0, #0
 8006a44:	e008      	b.n	8006a58 <_printf_common+0xa8>
 8006a46:	2301      	movs	r3, #1
 8006a48:	4652      	mov	r2, sl
 8006a4a:	4641      	mov	r1, r8
 8006a4c:	4638      	mov	r0, r7
 8006a4e:	47c8      	blx	r9
 8006a50:	3001      	adds	r0, #1
 8006a52:	d103      	bne.n	8006a5c <_printf_common+0xac>
 8006a54:	f04f 30ff 	mov.w	r0, #4294967295
 8006a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5c:	3501      	adds	r5, #1
 8006a5e:	e7c6      	b.n	80069ee <_printf_common+0x3e>
 8006a60:	18e1      	adds	r1, r4, r3
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	2030      	movs	r0, #48	@ 0x30
 8006a66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a6a:	4422      	add	r2, r4
 8006a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a74:	3302      	adds	r3, #2
 8006a76:	e7c7      	b.n	8006a08 <_printf_common+0x58>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	4622      	mov	r2, r4
 8006a7c:	4641      	mov	r1, r8
 8006a7e:	4638      	mov	r0, r7
 8006a80:	47c8      	blx	r9
 8006a82:	3001      	adds	r0, #1
 8006a84:	d0e6      	beq.n	8006a54 <_printf_common+0xa4>
 8006a86:	3601      	adds	r6, #1
 8006a88:	e7d9      	b.n	8006a3e <_printf_common+0x8e>
	...

08006a8c <_printf_i>:
 8006a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a90:	7e0f      	ldrb	r7, [r1, #24]
 8006a92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a94:	2f78      	cmp	r7, #120	@ 0x78
 8006a96:	4691      	mov	r9, r2
 8006a98:	4680      	mov	r8, r0
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	469a      	mov	sl, r3
 8006a9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006aa2:	d807      	bhi.n	8006ab4 <_printf_i+0x28>
 8006aa4:	2f62      	cmp	r7, #98	@ 0x62
 8006aa6:	d80a      	bhi.n	8006abe <_printf_i+0x32>
 8006aa8:	2f00      	cmp	r7, #0
 8006aaa:	f000 80d1 	beq.w	8006c50 <_printf_i+0x1c4>
 8006aae:	2f58      	cmp	r7, #88	@ 0x58
 8006ab0:	f000 80b8 	beq.w	8006c24 <_printf_i+0x198>
 8006ab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ab8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006abc:	e03a      	b.n	8006b34 <_printf_i+0xa8>
 8006abe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ac2:	2b15      	cmp	r3, #21
 8006ac4:	d8f6      	bhi.n	8006ab4 <_printf_i+0x28>
 8006ac6:	a101      	add	r1, pc, #4	@ (adr r1, 8006acc <_printf_i+0x40>)
 8006ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006acc:	08006b25 	.word	0x08006b25
 8006ad0:	08006b39 	.word	0x08006b39
 8006ad4:	08006ab5 	.word	0x08006ab5
 8006ad8:	08006ab5 	.word	0x08006ab5
 8006adc:	08006ab5 	.word	0x08006ab5
 8006ae0:	08006ab5 	.word	0x08006ab5
 8006ae4:	08006b39 	.word	0x08006b39
 8006ae8:	08006ab5 	.word	0x08006ab5
 8006aec:	08006ab5 	.word	0x08006ab5
 8006af0:	08006ab5 	.word	0x08006ab5
 8006af4:	08006ab5 	.word	0x08006ab5
 8006af8:	08006c37 	.word	0x08006c37
 8006afc:	08006b63 	.word	0x08006b63
 8006b00:	08006bf1 	.word	0x08006bf1
 8006b04:	08006ab5 	.word	0x08006ab5
 8006b08:	08006ab5 	.word	0x08006ab5
 8006b0c:	08006c59 	.word	0x08006c59
 8006b10:	08006ab5 	.word	0x08006ab5
 8006b14:	08006b63 	.word	0x08006b63
 8006b18:	08006ab5 	.word	0x08006ab5
 8006b1c:	08006ab5 	.word	0x08006ab5
 8006b20:	08006bf9 	.word	0x08006bf9
 8006b24:	6833      	ldr	r3, [r6, #0]
 8006b26:	1d1a      	adds	r2, r3, #4
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6032      	str	r2, [r6, #0]
 8006b2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b34:	2301      	movs	r3, #1
 8006b36:	e09c      	b.n	8006c72 <_printf_i+0x1e6>
 8006b38:	6833      	ldr	r3, [r6, #0]
 8006b3a:	6820      	ldr	r0, [r4, #0]
 8006b3c:	1d19      	adds	r1, r3, #4
 8006b3e:	6031      	str	r1, [r6, #0]
 8006b40:	0606      	lsls	r6, r0, #24
 8006b42:	d501      	bpl.n	8006b48 <_printf_i+0xbc>
 8006b44:	681d      	ldr	r5, [r3, #0]
 8006b46:	e003      	b.n	8006b50 <_printf_i+0xc4>
 8006b48:	0645      	lsls	r5, r0, #25
 8006b4a:	d5fb      	bpl.n	8006b44 <_printf_i+0xb8>
 8006b4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b50:	2d00      	cmp	r5, #0
 8006b52:	da03      	bge.n	8006b5c <_printf_i+0xd0>
 8006b54:	232d      	movs	r3, #45	@ 0x2d
 8006b56:	426d      	negs	r5, r5
 8006b58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b5c:	4858      	ldr	r0, [pc, #352]	@ (8006cc0 <_printf_i+0x234>)
 8006b5e:	230a      	movs	r3, #10
 8006b60:	e011      	b.n	8006b86 <_printf_i+0xfa>
 8006b62:	6821      	ldr	r1, [r4, #0]
 8006b64:	6833      	ldr	r3, [r6, #0]
 8006b66:	0608      	lsls	r0, r1, #24
 8006b68:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b6c:	d402      	bmi.n	8006b74 <_printf_i+0xe8>
 8006b6e:	0649      	lsls	r1, r1, #25
 8006b70:	bf48      	it	mi
 8006b72:	b2ad      	uxthmi	r5, r5
 8006b74:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b76:	4852      	ldr	r0, [pc, #328]	@ (8006cc0 <_printf_i+0x234>)
 8006b78:	6033      	str	r3, [r6, #0]
 8006b7a:	bf14      	ite	ne
 8006b7c:	230a      	movne	r3, #10
 8006b7e:	2308      	moveq	r3, #8
 8006b80:	2100      	movs	r1, #0
 8006b82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b86:	6866      	ldr	r6, [r4, #4]
 8006b88:	60a6      	str	r6, [r4, #8]
 8006b8a:	2e00      	cmp	r6, #0
 8006b8c:	db05      	blt.n	8006b9a <_printf_i+0x10e>
 8006b8e:	6821      	ldr	r1, [r4, #0]
 8006b90:	432e      	orrs	r6, r5
 8006b92:	f021 0104 	bic.w	r1, r1, #4
 8006b96:	6021      	str	r1, [r4, #0]
 8006b98:	d04b      	beq.n	8006c32 <_printf_i+0x1a6>
 8006b9a:	4616      	mov	r6, r2
 8006b9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ba0:	fb03 5711 	mls	r7, r3, r1, r5
 8006ba4:	5dc7      	ldrb	r7, [r0, r7]
 8006ba6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006baa:	462f      	mov	r7, r5
 8006bac:	42bb      	cmp	r3, r7
 8006bae:	460d      	mov	r5, r1
 8006bb0:	d9f4      	bls.n	8006b9c <_printf_i+0x110>
 8006bb2:	2b08      	cmp	r3, #8
 8006bb4:	d10b      	bne.n	8006bce <_printf_i+0x142>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	07df      	lsls	r7, r3, #31
 8006bba:	d508      	bpl.n	8006bce <_printf_i+0x142>
 8006bbc:	6923      	ldr	r3, [r4, #16]
 8006bbe:	6861      	ldr	r1, [r4, #4]
 8006bc0:	4299      	cmp	r1, r3
 8006bc2:	bfde      	ittt	le
 8006bc4:	2330      	movle	r3, #48	@ 0x30
 8006bc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bce:	1b92      	subs	r2, r2, r6
 8006bd0:	6122      	str	r2, [r4, #16]
 8006bd2:	f8cd a000 	str.w	sl, [sp]
 8006bd6:	464b      	mov	r3, r9
 8006bd8:	aa03      	add	r2, sp, #12
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4640      	mov	r0, r8
 8006bde:	f7ff fee7 	bl	80069b0 <_printf_common>
 8006be2:	3001      	adds	r0, #1
 8006be4:	d14a      	bne.n	8006c7c <_printf_i+0x1f0>
 8006be6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bea:	b004      	add	sp, #16
 8006bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	f043 0320 	orr.w	r3, r3, #32
 8006bf6:	6023      	str	r3, [r4, #0]
 8006bf8:	4832      	ldr	r0, [pc, #200]	@ (8006cc4 <_printf_i+0x238>)
 8006bfa:	2778      	movs	r7, #120	@ 0x78
 8006bfc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	6831      	ldr	r1, [r6, #0]
 8006c04:	061f      	lsls	r7, r3, #24
 8006c06:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c0a:	d402      	bmi.n	8006c12 <_printf_i+0x186>
 8006c0c:	065f      	lsls	r7, r3, #25
 8006c0e:	bf48      	it	mi
 8006c10:	b2ad      	uxthmi	r5, r5
 8006c12:	6031      	str	r1, [r6, #0]
 8006c14:	07d9      	lsls	r1, r3, #31
 8006c16:	bf44      	itt	mi
 8006c18:	f043 0320 	orrmi.w	r3, r3, #32
 8006c1c:	6023      	strmi	r3, [r4, #0]
 8006c1e:	b11d      	cbz	r5, 8006c28 <_printf_i+0x19c>
 8006c20:	2310      	movs	r3, #16
 8006c22:	e7ad      	b.n	8006b80 <_printf_i+0xf4>
 8006c24:	4826      	ldr	r0, [pc, #152]	@ (8006cc0 <_printf_i+0x234>)
 8006c26:	e7e9      	b.n	8006bfc <_printf_i+0x170>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	f023 0320 	bic.w	r3, r3, #32
 8006c2e:	6023      	str	r3, [r4, #0]
 8006c30:	e7f6      	b.n	8006c20 <_printf_i+0x194>
 8006c32:	4616      	mov	r6, r2
 8006c34:	e7bd      	b.n	8006bb2 <_printf_i+0x126>
 8006c36:	6833      	ldr	r3, [r6, #0]
 8006c38:	6825      	ldr	r5, [r4, #0]
 8006c3a:	6961      	ldr	r1, [r4, #20]
 8006c3c:	1d18      	adds	r0, r3, #4
 8006c3e:	6030      	str	r0, [r6, #0]
 8006c40:	062e      	lsls	r6, r5, #24
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	d501      	bpl.n	8006c4a <_printf_i+0x1be>
 8006c46:	6019      	str	r1, [r3, #0]
 8006c48:	e002      	b.n	8006c50 <_printf_i+0x1c4>
 8006c4a:	0668      	lsls	r0, r5, #25
 8006c4c:	d5fb      	bpl.n	8006c46 <_printf_i+0x1ba>
 8006c4e:	8019      	strh	r1, [r3, #0]
 8006c50:	2300      	movs	r3, #0
 8006c52:	6123      	str	r3, [r4, #16]
 8006c54:	4616      	mov	r6, r2
 8006c56:	e7bc      	b.n	8006bd2 <_printf_i+0x146>
 8006c58:	6833      	ldr	r3, [r6, #0]
 8006c5a:	1d1a      	adds	r2, r3, #4
 8006c5c:	6032      	str	r2, [r6, #0]
 8006c5e:	681e      	ldr	r6, [r3, #0]
 8006c60:	6862      	ldr	r2, [r4, #4]
 8006c62:	2100      	movs	r1, #0
 8006c64:	4630      	mov	r0, r6
 8006c66:	f7f9 fad3 	bl	8000210 <memchr>
 8006c6a:	b108      	cbz	r0, 8006c70 <_printf_i+0x1e4>
 8006c6c:	1b80      	subs	r0, r0, r6
 8006c6e:	6060      	str	r0, [r4, #4]
 8006c70:	6863      	ldr	r3, [r4, #4]
 8006c72:	6123      	str	r3, [r4, #16]
 8006c74:	2300      	movs	r3, #0
 8006c76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c7a:	e7aa      	b.n	8006bd2 <_printf_i+0x146>
 8006c7c:	6923      	ldr	r3, [r4, #16]
 8006c7e:	4632      	mov	r2, r6
 8006c80:	4649      	mov	r1, r9
 8006c82:	4640      	mov	r0, r8
 8006c84:	47d0      	blx	sl
 8006c86:	3001      	adds	r0, #1
 8006c88:	d0ad      	beq.n	8006be6 <_printf_i+0x15a>
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	079b      	lsls	r3, r3, #30
 8006c8e:	d413      	bmi.n	8006cb8 <_printf_i+0x22c>
 8006c90:	68e0      	ldr	r0, [r4, #12]
 8006c92:	9b03      	ldr	r3, [sp, #12]
 8006c94:	4298      	cmp	r0, r3
 8006c96:	bfb8      	it	lt
 8006c98:	4618      	movlt	r0, r3
 8006c9a:	e7a6      	b.n	8006bea <_printf_i+0x15e>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	4632      	mov	r2, r6
 8006ca0:	4649      	mov	r1, r9
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	47d0      	blx	sl
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	d09d      	beq.n	8006be6 <_printf_i+0x15a>
 8006caa:	3501      	adds	r5, #1
 8006cac:	68e3      	ldr	r3, [r4, #12]
 8006cae:	9903      	ldr	r1, [sp, #12]
 8006cb0:	1a5b      	subs	r3, r3, r1
 8006cb2:	42ab      	cmp	r3, r5
 8006cb4:	dcf2      	bgt.n	8006c9c <_printf_i+0x210>
 8006cb6:	e7eb      	b.n	8006c90 <_printf_i+0x204>
 8006cb8:	2500      	movs	r5, #0
 8006cba:	f104 0619 	add.w	r6, r4, #25
 8006cbe:	e7f5      	b.n	8006cac <_printf_i+0x220>
 8006cc0:	08008f06 	.word	0x08008f06
 8006cc4:	08008f17 	.word	0x08008f17

08006cc8 <std>:
 8006cc8:	2300      	movs	r3, #0
 8006cca:	b510      	push	{r4, lr}
 8006ccc:	4604      	mov	r4, r0
 8006cce:	e9c0 3300 	strd	r3, r3, [r0]
 8006cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cd6:	6083      	str	r3, [r0, #8]
 8006cd8:	8181      	strh	r1, [r0, #12]
 8006cda:	6643      	str	r3, [r0, #100]	@ 0x64
 8006cdc:	81c2      	strh	r2, [r0, #14]
 8006cde:	6183      	str	r3, [r0, #24]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	2208      	movs	r2, #8
 8006ce4:	305c      	adds	r0, #92	@ 0x5c
 8006ce6:	f000 f9f9 	bl	80070dc <memset>
 8006cea:	4b0d      	ldr	r3, [pc, #52]	@ (8006d20 <std+0x58>)
 8006cec:	6263      	str	r3, [r4, #36]	@ 0x24
 8006cee:	4b0d      	ldr	r3, [pc, #52]	@ (8006d24 <std+0x5c>)
 8006cf0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d28 <std+0x60>)
 8006cf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d2c <std+0x64>)
 8006cf8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006d30 <std+0x68>)
 8006cfc:	6224      	str	r4, [r4, #32]
 8006cfe:	429c      	cmp	r4, r3
 8006d00:	d006      	beq.n	8006d10 <std+0x48>
 8006d02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d06:	4294      	cmp	r4, r2
 8006d08:	d002      	beq.n	8006d10 <std+0x48>
 8006d0a:	33d0      	adds	r3, #208	@ 0xd0
 8006d0c:	429c      	cmp	r4, r3
 8006d0e:	d105      	bne.n	8006d1c <std+0x54>
 8006d10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d18:	f000 ba5c 	b.w	80071d4 <__retarget_lock_init_recursive>
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	bf00      	nop
 8006d20:	08006f2d 	.word	0x08006f2d
 8006d24:	08006f4f 	.word	0x08006f4f
 8006d28:	08006f87 	.word	0x08006f87
 8006d2c:	08006fab 	.word	0x08006fab
 8006d30:	20000344 	.word	0x20000344

08006d34 <stdio_exit_handler>:
 8006d34:	4a02      	ldr	r2, [pc, #8]	@ (8006d40 <stdio_exit_handler+0xc>)
 8006d36:	4903      	ldr	r1, [pc, #12]	@ (8006d44 <stdio_exit_handler+0x10>)
 8006d38:	4803      	ldr	r0, [pc, #12]	@ (8006d48 <stdio_exit_handler+0x14>)
 8006d3a:	f000 b869 	b.w	8006e10 <_fwalk_sglue>
 8006d3e:	bf00      	nop
 8006d40:	20000010 	.word	0x20000010
 8006d44:	08008b11 	.word	0x08008b11
 8006d48:	20000020 	.word	0x20000020

08006d4c <cleanup_stdio>:
 8006d4c:	6841      	ldr	r1, [r0, #4]
 8006d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d80 <cleanup_stdio+0x34>)
 8006d50:	4299      	cmp	r1, r3
 8006d52:	b510      	push	{r4, lr}
 8006d54:	4604      	mov	r4, r0
 8006d56:	d001      	beq.n	8006d5c <cleanup_stdio+0x10>
 8006d58:	f001 feda 	bl	8008b10 <_fflush_r>
 8006d5c:	68a1      	ldr	r1, [r4, #8]
 8006d5e:	4b09      	ldr	r3, [pc, #36]	@ (8006d84 <cleanup_stdio+0x38>)
 8006d60:	4299      	cmp	r1, r3
 8006d62:	d002      	beq.n	8006d6a <cleanup_stdio+0x1e>
 8006d64:	4620      	mov	r0, r4
 8006d66:	f001 fed3 	bl	8008b10 <_fflush_r>
 8006d6a:	68e1      	ldr	r1, [r4, #12]
 8006d6c:	4b06      	ldr	r3, [pc, #24]	@ (8006d88 <cleanup_stdio+0x3c>)
 8006d6e:	4299      	cmp	r1, r3
 8006d70:	d004      	beq.n	8006d7c <cleanup_stdio+0x30>
 8006d72:	4620      	mov	r0, r4
 8006d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d78:	f001 beca 	b.w	8008b10 <_fflush_r>
 8006d7c:	bd10      	pop	{r4, pc}
 8006d7e:	bf00      	nop
 8006d80:	20000344 	.word	0x20000344
 8006d84:	200003ac 	.word	0x200003ac
 8006d88:	20000414 	.word	0x20000414

08006d8c <global_stdio_init.part.0>:
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006dbc <global_stdio_init.part.0+0x30>)
 8006d90:	4c0b      	ldr	r4, [pc, #44]	@ (8006dc0 <global_stdio_init.part.0+0x34>)
 8006d92:	4a0c      	ldr	r2, [pc, #48]	@ (8006dc4 <global_stdio_init.part.0+0x38>)
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	4620      	mov	r0, r4
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2104      	movs	r1, #4
 8006d9c:	f7ff ff94 	bl	8006cc8 <std>
 8006da0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006da4:	2201      	movs	r2, #1
 8006da6:	2109      	movs	r1, #9
 8006da8:	f7ff ff8e 	bl	8006cc8 <std>
 8006dac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006db0:	2202      	movs	r2, #2
 8006db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db6:	2112      	movs	r1, #18
 8006db8:	f7ff bf86 	b.w	8006cc8 <std>
 8006dbc:	2000047c 	.word	0x2000047c
 8006dc0:	20000344 	.word	0x20000344
 8006dc4:	08006d35 	.word	0x08006d35

08006dc8 <__sfp_lock_acquire>:
 8006dc8:	4801      	ldr	r0, [pc, #4]	@ (8006dd0 <__sfp_lock_acquire+0x8>)
 8006dca:	f000 ba04 	b.w	80071d6 <__retarget_lock_acquire_recursive>
 8006dce:	bf00      	nop
 8006dd0:	20000485 	.word	0x20000485

08006dd4 <__sfp_lock_release>:
 8006dd4:	4801      	ldr	r0, [pc, #4]	@ (8006ddc <__sfp_lock_release+0x8>)
 8006dd6:	f000 b9ff 	b.w	80071d8 <__retarget_lock_release_recursive>
 8006dda:	bf00      	nop
 8006ddc:	20000485 	.word	0x20000485

08006de0 <__sinit>:
 8006de0:	b510      	push	{r4, lr}
 8006de2:	4604      	mov	r4, r0
 8006de4:	f7ff fff0 	bl	8006dc8 <__sfp_lock_acquire>
 8006de8:	6a23      	ldr	r3, [r4, #32]
 8006dea:	b11b      	cbz	r3, 8006df4 <__sinit+0x14>
 8006dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df0:	f7ff bff0 	b.w	8006dd4 <__sfp_lock_release>
 8006df4:	4b04      	ldr	r3, [pc, #16]	@ (8006e08 <__sinit+0x28>)
 8006df6:	6223      	str	r3, [r4, #32]
 8006df8:	4b04      	ldr	r3, [pc, #16]	@ (8006e0c <__sinit+0x2c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1f5      	bne.n	8006dec <__sinit+0xc>
 8006e00:	f7ff ffc4 	bl	8006d8c <global_stdio_init.part.0>
 8006e04:	e7f2      	b.n	8006dec <__sinit+0xc>
 8006e06:	bf00      	nop
 8006e08:	08006d4d 	.word	0x08006d4d
 8006e0c:	2000047c 	.word	0x2000047c

08006e10 <_fwalk_sglue>:
 8006e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e14:	4607      	mov	r7, r0
 8006e16:	4688      	mov	r8, r1
 8006e18:	4614      	mov	r4, r2
 8006e1a:	2600      	movs	r6, #0
 8006e1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e20:	f1b9 0901 	subs.w	r9, r9, #1
 8006e24:	d505      	bpl.n	8006e32 <_fwalk_sglue+0x22>
 8006e26:	6824      	ldr	r4, [r4, #0]
 8006e28:	2c00      	cmp	r4, #0
 8006e2a:	d1f7      	bne.n	8006e1c <_fwalk_sglue+0xc>
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e32:	89ab      	ldrh	r3, [r5, #12]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d907      	bls.n	8006e48 <_fwalk_sglue+0x38>
 8006e38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	d003      	beq.n	8006e48 <_fwalk_sglue+0x38>
 8006e40:	4629      	mov	r1, r5
 8006e42:	4638      	mov	r0, r7
 8006e44:	47c0      	blx	r8
 8006e46:	4306      	orrs	r6, r0
 8006e48:	3568      	adds	r5, #104	@ 0x68
 8006e4a:	e7e9      	b.n	8006e20 <_fwalk_sglue+0x10>

08006e4c <iprintf>:
 8006e4c:	b40f      	push	{r0, r1, r2, r3}
 8006e4e:	b507      	push	{r0, r1, r2, lr}
 8006e50:	4906      	ldr	r1, [pc, #24]	@ (8006e6c <iprintf+0x20>)
 8006e52:	ab04      	add	r3, sp, #16
 8006e54:	6808      	ldr	r0, [r1, #0]
 8006e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e5a:	6881      	ldr	r1, [r0, #8]
 8006e5c:	9301      	str	r3, [sp, #4]
 8006e5e:	f001 fcbb 	bl	80087d8 <_vfiprintf_r>
 8006e62:	b003      	add	sp, #12
 8006e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e68:	b004      	add	sp, #16
 8006e6a:	4770      	bx	lr
 8006e6c:	2000001c 	.word	0x2000001c

08006e70 <_puts_r>:
 8006e70:	6a03      	ldr	r3, [r0, #32]
 8006e72:	b570      	push	{r4, r5, r6, lr}
 8006e74:	6884      	ldr	r4, [r0, #8]
 8006e76:	4605      	mov	r5, r0
 8006e78:	460e      	mov	r6, r1
 8006e7a:	b90b      	cbnz	r3, 8006e80 <_puts_r+0x10>
 8006e7c:	f7ff ffb0 	bl	8006de0 <__sinit>
 8006e80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e82:	07db      	lsls	r3, r3, #31
 8006e84:	d405      	bmi.n	8006e92 <_puts_r+0x22>
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	0598      	lsls	r0, r3, #22
 8006e8a:	d402      	bmi.n	8006e92 <_puts_r+0x22>
 8006e8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e8e:	f000 f9a2 	bl	80071d6 <__retarget_lock_acquire_recursive>
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	0719      	lsls	r1, r3, #28
 8006e96:	d502      	bpl.n	8006e9e <_puts_r+0x2e>
 8006e98:	6923      	ldr	r3, [r4, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d135      	bne.n	8006f0a <_puts_r+0x9a>
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	f000 f8c5 	bl	8007030 <__swsetup_r>
 8006ea6:	b380      	cbz	r0, 8006f0a <_puts_r+0x9a>
 8006ea8:	f04f 35ff 	mov.w	r5, #4294967295
 8006eac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006eae:	07da      	lsls	r2, r3, #31
 8006eb0:	d405      	bmi.n	8006ebe <_puts_r+0x4e>
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	059b      	lsls	r3, r3, #22
 8006eb6:	d402      	bmi.n	8006ebe <_puts_r+0x4e>
 8006eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eba:	f000 f98d 	bl	80071d8 <__retarget_lock_release_recursive>
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	bd70      	pop	{r4, r5, r6, pc}
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	da04      	bge.n	8006ed0 <_puts_r+0x60>
 8006ec6:	69a2      	ldr	r2, [r4, #24]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	dc17      	bgt.n	8006efc <_puts_r+0x8c>
 8006ecc:	290a      	cmp	r1, #10
 8006ece:	d015      	beq.n	8006efc <_puts_r+0x8c>
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	6022      	str	r2, [r4, #0]
 8006ed6:	7019      	strb	r1, [r3, #0]
 8006ed8:	68a3      	ldr	r3, [r4, #8]
 8006eda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	60a3      	str	r3, [r4, #8]
 8006ee2:	2900      	cmp	r1, #0
 8006ee4:	d1ed      	bne.n	8006ec2 <_puts_r+0x52>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	da11      	bge.n	8006f0e <_puts_r+0x9e>
 8006eea:	4622      	mov	r2, r4
 8006eec:	210a      	movs	r1, #10
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f000 f85f 	bl	8006fb2 <__swbuf_r>
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d0d7      	beq.n	8006ea8 <_puts_r+0x38>
 8006ef8:	250a      	movs	r5, #10
 8006efa:	e7d7      	b.n	8006eac <_puts_r+0x3c>
 8006efc:	4622      	mov	r2, r4
 8006efe:	4628      	mov	r0, r5
 8006f00:	f000 f857 	bl	8006fb2 <__swbuf_r>
 8006f04:	3001      	adds	r0, #1
 8006f06:	d1e7      	bne.n	8006ed8 <_puts_r+0x68>
 8006f08:	e7ce      	b.n	8006ea8 <_puts_r+0x38>
 8006f0a:	3e01      	subs	r6, #1
 8006f0c:	e7e4      	b.n	8006ed8 <_puts_r+0x68>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	6022      	str	r2, [r4, #0]
 8006f14:	220a      	movs	r2, #10
 8006f16:	701a      	strb	r2, [r3, #0]
 8006f18:	e7ee      	b.n	8006ef8 <_puts_r+0x88>
	...

08006f1c <puts>:
 8006f1c:	4b02      	ldr	r3, [pc, #8]	@ (8006f28 <puts+0xc>)
 8006f1e:	4601      	mov	r1, r0
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	f7ff bfa5 	b.w	8006e70 <_puts_r>
 8006f26:	bf00      	nop
 8006f28:	2000001c 	.word	0x2000001c

08006f2c <__sread>:
 8006f2c:	b510      	push	{r4, lr}
 8006f2e:	460c      	mov	r4, r1
 8006f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f34:	f000 f900 	bl	8007138 <_read_r>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	bfab      	itete	ge
 8006f3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f3e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f40:	181b      	addge	r3, r3, r0
 8006f42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f46:	bfac      	ite	ge
 8006f48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f4a:	81a3      	strhlt	r3, [r4, #12]
 8006f4c:	bd10      	pop	{r4, pc}

08006f4e <__swrite>:
 8006f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f52:	461f      	mov	r7, r3
 8006f54:	898b      	ldrh	r3, [r1, #12]
 8006f56:	05db      	lsls	r3, r3, #23
 8006f58:	4605      	mov	r5, r0
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	4616      	mov	r6, r2
 8006f5e:	d505      	bpl.n	8006f6c <__swrite+0x1e>
 8006f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f64:	2302      	movs	r3, #2
 8006f66:	2200      	movs	r2, #0
 8006f68:	f000 f8d4 	bl	8007114 <_lseek_r>
 8006f6c:	89a3      	ldrh	r3, [r4, #12]
 8006f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f76:	81a3      	strh	r3, [r4, #12]
 8006f78:	4632      	mov	r2, r6
 8006f7a:	463b      	mov	r3, r7
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f82:	f000 b8eb 	b.w	800715c <_write_r>

08006f86 <__sseek>:
 8006f86:	b510      	push	{r4, lr}
 8006f88:	460c      	mov	r4, r1
 8006f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8e:	f000 f8c1 	bl	8007114 <_lseek_r>
 8006f92:	1c43      	adds	r3, r0, #1
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	bf15      	itete	ne
 8006f98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006fa2:	81a3      	strheq	r3, [r4, #12]
 8006fa4:	bf18      	it	ne
 8006fa6:	81a3      	strhne	r3, [r4, #12]
 8006fa8:	bd10      	pop	{r4, pc}

08006faa <__sclose>:
 8006faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fae:	f000 b8a1 	b.w	80070f4 <_close_r>

08006fb2 <__swbuf_r>:
 8006fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb4:	460e      	mov	r6, r1
 8006fb6:	4614      	mov	r4, r2
 8006fb8:	4605      	mov	r5, r0
 8006fba:	b118      	cbz	r0, 8006fc4 <__swbuf_r+0x12>
 8006fbc:	6a03      	ldr	r3, [r0, #32]
 8006fbe:	b90b      	cbnz	r3, 8006fc4 <__swbuf_r+0x12>
 8006fc0:	f7ff ff0e 	bl	8006de0 <__sinit>
 8006fc4:	69a3      	ldr	r3, [r4, #24]
 8006fc6:	60a3      	str	r3, [r4, #8]
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	071a      	lsls	r2, r3, #28
 8006fcc:	d501      	bpl.n	8006fd2 <__swbuf_r+0x20>
 8006fce:	6923      	ldr	r3, [r4, #16]
 8006fd0:	b943      	cbnz	r3, 8006fe4 <__swbuf_r+0x32>
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f000 f82b 	bl	8007030 <__swsetup_r>
 8006fda:	b118      	cbz	r0, 8006fe4 <__swbuf_r+0x32>
 8006fdc:	f04f 37ff 	mov.w	r7, #4294967295
 8006fe0:	4638      	mov	r0, r7
 8006fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	6922      	ldr	r2, [r4, #16]
 8006fe8:	1a98      	subs	r0, r3, r2
 8006fea:	6963      	ldr	r3, [r4, #20]
 8006fec:	b2f6      	uxtb	r6, r6
 8006fee:	4283      	cmp	r3, r0
 8006ff0:	4637      	mov	r7, r6
 8006ff2:	dc05      	bgt.n	8007000 <__swbuf_r+0x4e>
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f001 fd8a 	bl	8008b10 <_fflush_r>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	d1ed      	bne.n	8006fdc <__swbuf_r+0x2a>
 8007000:	68a3      	ldr	r3, [r4, #8]
 8007002:	3b01      	subs	r3, #1
 8007004:	60a3      	str	r3, [r4, #8]
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	6022      	str	r2, [r4, #0]
 800700c:	701e      	strb	r6, [r3, #0]
 800700e:	6962      	ldr	r2, [r4, #20]
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	429a      	cmp	r2, r3
 8007014:	d004      	beq.n	8007020 <__swbuf_r+0x6e>
 8007016:	89a3      	ldrh	r3, [r4, #12]
 8007018:	07db      	lsls	r3, r3, #31
 800701a:	d5e1      	bpl.n	8006fe0 <__swbuf_r+0x2e>
 800701c:	2e0a      	cmp	r6, #10
 800701e:	d1df      	bne.n	8006fe0 <__swbuf_r+0x2e>
 8007020:	4621      	mov	r1, r4
 8007022:	4628      	mov	r0, r5
 8007024:	f001 fd74 	bl	8008b10 <_fflush_r>
 8007028:	2800      	cmp	r0, #0
 800702a:	d0d9      	beq.n	8006fe0 <__swbuf_r+0x2e>
 800702c:	e7d6      	b.n	8006fdc <__swbuf_r+0x2a>
	...

08007030 <__swsetup_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4b29      	ldr	r3, [pc, #164]	@ (80070d8 <__swsetup_r+0xa8>)
 8007034:	4605      	mov	r5, r0
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	460c      	mov	r4, r1
 800703a:	b118      	cbz	r0, 8007044 <__swsetup_r+0x14>
 800703c:	6a03      	ldr	r3, [r0, #32]
 800703e:	b90b      	cbnz	r3, 8007044 <__swsetup_r+0x14>
 8007040:	f7ff fece 	bl	8006de0 <__sinit>
 8007044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007048:	0719      	lsls	r1, r3, #28
 800704a:	d422      	bmi.n	8007092 <__swsetup_r+0x62>
 800704c:	06da      	lsls	r2, r3, #27
 800704e:	d407      	bmi.n	8007060 <__swsetup_r+0x30>
 8007050:	2209      	movs	r2, #9
 8007052:	602a      	str	r2, [r5, #0]
 8007054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007058:	81a3      	strh	r3, [r4, #12]
 800705a:	f04f 30ff 	mov.w	r0, #4294967295
 800705e:	e033      	b.n	80070c8 <__swsetup_r+0x98>
 8007060:	0758      	lsls	r0, r3, #29
 8007062:	d512      	bpl.n	800708a <__swsetup_r+0x5a>
 8007064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007066:	b141      	cbz	r1, 800707a <__swsetup_r+0x4a>
 8007068:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800706c:	4299      	cmp	r1, r3
 800706e:	d002      	beq.n	8007076 <__swsetup_r+0x46>
 8007070:	4628      	mov	r0, r5
 8007072:	f000 ff0d 	bl	8007e90 <_free_r>
 8007076:	2300      	movs	r3, #0
 8007078:	6363      	str	r3, [r4, #52]	@ 0x34
 800707a:	89a3      	ldrh	r3, [r4, #12]
 800707c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007080:	81a3      	strh	r3, [r4, #12]
 8007082:	2300      	movs	r3, #0
 8007084:	6063      	str	r3, [r4, #4]
 8007086:	6923      	ldr	r3, [r4, #16]
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	89a3      	ldrh	r3, [r4, #12]
 800708c:	f043 0308 	orr.w	r3, r3, #8
 8007090:	81a3      	strh	r3, [r4, #12]
 8007092:	6923      	ldr	r3, [r4, #16]
 8007094:	b94b      	cbnz	r3, 80070aa <__swsetup_r+0x7a>
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800709c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070a0:	d003      	beq.n	80070aa <__swsetup_r+0x7a>
 80070a2:	4621      	mov	r1, r4
 80070a4:	4628      	mov	r0, r5
 80070a6:	f001 fd81 	bl	8008bac <__smakebuf_r>
 80070aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ae:	f013 0201 	ands.w	r2, r3, #1
 80070b2:	d00a      	beq.n	80070ca <__swsetup_r+0x9a>
 80070b4:	2200      	movs	r2, #0
 80070b6:	60a2      	str	r2, [r4, #8]
 80070b8:	6962      	ldr	r2, [r4, #20]
 80070ba:	4252      	negs	r2, r2
 80070bc:	61a2      	str	r2, [r4, #24]
 80070be:	6922      	ldr	r2, [r4, #16]
 80070c0:	b942      	cbnz	r2, 80070d4 <__swsetup_r+0xa4>
 80070c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070c6:	d1c5      	bne.n	8007054 <__swsetup_r+0x24>
 80070c8:	bd38      	pop	{r3, r4, r5, pc}
 80070ca:	0799      	lsls	r1, r3, #30
 80070cc:	bf58      	it	pl
 80070ce:	6962      	ldrpl	r2, [r4, #20]
 80070d0:	60a2      	str	r2, [r4, #8]
 80070d2:	e7f4      	b.n	80070be <__swsetup_r+0x8e>
 80070d4:	2000      	movs	r0, #0
 80070d6:	e7f7      	b.n	80070c8 <__swsetup_r+0x98>
 80070d8:	2000001c 	.word	0x2000001c

080070dc <memset>:
 80070dc:	4402      	add	r2, r0
 80070de:	4603      	mov	r3, r0
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d100      	bne.n	80070e6 <memset+0xa>
 80070e4:	4770      	bx	lr
 80070e6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ea:	e7f9      	b.n	80070e0 <memset+0x4>

080070ec <_localeconv_r>:
 80070ec:	4800      	ldr	r0, [pc, #0]	@ (80070f0 <_localeconv_r+0x4>)
 80070ee:	4770      	bx	lr
 80070f0:	2000015c 	.word	0x2000015c

080070f4 <_close_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4d06      	ldr	r5, [pc, #24]	@ (8007110 <_close_r+0x1c>)
 80070f8:	2300      	movs	r3, #0
 80070fa:	4604      	mov	r4, r0
 80070fc:	4608      	mov	r0, r1
 80070fe:	602b      	str	r3, [r5, #0]
 8007100:	f7fa fba0 	bl	8001844 <_close>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d102      	bne.n	800710e <_close_r+0x1a>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	b103      	cbz	r3, 800710e <_close_r+0x1a>
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	20000480 	.word	0x20000480

08007114 <_lseek_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4d07      	ldr	r5, [pc, #28]	@ (8007134 <_lseek_r+0x20>)
 8007118:	4604      	mov	r4, r0
 800711a:	4608      	mov	r0, r1
 800711c:	4611      	mov	r1, r2
 800711e:	2200      	movs	r2, #0
 8007120:	602a      	str	r2, [r5, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	f7fa fbb5 	bl	8001892 <_lseek>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d102      	bne.n	8007132 <_lseek_r+0x1e>
 800712c:	682b      	ldr	r3, [r5, #0]
 800712e:	b103      	cbz	r3, 8007132 <_lseek_r+0x1e>
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	20000480 	.word	0x20000480

08007138 <_read_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	4d07      	ldr	r5, [pc, #28]	@ (8007158 <_read_r+0x20>)
 800713c:	4604      	mov	r4, r0
 800713e:	4608      	mov	r0, r1
 8007140:	4611      	mov	r1, r2
 8007142:	2200      	movs	r2, #0
 8007144:	602a      	str	r2, [r5, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	f7fa fb43 	bl	80017d2 <_read>
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	d102      	bne.n	8007156 <_read_r+0x1e>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	b103      	cbz	r3, 8007156 <_read_r+0x1e>
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	bd38      	pop	{r3, r4, r5, pc}
 8007158:	20000480 	.word	0x20000480

0800715c <_write_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4d07      	ldr	r5, [pc, #28]	@ (800717c <_write_r+0x20>)
 8007160:	4604      	mov	r4, r0
 8007162:	4608      	mov	r0, r1
 8007164:	4611      	mov	r1, r2
 8007166:	2200      	movs	r2, #0
 8007168:	602a      	str	r2, [r5, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	f7fa fb4e 	bl	800180c <_write>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_write_r+0x1e>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_write_r+0x1e>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	20000480 	.word	0x20000480

08007180 <__errno>:
 8007180:	4b01      	ldr	r3, [pc, #4]	@ (8007188 <__errno+0x8>)
 8007182:	6818      	ldr	r0, [r3, #0]
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	2000001c 	.word	0x2000001c

0800718c <__libc_init_array>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	4d0d      	ldr	r5, [pc, #52]	@ (80071c4 <__libc_init_array+0x38>)
 8007190:	4c0d      	ldr	r4, [pc, #52]	@ (80071c8 <__libc_init_array+0x3c>)
 8007192:	1b64      	subs	r4, r4, r5
 8007194:	10a4      	asrs	r4, r4, #2
 8007196:	2600      	movs	r6, #0
 8007198:	42a6      	cmp	r6, r4
 800719a:	d109      	bne.n	80071b0 <__libc_init_array+0x24>
 800719c:	4d0b      	ldr	r5, [pc, #44]	@ (80071cc <__libc_init_array+0x40>)
 800719e:	4c0c      	ldr	r4, [pc, #48]	@ (80071d0 <__libc_init_array+0x44>)
 80071a0:	f001 fe30 	bl	8008e04 <_init>
 80071a4:	1b64      	subs	r4, r4, r5
 80071a6:	10a4      	asrs	r4, r4, #2
 80071a8:	2600      	movs	r6, #0
 80071aa:	42a6      	cmp	r6, r4
 80071ac:	d105      	bne.n	80071ba <__libc_init_array+0x2e>
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b4:	4798      	blx	r3
 80071b6:	3601      	adds	r6, #1
 80071b8:	e7ee      	b.n	8007198 <__libc_init_array+0xc>
 80071ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80071be:	4798      	blx	r3
 80071c0:	3601      	adds	r6, #1
 80071c2:	e7f2      	b.n	80071aa <__libc_init_array+0x1e>
 80071c4:	08009274 	.word	0x08009274
 80071c8:	08009274 	.word	0x08009274
 80071cc:	08009274 	.word	0x08009274
 80071d0:	08009278 	.word	0x08009278

080071d4 <__retarget_lock_init_recursive>:
 80071d4:	4770      	bx	lr

080071d6 <__retarget_lock_acquire_recursive>:
 80071d6:	4770      	bx	lr

080071d8 <__retarget_lock_release_recursive>:
 80071d8:	4770      	bx	lr

080071da <quorem>:
 80071da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071de:	6903      	ldr	r3, [r0, #16]
 80071e0:	690c      	ldr	r4, [r1, #16]
 80071e2:	42a3      	cmp	r3, r4
 80071e4:	4607      	mov	r7, r0
 80071e6:	db7e      	blt.n	80072e6 <quorem+0x10c>
 80071e8:	3c01      	subs	r4, #1
 80071ea:	f101 0814 	add.w	r8, r1, #20
 80071ee:	00a3      	lsls	r3, r4, #2
 80071f0:	f100 0514 	add.w	r5, r0, #20
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007200:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007204:	3301      	adds	r3, #1
 8007206:	429a      	cmp	r2, r3
 8007208:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800720c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007210:	d32e      	bcc.n	8007270 <quorem+0x96>
 8007212:	f04f 0a00 	mov.w	sl, #0
 8007216:	46c4      	mov	ip, r8
 8007218:	46ae      	mov	lr, r5
 800721a:	46d3      	mov	fp, sl
 800721c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007220:	b298      	uxth	r0, r3
 8007222:	fb06 a000 	mla	r0, r6, r0, sl
 8007226:	0c02      	lsrs	r2, r0, #16
 8007228:	0c1b      	lsrs	r3, r3, #16
 800722a:	fb06 2303 	mla	r3, r6, r3, r2
 800722e:	f8de 2000 	ldr.w	r2, [lr]
 8007232:	b280      	uxth	r0, r0
 8007234:	b292      	uxth	r2, r2
 8007236:	1a12      	subs	r2, r2, r0
 8007238:	445a      	add	r2, fp
 800723a:	f8de 0000 	ldr.w	r0, [lr]
 800723e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007242:	b29b      	uxth	r3, r3
 8007244:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007248:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800724c:	b292      	uxth	r2, r2
 800724e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007252:	45e1      	cmp	r9, ip
 8007254:	f84e 2b04 	str.w	r2, [lr], #4
 8007258:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800725c:	d2de      	bcs.n	800721c <quorem+0x42>
 800725e:	9b00      	ldr	r3, [sp, #0]
 8007260:	58eb      	ldr	r3, [r5, r3]
 8007262:	b92b      	cbnz	r3, 8007270 <quorem+0x96>
 8007264:	9b01      	ldr	r3, [sp, #4]
 8007266:	3b04      	subs	r3, #4
 8007268:	429d      	cmp	r5, r3
 800726a:	461a      	mov	r2, r3
 800726c:	d32f      	bcc.n	80072ce <quorem+0xf4>
 800726e:	613c      	str	r4, [r7, #16]
 8007270:	4638      	mov	r0, r7
 8007272:	f001 f97f 	bl	8008574 <__mcmp>
 8007276:	2800      	cmp	r0, #0
 8007278:	db25      	blt.n	80072c6 <quorem+0xec>
 800727a:	4629      	mov	r1, r5
 800727c:	2000      	movs	r0, #0
 800727e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007282:	f8d1 c000 	ldr.w	ip, [r1]
 8007286:	fa1f fe82 	uxth.w	lr, r2
 800728a:	fa1f f38c 	uxth.w	r3, ip
 800728e:	eba3 030e 	sub.w	r3, r3, lr
 8007292:	4403      	add	r3, r0
 8007294:	0c12      	lsrs	r2, r2, #16
 8007296:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800729a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800729e:	b29b      	uxth	r3, r3
 80072a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072a4:	45c1      	cmp	r9, r8
 80072a6:	f841 3b04 	str.w	r3, [r1], #4
 80072aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072ae:	d2e6      	bcs.n	800727e <quorem+0xa4>
 80072b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072b8:	b922      	cbnz	r2, 80072c4 <quorem+0xea>
 80072ba:	3b04      	subs	r3, #4
 80072bc:	429d      	cmp	r5, r3
 80072be:	461a      	mov	r2, r3
 80072c0:	d30b      	bcc.n	80072da <quorem+0x100>
 80072c2:	613c      	str	r4, [r7, #16]
 80072c4:	3601      	adds	r6, #1
 80072c6:	4630      	mov	r0, r6
 80072c8:	b003      	add	sp, #12
 80072ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ce:	6812      	ldr	r2, [r2, #0]
 80072d0:	3b04      	subs	r3, #4
 80072d2:	2a00      	cmp	r2, #0
 80072d4:	d1cb      	bne.n	800726e <quorem+0x94>
 80072d6:	3c01      	subs	r4, #1
 80072d8:	e7c6      	b.n	8007268 <quorem+0x8e>
 80072da:	6812      	ldr	r2, [r2, #0]
 80072dc:	3b04      	subs	r3, #4
 80072de:	2a00      	cmp	r2, #0
 80072e0:	d1ef      	bne.n	80072c2 <quorem+0xe8>
 80072e2:	3c01      	subs	r4, #1
 80072e4:	e7ea      	b.n	80072bc <quorem+0xe2>
 80072e6:	2000      	movs	r0, #0
 80072e8:	e7ee      	b.n	80072c8 <quorem+0xee>
 80072ea:	0000      	movs	r0, r0
 80072ec:	0000      	movs	r0, r0
	...

080072f0 <_dtoa_r>:
 80072f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	69c7      	ldr	r7, [r0, #28]
 80072f6:	b097      	sub	sp, #92	@ 0x5c
 80072f8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80072fc:	ec55 4b10 	vmov	r4, r5, d0
 8007300:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007302:	9107      	str	r1, [sp, #28]
 8007304:	4681      	mov	r9, r0
 8007306:	920c      	str	r2, [sp, #48]	@ 0x30
 8007308:	9311      	str	r3, [sp, #68]	@ 0x44
 800730a:	b97f      	cbnz	r7, 800732c <_dtoa_r+0x3c>
 800730c:	2010      	movs	r0, #16
 800730e:	f000 fe09 	bl	8007f24 <malloc>
 8007312:	4602      	mov	r2, r0
 8007314:	f8c9 001c 	str.w	r0, [r9, #28]
 8007318:	b920      	cbnz	r0, 8007324 <_dtoa_r+0x34>
 800731a:	4ba9      	ldr	r3, [pc, #676]	@ (80075c0 <_dtoa_r+0x2d0>)
 800731c:	21ef      	movs	r1, #239	@ 0xef
 800731e:	48a9      	ldr	r0, [pc, #676]	@ (80075c4 <_dtoa_r+0x2d4>)
 8007320:	f001 fcc0 	bl	8008ca4 <__assert_func>
 8007324:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007328:	6007      	str	r7, [r0, #0]
 800732a:	60c7      	str	r7, [r0, #12]
 800732c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007330:	6819      	ldr	r1, [r3, #0]
 8007332:	b159      	cbz	r1, 800734c <_dtoa_r+0x5c>
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	604a      	str	r2, [r1, #4]
 8007338:	2301      	movs	r3, #1
 800733a:	4093      	lsls	r3, r2
 800733c:	608b      	str	r3, [r1, #8]
 800733e:	4648      	mov	r0, r9
 8007340:	f000 fee6 	bl	8008110 <_Bfree>
 8007344:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	1e2b      	subs	r3, r5, #0
 800734e:	bfb9      	ittee	lt
 8007350:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007354:	9305      	strlt	r3, [sp, #20]
 8007356:	2300      	movge	r3, #0
 8007358:	6033      	strge	r3, [r6, #0]
 800735a:	9f05      	ldr	r7, [sp, #20]
 800735c:	4b9a      	ldr	r3, [pc, #616]	@ (80075c8 <_dtoa_r+0x2d8>)
 800735e:	bfbc      	itt	lt
 8007360:	2201      	movlt	r2, #1
 8007362:	6032      	strlt	r2, [r6, #0]
 8007364:	43bb      	bics	r3, r7
 8007366:	d112      	bne.n	800738e <_dtoa_r+0x9e>
 8007368:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800736a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007374:	4323      	orrs	r3, r4
 8007376:	f000 855a 	beq.w	8007e2e <_dtoa_r+0xb3e>
 800737a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800737c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80075dc <_dtoa_r+0x2ec>
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 855c 	beq.w	8007e3e <_dtoa_r+0xb4e>
 8007386:	f10a 0303 	add.w	r3, sl, #3
 800738a:	f000 bd56 	b.w	8007e3a <_dtoa_r+0xb4a>
 800738e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007392:	2200      	movs	r2, #0
 8007394:	ec51 0b17 	vmov	r0, r1, d7
 8007398:	2300      	movs	r3, #0
 800739a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800739e:	f7f9 fbb3 	bl	8000b08 <__aeabi_dcmpeq>
 80073a2:	4680      	mov	r8, r0
 80073a4:	b158      	cbz	r0, 80073be <_dtoa_r+0xce>
 80073a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80073a8:	2301      	movs	r3, #1
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80073ae:	b113      	cbz	r3, 80073b6 <_dtoa_r+0xc6>
 80073b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80073b2:	4b86      	ldr	r3, [pc, #536]	@ (80075cc <_dtoa_r+0x2dc>)
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80075e0 <_dtoa_r+0x2f0>
 80073ba:	f000 bd40 	b.w	8007e3e <_dtoa_r+0xb4e>
 80073be:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80073c2:	aa14      	add	r2, sp, #80	@ 0x50
 80073c4:	a915      	add	r1, sp, #84	@ 0x54
 80073c6:	4648      	mov	r0, r9
 80073c8:	f001 f984 	bl	80086d4 <__d2b>
 80073cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80073d0:	9002      	str	r0, [sp, #8]
 80073d2:	2e00      	cmp	r6, #0
 80073d4:	d078      	beq.n	80074c8 <_dtoa_r+0x1d8>
 80073d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073d8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80073dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80073e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80073e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80073ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073f0:	4619      	mov	r1, r3
 80073f2:	2200      	movs	r2, #0
 80073f4:	4b76      	ldr	r3, [pc, #472]	@ (80075d0 <_dtoa_r+0x2e0>)
 80073f6:	f7f8 ff67 	bl	80002c8 <__aeabi_dsub>
 80073fa:	a36b      	add	r3, pc, #428	@ (adr r3, 80075a8 <_dtoa_r+0x2b8>)
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	f7f9 f91a 	bl	8000638 <__aeabi_dmul>
 8007404:	a36a      	add	r3, pc, #424	@ (adr r3, 80075b0 <_dtoa_r+0x2c0>)
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	f7f8 ff5f 	bl	80002cc <__adddf3>
 800740e:	4604      	mov	r4, r0
 8007410:	4630      	mov	r0, r6
 8007412:	460d      	mov	r5, r1
 8007414:	f7f9 f8a6 	bl	8000564 <__aeabi_i2d>
 8007418:	a367      	add	r3, pc, #412	@ (adr r3, 80075b8 <_dtoa_r+0x2c8>)
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	f7f9 f90b 	bl	8000638 <__aeabi_dmul>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4620      	mov	r0, r4
 8007428:	4629      	mov	r1, r5
 800742a:	f7f8 ff4f 	bl	80002cc <__adddf3>
 800742e:	4604      	mov	r4, r0
 8007430:	460d      	mov	r5, r1
 8007432:	f7f9 fbb1 	bl	8000b98 <__aeabi_d2iz>
 8007436:	2200      	movs	r2, #0
 8007438:	4607      	mov	r7, r0
 800743a:	2300      	movs	r3, #0
 800743c:	4620      	mov	r0, r4
 800743e:	4629      	mov	r1, r5
 8007440:	f7f9 fb6c 	bl	8000b1c <__aeabi_dcmplt>
 8007444:	b140      	cbz	r0, 8007458 <_dtoa_r+0x168>
 8007446:	4638      	mov	r0, r7
 8007448:	f7f9 f88c 	bl	8000564 <__aeabi_i2d>
 800744c:	4622      	mov	r2, r4
 800744e:	462b      	mov	r3, r5
 8007450:	f7f9 fb5a 	bl	8000b08 <__aeabi_dcmpeq>
 8007454:	b900      	cbnz	r0, 8007458 <_dtoa_r+0x168>
 8007456:	3f01      	subs	r7, #1
 8007458:	2f16      	cmp	r7, #22
 800745a:	d852      	bhi.n	8007502 <_dtoa_r+0x212>
 800745c:	4b5d      	ldr	r3, [pc, #372]	@ (80075d4 <_dtoa_r+0x2e4>)
 800745e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800746a:	f7f9 fb57 	bl	8000b1c <__aeabi_dcmplt>
 800746e:	2800      	cmp	r0, #0
 8007470:	d049      	beq.n	8007506 <_dtoa_r+0x216>
 8007472:	3f01      	subs	r7, #1
 8007474:	2300      	movs	r3, #0
 8007476:	9310      	str	r3, [sp, #64]	@ 0x40
 8007478:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800747a:	1b9b      	subs	r3, r3, r6
 800747c:	1e5a      	subs	r2, r3, #1
 800747e:	bf45      	ittet	mi
 8007480:	f1c3 0301 	rsbmi	r3, r3, #1
 8007484:	9300      	strmi	r3, [sp, #0]
 8007486:	2300      	movpl	r3, #0
 8007488:	2300      	movmi	r3, #0
 800748a:	9206      	str	r2, [sp, #24]
 800748c:	bf54      	ite	pl
 800748e:	9300      	strpl	r3, [sp, #0]
 8007490:	9306      	strmi	r3, [sp, #24]
 8007492:	2f00      	cmp	r7, #0
 8007494:	db39      	blt.n	800750a <_dtoa_r+0x21a>
 8007496:	9b06      	ldr	r3, [sp, #24]
 8007498:	970d      	str	r7, [sp, #52]	@ 0x34
 800749a:	443b      	add	r3, r7
 800749c:	9306      	str	r3, [sp, #24]
 800749e:	2300      	movs	r3, #0
 80074a0:	9308      	str	r3, [sp, #32]
 80074a2:	9b07      	ldr	r3, [sp, #28]
 80074a4:	2b09      	cmp	r3, #9
 80074a6:	d863      	bhi.n	8007570 <_dtoa_r+0x280>
 80074a8:	2b05      	cmp	r3, #5
 80074aa:	bfc4      	itt	gt
 80074ac:	3b04      	subgt	r3, #4
 80074ae:	9307      	strgt	r3, [sp, #28]
 80074b0:	9b07      	ldr	r3, [sp, #28]
 80074b2:	f1a3 0302 	sub.w	r3, r3, #2
 80074b6:	bfcc      	ite	gt
 80074b8:	2400      	movgt	r4, #0
 80074ba:	2401      	movle	r4, #1
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d863      	bhi.n	8007588 <_dtoa_r+0x298>
 80074c0:	e8df f003 	tbb	[pc, r3]
 80074c4:	2b375452 	.word	0x2b375452
 80074c8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80074cc:	441e      	add	r6, r3
 80074ce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	bfc1      	itttt	gt
 80074d6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80074da:	409f      	lslgt	r7, r3
 80074dc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80074e0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80074e4:	bfd6      	itet	le
 80074e6:	f1c3 0320 	rsble	r3, r3, #32
 80074ea:	ea47 0003 	orrgt.w	r0, r7, r3
 80074ee:	fa04 f003 	lslle.w	r0, r4, r3
 80074f2:	f7f9 f827 	bl	8000544 <__aeabi_ui2d>
 80074f6:	2201      	movs	r2, #1
 80074f8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80074fc:	3e01      	subs	r6, #1
 80074fe:	9212      	str	r2, [sp, #72]	@ 0x48
 8007500:	e776      	b.n	80073f0 <_dtoa_r+0x100>
 8007502:	2301      	movs	r3, #1
 8007504:	e7b7      	b.n	8007476 <_dtoa_r+0x186>
 8007506:	9010      	str	r0, [sp, #64]	@ 0x40
 8007508:	e7b6      	b.n	8007478 <_dtoa_r+0x188>
 800750a:	9b00      	ldr	r3, [sp, #0]
 800750c:	1bdb      	subs	r3, r3, r7
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	427b      	negs	r3, r7
 8007512:	9308      	str	r3, [sp, #32]
 8007514:	2300      	movs	r3, #0
 8007516:	930d      	str	r3, [sp, #52]	@ 0x34
 8007518:	e7c3      	b.n	80074a2 <_dtoa_r+0x1b2>
 800751a:	2301      	movs	r3, #1
 800751c:	9309      	str	r3, [sp, #36]	@ 0x24
 800751e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007520:	eb07 0b03 	add.w	fp, r7, r3
 8007524:	f10b 0301 	add.w	r3, fp, #1
 8007528:	2b01      	cmp	r3, #1
 800752a:	9303      	str	r3, [sp, #12]
 800752c:	bfb8      	it	lt
 800752e:	2301      	movlt	r3, #1
 8007530:	e006      	b.n	8007540 <_dtoa_r+0x250>
 8007532:	2301      	movs	r3, #1
 8007534:	9309      	str	r3, [sp, #36]	@ 0x24
 8007536:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007538:	2b00      	cmp	r3, #0
 800753a:	dd28      	ble.n	800758e <_dtoa_r+0x29e>
 800753c:	469b      	mov	fp, r3
 800753e:	9303      	str	r3, [sp, #12]
 8007540:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007544:	2100      	movs	r1, #0
 8007546:	2204      	movs	r2, #4
 8007548:	f102 0514 	add.w	r5, r2, #20
 800754c:	429d      	cmp	r5, r3
 800754e:	d926      	bls.n	800759e <_dtoa_r+0x2ae>
 8007550:	6041      	str	r1, [r0, #4]
 8007552:	4648      	mov	r0, r9
 8007554:	f000 fd9c 	bl	8008090 <_Balloc>
 8007558:	4682      	mov	sl, r0
 800755a:	2800      	cmp	r0, #0
 800755c:	d142      	bne.n	80075e4 <_dtoa_r+0x2f4>
 800755e:	4b1e      	ldr	r3, [pc, #120]	@ (80075d8 <_dtoa_r+0x2e8>)
 8007560:	4602      	mov	r2, r0
 8007562:	f240 11af 	movw	r1, #431	@ 0x1af
 8007566:	e6da      	b.n	800731e <_dtoa_r+0x2e>
 8007568:	2300      	movs	r3, #0
 800756a:	e7e3      	b.n	8007534 <_dtoa_r+0x244>
 800756c:	2300      	movs	r3, #0
 800756e:	e7d5      	b.n	800751c <_dtoa_r+0x22c>
 8007570:	2401      	movs	r4, #1
 8007572:	2300      	movs	r3, #0
 8007574:	9307      	str	r3, [sp, #28]
 8007576:	9409      	str	r4, [sp, #36]	@ 0x24
 8007578:	f04f 3bff 	mov.w	fp, #4294967295
 800757c:	2200      	movs	r2, #0
 800757e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007582:	2312      	movs	r3, #18
 8007584:	920c      	str	r2, [sp, #48]	@ 0x30
 8007586:	e7db      	b.n	8007540 <_dtoa_r+0x250>
 8007588:	2301      	movs	r3, #1
 800758a:	9309      	str	r3, [sp, #36]	@ 0x24
 800758c:	e7f4      	b.n	8007578 <_dtoa_r+0x288>
 800758e:	f04f 0b01 	mov.w	fp, #1
 8007592:	f8cd b00c 	str.w	fp, [sp, #12]
 8007596:	465b      	mov	r3, fp
 8007598:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800759c:	e7d0      	b.n	8007540 <_dtoa_r+0x250>
 800759e:	3101      	adds	r1, #1
 80075a0:	0052      	lsls	r2, r2, #1
 80075a2:	e7d1      	b.n	8007548 <_dtoa_r+0x258>
 80075a4:	f3af 8000 	nop.w
 80075a8:	636f4361 	.word	0x636f4361
 80075ac:	3fd287a7 	.word	0x3fd287a7
 80075b0:	8b60c8b3 	.word	0x8b60c8b3
 80075b4:	3fc68a28 	.word	0x3fc68a28
 80075b8:	509f79fb 	.word	0x509f79fb
 80075bc:	3fd34413 	.word	0x3fd34413
 80075c0:	08008f35 	.word	0x08008f35
 80075c4:	08008f4c 	.word	0x08008f4c
 80075c8:	7ff00000 	.word	0x7ff00000
 80075cc:	08008f05 	.word	0x08008f05
 80075d0:	3ff80000 	.word	0x3ff80000
 80075d4:	080090a0 	.word	0x080090a0
 80075d8:	08008fa4 	.word	0x08008fa4
 80075dc:	08008f31 	.word	0x08008f31
 80075e0:	08008f04 	.word	0x08008f04
 80075e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80075e8:	6018      	str	r0, [r3, #0]
 80075ea:	9b03      	ldr	r3, [sp, #12]
 80075ec:	2b0e      	cmp	r3, #14
 80075ee:	f200 80a1 	bhi.w	8007734 <_dtoa_r+0x444>
 80075f2:	2c00      	cmp	r4, #0
 80075f4:	f000 809e 	beq.w	8007734 <_dtoa_r+0x444>
 80075f8:	2f00      	cmp	r7, #0
 80075fa:	dd33      	ble.n	8007664 <_dtoa_r+0x374>
 80075fc:	4b9c      	ldr	r3, [pc, #624]	@ (8007870 <_dtoa_r+0x580>)
 80075fe:	f007 020f 	and.w	r2, r7, #15
 8007602:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007606:	ed93 7b00 	vldr	d7, [r3]
 800760a:	05f8      	lsls	r0, r7, #23
 800760c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007610:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007614:	d516      	bpl.n	8007644 <_dtoa_r+0x354>
 8007616:	4b97      	ldr	r3, [pc, #604]	@ (8007874 <_dtoa_r+0x584>)
 8007618:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800761c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007620:	f7f9 f934 	bl	800088c <__aeabi_ddiv>
 8007624:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007628:	f004 040f 	and.w	r4, r4, #15
 800762c:	2603      	movs	r6, #3
 800762e:	4d91      	ldr	r5, [pc, #580]	@ (8007874 <_dtoa_r+0x584>)
 8007630:	b954      	cbnz	r4, 8007648 <_dtoa_r+0x358>
 8007632:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007636:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800763a:	f7f9 f927 	bl	800088c <__aeabi_ddiv>
 800763e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007642:	e028      	b.n	8007696 <_dtoa_r+0x3a6>
 8007644:	2602      	movs	r6, #2
 8007646:	e7f2      	b.n	800762e <_dtoa_r+0x33e>
 8007648:	07e1      	lsls	r1, r4, #31
 800764a:	d508      	bpl.n	800765e <_dtoa_r+0x36e>
 800764c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007650:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007654:	f7f8 fff0 	bl	8000638 <__aeabi_dmul>
 8007658:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800765c:	3601      	adds	r6, #1
 800765e:	1064      	asrs	r4, r4, #1
 8007660:	3508      	adds	r5, #8
 8007662:	e7e5      	b.n	8007630 <_dtoa_r+0x340>
 8007664:	f000 80af 	beq.w	80077c6 <_dtoa_r+0x4d6>
 8007668:	427c      	negs	r4, r7
 800766a:	4b81      	ldr	r3, [pc, #516]	@ (8007870 <_dtoa_r+0x580>)
 800766c:	4d81      	ldr	r5, [pc, #516]	@ (8007874 <_dtoa_r+0x584>)
 800766e:	f004 020f 	and.w	r2, r4, #15
 8007672:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800767e:	f7f8 ffdb 	bl	8000638 <__aeabi_dmul>
 8007682:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007686:	1124      	asrs	r4, r4, #4
 8007688:	2300      	movs	r3, #0
 800768a:	2602      	movs	r6, #2
 800768c:	2c00      	cmp	r4, #0
 800768e:	f040 808f 	bne.w	80077b0 <_dtoa_r+0x4c0>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1d3      	bne.n	800763e <_dtoa_r+0x34e>
 8007696:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007698:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 8094 	beq.w	80077ca <_dtoa_r+0x4da>
 80076a2:	4b75      	ldr	r3, [pc, #468]	@ (8007878 <_dtoa_r+0x588>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	4620      	mov	r0, r4
 80076a8:	4629      	mov	r1, r5
 80076aa:	f7f9 fa37 	bl	8000b1c <__aeabi_dcmplt>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	f000 808b 	beq.w	80077ca <_dtoa_r+0x4da>
 80076b4:	9b03      	ldr	r3, [sp, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 8087 	beq.w	80077ca <_dtoa_r+0x4da>
 80076bc:	f1bb 0f00 	cmp.w	fp, #0
 80076c0:	dd34      	ble.n	800772c <_dtoa_r+0x43c>
 80076c2:	4620      	mov	r0, r4
 80076c4:	4b6d      	ldr	r3, [pc, #436]	@ (800787c <_dtoa_r+0x58c>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	4629      	mov	r1, r5
 80076ca:	f7f8 ffb5 	bl	8000638 <__aeabi_dmul>
 80076ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076d2:	f107 38ff 	add.w	r8, r7, #4294967295
 80076d6:	3601      	adds	r6, #1
 80076d8:	465c      	mov	r4, fp
 80076da:	4630      	mov	r0, r6
 80076dc:	f7f8 ff42 	bl	8000564 <__aeabi_i2d>
 80076e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076e4:	f7f8 ffa8 	bl	8000638 <__aeabi_dmul>
 80076e8:	4b65      	ldr	r3, [pc, #404]	@ (8007880 <_dtoa_r+0x590>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	f7f8 fdee 	bl	80002cc <__adddf3>
 80076f0:	4605      	mov	r5, r0
 80076f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80076f6:	2c00      	cmp	r4, #0
 80076f8:	d16a      	bne.n	80077d0 <_dtoa_r+0x4e0>
 80076fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076fe:	4b61      	ldr	r3, [pc, #388]	@ (8007884 <_dtoa_r+0x594>)
 8007700:	2200      	movs	r2, #0
 8007702:	f7f8 fde1 	bl	80002c8 <__aeabi_dsub>
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800770e:	462a      	mov	r2, r5
 8007710:	4633      	mov	r3, r6
 8007712:	f7f9 fa21 	bl	8000b58 <__aeabi_dcmpgt>
 8007716:	2800      	cmp	r0, #0
 8007718:	f040 8298 	bne.w	8007c4c <_dtoa_r+0x95c>
 800771c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007720:	462a      	mov	r2, r5
 8007722:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007726:	f7f9 f9f9 	bl	8000b1c <__aeabi_dcmplt>
 800772a:	bb38      	cbnz	r0, 800777c <_dtoa_r+0x48c>
 800772c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007730:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007734:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007736:	2b00      	cmp	r3, #0
 8007738:	f2c0 8157 	blt.w	80079ea <_dtoa_r+0x6fa>
 800773c:	2f0e      	cmp	r7, #14
 800773e:	f300 8154 	bgt.w	80079ea <_dtoa_r+0x6fa>
 8007742:	4b4b      	ldr	r3, [pc, #300]	@ (8007870 <_dtoa_r+0x580>)
 8007744:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007748:	ed93 7b00 	vldr	d7, [r3]
 800774c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800774e:	2b00      	cmp	r3, #0
 8007750:	ed8d 7b00 	vstr	d7, [sp]
 8007754:	f280 80e5 	bge.w	8007922 <_dtoa_r+0x632>
 8007758:	9b03      	ldr	r3, [sp, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f300 80e1 	bgt.w	8007922 <_dtoa_r+0x632>
 8007760:	d10c      	bne.n	800777c <_dtoa_r+0x48c>
 8007762:	4b48      	ldr	r3, [pc, #288]	@ (8007884 <_dtoa_r+0x594>)
 8007764:	2200      	movs	r2, #0
 8007766:	ec51 0b17 	vmov	r0, r1, d7
 800776a:	f7f8 ff65 	bl	8000638 <__aeabi_dmul>
 800776e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007772:	f7f9 f9e7 	bl	8000b44 <__aeabi_dcmpge>
 8007776:	2800      	cmp	r0, #0
 8007778:	f000 8266 	beq.w	8007c48 <_dtoa_r+0x958>
 800777c:	2400      	movs	r4, #0
 800777e:	4625      	mov	r5, r4
 8007780:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007782:	4656      	mov	r6, sl
 8007784:	ea6f 0803 	mvn.w	r8, r3
 8007788:	2700      	movs	r7, #0
 800778a:	4621      	mov	r1, r4
 800778c:	4648      	mov	r0, r9
 800778e:	f000 fcbf 	bl	8008110 <_Bfree>
 8007792:	2d00      	cmp	r5, #0
 8007794:	f000 80bd 	beq.w	8007912 <_dtoa_r+0x622>
 8007798:	b12f      	cbz	r7, 80077a6 <_dtoa_r+0x4b6>
 800779a:	42af      	cmp	r7, r5
 800779c:	d003      	beq.n	80077a6 <_dtoa_r+0x4b6>
 800779e:	4639      	mov	r1, r7
 80077a0:	4648      	mov	r0, r9
 80077a2:	f000 fcb5 	bl	8008110 <_Bfree>
 80077a6:	4629      	mov	r1, r5
 80077a8:	4648      	mov	r0, r9
 80077aa:	f000 fcb1 	bl	8008110 <_Bfree>
 80077ae:	e0b0      	b.n	8007912 <_dtoa_r+0x622>
 80077b0:	07e2      	lsls	r2, r4, #31
 80077b2:	d505      	bpl.n	80077c0 <_dtoa_r+0x4d0>
 80077b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077b8:	f7f8 ff3e 	bl	8000638 <__aeabi_dmul>
 80077bc:	3601      	adds	r6, #1
 80077be:	2301      	movs	r3, #1
 80077c0:	1064      	asrs	r4, r4, #1
 80077c2:	3508      	adds	r5, #8
 80077c4:	e762      	b.n	800768c <_dtoa_r+0x39c>
 80077c6:	2602      	movs	r6, #2
 80077c8:	e765      	b.n	8007696 <_dtoa_r+0x3a6>
 80077ca:	9c03      	ldr	r4, [sp, #12]
 80077cc:	46b8      	mov	r8, r7
 80077ce:	e784      	b.n	80076da <_dtoa_r+0x3ea>
 80077d0:	4b27      	ldr	r3, [pc, #156]	@ (8007870 <_dtoa_r+0x580>)
 80077d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077dc:	4454      	add	r4, sl
 80077de:	2900      	cmp	r1, #0
 80077e0:	d054      	beq.n	800788c <_dtoa_r+0x59c>
 80077e2:	4929      	ldr	r1, [pc, #164]	@ (8007888 <_dtoa_r+0x598>)
 80077e4:	2000      	movs	r0, #0
 80077e6:	f7f9 f851 	bl	800088c <__aeabi_ddiv>
 80077ea:	4633      	mov	r3, r6
 80077ec:	462a      	mov	r2, r5
 80077ee:	f7f8 fd6b 	bl	80002c8 <__aeabi_dsub>
 80077f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80077f6:	4656      	mov	r6, sl
 80077f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077fc:	f7f9 f9cc 	bl	8000b98 <__aeabi_d2iz>
 8007800:	4605      	mov	r5, r0
 8007802:	f7f8 feaf 	bl	8000564 <__aeabi_i2d>
 8007806:	4602      	mov	r2, r0
 8007808:	460b      	mov	r3, r1
 800780a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800780e:	f7f8 fd5b 	bl	80002c8 <__aeabi_dsub>
 8007812:	3530      	adds	r5, #48	@ 0x30
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800781c:	f806 5b01 	strb.w	r5, [r6], #1
 8007820:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007824:	f7f9 f97a 	bl	8000b1c <__aeabi_dcmplt>
 8007828:	2800      	cmp	r0, #0
 800782a:	d172      	bne.n	8007912 <_dtoa_r+0x622>
 800782c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007830:	4911      	ldr	r1, [pc, #68]	@ (8007878 <_dtoa_r+0x588>)
 8007832:	2000      	movs	r0, #0
 8007834:	f7f8 fd48 	bl	80002c8 <__aeabi_dsub>
 8007838:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800783c:	f7f9 f96e 	bl	8000b1c <__aeabi_dcmplt>
 8007840:	2800      	cmp	r0, #0
 8007842:	f040 80b4 	bne.w	80079ae <_dtoa_r+0x6be>
 8007846:	42a6      	cmp	r6, r4
 8007848:	f43f af70 	beq.w	800772c <_dtoa_r+0x43c>
 800784c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007850:	4b0a      	ldr	r3, [pc, #40]	@ (800787c <_dtoa_r+0x58c>)
 8007852:	2200      	movs	r2, #0
 8007854:	f7f8 fef0 	bl	8000638 <__aeabi_dmul>
 8007858:	4b08      	ldr	r3, [pc, #32]	@ (800787c <_dtoa_r+0x58c>)
 800785a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800785e:	2200      	movs	r2, #0
 8007860:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007864:	f7f8 fee8 	bl	8000638 <__aeabi_dmul>
 8007868:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800786c:	e7c4      	b.n	80077f8 <_dtoa_r+0x508>
 800786e:	bf00      	nop
 8007870:	080090a0 	.word	0x080090a0
 8007874:	08009078 	.word	0x08009078
 8007878:	3ff00000 	.word	0x3ff00000
 800787c:	40240000 	.word	0x40240000
 8007880:	401c0000 	.word	0x401c0000
 8007884:	40140000 	.word	0x40140000
 8007888:	3fe00000 	.word	0x3fe00000
 800788c:	4631      	mov	r1, r6
 800788e:	4628      	mov	r0, r5
 8007890:	f7f8 fed2 	bl	8000638 <__aeabi_dmul>
 8007894:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007898:	9413      	str	r4, [sp, #76]	@ 0x4c
 800789a:	4656      	mov	r6, sl
 800789c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078a0:	f7f9 f97a 	bl	8000b98 <__aeabi_d2iz>
 80078a4:	4605      	mov	r5, r0
 80078a6:	f7f8 fe5d 	bl	8000564 <__aeabi_i2d>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078b2:	f7f8 fd09 	bl	80002c8 <__aeabi_dsub>
 80078b6:	3530      	adds	r5, #48	@ 0x30
 80078b8:	f806 5b01 	strb.w	r5, [r6], #1
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	42a6      	cmp	r6, r4
 80078c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078c6:	f04f 0200 	mov.w	r2, #0
 80078ca:	d124      	bne.n	8007916 <_dtoa_r+0x626>
 80078cc:	4baf      	ldr	r3, [pc, #700]	@ (8007b8c <_dtoa_r+0x89c>)
 80078ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80078d2:	f7f8 fcfb 	bl	80002cc <__adddf3>
 80078d6:	4602      	mov	r2, r0
 80078d8:	460b      	mov	r3, r1
 80078da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078de:	f7f9 f93b 	bl	8000b58 <__aeabi_dcmpgt>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d163      	bne.n	80079ae <_dtoa_r+0x6be>
 80078e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80078ea:	49a8      	ldr	r1, [pc, #672]	@ (8007b8c <_dtoa_r+0x89c>)
 80078ec:	2000      	movs	r0, #0
 80078ee:	f7f8 fceb 	bl	80002c8 <__aeabi_dsub>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078fa:	f7f9 f90f 	bl	8000b1c <__aeabi_dcmplt>
 80078fe:	2800      	cmp	r0, #0
 8007900:	f43f af14 	beq.w	800772c <_dtoa_r+0x43c>
 8007904:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007906:	1e73      	subs	r3, r6, #1
 8007908:	9313      	str	r3, [sp, #76]	@ 0x4c
 800790a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800790e:	2b30      	cmp	r3, #48	@ 0x30
 8007910:	d0f8      	beq.n	8007904 <_dtoa_r+0x614>
 8007912:	4647      	mov	r7, r8
 8007914:	e03b      	b.n	800798e <_dtoa_r+0x69e>
 8007916:	4b9e      	ldr	r3, [pc, #632]	@ (8007b90 <_dtoa_r+0x8a0>)
 8007918:	f7f8 fe8e 	bl	8000638 <__aeabi_dmul>
 800791c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007920:	e7bc      	b.n	800789c <_dtoa_r+0x5ac>
 8007922:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007926:	4656      	mov	r6, sl
 8007928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800792c:	4620      	mov	r0, r4
 800792e:	4629      	mov	r1, r5
 8007930:	f7f8 ffac 	bl	800088c <__aeabi_ddiv>
 8007934:	f7f9 f930 	bl	8000b98 <__aeabi_d2iz>
 8007938:	4680      	mov	r8, r0
 800793a:	f7f8 fe13 	bl	8000564 <__aeabi_i2d>
 800793e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007942:	f7f8 fe79 	bl	8000638 <__aeabi_dmul>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	4620      	mov	r0, r4
 800794c:	4629      	mov	r1, r5
 800794e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007952:	f7f8 fcb9 	bl	80002c8 <__aeabi_dsub>
 8007956:	f806 4b01 	strb.w	r4, [r6], #1
 800795a:	9d03      	ldr	r5, [sp, #12]
 800795c:	eba6 040a 	sub.w	r4, r6, sl
 8007960:	42a5      	cmp	r5, r4
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	d133      	bne.n	80079d0 <_dtoa_r+0x6e0>
 8007968:	f7f8 fcb0 	bl	80002cc <__adddf3>
 800796c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007970:	4604      	mov	r4, r0
 8007972:	460d      	mov	r5, r1
 8007974:	f7f9 f8f0 	bl	8000b58 <__aeabi_dcmpgt>
 8007978:	b9c0      	cbnz	r0, 80079ac <_dtoa_r+0x6bc>
 800797a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800797e:	4620      	mov	r0, r4
 8007980:	4629      	mov	r1, r5
 8007982:	f7f9 f8c1 	bl	8000b08 <__aeabi_dcmpeq>
 8007986:	b110      	cbz	r0, 800798e <_dtoa_r+0x69e>
 8007988:	f018 0f01 	tst.w	r8, #1
 800798c:	d10e      	bne.n	80079ac <_dtoa_r+0x6bc>
 800798e:	9902      	ldr	r1, [sp, #8]
 8007990:	4648      	mov	r0, r9
 8007992:	f000 fbbd 	bl	8008110 <_Bfree>
 8007996:	2300      	movs	r3, #0
 8007998:	7033      	strb	r3, [r6, #0]
 800799a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800799c:	3701      	adds	r7, #1
 800799e:	601f      	str	r7, [r3, #0]
 80079a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 824b 	beq.w	8007e3e <_dtoa_r+0xb4e>
 80079a8:	601e      	str	r6, [r3, #0]
 80079aa:	e248      	b.n	8007e3e <_dtoa_r+0xb4e>
 80079ac:	46b8      	mov	r8, r7
 80079ae:	4633      	mov	r3, r6
 80079b0:	461e      	mov	r6, r3
 80079b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079b6:	2a39      	cmp	r2, #57	@ 0x39
 80079b8:	d106      	bne.n	80079c8 <_dtoa_r+0x6d8>
 80079ba:	459a      	cmp	sl, r3
 80079bc:	d1f8      	bne.n	80079b0 <_dtoa_r+0x6c0>
 80079be:	2230      	movs	r2, #48	@ 0x30
 80079c0:	f108 0801 	add.w	r8, r8, #1
 80079c4:	f88a 2000 	strb.w	r2, [sl]
 80079c8:	781a      	ldrb	r2, [r3, #0]
 80079ca:	3201      	adds	r2, #1
 80079cc:	701a      	strb	r2, [r3, #0]
 80079ce:	e7a0      	b.n	8007912 <_dtoa_r+0x622>
 80079d0:	4b6f      	ldr	r3, [pc, #444]	@ (8007b90 <_dtoa_r+0x8a0>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	f7f8 fe30 	bl	8000638 <__aeabi_dmul>
 80079d8:	2200      	movs	r2, #0
 80079da:	2300      	movs	r3, #0
 80079dc:	4604      	mov	r4, r0
 80079de:	460d      	mov	r5, r1
 80079e0:	f7f9 f892 	bl	8000b08 <__aeabi_dcmpeq>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d09f      	beq.n	8007928 <_dtoa_r+0x638>
 80079e8:	e7d1      	b.n	800798e <_dtoa_r+0x69e>
 80079ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079ec:	2a00      	cmp	r2, #0
 80079ee:	f000 80ea 	beq.w	8007bc6 <_dtoa_r+0x8d6>
 80079f2:	9a07      	ldr	r2, [sp, #28]
 80079f4:	2a01      	cmp	r2, #1
 80079f6:	f300 80cd 	bgt.w	8007b94 <_dtoa_r+0x8a4>
 80079fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80079fc:	2a00      	cmp	r2, #0
 80079fe:	f000 80c1 	beq.w	8007b84 <_dtoa_r+0x894>
 8007a02:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007a06:	9c08      	ldr	r4, [sp, #32]
 8007a08:	9e00      	ldr	r6, [sp, #0]
 8007a0a:	9a00      	ldr	r2, [sp, #0]
 8007a0c:	441a      	add	r2, r3
 8007a0e:	9200      	str	r2, [sp, #0]
 8007a10:	9a06      	ldr	r2, [sp, #24]
 8007a12:	2101      	movs	r1, #1
 8007a14:	441a      	add	r2, r3
 8007a16:	4648      	mov	r0, r9
 8007a18:	9206      	str	r2, [sp, #24]
 8007a1a:	f000 fc2d 	bl	8008278 <__i2b>
 8007a1e:	4605      	mov	r5, r0
 8007a20:	b166      	cbz	r6, 8007a3c <_dtoa_r+0x74c>
 8007a22:	9b06      	ldr	r3, [sp, #24]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	dd09      	ble.n	8007a3c <_dtoa_r+0x74c>
 8007a28:	42b3      	cmp	r3, r6
 8007a2a:	9a00      	ldr	r2, [sp, #0]
 8007a2c:	bfa8      	it	ge
 8007a2e:	4633      	movge	r3, r6
 8007a30:	1ad2      	subs	r2, r2, r3
 8007a32:	9200      	str	r2, [sp, #0]
 8007a34:	9a06      	ldr	r2, [sp, #24]
 8007a36:	1af6      	subs	r6, r6, r3
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	9306      	str	r3, [sp, #24]
 8007a3c:	9b08      	ldr	r3, [sp, #32]
 8007a3e:	b30b      	cbz	r3, 8007a84 <_dtoa_r+0x794>
 8007a40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 80c6 	beq.w	8007bd4 <_dtoa_r+0x8e4>
 8007a48:	2c00      	cmp	r4, #0
 8007a4a:	f000 80c0 	beq.w	8007bce <_dtoa_r+0x8de>
 8007a4e:	4629      	mov	r1, r5
 8007a50:	4622      	mov	r2, r4
 8007a52:	4648      	mov	r0, r9
 8007a54:	f000 fcc8 	bl	80083e8 <__pow5mult>
 8007a58:	9a02      	ldr	r2, [sp, #8]
 8007a5a:	4601      	mov	r1, r0
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	4648      	mov	r0, r9
 8007a60:	f000 fc20 	bl	80082a4 <__multiply>
 8007a64:	9902      	ldr	r1, [sp, #8]
 8007a66:	4680      	mov	r8, r0
 8007a68:	4648      	mov	r0, r9
 8007a6a:	f000 fb51 	bl	8008110 <_Bfree>
 8007a6e:	9b08      	ldr	r3, [sp, #32]
 8007a70:	1b1b      	subs	r3, r3, r4
 8007a72:	9308      	str	r3, [sp, #32]
 8007a74:	f000 80b1 	beq.w	8007bda <_dtoa_r+0x8ea>
 8007a78:	9a08      	ldr	r2, [sp, #32]
 8007a7a:	4641      	mov	r1, r8
 8007a7c:	4648      	mov	r0, r9
 8007a7e:	f000 fcb3 	bl	80083e8 <__pow5mult>
 8007a82:	9002      	str	r0, [sp, #8]
 8007a84:	2101      	movs	r1, #1
 8007a86:	4648      	mov	r0, r9
 8007a88:	f000 fbf6 	bl	8008278 <__i2b>
 8007a8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a8e:	4604      	mov	r4, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 81d8 	beq.w	8007e46 <_dtoa_r+0xb56>
 8007a96:	461a      	mov	r2, r3
 8007a98:	4601      	mov	r1, r0
 8007a9a:	4648      	mov	r0, r9
 8007a9c:	f000 fca4 	bl	80083e8 <__pow5mult>
 8007aa0:	9b07      	ldr	r3, [sp, #28]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	f300 809f 	bgt.w	8007be8 <_dtoa_r+0x8f8>
 8007aaa:	9b04      	ldr	r3, [sp, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f040 8097 	bne.w	8007be0 <_dtoa_r+0x8f0>
 8007ab2:	9b05      	ldr	r3, [sp, #20]
 8007ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f040 8093 	bne.w	8007be4 <_dtoa_r+0x8f4>
 8007abe:	9b05      	ldr	r3, [sp, #20]
 8007ac0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ac4:	0d1b      	lsrs	r3, r3, #20
 8007ac6:	051b      	lsls	r3, r3, #20
 8007ac8:	b133      	cbz	r3, 8007ad8 <_dtoa_r+0x7e8>
 8007aca:	9b00      	ldr	r3, [sp, #0]
 8007acc:	3301      	adds	r3, #1
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	9b06      	ldr	r3, [sp, #24]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	9306      	str	r3, [sp, #24]
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	9308      	str	r3, [sp, #32]
 8007ada:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 81b8 	beq.w	8007e52 <_dtoa_r+0xb62>
 8007ae2:	6923      	ldr	r3, [r4, #16]
 8007ae4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ae8:	6918      	ldr	r0, [r3, #16]
 8007aea:	f000 fb79 	bl	80081e0 <__hi0bits>
 8007aee:	f1c0 0020 	rsb	r0, r0, #32
 8007af2:	9b06      	ldr	r3, [sp, #24]
 8007af4:	4418      	add	r0, r3
 8007af6:	f010 001f 	ands.w	r0, r0, #31
 8007afa:	f000 8082 	beq.w	8007c02 <_dtoa_r+0x912>
 8007afe:	f1c0 0320 	rsb	r3, r0, #32
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	dd73      	ble.n	8007bee <_dtoa_r+0x8fe>
 8007b06:	9b00      	ldr	r3, [sp, #0]
 8007b08:	f1c0 001c 	rsb	r0, r0, #28
 8007b0c:	4403      	add	r3, r0
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	9b06      	ldr	r3, [sp, #24]
 8007b12:	4403      	add	r3, r0
 8007b14:	4406      	add	r6, r0
 8007b16:	9306      	str	r3, [sp, #24]
 8007b18:	9b00      	ldr	r3, [sp, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	dd05      	ble.n	8007b2a <_dtoa_r+0x83a>
 8007b1e:	9902      	ldr	r1, [sp, #8]
 8007b20:	461a      	mov	r2, r3
 8007b22:	4648      	mov	r0, r9
 8007b24:	f000 fcba 	bl	800849c <__lshift>
 8007b28:	9002      	str	r0, [sp, #8]
 8007b2a:	9b06      	ldr	r3, [sp, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	dd05      	ble.n	8007b3c <_dtoa_r+0x84c>
 8007b30:	4621      	mov	r1, r4
 8007b32:	461a      	mov	r2, r3
 8007b34:	4648      	mov	r0, r9
 8007b36:	f000 fcb1 	bl	800849c <__lshift>
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d061      	beq.n	8007c06 <_dtoa_r+0x916>
 8007b42:	9802      	ldr	r0, [sp, #8]
 8007b44:	4621      	mov	r1, r4
 8007b46:	f000 fd15 	bl	8008574 <__mcmp>
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	da5b      	bge.n	8007c06 <_dtoa_r+0x916>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	9902      	ldr	r1, [sp, #8]
 8007b52:	220a      	movs	r2, #10
 8007b54:	4648      	mov	r0, r9
 8007b56:	f000 fafd 	bl	8008154 <__multadd>
 8007b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b5c:	9002      	str	r0, [sp, #8]
 8007b5e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 8177 	beq.w	8007e56 <_dtoa_r+0xb66>
 8007b68:	4629      	mov	r1, r5
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	220a      	movs	r2, #10
 8007b6e:	4648      	mov	r0, r9
 8007b70:	f000 faf0 	bl	8008154 <__multadd>
 8007b74:	f1bb 0f00 	cmp.w	fp, #0
 8007b78:	4605      	mov	r5, r0
 8007b7a:	dc6f      	bgt.n	8007c5c <_dtoa_r+0x96c>
 8007b7c:	9b07      	ldr	r3, [sp, #28]
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	dc49      	bgt.n	8007c16 <_dtoa_r+0x926>
 8007b82:	e06b      	b.n	8007c5c <_dtoa_r+0x96c>
 8007b84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b8a:	e73c      	b.n	8007a06 <_dtoa_r+0x716>
 8007b8c:	3fe00000 	.word	0x3fe00000
 8007b90:	40240000 	.word	0x40240000
 8007b94:	9b03      	ldr	r3, [sp, #12]
 8007b96:	1e5c      	subs	r4, r3, #1
 8007b98:	9b08      	ldr	r3, [sp, #32]
 8007b9a:	42a3      	cmp	r3, r4
 8007b9c:	db09      	blt.n	8007bb2 <_dtoa_r+0x8c2>
 8007b9e:	1b1c      	subs	r4, r3, r4
 8007ba0:	9b03      	ldr	r3, [sp, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f6bf af30 	bge.w	8007a08 <_dtoa_r+0x718>
 8007ba8:	9b00      	ldr	r3, [sp, #0]
 8007baa:	9a03      	ldr	r2, [sp, #12]
 8007bac:	1a9e      	subs	r6, r3, r2
 8007bae:	2300      	movs	r3, #0
 8007bb0:	e72b      	b.n	8007a0a <_dtoa_r+0x71a>
 8007bb2:	9b08      	ldr	r3, [sp, #32]
 8007bb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007bb6:	9408      	str	r4, [sp, #32]
 8007bb8:	1ae3      	subs	r3, r4, r3
 8007bba:	441a      	add	r2, r3
 8007bbc:	9e00      	ldr	r6, [sp, #0]
 8007bbe:	9b03      	ldr	r3, [sp, #12]
 8007bc0:	920d      	str	r2, [sp, #52]	@ 0x34
 8007bc2:	2400      	movs	r4, #0
 8007bc4:	e721      	b.n	8007a0a <_dtoa_r+0x71a>
 8007bc6:	9c08      	ldr	r4, [sp, #32]
 8007bc8:	9e00      	ldr	r6, [sp, #0]
 8007bca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007bcc:	e728      	b.n	8007a20 <_dtoa_r+0x730>
 8007bce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007bd2:	e751      	b.n	8007a78 <_dtoa_r+0x788>
 8007bd4:	9a08      	ldr	r2, [sp, #32]
 8007bd6:	9902      	ldr	r1, [sp, #8]
 8007bd8:	e750      	b.n	8007a7c <_dtoa_r+0x78c>
 8007bda:	f8cd 8008 	str.w	r8, [sp, #8]
 8007bde:	e751      	b.n	8007a84 <_dtoa_r+0x794>
 8007be0:	2300      	movs	r3, #0
 8007be2:	e779      	b.n	8007ad8 <_dtoa_r+0x7e8>
 8007be4:	9b04      	ldr	r3, [sp, #16]
 8007be6:	e777      	b.n	8007ad8 <_dtoa_r+0x7e8>
 8007be8:	2300      	movs	r3, #0
 8007bea:	9308      	str	r3, [sp, #32]
 8007bec:	e779      	b.n	8007ae2 <_dtoa_r+0x7f2>
 8007bee:	d093      	beq.n	8007b18 <_dtoa_r+0x828>
 8007bf0:	9a00      	ldr	r2, [sp, #0]
 8007bf2:	331c      	adds	r3, #28
 8007bf4:	441a      	add	r2, r3
 8007bf6:	9200      	str	r2, [sp, #0]
 8007bf8:	9a06      	ldr	r2, [sp, #24]
 8007bfa:	441a      	add	r2, r3
 8007bfc:	441e      	add	r6, r3
 8007bfe:	9206      	str	r2, [sp, #24]
 8007c00:	e78a      	b.n	8007b18 <_dtoa_r+0x828>
 8007c02:	4603      	mov	r3, r0
 8007c04:	e7f4      	b.n	8007bf0 <_dtoa_r+0x900>
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	46b8      	mov	r8, r7
 8007c0c:	dc20      	bgt.n	8007c50 <_dtoa_r+0x960>
 8007c0e:	469b      	mov	fp, r3
 8007c10:	9b07      	ldr	r3, [sp, #28]
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	dd1e      	ble.n	8007c54 <_dtoa_r+0x964>
 8007c16:	f1bb 0f00 	cmp.w	fp, #0
 8007c1a:	f47f adb1 	bne.w	8007780 <_dtoa_r+0x490>
 8007c1e:	4621      	mov	r1, r4
 8007c20:	465b      	mov	r3, fp
 8007c22:	2205      	movs	r2, #5
 8007c24:	4648      	mov	r0, r9
 8007c26:	f000 fa95 	bl	8008154 <__multadd>
 8007c2a:	4601      	mov	r1, r0
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	9802      	ldr	r0, [sp, #8]
 8007c30:	f000 fca0 	bl	8008574 <__mcmp>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	f77f ada3 	ble.w	8007780 <_dtoa_r+0x490>
 8007c3a:	4656      	mov	r6, sl
 8007c3c:	2331      	movs	r3, #49	@ 0x31
 8007c3e:	f806 3b01 	strb.w	r3, [r6], #1
 8007c42:	f108 0801 	add.w	r8, r8, #1
 8007c46:	e59f      	b.n	8007788 <_dtoa_r+0x498>
 8007c48:	9c03      	ldr	r4, [sp, #12]
 8007c4a:	46b8      	mov	r8, r7
 8007c4c:	4625      	mov	r5, r4
 8007c4e:	e7f4      	b.n	8007c3a <_dtoa_r+0x94a>
 8007c50:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 8101 	beq.w	8007e5e <_dtoa_r+0xb6e>
 8007c5c:	2e00      	cmp	r6, #0
 8007c5e:	dd05      	ble.n	8007c6c <_dtoa_r+0x97c>
 8007c60:	4629      	mov	r1, r5
 8007c62:	4632      	mov	r2, r6
 8007c64:	4648      	mov	r0, r9
 8007c66:	f000 fc19 	bl	800849c <__lshift>
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	9b08      	ldr	r3, [sp, #32]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d05c      	beq.n	8007d2c <_dtoa_r+0xa3c>
 8007c72:	6869      	ldr	r1, [r5, #4]
 8007c74:	4648      	mov	r0, r9
 8007c76:	f000 fa0b 	bl	8008090 <_Balloc>
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	b928      	cbnz	r0, 8007c8a <_dtoa_r+0x99a>
 8007c7e:	4b82      	ldr	r3, [pc, #520]	@ (8007e88 <_dtoa_r+0xb98>)
 8007c80:	4602      	mov	r2, r0
 8007c82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c86:	f7ff bb4a 	b.w	800731e <_dtoa_r+0x2e>
 8007c8a:	692a      	ldr	r2, [r5, #16]
 8007c8c:	3202      	adds	r2, #2
 8007c8e:	0092      	lsls	r2, r2, #2
 8007c90:	f105 010c 	add.w	r1, r5, #12
 8007c94:	300c      	adds	r0, #12
 8007c96:	f000 fff7 	bl	8008c88 <memcpy>
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	4631      	mov	r1, r6
 8007c9e:	4648      	mov	r0, r9
 8007ca0:	f000 fbfc 	bl	800849c <__lshift>
 8007ca4:	f10a 0301 	add.w	r3, sl, #1
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	eb0a 030b 	add.w	r3, sl, fp
 8007cae:	9308      	str	r3, [sp, #32]
 8007cb0:	9b04      	ldr	r3, [sp, #16]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	462f      	mov	r7, r5
 8007cb8:	9306      	str	r3, [sp, #24]
 8007cba:	4605      	mov	r5, r0
 8007cbc:	9b00      	ldr	r3, [sp, #0]
 8007cbe:	9802      	ldr	r0, [sp, #8]
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	f103 3bff 	add.w	fp, r3, #4294967295
 8007cc6:	f7ff fa88 	bl	80071da <quorem>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	3330      	adds	r3, #48	@ 0x30
 8007cce:	9003      	str	r0, [sp, #12]
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	9802      	ldr	r0, [sp, #8]
 8007cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cd6:	f000 fc4d 	bl	8008574 <__mcmp>
 8007cda:	462a      	mov	r2, r5
 8007cdc:	9004      	str	r0, [sp, #16]
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4648      	mov	r0, r9
 8007ce2:	f000 fc63 	bl	80085ac <__mdiff>
 8007ce6:	68c2      	ldr	r2, [r0, #12]
 8007ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cea:	4606      	mov	r6, r0
 8007cec:	bb02      	cbnz	r2, 8007d30 <_dtoa_r+0xa40>
 8007cee:	4601      	mov	r1, r0
 8007cf0:	9802      	ldr	r0, [sp, #8]
 8007cf2:	f000 fc3f 	bl	8008574 <__mcmp>
 8007cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4648      	mov	r0, r9
 8007cfe:	920c      	str	r2, [sp, #48]	@ 0x30
 8007d00:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d02:	f000 fa05 	bl	8008110 <_Bfree>
 8007d06:	9b07      	ldr	r3, [sp, #28]
 8007d08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007d0a:	9e00      	ldr	r6, [sp, #0]
 8007d0c:	ea42 0103 	orr.w	r1, r2, r3
 8007d10:	9b06      	ldr	r3, [sp, #24]
 8007d12:	4319      	orrs	r1, r3
 8007d14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d16:	d10d      	bne.n	8007d34 <_dtoa_r+0xa44>
 8007d18:	2b39      	cmp	r3, #57	@ 0x39
 8007d1a:	d027      	beq.n	8007d6c <_dtoa_r+0xa7c>
 8007d1c:	9a04      	ldr	r2, [sp, #16]
 8007d1e:	2a00      	cmp	r2, #0
 8007d20:	dd01      	ble.n	8007d26 <_dtoa_r+0xa36>
 8007d22:	9b03      	ldr	r3, [sp, #12]
 8007d24:	3331      	adds	r3, #49	@ 0x31
 8007d26:	f88b 3000 	strb.w	r3, [fp]
 8007d2a:	e52e      	b.n	800778a <_dtoa_r+0x49a>
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	e7b9      	b.n	8007ca4 <_dtoa_r+0x9b4>
 8007d30:	2201      	movs	r2, #1
 8007d32:	e7e2      	b.n	8007cfa <_dtoa_r+0xa0a>
 8007d34:	9904      	ldr	r1, [sp, #16]
 8007d36:	2900      	cmp	r1, #0
 8007d38:	db04      	blt.n	8007d44 <_dtoa_r+0xa54>
 8007d3a:	9807      	ldr	r0, [sp, #28]
 8007d3c:	4301      	orrs	r1, r0
 8007d3e:	9806      	ldr	r0, [sp, #24]
 8007d40:	4301      	orrs	r1, r0
 8007d42:	d120      	bne.n	8007d86 <_dtoa_r+0xa96>
 8007d44:	2a00      	cmp	r2, #0
 8007d46:	ddee      	ble.n	8007d26 <_dtoa_r+0xa36>
 8007d48:	9902      	ldr	r1, [sp, #8]
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	4648      	mov	r0, r9
 8007d50:	f000 fba4 	bl	800849c <__lshift>
 8007d54:	4621      	mov	r1, r4
 8007d56:	9002      	str	r0, [sp, #8]
 8007d58:	f000 fc0c 	bl	8008574 <__mcmp>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	9b00      	ldr	r3, [sp, #0]
 8007d60:	dc02      	bgt.n	8007d68 <_dtoa_r+0xa78>
 8007d62:	d1e0      	bne.n	8007d26 <_dtoa_r+0xa36>
 8007d64:	07da      	lsls	r2, r3, #31
 8007d66:	d5de      	bpl.n	8007d26 <_dtoa_r+0xa36>
 8007d68:	2b39      	cmp	r3, #57	@ 0x39
 8007d6a:	d1da      	bne.n	8007d22 <_dtoa_r+0xa32>
 8007d6c:	2339      	movs	r3, #57	@ 0x39
 8007d6e:	f88b 3000 	strb.w	r3, [fp]
 8007d72:	4633      	mov	r3, r6
 8007d74:	461e      	mov	r6, r3
 8007d76:	3b01      	subs	r3, #1
 8007d78:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d7c:	2a39      	cmp	r2, #57	@ 0x39
 8007d7e:	d04e      	beq.n	8007e1e <_dtoa_r+0xb2e>
 8007d80:	3201      	adds	r2, #1
 8007d82:	701a      	strb	r2, [r3, #0]
 8007d84:	e501      	b.n	800778a <_dtoa_r+0x49a>
 8007d86:	2a00      	cmp	r2, #0
 8007d88:	dd03      	ble.n	8007d92 <_dtoa_r+0xaa2>
 8007d8a:	2b39      	cmp	r3, #57	@ 0x39
 8007d8c:	d0ee      	beq.n	8007d6c <_dtoa_r+0xa7c>
 8007d8e:	3301      	adds	r3, #1
 8007d90:	e7c9      	b.n	8007d26 <_dtoa_r+0xa36>
 8007d92:	9a00      	ldr	r2, [sp, #0]
 8007d94:	9908      	ldr	r1, [sp, #32]
 8007d96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007d9a:	428a      	cmp	r2, r1
 8007d9c:	d028      	beq.n	8007df0 <_dtoa_r+0xb00>
 8007d9e:	9902      	ldr	r1, [sp, #8]
 8007da0:	2300      	movs	r3, #0
 8007da2:	220a      	movs	r2, #10
 8007da4:	4648      	mov	r0, r9
 8007da6:	f000 f9d5 	bl	8008154 <__multadd>
 8007daa:	42af      	cmp	r7, r5
 8007dac:	9002      	str	r0, [sp, #8]
 8007dae:	f04f 0300 	mov.w	r3, #0
 8007db2:	f04f 020a 	mov.w	r2, #10
 8007db6:	4639      	mov	r1, r7
 8007db8:	4648      	mov	r0, r9
 8007dba:	d107      	bne.n	8007dcc <_dtoa_r+0xadc>
 8007dbc:	f000 f9ca 	bl	8008154 <__multadd>
 8007dc0:	4607      	mov	r7, r0
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	9b00      	ldr	r3, [sp, #0]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	e777      	b.n	8007cbc <_dtoa_r+0x9cc>
 8007dcc:	f000 f9c2 	bl	8008154 <__multadd>
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	4607      	mov	r7, r0
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	220a      	movs	r2, #10
 8007dd8:	4648      	mov	r0, r9
 8007dda:	f000 f9bb 	bl	8008154 <__multadd>
 8007dde:	4605      	mov	r5, r0
 8007de0:	e7f0      	b.n	8007dc4 <_dtoa_r+0xad4>
 8007de2:	f1bb 0f00 	cmp.w	fp, #0
 8007de6:	bfcc      	ite	gt
 8007de8:	465e      	movgt	r6, fp
 8007dea:	2601      	movle	r6, #1
 8007dec:	4456      	add	r6, sl
 8007dee:	2700      	movs	r7, #0
 8007df0:	9902      	ldr	r1, [sp, #8]
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	2201      	movs	r2, #1
 8007df6:	4648      	mov	r0, r9
 8007df8:	f000 fb50 	bl	800849c <__lshift>
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	9002      	str	r0, [sp, #8]
 8007e00:	f000 fbb8 	bl	8008574 <__mcmp>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	dcb4      	bgt.n	8007d72 <_dtoa_r+0xa82>
 8007e08:	d102      	bne.n	8007e10 <_dtoa_r+0xb20>
 8007e0a:	9b00      	ldr	r3, [sp, #0]
 8007e0c:	07db      	lsls	r3, r3, #31
 8007e0e:	d4b0      	bmi.n	8007d72 <_dtoa_r+0xa82>
 8007e10:	4633      	mov	r3, r6
 8007e12:	461e      	mov	r6, r3
 8007e14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e18:	2a30      	cmp	r2, #48	@ 0x30
 8007e1a:	d0fa      	beq.n	8007e12 <_dtoa_r+0xb22>
 8007e1c:	e4b5      	b.n	800778a <_dtoa_r+0x49a>
 8007e1e:	459a      	cmp	sl, r3
 8007e20:	d1a8      	bne.n	8007d74 <_dtoa_r+0xa84>
 8007e22:	2331      	movs	r3, #49	@ 0x31
 8007e24:	f108 0801 	add.w	r8, r8, #1
 8007e28:	f88a 3000 	strb.w	r3, [sl]
 8007e2c:	e4ad      	b.n	800778a <_dtoa_r+0x49a>
 8007e2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e30:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007e8c <_dtoa_r+0xb9c>
 8007e34:	b11b      	cbz	r3, 8007e3e <_dtoa_r+0xb4e>
 8007e36:	f10a 0308 	add.w	r3, sl, #8
 8007e3a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007e3c:	6013      	str	r3, [r2, #0]
 8007e3e:	4650      	mov	r0, sl
 8007e40:	b017      	add	sp, #92	@ 0x5c
 8007e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e46:	9b07      	ldr	r3, [sp, #28]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	f77f ae2e 	ble.w	8007aaa <_dtoa_r+0x7ba>
 8007e4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e50:	9308      	str	r3, [sp, #32]
 8007e52:	2001      	movs	r0, #1
 8007e54:	e64d      	b.n	8007af2 <_dtoa_r+0x802>
 8007e56:	f1bb 0f00 	cmp.w	fp, #0
 8007e5a:	f77f aed9 	ble.w	8007c10 <_dtoa_r+0x920>
 8007e5e:	4656      	mov	r6, sl
 8007e60:	9802      	ldr	r0, [sp, #8]
 8007e62:	4621      	mov	r1, r4
 8007e64:	f7ff f9b9 	bl	80071da <quorem>
 8007e68:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007e6c:	f806 3b01 	strb.w	r3, [r6], #1
 8007e70:	eba6 020a 	sub.w	r2, r6, sl
 8007e74:	4593      	cmp	fp, r2
 8007e76:	ddb4      	ble.n	8007de2 <_dtoa_r+0xaf2>
 8007e78:	9902      	ldr	r1, [sp, #8]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	220a      	movs	r2, #10
 8007e7e:	4648      	mov	r0, r9
 8007e80:	f000 f968 	bl	8008154 <__multadd>
 8007e84:	9002      	str	r0, [sp, #8]
 8007e86:	e7eb      	b.n	8007e60 <_dtoa_r+0xb70>
 8007e88:	08008fa4 	.word	0x08008fa4
 8007e8c:	08008f28 	.word	0x08008f28

08007e90 <_free_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4605      	mov	r5, r0
 8007e94:	2900      	cmp	r1, #0
 8007e96:	d041      	beq.n	8007f1c <_free_r+0x8c>
 8007e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e9c:	1f0c      	subs	r4, r1, #4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	bfb8      	it	lt
 8007ea2:	18e4      	addlt	r4, r4, r3
 8007ea4:	f000 f8e8 	bl	8008078 <__malloc_lock>
 8007ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f20 <_free_r+0x90>)
 8007eaa:	6813      	ldr	r3, [r2, #0]
 8007eac:	b933      	cbnz	r3, 8007ebc <_free_r+0x2c>
 8007eae:	6063      	str	r3, [r4, #4]
 8007eb0:	6014      	str	r4, [r2, #0]
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eb8:	f000 b8e4 	b.w	8008084 <__malloc_unlock>
 8007ebc:	42a3      	cmp	r3, r4
 8007ebe:	d908      	bls.n	8007ed2 <_free_r+0x42>
 8007ec0:	6820      	ldr	r0, [r4, #0]
 8007ec2:	1821      	adds	r1, r4, r0
 8007ec4:	428b      	cmp	r3, r1
 8007ec6:	bf01      	itttt	eq
 8007ec8:	6819      	ldreq	r1, [r3, #0]
 8007eca:	685b      	ldreq	r3, [r3, #4]
 8007ecc:	1809      	addeq	r1, r1, r0
 8007ece:	6021      	streq	r1, [r4, #0]
 8007ed0:	e7ed      	b.n	8007eae <_free_r+0x1e>
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	b10b      	cbz	r3, 8007edc <_free_r+0x4c>
 8007ed8:	42a3      	cmp	r3, r4
 8007eda:	d9fa      	bls.n	8007ed2 <_free_r+0x42>
 8007edc:	6811      	ldr	r1, [r2, #0]
 8007ede:	1850      	adds	r0, r2, r1
 8007ee0:	42a0      	cmp	r0, r4
 8007ee2:	d10b      	bne.n	8007efc <_free_r+0x6c>
 8007ee4:	6820      	ldr	r0, [r4, #0]
 8007ee6:	4401      	add	r1, r0
 8007ee8:	1850      	adds	r0, r2, r1
 8007eea:	4283      	cmp	r3, r0
 8007eec:	6011      	str	r1, [r2, #0]
 8007eee:	d1e0      	bne.n	8007eb2 <_free_r+0x22>
 8007ef0:	6818      	ldr	r0, [r3, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	6053      	str	r3, [r2, #4]
 8007ef6:	4408      	add	r0, r1
 8007ef8:	6010      	str	r0, [r2, #0]
 8007efa:	e7da      	b.n	8007eb2 <_free_r+0x22>
 8007efc:	d902      	bls.n	8007f04 <_free_r+0x74>
 8007efe:	230c      	movs	r3, #12
 8007f00:	602b      	str	r3, [r5, #0]
 8007f02:	e7d6      	b.n	8007eb2 <_free_r+0x22>
 8007f04:	6820      	ldr	r0, [r4, #0]
 8007f06:	1821      	adds	r1, r4, r0
 8007f08:	428b      	cmp	r3, r1
 8007f0a:	bf04      	itt	eq
 8007f0c:	6819      	ldreq	r1, [r3, #0]
 8007f0e:	685b      	ldreq	r3, [r3, #4]
 8007f10:	6063      	str	r3, [r4, #4]
 8007f12:	bf04      	itt	eq
 8007f14:	1809      	addeq	r1, r1, r0
 8007f16:	6021      	streq	r1, [r4, #0]
 8007f18:	6054      	str	r4, [r2, #4]
 8007f1a:	e7ca      	b.n	8007eb2 <_free_r+0x22>
 8007f1c:	bd38      	pop	{r3, r4, r5, pc}
 8007f1e:	bf00      	nop
 8007f20:	2000048c 	.word	0x2000048c

08007f24 <malloc>:
 8007f24:	4b02      	ldr	r3, [pc, #8]	@ (8007f30 <malloc+0xc>)
 8007f26:	4601      	mov	r1, r0
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	f000 b825 	b.w	8007f78 <_malloc_r>
 8007f2e:	bf00      	nop
 8007f30:	2000001c 	.word	0x2000001c

08007f34 <sbrk_aligned>:
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	4e0f      	ldr	r6, [pc, #60]	@ (8007f74 <sbrk_aligned+0x40>)
 8007f38:	460c      	mov	r4, r1
 8007f3a:	6831      	ldr	r1, [r6, #0]
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	b911      	cbnz	r1, 8007f46 <sbrk_aligned+0x12>
 8007f40:	f000 fe92 	bl	8008c68 <_sbrk_r>
 8007f44:	6030      	str	r0, [r6, #0]
 8007f46:	4621      	mov	r1, r4
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f000 fe8d 	bl	8008c68 <_sbrk_r>
 8007f4e:	1c43      	adds	r3, r0, #1
 8007f50:	d103      	bne.n	8007f5a <sbrk_aligned+0x26>
 8007f52:	f04f 34ff 	mov.w	r4, #4294967295
 8007f56:	4620      	mov	r0, r4
 8007f58:	bd70      	pop	{r4, r5, r6, pc}
 8007f5a:	1cc4      	adds	r4, r0, #3
 8007f5c:	f024 0403 	bic.w	r4, r4, #3
 8007f60:	42a0      	cmp	r0, r4
 8007f62:	d0f8      	beq.n	8007f56 <sbrk_aligned+0x22>
 8007f64:	1a21      	subs	r1, r4, r0
 8007f66:	4628      	mov	r0, r5
 8007f68:	f000 fe7e 	bl	8008c68 <_sbrk_r>
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d1f2      	bne.n	8007f56 <sbrk_aligned+0x22>
 8007f70:	e7ef      	b.n	8007f52 <sbrk_aligned+0x1e>
 8007f72:	bf00      	nop
 8007f74:	20000488 	.word	0x20000488

08007f78 <_malloc_r>:
 8007f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f7c:	1ccd      	adds	r5, r1, #3
 8007f7e:	f025 0503 	bic.w	r5, r5, #3
 8007f82:	3508      	adds	r5, #8
 8007f84:	2d0c      	cmp	r5, #12
 8007f86:	bf38      	it	cc
 8007f88:	250c      	movcc	r5, #12
 8007f8a:	2d00      	cmp	r5, #0
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	db01      	blt.n	8007f94 <_malloc_r+0x1c>
 8007f90:	42a9      	cmp	r1, r5
 8007f92:	d904      	bls.n	8007f9e <_malloc_r+0x26>
 8007f94:	230c      	movs	r3, #12
 8007f96:	6033      	str	r3, [r6, #0]
 8007f98:	2000      	movs	r0, #0
 8007f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008074 <_malloc_r+0xfc>
 8007fa2:	f000 f869 	bl	8008078 <__malloc_lock>
 8007fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8007faa:	461c      	mov	r4, r3
 8007fac:	bb44      	cbnz	r4, 8008000 <_malloc_r+0x88>
 8007fae:	4629      	mov	r1, r5
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f7ff ffbf 	bl	8007f34 <sbrk_aligned>
 8007fb6:	1c43      	adds	r3, r0, #1
 8007fb8:	4604      	mov	r4, r0
 8007fba:	d158      	bne.n	800806e <_malloc_r+0xf6>
 8007fbc:	f8d8 4000 	ldr.w	r4, [r8]
 8007fc0:	4627      	mov	r7, r4
 8007fc2:	2f00      	cmp	r7, #0
 8007fc4:	d143      	bne.n	800804e <_malloc_r+0xd6>
 8007fc6:	2c00      	cmp	r4, #0
 8007fc8:	d04b      	beq.n	8008062 <_malloc_r+0xea>
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	4639      	mov	r1, r7
 8007fce:	4630      	mov	r0, r6
 8007fd0:	eb04 0903 	add.w	r9, r4, r3
 8007fd4:	f000 fe48 	bl	8008c68 <_sbrk_r>
 8007fd8:	4581      	cmp	r9, r0
 8007fda:	d142      	bne.n	8008062 <_malloc_r+0xea>
 8007fdc:	6821      	ldr	r1, [r4, #0]
 8007fde:	1a6d      	subs	r5, r5, r1
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f7ff ffa6 	bl	8007f34 <sbrk_aligned>
 8007fe8:	3001      	adds	r0, #1
 8007fea:	d03a      	beq.n	8008062 <_malloc_r+0xea>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	442b      	add	r3, r5
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	bb62      	cbnz	r2, 8008054 <_malloc_r+0xdc>
 8007ffa:	f8c8 7000 	str.w	r7, [r8]
 8007ffe:	e00f      	b.n	8008020 <_malloc_r+0xa8>
 8008000:	6822      	ldr	r2, [r4, #0]
 8008002:	1b52      	subs	r2, r2, r5
 8008004:	d420      	bmi.n	8008048 <_malloc_r+0xd0>
 8008006:	2a0b      	cmp	r2, #11
 8008008:	d917      	bls.n	800803a <_malloc_r+0xc2>
 800800a:	1961      	adds	r1, r4, r5
 800800c:	42a3      	cmp	r3, r4
 800800e:	6025      	str	r5, [r4, #0]
 8008010:	bf18      	it	ne
 8008012:	6059      	strne	r1, [r3, #4]
 8008014:	6863      	ldr	r3, [r4, #4]
 8008016:	bf08      	it	eq
 8008018:	f8c8 1000 	streq.w	r1, [r8]
 800801c:	5162      	str	r2, [r4, r5]
 800801e:	604b      	str	r3, [r1, #4]
 8008020:	4630      	mov	r0, r6
 8008022:	f000 f82f 	bl	8008084 <__malloc_unlock>
 8008026:	f104 000b 	add.w	r0, r4, #11
 800802a:	1d23      	adds	r3, r4, #4
 800802c:	f020 0007 	bic.w	r0, r0, #7
 8008030:	1ac2      	subs	r2, r0, r3
 8008032:	bf1c      	itt	ne
 8008034:	1a1b      	subne	r3, r3, r0
 8008036:	50a3      	strne	r3, [r4, r2]
 8008038:	e7af      	b.n	8007f9a <_malloc_r+0x22>
 800803a:	6862      	ldr	r2, [r4, #4]
 800803c:	42a3      	cmp	r3, r4
 800803e:	bf0c      	ite	eq
 8008040:	f8c8 2000 	streq.w	r2, [r8]
 8008044:	605a      	strne	r2, [r3, #4]
 8008046:	e7eb      	b.n	8008020 <_malloc_r+0xa8>
 8008048:	4623      	mov	r3, r4
 800804a:	6864      	ldr	r4, [r4, #4]
 800804c:	e7ae      	b.n	8007fac <_malloc_r+0x34>
 800804e:	463c      	mov	r4, r7
 8008050:	687f      	ldr	r7, [r7, #4]
 8008052:	e7b6      	b.n	8007fc2 <_malloc_r+0x4a>
 8008054:	461a      	mov	r2, r3
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	42a3      	cmp	r3, r4
 800805a:	d1fb      	bne.n	8008054 <_malloc_r+0xdc>
 800805c:	2300      	movs	r3, #0
 800805e:	6053      	str	r3, [r2, #4]
 8008060:	e7de      	b.n	8008020 <_malloc_r+0xa8>
 8008062:	230c      	movs	r3, #12
 8008064:	6033      	str	r3, [r6, #0]
 8008066:	4630      	mov	r0, r6
 8008068:	f000 f80c 	bl	8008084 <__malloc_unlock>
 800806c:	e794      	b.n	8007f98 <_malloc_r+0x20>
 800806e:	6005      	str	r5, [r0, #0]
 8008070:	e7d6      	b.n	8008020 <_malloc_r+0xa8>
 8008072:	bf00      	nop
 8008074:	2000048c 	.word	0x2000048c

08008078 <__malloc_lock>:
 8008078:	4801      	ldr	r0, [pc, #4]	@ (8008080 <__malloc_lock+0x8>)
 800807a:	f7ff b8ac 	b.w	80071d6 <__retarget_lock_acquire_recursive>
 800807e:	bf00      	nop
 8008080:	20000484 	.word	0x20000484

08008084 <__malloc_unlock>:
 8008084:	4801      	ldr	r0, [pc, #4]	@ (800808c <__malloc_unlock+0x8>)
 8008086:	f7ff b8a7 	b.w	80071d8 <__retarget_lock_release_recursive>
 800808a:	bf00      	nop
 800808c:	20000484 	.word	0x20000484

08008090 <_Balloc>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	69c6      	ldr	r6, [r0, #28]
 8008094:	4604      	mov	r4, r0
 8008096:	460d      	mov	r5, r1
 8008098:	b976      	cbnz	r6, 80080b8 <_Balloc+0x28>
 800809a:	2010      	movs	r0, #16
 800809c:	f7ff ff42 	bl	8007f24 <malloc>
 80080a0:	4602      	mov	r2, r0
 80080a2:	61e0      	str	r0, [r4, #28]
 80080a4:	b920      	cbnz	r0, 80080b0 <_Balloc+0x20>
 80080a6:	4b18      	ldr	r3, [pc, #96]	@ (8008108 <_Balloc+0x78>)
 80080a8:	4818      	ldr	r0, [pc, #96]	@ (800810c <_Balloc+0x7c>)
 80080aa:	216b      	movs	r1, #107	@ 0x6b
 80080ac:	f000 fdfa 	bl	8008ca4 <__assert_func>
 80080b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080b4:	6006      	str	r6, [r0, #0]
 80080b6:	60c6      	str	r6, [r0, #12]
 80080b8:	69e6      	ldr	r6, [r4, #28]
 80080ba:	68f3      	ldr	r3, [r6, #12]
 80080bc:	b183      	cbz	r3, 80080e0 <_Balloc+0x50>
 80080be:	69e3      	ldr	r3, [r4, #28]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080c6:	b9b8      	cbnz	r0, 80080f8 <_Balloc+0x68>
 80080c8:	2101      	movs	r1, #1
 80080ca:	fa01 f605 	lsl.w	r6, r1, r5
 80080ce:	1d72      	adds	r2, r6, #5
 80080d0:	0092      	lsls	r2, r2, #2
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 fe04 	bl	8008ce0 <_calloc_r>
 80080d8:	b160      	cbz	r0, 80080f4 <_Balloc+0x64>
 80080da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080de:	e00e      	b.n	80080fe <_Balloc+0x6e>
 80080e0:	2221      	movs	r2, #33	@ 0x21
 80080e2:	2104      	movs	r1, #4
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 fdfb 	bl	8008ce0 <_calloc_r>
 80080ea:	69e3      	ldr	r3, [r4, #28]
 80080ec:	60f0      	str	r0, [r6, #12]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e4      	bne.n	80080be <_Balloc+0x2e>
 80080f4:	2000      	movs	r0, #0
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
 80080f8:	6802      	ldr	r2, [r0, #0]
 80080fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080fe:	2300      	movs	r3, #0
 8008100:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008104:	e7f7      	b.n	80080f6 <_Balloc+0x66>
 8008106:	bf00      	nop
 8008108:	08008f35 	.word	0x08008f35
 800810c:	08008fb5 	.word	0x08008fb5

08008110 <_Bfree>:
 8008110:	b570      	push	{r4, r5, r6, lr}
 8008112:	69c6      	ldr	r6, [r0, #28]
 8008114:	4605      	mov	r5, r0
 8008116:	460c      	mov	r4, r1
 8008118:	b976      	cbnz	r6, 8008138 <_Bfree+0x28>
 800811a:	2010      	movs	r0, #16
 800811c:	f7ff ff02 	bl	8007f24 <malloc>
 8008120:	4602      	mov	r2, r0
 8008122:	61e8      	str	r0, [r5, #28]
 8008124:	b920      	cbnz	r0, 8008130 <_Bfree+0x20>
 8008126:	4b09      	ldr	r3, [pc, #36]	@ (800814c <_Bfree+0x3c>)
 8008128:	4809      	ldr	r0, [pc, #36]	@ (8008150 <_Bfree+0x40>)
 800812a:	218f      	movs	r1, #143	@ 0x8f
 800812c:	f000 fdba 	bl	8008ca4 <__assert_func>
 8008130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008134:	6006      	str	r6, [r0, #0]
 8008136:	60c6      	str	r6, [r0, #12]
 8008138:	b13c      	cbz	r4, 800814a <_Bfree+0x3a>
 800813a:	69eb      	ldr	r3, [r5, #28]
 800813c:	6862      	ldr	r2, [r4, #4]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008144:	6021      	str	r1, [r4, #0]
 8008146:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	08008f35 	.word	0x08008f35
 8008150:	08008fb5 	.word	0x08008fb5

08008154 <__multadd>:
 8008154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008158:	690d      	ldr	r5, [r1, #16]
 800815a:	4607      	mov	r7, r0
 800815c:	460c      	mov	r4, r1
 800815e:	461e      	mov	r6, r3
 8008160:	f101 0c14 	add.w	ip, r1, #20
 8008164:	2000      	movs	r0, #0
 8008166:	f8dc 3000 	ldr.w	r3, [ip]
 800816a:	b299      	uxth	r1, r3
 800816c:	fb02 6101 	mla	r1, r2, r1, r6
 8008170:	0c1e      	lsrs	r6, r3, #16
 8008172:	0c0b      	lsrs	r3, r1, #16
 8008174:	fb02 3306 	mla	r3, r2, r6, r3
 8008178:	b289      	uxth	r1, r1
 800817a:	3001      	adds	r0, #1
 800817c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008180:	4285      	cmp	r5, r0
 8008182:	f84c 1b04 	str.w	r1, [ip], #4
 8008186:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800818a:	dcec      	bgt.n	8008166 <__multadd+0x12>
 800818c:	b30e      	cbz	r6, 80081d2 <__multadd+0x7e>
 800818e:	68a3      	ldr	r3, [r4, #8]
 8008190:	42ab      	cmp	r3, r5
 8008192:	dc19      	bgt.n	80081c8 <__multadd+0x74>
 8008194:	6861      	ldr	r1, [r4, #4]
 8008196:	4638      	mov	r0, r7
 8008198:	3101      	adds	r1, #1
 800819a:	f7ff ff79 	bl	8008090 <_Balloc>
 800819e:	4680      	mov	r8, r0
 80081a0:	b928      	cbnz	r0, 80081ae <__multadd+0x5a>
 80081a2:	4602      	mov	r2, r0
 80081a4:	4b0c      	ldr	r3, [pc, #48]	@ (80081d8 <__multadd+0x84>)
 80081a6:	480d      	ldr	r0, [pc, #52]	@ (80081dc <__multadd+0x88>)
 80081a8:	21ba      	movs	r1, #186	@ 0xba
 80081aa:	f000 fd7b 	bl	8008ca4 <__assert_func>
 80081ae:	6922      	ldr	r2, [r4, #16]
 80081b0:	3202      	adds	r2, #2
 80081b2:	f104 010c 	add.w	r1, r4, #12
 80081b6:	0092      	lsls	r2, r2, #2
 80081b8:	300c      	adds	r0, #12
 80081ba:	f000 fd65 	bl	8008c88 <memcpy>
 80081be:	4621      	mov	r1, r4
 80081c0:	4638      	mov	r0, r7
 80081c2:	f7ff ffa5 	bl	8008110 <_Bfree>
 80081c6:	4644      	mov	r4, r8
 80081c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081cc:	3501      	adds	r5, #1
 80081ce:	615e      	str	r6, [r3, #20]
 80081d0:	6125      	str	r5, [r4, #16]
 80081d2:	4620      	mov	r0, r4
 80081d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d8:	08008fa4 	.word	0x08008fa4
 80081dc:	08008fb5 	.word	0x08008fb5

080081e0 <__hi0bits>:
 80081e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80081e4:	4603      	mov	r3, r0
 80081e6:	bf36      	itet	cc
 80081e8:	0403      	lslcc	r3, r0, #16
 80081ea:	2000      	movcs	r0, #0
 80081ec:	2010      	movcc	r0, #16
 80081ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081f2:	bf3c      	itt	cc
 80081f4:	021b      	lslcc	r3, r3, #8
 80081f6:	3008      	addcc	r0, #8
 80081f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081fc:	bf3c      	itt	cc
 80081fe:	011b      	lslcc	r3, r3, #4
 8008200:	3004      	addcc	r0, #4
 8008202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008206:	bf3c      	itt	cc
 8008208:	009b      	lslcc	r3, r3, #2
 800820a:	3002      	addcc	r0, #2
 800820c:	2b00      	cmp	r3, #0
 800820e:	db05      	blt.n	800821c <__hi0bits+0x3c>
 8008210:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008214:	f100 0001 	add.w	r0, r0, #1
 8008218:	bf08      	it	eq
 800821a:	2020      	moveq	r0, #32
 800821c:	4770      	bx	lr

0800821e <__lo0bits>:
 800821e:	6803      	ldr	r3, [r0, #0]
 8008220:	4602      	mov	r2, r0
 8008222:	f013 0007 	ands.w	r0, r3, #7
 8008226:	d00b      	beq.n	8008240 <__lo0bits+0x22>
 8008228:	07d9      	lsls	r1, r3, #31
 800822a:	d421      	bmi.n	8008270 <__lo0bits+0x52>
 800822c:	0798      	lsls	r0, r3, #30
 800822e:	bf49      	itett	mi
 8008230:	085b      	lsrmi	r3, r3, #1
 8008232:	089b      	lsrpl	r3, r3, #2
 8008234:	2001      	movmi	r0, #1
 8008236:	6013      	strmi	r3, [r2, #0]
 8008238:	bf5c      	itt	pl
 800823a:	6013      	strpl	r3, [r2, #0]
 800823c:	2002      	movpl	r0, #2
 800823e:	4770      	bx	lr
 8008240:	b299      	uxth	r1, r3
 8008242:	b909      	cbnz	r1, 8008248 <__lo0bits+0x2a>
 8008244:	0c1b      	lsrs	r3, r3, #16
 8008246:	2010      	movs	r0, #16
 8008248:	b2d9      	uxtb	r1, r3
 800824a:	b909      	cbnz	r1, 8008250 <__lo0bits+0x32>
 800824c:	3008      	adds	r0, #8
 800824e:	0a1b      	lsrs	r3, r3, #8
 8008250:	0719      	lsls	r1, r3, #28
 8008252:	bf04      	itt	eq
 8008254:	091b      	lsreq	r3, r3, #4
 8008256:	3004      	addeq	r0, #4
 8008258:	0799      	lsls	r1, r3, #30
 800825a:	bf04      	itt	eq
 800825c:	089b      	lsreq	r3, r3, #2
 800825e:	3002      	addeq	r0, #2
 8008260:	07d9      	lsls	r1, r3, #31
 8008262:	d403      	bmi.n	800826c <__lo0bits+0x4e>
 8008264:	085b      	lsrs	r3, r3, #1
 8008266:	f100 0001 	add.w	r0, r0, #1
 800826a:	d003      	beq.n	8008274 <__lo0bits+0x56>
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	4770      	bx	lr
 8008270:	2000      	movs	r0, #0
 8008272:	4770      	bx	lr
 8008274:	2020      	movs	r0, #32
 8008276:	4770      	bx	lr

08008278 <__i2b>:
 8008278:	b510      	push	{r4, lr}
 800827a:	460c      	mov	r4, r1
 800827c:	2101      	movs	r1, #1
 800827e:	f7ff ff07 	bl	8008090 <_Balloc>
 8008282:	4602      	mov	r2, r0
 8008284:	b928      	cbnz	r0, 8008292 <__i2b+0x1a>
 8008286:	4b05      	ldr	r3, [pc, #20]	@ (800829c <__i2b+0x24>)
 8008288:	4805      	ldr	r0, [pc, #20]	@ (80082a0 <__i2b+0x28>)
 800828a:	f240 1145 	movw	r1, #325	@ 0x145
 800828e:	f000 fd09 	bl	8008ca4 <__assert_func>
 8008292:	2301      	movs	r3, #1
 8008294:	6144      	str	r4, [r0, #20]
 8008296:	6103      	str	r3, [r0, #16]
 8008298:	bd10      	pop	{r4, pc}
 800829a:	bf00      	nop
 800829c:	08008fa4 	.word	0x08008fa4
 80082a0:	08008fb5 	.word	0x08008fb5

080082a4 <__multiply>:
 80082a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a8:	4617      	mov	r7, r2
 80082aa:	690a      	ldr	r2, [r1, #16]
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	bfa8      	it	ge
 80082b2:	463b      	movge	r3, r7
 80082b4:	4689      	mov	r9, r1
 80082b6:	bfa4      	itt	ge
 80082b8:	460f      	movge	r7, r1
 80082ba:	4699      	movge	r9, r3
 80082bc:	693d      	ldr	r5, [r7, #16]
 80082be:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	6879      	ldr	r1, [r7, #4]
 80082c6:	eb05 060a 	add.w	r6, r5, sl
 80082ca:	42b3      	cmp	r3, r6
 80082cc:	b085      	sub	sp, #20
 80082ce:	bfb8      	it	lt
 80082d0:	3101      	addlt	r1, #1
 80082d2:	f7ff fedd 	bl	8008090 <_Balloc>
 80082d6:	b930      	cbnz	r0, 80082e6 <__multiply+0x42>
 80082d8:	4602      	mov	r2, r0
 80082da:	4b41      	ldr	r3, [pc, #260]	@ (80083e0 <__multiply+0x13c>)
 80082dc:	4841      	ldr	r0, [pc, #260]	@ (80083e4 <__multiply+0x140>)
 80082de:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80082e2:	f000 fcdf 	bl	8008ca4 <__assert_func>
 80082e6:	f100 0414 	add.w	r4, r0, #20
 80082ea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80082ee:	4623      	mov	r3, r4
 80082f0:	2200      	movs	r2, #0
 80082f2:	4573      	cmp	r3, lr
 80082f4:	d320      	bcc.n	8008338 <__multiply+0x94>
 80082f6:	f107 0814 	add.w	r8, r7, #20
 80082fa:	f109 0114 	add.w	r1, r9, #20
 80082fe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008302:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008306:	9302      	str	r3, [sp, #8]
 8008308:	1beb      	subs	r3, r5, r7
 800830a:	3b15      	subs	r3, #21
 800830c:	f023 0303 	bic.w	r3, r3, #3
 8008310:	3304      	adds	r3, #4
 8008312:	3715      	adds	r7, #21
 8008314:	42bd      	cmp	r5, r7
 8008316:	bf38      	it	cc
 8008318:	2304      	movcc	r3, #4
 800831a:	9301      	str	r3, [sp, #4]
 800831c:	9b02      	ldr	r3, [sp, #8]
 800831e:	9103      	str	r1, [sp, #12]
 8008320:	428b      	cmp	r3, r1
 8008322:	d80c      	bhi.n	800833e <__multiply+0x9a>
 8008324:	2e00      	cmp	r6, #0
 8008326:	dd03      	ble.n	8008330 <__multiply+0x8c>
 8008328:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800832c:	2b00      	cmp	r3, #0
 800832e:	d055      	beq.n	80083dc <__multiply+0x138>
 8008330:	6106      	str	r6, [r0, #16]
 8008332:	b005      	add	sp, #20
 8008334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008338:	f843 2b04 	str.w	r2, [r3], #4
 800833c:	e7d9      	b.n	80082f2 <__multiply+0x4e>
 800833e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008342:	f1ba 0f00 	cmp.w	sl, #0
 8008346:	d01f      	beq.n	8008388 <__multiply+0xe4>
 8008348:	46c4      	mov	ip, r8
 800834a:	46a1      	mov	r9, r4
 800834c:	2700      	movs	r7, #0
 800834e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008352:	f8d9 3000 	ldr.w	r3, [r9]
 8008356:	fa1f fb82 	uxth.w	fp, r2
 800835a:	b29b      	uxth	r3, r3
 800835c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008360:	443b      	add	r3, r7
 8008362:	f8d9 7000 	ldr.w	r7, [r9]
 8008366:	0c12      	lsrs	r2, r2, #16
 8008368:	0c3f      	lsrs	r7, r7, #16
 800836a:	fb0a 7202 	mla	r2, sl, r2, r7
 800836e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008372:	b29b      	uxth	r3, r3
 8008374:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008378:	4565      	cmp	r5, ip
 800837a:	f849 3b04 	str.w	r3, [r9], #4
 800837e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008382:	d8e4      	bhi.n	800834e <__multiply+0xaa>
 8008384:	9b01      	ldr	r3, [sp, #4]
 8008386:	50e7      	str	r7, [r4, r3]
 8008388:	9b03      	ldr	r3, [sp, #12]
 800838a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800838e:	3104      	adds	r1, #4
 8008390:	f1b9 0f00 	cmp.w	r9, #0
 8008394:	d020      	beq.n	80083d8 <__multiply+0x134>
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	4647      	mov	r7, r8
 800839a:	46a4      	mov	ip, r4
 800839c:	f04f 0a00 	mov.w	sl, #0
 80083a0:	f8b7 b000 	ldrh.w	fp, [r7]
 80083a4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80083a8:	fb09 220b 	mla	r2, r9, fp, r2
 80083ac:	4452      	add	r2, sl
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083b4:	f84c 3b04 	str.w	r3, [ip], #4
 80083b8:	f857 3b04 	ldr.w	r3, [r7], #4
 80083bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083c0:	f8bc 3000 	ldrh.w	r3, [ip]
 80083c4:	fb09 330a 	mla	r3, r9, sl, r3
 80083c8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80083cc:	42bd      	cmp	r5, r7
 80083ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083d2:	d8e5      	bhi.n	80083a0 <__multiply+0xfc>
 80083d4:	9a01      	ldr	r2, [sp, #4]
 80083d6:	50a3      	str	r3, [r4, r2]
 80083d8:	3404      	adds	r4, #4
 80083da:	e79f      	b.n	800831c <__multiply+0x78>
 80083dc:	3e01      	subs	r6, #1
 80083de:	e7a1      	b.n	8008324 <__multiply+0x80>
 80083e0:	08008fa4 	.word	0x08008fa4
 80083e4:	08008fb5 	.word	0x08008fb5

080083e8 <__pow5mult>:
 80083e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083ec:	4615      	mov	r5, r2
 80083ee:	f012 0203 	ands.w	r2, r2, #3
 80083f2:	4607      	mov	r7, r0
 80083f4:	460e      	mov	r6, r1
 80083f6:	d007      	beq.n	8008408 <__pow5mult+0x20>
 80083f8:	4c25      	ldr	r4, [pc, #148]	@ (8008490 <__pow5mult+0xa8>)
 80083fa:	3a01      	subs	r2, #1
 80083fc:	2300      	movs	r3, #0
 80083fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008402:	f7ff fea7 	bl	8008154 <__multadd>
 8008406:	4606      	mov	r6, r0
 8008408:	10ad      	asrs	r5, r5, #2
 800840a:	d03d      	beq.n	8008488 <__pow5mult+0xa0>
 800840c:	69fc      	ldr	r4, [r7, #28]
 800840e:	b97c      	cbnz	r4, 8008430 <__pow5mult+0x48>
 8008410:	2010      	movs	r0, #16
 8008412:	f7ff fd87 	bl	8007f24 <malloc>
 8008416:	4602      	mov	r2, r0
 8008418:	61f8      	str	r0, [r7, #28]
 800841a:	b928      	cbnz	r0, 8008428 <__pow5mult+0x40>
 800841c:	4b1d      	ldr	r3, [pc, #116]	@ (8008494 <__pow5mult+0xac>)
 800841e:	481e      	ldr	r0, [pc, #120]	@ (8008498 <__pow5mult+0xb0>)
 8008420:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008424:	f000 fc3e 	bl	8008ca4 <__assert_func>
 8008428:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800842c:	6004      	str	r4, [r0, #0]
 800842e:	60c4      	str	r4, [r0, #12]
 8008430:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008434:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008438:	b94c      	cbnz	r4, 800844e <__pow5mult+0x66>
 800843a:	f240 2171 	movw	r1, #625	@ 0x271
 800843e:	4638      	mov	r0, r7
 8008440:	f7ff ff1a 	bl	8008278 <__i2b>
 8008444:	2300      	movs	r3, #0
 8008446:	f8c8 0008 	str.w	r0, [r8, #8]
 800844a:	4604      	mov	r4, r0
 800844c:	6003      	str	r3, [r0, #0]
 800844e:	f04f 0900 	mov.w	r9, #0
 8008452:	07eb      	lsls	r3, r5, #31
 8008454:	d50a      	bpl.n	800846c <__pow5mult+0x84>
 8008456:	4631      	mov	r1, r6
 8008458:	4622      	mov	r2, r4
 800845a:	4638      	mov	r0, r7
 800845c:	f7ff ff22 	bl	80082a4 <__multiply>
 8008460:	4631      	mov	r1, r6
 8008462:	4680      	mov	r8, r0
 8008464:	4638      	mov	r0, r7
 8008466:	f7ff fe53 	bl	8008110 <_Bfree>
 800846a:	4646      	mov	r6, r8
 800846c:	106d      	asrs	r5, r5, #1
 800846e:	d00b      	beq.n	8008488 <__pow5mult+0xa0>
 8008470:	6820      	ldr	r0, [r4, #0]
 8008472:	b938      	cbnz	r0, 8008484 <__pow5mult+0x9c>
 8008474:	4622      	mov	r2, r4
 8008476:	4621      	mov	r1, r4
 8008478:	4638      	mov	r0, r7
 800847a:	f7ff ff13 	bl	80082a4 <__multiply>
 800847e:	6020      	str	r0, [r4, #0]
 8008480:	f8c0 9000 	str.w	r9, [r0]
 8008484:	4604      	mov	r4, r0
 8008486:	e7e4      	b.n	8008452 <__pow5mult+0x6a>
 8008488:	4630      	mov	r0, r6
 800848a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800848e:	bf00      	nop
 8008490:	08009068 	.word	0x08009068
 8008494:	08008f35 	.word	0x08008f35
 8008498:	08008fb5 	.word	0x08008fb5

0800849c <__lshift>:
 800849c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a0:	460c      	mov	r4, r1
 80084a2:	6849      	ldr	r1, [r1, #4]
 80084a4:	6923      	ldr	r3, [r4, #16]
 80084a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084aa:	68a3      	ldr	r3, [r4, #8]
 80084ac:	4607      	mov	r7, r0
 80084ae:	4691      	mov	r9, r2
 80084b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084b4:	f108 0601 	add.w	r6, r8, #1
 80084b8:	42b3      	cmp	r3, r6
 80084ba:	db0b      	blt.n	80084d4 <__lshift+0x38>
 80084bc:	4638      	mov	r0, r7
 80084be:	f7ff fde7 	bl	8008090 <_Balloc>
 80084c2:	4605      	mov	r5, r0
 80084c4:	b948      	cbnz	r0, 80084da <__lshift+0x3e>
 80084c6:	4602      	mov	r2, r0
 80084c8:	4b28      	ldr	r3, [pc, #160]	@ (800856c <__lshift+0xd0>)
 80084ca:	4829      	ldr	r0, [pc, #164]	@ (8008570 <__lshift+0xd4>)
 80084cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80084d0:	f000 fbe8 	bl	8008ca4 <__assert_func>
 80084d4:	3101      	adds	r1, #1
 80084d6:	005b      	lsls	r3, r3, #1
 80084d8:	e7ee      	b.n	80084b8 <__lshift+0x1c>
 80084da:	2300      	movs	r3, #0
 80084dc:	f100 0114 	add.w	r1, r0, #20
 80084e0:	f100 0210 	add.w	r2, r0, #16
 80084e4:	4618      	mov	r0, r3
 80084e6:	4553      	cmp	r3, sl
 80084e8:	db33      	blt.n	8008552 <__lshift+0xb6>
 80084ea:	6920      	ldr	r0, [r4, #16]
 80084ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084f0:	f104 0314 	add.w	r3, r4, #20
 80084f4:	f019 091f 	ands.w	r9, r9, #31
 80084f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008500:	d02b      	beq.n	800855a <__lshift+0xbe>
 8008502:	f1c9 0e20 	rsb	lr, r9, #32
 8008506:	468a      	mov	sl, r1
 8008508:	2200      	movs	r2, #0
 800850a:	6818      	ldr	r0, [r3, #0]
 800850c:	fa00 f009 	lsl.w	r0, r0, r9
 8008510:	4310      	orrs	r0, r2
 8008512:	f84a 0b04 	str.w	r0, [sl], #4
 8008516:	f853 2b04 	ldr.w	r2, [r3], #4
 800851a:	459c      	cmp	ip, r3
 800851c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008520:	d8f3      	bhi.n	800850a <__lshift+0x6e>
 8008522:	ebac 0304 	sub.w	r3, ip, r4
 8008526:	3b15      	subs	r3, #21
 8008528:	f023 0303 	bic.w	r3, r3, #3
 800852c:	3304      	adds	r3, #4
 800852e:	f104 0015 	add.w	r0, r4, #21
 8008532:	4560      	cmp	r0, ip
 8008534:	bf88      	it	hi
 8008536:	2304      	movhi	r3, #4
 8008538:	50ca      	str	r2, [r1, r3]
 800853a:	b10a      	cbz	r2, 8008540 <__lshift+0xa4>
 800853c:	f108 0602 	add.w	r6, r8, #2
 8008540:	3e01      	subs	r6, #1
 8008542:	4638      	mov	r0, r7
 8008544:	612e      	str	r6, [r5, #16]
 8008546:	4621      	mov	r1, r4
 8008548:	f7ff fde2 	bl	8008110 <_Bfree>
 800854c:	4628      	mov	r0, r5
 800854e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008552:	f842 0f04 	str.w	r0, [r2, #4]!
 8008556:	3301      	adds	r3, #1
 8008558:	e7c5      	b.n	80084e6 <__lshift+0x4a>
 800855a:	3904      	subs	r1, #4
 800855c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008560:	f841 2f04 	str.w	r2, [r1, #4]!
 8008564:	459c      	cmp	ip, r3
 8008566:	d8f9      	bhi.n	800855c <__lshift+0xc0>
 8008568:	e7ea      	b.n	8008540 <__lshift+0xa4>
 800856a:	bf00      	nop
 800856c:	08008fa4 	.word	0x08008fa4
 8008570:	08008fb5 	.word	0x08008fb5

08008574 <__mcmp>:
 8008574:	690a      	ldr	r2, [r1, #16]
 8008576:	4603      	mov	r3, r0
 8008578:	6900      	ldr	r0, [r0, #16]
 800857a:	1a80      	subs	r0, r0, r2
 800857c:	b530      	push	{r4, r5, lr}
 800857e:	d10e      	bne.n	800859e <__mcmp+0x2a>
 8008580:	3314      	adds	r3, #20
 8008582:	3114      	adds	r1, #20
 8008584:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008588:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800858c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008590:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008594:	4295      	cmp	r5, r2
 8008596:	d003      	beq.n	80085a0 <__mcmp+0x2c>
 8008598:	d205      	bcs.n	80085a6 <__mcmp+0x32>
 800859a:	f04f 30ff 	mov.w	r0, #4294967295
 800859e:	bd30      	pop	{r4, r5, pc}
 80085a0:	42a3      	cmp	r3, r4
 80085a2:	d3f3      	bcc.n	800858c <__mcmp+0x18>
 80085a4:	e7fb      	b.n	800859e <__mcmp+0x2a>
 80085a6:	2001      	movs	r0, #1
 80085a8:	e7f9      	b.n	800859e <__mcmp+0x2a>
	...

080085ac <__mdiff>:
 80085ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b0:	4689      	mov	r9, r1
 80085b2:	4606      	mov	r6, r0
 80085b4:	4611      	mov	r1, r2
 80085b6:	4648      	mov	r0, r9
 80085b8:	4614      	mov	r4, r2
 80085ba:	f7ff ffdb 	bl	8008574 <__mcmp>
 80085be:	1e05      	subs	r5, r0, #0
 80085c0:	d112      	bne.n	80085e8 <__mdiff+0x3c>
 80085c2:	4629      	mov	r1, r5
 80085c4:	4630      	mov	r0, r6
 80085c6:	f7ff fd63 	bl	8008090 <_Balloc>
 80085ca:	4602      	mov	r2, r0
 80085cc:	b928      	cbnz	r0, 80085da <__mdiff+0x2e>
 80085ce:	4b3f      	ldr	r3, [pc, #252]	@ (80086cc <__mdiff+0x120>)
 80085d0:	f240 2137 	movw	r1, #567	@ 0x237
 80085d4:	483e      	ldr	r0, [pc, #248]	@ (80086d0 <__mdiff+0x124>)
 80085d6:	f000 fb65 	bl	8008ca4 <__assert_func>
 80085da:	2301      	movs	r3, #1
 80085dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085e0:	4610      	mov	r0, r2
 80085e2:	b003      	add	sp, #12
 80085e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e8:	bfbc      	itt	lt
 80085ea:	464b      	movlt	r3, r9
 80085ec:	46a1      	movlt	r9, r4
 80085ee:	4630      	mov	r0, r6
 80085f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80085f4:	bfba      	itte	lt
 80085f6:	461c      	movlt	r4, r3
 80085f8:	2501      	movlt	r5, #1
 80085fa:	2500      	movge	r5, #0
 80085fc:	f7ff fd48 	bl	8008090 <_Balloc>
 8008600:	4602      	mov	r2, r0
 8008602:	b918      	cbnz	r0, 800860c <__mdiff+0x60>
 8008604:	4b31      	ldr	r3, [pc, #196]	@ (80086cc <__mdiff+0x120>)
 8008606:	f240 2145 	movw	r1, #581	@ 0x245
 800860a:	e7e3      	b.n	80085d4 <__mdiff+0x28>
 800860c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008610:	6926      	ldr	r6, [r4, #16]
 8008612:	60c5      	str	r5, [r0, #12]
 8008614:	f109 0310 	add.w	r3, r9, #16
 8008618:	f109 0514 	add.w	r5, r9, #20
 800861c:	f104 0e14 	add.w	lr, r4, #20
 8008620:	f100 0b14 	add.w	fp, r0, #20
 8008624:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008628:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	46d9      	mov	r9, fp
 8008630:	f04f 0c00 	mov.w	ip, #0
 8008634:	9b01      	ldr	r3, [sp, #4]
 8008636:	f85e 0b04 	ldr.w	r0, [lr], #4
 800863a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	fa1f f38a 	uxth.w	r3, sl
 8008644:	4619      	mov	r1, r3
 8008646:	b283      	uxth	r3, r0
 8008648:	1acb      	subs	r3, r1, r3
 800864a:	0c00      	lsrs	r0, r0, #16
 800864c:	4463      	add	r3, ip
 800864e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008652:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008656:	b29b      	uxth	r3, r3
 8008658:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800865c:	4576      	cmp	r6, lr
 800865e:	f849 3b04 	str.w	r3, [r9], #4
 8008662:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008666:	d8e5      	bhi.n	8008634 <__mdiff+0x88>
 8008668:	1b33      	subs	r3, r6, r4
 800866a:	3b15      	subs	r3, #21
 800866c:	f023 0303 	bic.w	r3, r3, #3
 8008670:	3415      	adds	r4, #21
 8008672:	3304      	adds	r3, #4
 8008674:	42a6      	cmp	r6, r4
 8008676:	bf38      	it	cc
 8008678:	2304      	movcc	r3, #4
 800867a:	441d      	add	r5, r3
 800867c:	445b      	add	r3, fp
 800867e:	461e      	mov	r6, r3
 8008680:	462c      	mov	r4, r5
 8008682:	4544      	cmp	r4, r8
 8008684:	d30e      	bcc.n	80086a4 <__mdiff+0xf8>
 8008686:	f108 0103 	add.w	r1, r8, #3
 800868a:	1b49      	subs	r1, r1, r5
 800868c:	f021 0103 	bic.w	r1, r1, #3
 8008690:	3d03      	subs	r5, #3
 8008692:	45a8      	cmp	r8, r5
 8008694:	bf38      	it	cc
 8008696:	2100      	movcc	r1, #0
 8008698:	440b      	add	r3, r1
 800869a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800869e:	b191      	cbz	r1, 80086c6 <__mdiff+0x11a>
 80086a0:	6117      	str	r7, [r2, #16]
 80086a2:	e79d      	b.n	80085e0 <__mdiff+0x34>
 80086a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80086a8:	46e6      	mov	lr, ip
 80086aa:	0c08      	lsrs	r0, r1, #16
 80086ac:	fa1c fc81 	uxtah	ip, ip, r1
 80086b0:	4471      	add	r1, lr
 80086b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80086b6:	b289      	uxth	r1, r1
 80086b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80086bc:	f846 1b04 	str.w	r1, [r6], #4
 80086c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086c4:	e7dd      	b.n	8008682 <__mdiff+0xd6>
 80086c6:	3f01      	subs	r7, #1
 80086c8:	e7e7      	b.n	800869a <__mdiff+0xee>
 80086ca:	bf00      	nop
 80086cc:	08008fa4 	.word	0x08008fa4
 80086d0:	08008fb5 	.word	0x08008fb5

080086d4 <__d2b>:
 80086d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086d8:	460f      	mov	r7, r1
 80086da:	2101      	movs	r1, #1
 80086dc:	ec59 8b10 	vmov	r8, r9, d0
 80086e0:	4616      	mov	r6, r2
 80086e2:	f7ff fcd5 	bl	8008090 <_Balloc>
 80086e6:	4604      	mov	r4, r0
 80086e8:	b930      	cbnz	r0, 80086f8 <__d2b+0x24>
 80086ea:	4602      	mov	r2, r0
 80086ec:	4b23      	ldr	r3, [pc, #140]	@ (800877c <__d2b+0xa8>)
 80086ee:	4824      	ldr	r0, [pc, #144]	@ (8008780 <__d2b+0xac>)
 80086f0:	f240 310f 	movw	r1, #783	@ 0x30f
 80086f4:	f000 fad6 	bl	8008ca4 <__assert_func>
 80086f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008700:	b10d      	cbz	r5, 8008706 <__d2b+0x32>
 8008702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008706:	9301      	str	r3, [sp, #4]
 8008708:	f1b8 0300 	subs.w	r3, r8, #0
 800870c:	d023      	beq.n	8008756 <__d2b+0x82>
 800870e:	4668      	mov	r0, sp
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	f7ff fd84 	bl	800821e <__lo0bits>
 8008716:	e9dd 1200 	ldrd	r1, r2, [sp]
 800871a:	b1d0      	cbz	r0, 8008752 <__d2b+0x7e>
 800871c:	f1c0 0320 	rsb	r3, r0, #32
 8008720:	fa02 f303 	lsl.w	r3, r2, r3
 8008724:	430b      	orrs	r3, r1
 8008726:	40c2      	lsrs	r2, r0
 8008728:	6163      	str	r3, [r4, #20]
 800872a:	9201      	str	r2, [sp, #4]
 800872c:	9b01      	ldr	r3, [sp, #4]
 800872e:	61a3      	str	r3, [r4, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	bf0c      	ite	eq
 8008734:	2201      	moveq	r2, #1
 8008736:	2202      	movne	r2, #2
 8008738:	6122      	str	r2, [r4, #16]
 800873a:	b1a5      	cbz	r5, 8008766 <__d2b+0x92>
 800873c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008740:	4405      	add	r5, r0
 8008742:	603d      	str	r5, [r7, #0]
 8008744:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008748:	6030      	str	r0, [r6, #0]
 800874a:	4620      	mov	r0, r4
 800874c:	b003      	add	sp, #12
 800874e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008752:	6161      	str	r1, [r4, #20]
 8008754:	e7ea      	b.n	800872c <__d2b+0x58>
 8008756:	a801      	add	r0, sp, #4
 8008758:	f7ff fd61 	bl	800821e <__lo0bits>
 800875c:	9b01      	ldr	r3, [sp, #4]
 800875e:	6163      	str	r3, [r4, #20]
 8008760:	3020      	adds	r0, #32
 8008762:	2201      	movs	r2, #1
 8008764:	e7e8      	b.n	8008738 <__d2b+0x64>
 8008766:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800876a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800876e:	6038      	str	r0, [r7, #0]
 8008770:	6918      	ldr	r0, [r3, #16]
 8008772:	f7ff fd35 	bl	80081e0 <__hi0bits>
 8008776:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800877a:	e7e5      	b.n	8008748 <__d2b+0x74>
 800877c:	08008fa4 	.word	0x08008fa4
 8008780:	08008fb5 	.word	0x08008fb5

08008784 <__sfputc_r>:
 8008784:	6893      	ldr	r3, [r2, #8]
 8008786:	3b01      	subs	r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	b410      	push	{r4}
 800878c:	6093      	str	r3, [r2, #8]
 800878e:	da08      	bge.n	80087a2 <__sfputc_r+0x1e>
 8008790:	6994      	ldr	r4, [r2, #24]
 8008792:	42a3      	cmp	r3, r4
 8008794:	db01      	blt.n	800879a <__sfputc_r+0x16>
 8008796:	290a      	cmp	r1, #10
 8008798:	d103      	bne.n	80087a2 <__sfputc_r+0x1e>
 800879a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800879e:	f7fe bc08 	b.w	8006fb2 <__swbuf_r>
 80087a2:	6813      	ldr	r3, [r2, #0]
 80087a4:	1c58      	adds	r0, r3, #1
 80087a6:	6010      	str	r0, [r2, #0]
 80087a8:	7019      	strb	r1, [r3, #0]
 80087aa:	4608      	mov	r0, r1
 80087ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <__sfputs_r>:
 80087b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b4:	4606      	mov	r6, r0
 80087b6:	460f      	mov	r7, r1
 80087b8:	4614      	mov	r4, r2
 80087ba:	18d5      	adds	r5, r2, r3
 80087bc:	42ac      	cmp	r4, r5
 80087be:	d101      	bne.n	80087c4 <__sfputs_r+0x12>
 80087c0:	2000      	movs	r0, #0
 80087c2:	e007      	b.n	80087d4 <__sfputs_r+0x22>
 80087c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c8:	463a      	mov	r2, r7
 80087ca:	4630      	mov	r0, r6
 80087cc:	f7ff ffda 	bl	8008784 <__sfputc_r>
 80087d0:	1c43      	adds	r3, r0, #1
 80087d2:	d1f3      	bne.n	80087bc <__sfputs_r+0xa>
 80087d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087d8 <_vfiprintf_r>:
 80087d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087dc:	460d      	mov	r5, r1
 80087de:	b09d      	sub	sp, #116	@ 0x74
 80087e0:	4614      	mov	r4, r2
 80087e2:	4698      	mov	r8, r3
 80087e4:	4606      	mov	r6, r0
 80087e6:	b118      	cbz	r0, 80087f0 <_vfiprintf_r+0x18>
 80087e8:	6a03      	ldr	r3, [r0, #32]
 80087ea:	b90b      	cbnz	r3, 80087f0 <_vfiprintf_r+0x18>
 80087ec:	f7fe faf8 	bl	8006de0 <__sinit>
 80087f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087f2:	07d9      	lsls	r1, r3, #31
 80087f4:	d405      	bmi.n	8008802 <_vfiprintf_r+0x2a>
 80087f6:	89ab      	ldrh	r3, [r5, #12]
 80087f8:	059a      	lsls	r2, r3, #22
 80087fa:	d402      	bmi.n	8008802 <_vfiprintf_r+0x2a>
 80087fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087fe:	f7fe fcea 	bl	80071d6 <__retarget_lock_acquire_recursive>
 8008802:	89ab      	ldrh	r3, [r5, #12]
 8008804:	071b      	lsls	r3, r3, #28
 8008806:	d501      	bpl.n	800880c <_vfiprintf_r+0x34>
 8008808:	692b      	ldr	r3, [r5, #16]
 800880a:	b99b      	cbnz	r3, 8008834 <_vfiprintf_r+0x5c>
 800880c:	4629      	mov	r1, r5
 800880e:	4630      	mov	r0, r6
 8008810:	f7fe fc0e 	bl	8007030 <__swsetup_r>
 8008814:	b170      	cbz	r0, 8008834 <_vfiprintf_r+0x5c>
 8008816:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008818:	07dc      	lsls	r4, r3, #31
 800881a:	d504      	bpl.n	8008826 <_vfiprintf_r+0x4e>
 800881c:	f04f 30ff 	mov.w	r0, #4294967295
 8008820:	b01d      	add	sp, #116	@ 0x74
 8008822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008826:	89ab      	ldrh	r3, [r5, #12]
 8008828:	0598      	lsls	r0, r3, #22
 800882a:	d4f7      	bmi.n	800881c <_vfiprintf_r+0x44>
 800882c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800882e:	f7fe fcd3 	bl	80071d8 <__retarget_lock_release_recursive>
 8008832:	e7f3      	b.n	800881c <_vfiprintf_r+0x44>
 8008834:	2300      	movs	r3, #0
 8008836:	9309      	str	r3, [sp, #36]	@ 0x24
 8008838:	2320      	movs	r3, #32
 800883a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800883e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008842:	2330      	movs	r3, #48	@ 0x30
 8008844:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80089f4 <_vfiprintf_r+0x21c>
 8008848:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800884c:	f04f 0901 	mov.w	r9, #1
 8008850:	4623      	mov	r3, r4
 8008852:	469a      	mov	sl, r3
 8008854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008858:	b10a      	cbz	r2, 800885e <_vfiprintf_r+0x86>
 800885a:	2a25      	cmp	r2, #37	@ 0x25
 800885c:	d1f9      	bne.n	8008852 <_vfiprintf_r+0x7a>
 800885e:	ebba 0b04 	subs.w	fp, sl, r4
 8008862:	d00b      	beq.n	800887c <_vfiprintf_r+0xa4>
 8008864:	465b      	mov	r3, fp
 8008866:	4622      	mov	r2, r4
 8008868:	4629      	mov	r1, r5
 800886a:	4630      	mov	r0, r6
 800886c:	f7ff ffa1 	bl	80087b2 <__sfputs_r>
 8008870:	3001      	adds	r0, #1
 8008872:	f000 80a7 	beq.w	80089c4 <_vfiprintf_r+0x1ec>
 8008876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008878:	445a      	add	r2, fp
 800887a:	9209      	str	r2, [sp, #36]	@ 0x24
 800887c:	f89a 3000 	ldrb.w	r3, [sl]
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 809f 	beq.w	80089c4 <_vfiprintf_r+0x1ec>
 8008886:	2300      	movs	r3, #0
 8008888:	f04f 32ff 	mov.w	r2, #4294967295
 800888c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008890:	f10a 0a01 	add.w	sl, sl, #1
 8008894:	9304      	str	r3, [sp, #16]
 8008896:	9307      	str	r3, [sp, #28]
 8008898:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800889c:	931a      	str	r3, [sp, #104]	@ 0x68
 800889e:	4654      	mov	r4, sl
 80088a0:	2205      	movs	r2, #5
 80088a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a6:	4853      	ldr	r0, [pc, #332]	@ (80089f4 <_vfiprintf_r+0x21c>)
 80088a8:	f7f7 fcb2 	bl	8000210 <memchr>
 80088ac:	9a04      	ldr	r2, [sp, #16]
 80088ae:	b9d8      	cbnz	r0, 80088e8 <_vfiprintf_r+0x110>
 80088b0:	06d1      	lsls	r1, r2, #27
 80088b2:	bf44      	itt	mi
 80088b4:	2320      	movmi	r3, #32
 80088b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088ba:	0713      	lsls	r3, r2, #28
 80088bc:	bf44      	itt	mi
 80088be:	232b      	movmi	r3, #43	@ 0x2b
 80088c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088c4:	f89a 3000 	ldrb.w	r3, [sl]
 80088c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80088ca:	d015      	beq.n	80088f8 <_vfiprintf_r+0x120>
 80088cc:	9a07      	ldr	r2, [sp, #28]
 80088ce:	4654      	mov	r4, sl
 80088d0:	2000      	movs	r0, #0
 80088d2:	f04f 0c0a 	mov.w	ip, #10
 80088d6:	4621      	mov	r1, r4
 80088d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088dc:	3b30      	subs	r3, #48	@ 0x30
 80088de:	2b09      	cmp	r3, #9
 80088e0:	d94b      	bls.n	800897a <_vfiprintf_r+0x1a2>
 80088e2:	b1b0      	cbz	r0, 8008912 <_vfiprintf_r+0x13a>
 80088e4:	9207      	str	r2, [sp, #28]
 80088e6:	e014      	b.n	8008912 <_vfiprintf_r+0x13a>
 80088e8:	eba0 0308 	sub.w	r3, r0, r8
 80088ec:	fa09 f303 	lsl.w	r3, r9, r3
 80088f0:	4313      	orrs	r3, r2
 80088f2:	9304      	str	r3, [sp, #16]
 80088f4:	46a2      	mov	sl, r4
 80088f6:	e7d2      	b.n	800889e <_vfiprintf_r+0xc6>
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	1d19      	adds	r1, r3, #4
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	9103      	str	r1, [sp, #12]
 8008900:	2b00      	cmp	r3, #0
 8008902:	bfbb      	ittet	lt
 8008904:	425b      	neglt	r3, r3
 8008906:	f042 0202 	orrlt.w	r2, r2, #2
 800890a:	9307      	strge	r3, [sp, #28]
 800890c:	9307      	strlt	r3, [sp, #28]
 800890e:	bfb8      	it	lt
 8008910:	9204      	strlt	r2, [sp, #16]
 8008912:	7823      	ldrb	r3, [r4, #0]
 8008914:	2b2e      	cmp	r3, #46	@ 0x2e
 8008916:	d10a      	bne.n	800892e <_vfiprintf_r+0x156>
 8008918:	7863      	ldrb	r3, [r4, #1]
 800891a:	2b2a      	cmp	r3, #42	@ 0x2a
 800891c:	d132      	bne.n	8008984 <_vfiprintf_r+0x1ac>
 800891e:	9b03      	ldr	r3, [sp, #12]
 8008920:	1d1a      	adds	r2, r3, #4
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	9203      	str	r2, [sp, #12]
 8008926:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800892a:	3402      	adds	r4, #2
 800892c:	9305      	str	r3, [sp, #20]
 800892e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008a04 <_vfiprintf_r+0x22c>
 8008932:	7821      	ldrb	r1, [r4, #0]
 8008934:	2203      	movs	r2, #3
 8008936:	4650      	mov	r0, sl
 8008938:	f7f7 fc6a 	bl	8000210 <memchr>
 800893c:	b138      	cbz	r0, 800894e <_vfiprintf_r+0x176>
 800893e:	9b04      	ldr	r3, [sp, #16]
 8008940:	eba0 000a 	sub.w	r0, r0, sl
 8008944:	2240      	movs	r2, #64	@ 0x40
 8008946:	4082      	lsls	r2, r0
 8008948:	4313      	orrs	r3, r2
 800894a:	3401      	adds	r4, #1
 800894c:	9304      	str	r3, [sp, #16]
 800894e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008952:	4829      	ldr	r0, [pc, #164]	@ (80089f8 <_vfiprintf_r+0x220>)
 8008954:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008958:	2206      	movs	r2, #6
 800895a:	f7f7 fc59 	bl	8000210 <memchr>
 800895e:	2800      	cmp	r0, #0
 8008960:	d03f      	beq.n	80089e2 <_vfiprintf_r+0x20a>
 8008962:	4b26      	ldr	r3, [pc, #152]	@ (80089fc <_vfiprintf_r+0x224>)
 8008964:	bb1b      	cbnz	r3, 80089ae <_vfiprintf_r+0x1d6>
 8008966:	9b03      	ldr	r3, [sp, #12]
 8008968:	3307      	adds	r3, #7
 800896a:	f023 0307 	bic.w	r3, r3, #7
 800896e:	3308      	adds	r3, #8
 8008970:	9303      	str	r3, [sp, #12]
 8008972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008974:	443b      	add	r3, r7
 8008976:	9309      	str	r3, [sp, #36]	@ 0x24
 8008978:	e76a      	b.n	8008850 <_vfiprintf_r+0x78>
 800897a:	fb0c 3202 	mla	r2, ip, r2, r3
 800897e:	460c      	mov	r4, r1
 8008980:	2001      	movs	r0, #1
 8008982:	e7a8      	b.n	80088d6 <_vfiprintf_r+0xfe>
 8008984:	2300      	movs	r3, #0
 8008986:	3401      	adds	r4, #1
 8008988:	9305      	str	r3, [sp, #20]
 800898a:	4619      	mov	r1, r3
 800898c:	f04f 0c0a 	mov.w	ip, #10
 8008990:	4620      	mov	r0, r4
 8008992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008996:	3a30      	subs	r2, #48	@ 0x30
 8008998:	2a09      	cmp	r2, #9
 800899a:	d903      	bls.n	80089a4 <_vfiprintf_r+0x1cc>
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0c6      	beq.n	800892e <_vfiprintf_r+0x156>
 80089a0:	9105      	str	r1, [sp, #20]
 80089a2:	e7c4      	b.n	800892e <_vfiprintf_r+0x156>
 80089a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80089a8:	4604      	mov	r4, r0
 80089aa:	2301      	movs	r3, #1
 80089ac:	e7f0      	b.n	8008990 <_vfiprintf_r+0x1b8>
 80089ae:	ab03      	add	r3, sp, #12
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	462a      	mov	r2, r5
 80089b4:	4b12      	ldr	r3, [pc, #72]	@ (8008a00 <_vfiprintf_r+0x228>)
 80089b6:	a904      	add	r1, sp, #16
 80089b8:	4630      	mov	r0, r6
 80089ba:	f7fd fdcf 	bl	800655c <_printf_float>
 80089be:	4607      	mov	r7, r0
 80089c0:	1c78      	adds	r0, r7, #1
 80089c2:	d1d6      	bne.n	8008972 <_vfiprintf_r+0x19a>
 80089c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089c6:	07d9      	lsls	r1, r3, #31
 80089c8:	d405      	bmi.n	80089d6 <_vfiprintf_r+0x1fe>
 80089ca:	89ab      	ldrh	r3, [r5, #12]
 80089cc:	059a      	lsls	r2, r3, #22
 80089ce:	d402      	bmi.n	80089d6 <_vfiprintf_r+0x1fe>
 80089d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089d2:	f7fe fc01 	bl	80071d8 <__retarget_lock_release_recursive>
 80089d6:	89ab      	ldrh	r3, [r5, #12]
 80089d8:	065b      	lsls	r3, r3, #25
 80089da:	f53f af1f 	bmi.w	800881c <_vfiprintf_r+0x44>
 80089de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089e0:	e71e      	b.n	8008820 <_vfiprintf_r+0x48>
 80089e2:	ab03      	add	r3, sp, #12
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	462a      	mov	r2, r5
 80089e8:	4b05      	ldr	r3, [pc, #20]	@ (8008a00 <_vfiprintf_r+0x228>)
 80089ea:	a904      	add	r1, sp, #16
 80089ec:	4630      	mov	r0, r6
 80089ee:	f7fe f84d 	bl	8006a8c <_printf_i>
 80089f2:	e7e4      	b.n	80089be <_vfiprintf_r+0x1e6>
 80089f4:	0800900e 	.word	0x0800900e
 80089f8:	08009018 	.word	0x08009018
 80089fc:	0800655d 	.word	0x0800655d
 8008a00:	080087b3 	.word	0x080087b3
 8008a04:	08009014 	.word	0x08009014

08008a08 <__sflush_r>:
 8008a08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a10:	0716      	lsls	r6, r2, #28
 8008a12:	4605      	mov	r5, r0
 8008a14:	460c      	mov	r4, r1
 8008a16:	d454      	bmi.n	8008ac2 <__sflush_r+0xba>
 8008a18:	684b      	ldr	r3, [r1, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	dc02      	bgt.n	8008a24 <__sflush_r+0x1c>
 8008a1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	dd48      	ble.n	8008ab6 <__sflush_r+0xae>
 8008a24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a26:	2e00      	cmp	r6, #0
 8008a28:	d045      	beq.n	8008ab6 <__sflush_r+0xae>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a30:	682f      	ldr	r7, [r5, #0]
 8008a32:	6a21      	ldr	r1, [r4, #32]
 8008a34:	602b      	str	r3, [r5, #0]
 8008a36:	d030      	beq.n	8008a9a <__sflush_r+0x92>
 8008a38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a3a:	89a3      	ldrh	r3, [r4, #12]
 8008a3c:	0759      	lsls	r1, r3, #29
 8008a3e:	d505      	bpl.n	8008a4c <__sflush_r+0x44>
 8008a40:	6863      	ldr	r3, [r4, #4]
 8008a42:	1ad2      	subs	r2, r2, r3
 8008a44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a46:	b10b      	cbz	r3, 8008a4c <__sflush_r+0x44>
 8008a48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a4a:	1ad2      	subs	r2, r2, r3
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a50:	6a21      	ldr	r1, [r4, #32]
 8008a52:	4628      	mov	r0, r5
 8008a54:	47b0      	blx	r6
 8008a56:	1c43      	adds	r3, r0, #1
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	d106      	bne.n	8008a6a <__sflush_r+0x62>
 8008a5c:	6829      	ldr	r1, [r5, #0]
 8008a5e:	291d      	cmp	r1, #29
 8008a60:	d82b      	bhi.n	8008aba <__sflush_r+0xb2>
 8008a62:	4a2a      	ldr	r2, [pc, #168]	@ (8008b0c <__sflush_r+0x104>)
 8008a64:	40ca      	lsrs	r2, r1
 8008a66:	07d6      	lsls	r6, r2, #31
 8008a68:	d527      	bpl.n	8008aba <__sflush_r+0xb2>
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	6062      	str	r2, [r4, #4]
 8008a6e:	04d9      	lsls	r1, r3, #19
 8008a70:	6922      	ldr	r2, [r4, #16]
 8008a72:	6022      	str	r2, [r4, #0]
 8008a74:	d504      	bpl.n	8008a80 <__sflush_r+0x78>
 8008a76:	1c42      	adds	r2, r0, #1
 8008a78:	d101      	bne.n	8008a7e <__sflush_r+0x76>
 8008a7a:	682b      	ldr	r3, [r5, #0]
 8008a7c:	b903      	cbnz	r3, 8008a80 <__sflush_r+0x78>
 8008a7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a82:	602f      	str	r7, [r5, #0]
 8008a84:	b1b9      	cbz	r1, 8008ab6 <__sflush_r+0xae>
 8008a86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a8a:	4299      	cmp	r1, r3
 8008a8c:	d002      	beq.n	8008a94 <__sflush_r+0x8c>
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f7ff f9fe 	bl	8007e90 <_free_r>
 8008a94:	2300      	movs	r3, #0
 8008a96:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a98:	e00d      	b.n	8008ab6 <__sflush_r+0xae>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	47b0      	blx	r6
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	1c50      	adds	r0, r2, #1
 8008aa4:	d1c9      	bne.n	8008a3a <__sflush_r+0x32>
 8008aa6:	682b      	ldr	r3, [r5, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d0c6      	beq.n	8008a3a <__sflush_r+0x32>
 8008aac:	2b1d      	cmp	r3, #29
 8008aae:	d001      	beq.n	8008ab4 <__sflush_r+0xac>
 8008ab0:	2b16      	cmp	r3, #22
 8008ab2:	d11e      	bne.n	8008af2 <__sflush_r+0xea>
 8008ab4:	602f      	str	r7, [r5, #0]
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	e022      	b.n	8008b00 <__sflush_r+0xf8>
 8008aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008abe:	b21b      	sxth	r3, r3
 8008ac0:	e01b      	b.n	8008afa <__sflush_r+0xf2>
 8008ac2:	690f      	ldr	r7, [r1, #16]
 8008ac4:	2f00      	cmp	r7, #0
 8008ac6:	d0f6      	beq.n	8008ab6 <__sflush_r+0xae>
 8008ac8:	0793      	lsls	r3, r2, #30
 8008aca:	680e      	ldr	r6, [r1, #0]
 8008acc:	bf08      	it	eq
 8008ace:	694b      	ldreq	r3, [r1, #20]
 8008ad0:	600f      	str	r7, [r1, #0]
 8008ad2:	bf18      	it	ne
 8008ad4:	2300      	movne	r3, #0
 8008ad6:	eba6 0807 	sub.w	r8, r6, r7
 8008ada:	608b      	str	r3, [r1, #8]
 8008adc:	f1b8 0f00 	cmp.w	r8, #0
 8008ae0:	dde9      	ble.n	8008ab6 <__sflush_r+0xae>
 8008ae2:	6a21      	ldr	r1, [r4, #32]
 8008ae4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ae6:	4643      	mov	r3, r8
 8008ae8:	463a      	mov	r2, r7
 8008aea:	4628      	mov	r0, r5
 8008aec:	47b0      	blx	r6
 8008aee:	2800      	cmp	r0, #0
 8008af0:	dc08      	bgt.n	8008b04 <__sflush_r+0xfc>
 8008af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008afa:	81a3      	strh	r3, [r4, #12]
 8008afc:	f04f 30ff 	mov.w	r0, #4294967295
 8008b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b04:	4407      	add	r7, r0
 8008b06:	eba8 0800 	sub.w	r8, r8, r0
 8008b0a:	e7e7      	b.n	8008adc <__sflush_r+0xd4>
 8008b0c:	20400001 	.word	0x20400001

08008b10 <_fflush_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	690b      	ldr	r3, [r1, #16]
 8008b14:	4605      	mov	r5, r0
 8008b16:	460c      	mov	r4, r1
 8008b18:	b913      	cbnz	r3, 8008b20 <_fflush_r+0x10>
 8008b1a:	2500      	movs	r5, #0
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	b118      	cbz	r0, 8008b2a <_fflush_r+0x1a>
 8008b22:	6a03      	ldr	r3, [r0, #32]
 8008b24:	b90b      	cbnz	r3, 8008b2a <_fflush_r+0x1a>
 8008b26:	f7fe f95b 	bl	8006de0 <__sinit>
 8008b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d0f3      	beq.n	8008b1a <_fflush_r+0xa>
 8008b32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b34:	07d0      	lsls	r0, r2, #31
 8008b36:	d404      	bmi.n	8008b42 <_fflush_r+0x32>
 8008b38:	0599      	lsls	r1, r3, #22
 8008b3a:	d402      	bmi.n	8008b42 <_fflush_r+0x32>
 8008b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b3e:	f7fe fb4a 	bl	80071d6 <__retarget_lock_acquire_recursive>
 8008b42:	4628      	mov	r0, r5
 8008b44:	4621      	mov	r1, r4
 8008b46:	f7ff ff5f 	bl	8008a08 <__sflush_r>
 8008b4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b4c:	07da      	lsls	r2, r3, #31
 8008b4e:	4605      	mov	r5, r0
 8008b50:	d4e4      	bmi.n	8008b1c <_fflush_r+0xc>
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	059b      	lsls	r3, r3, #22
 8008b56:	d4e1      	bmi.n	8008b1c <_fflush_r+0xc>
 8008b58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b5a:	f7fe fb3d 	bl	80071d8 <__retarget_lock_release_recursive>
 8008b5e:	e7dd      	b.n	8008b1c <_fflush_r+0xc>

08008b60 <__swhatbuf_r>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	460c      	mov	r4, r1
 8008b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b68:	2900      	cmp	r1, #0
 8008b6a:	b096      	sub	sp, #88	@ 0x58
 8008b6c:	4615      	mov	r5, r2
 8008b6e:	461e      	mov	r6, r3
 8008b70:	da0d      	bge.n	8008b8e <__swhatbuf_r+0x2e>
 8008b72:	89a3      	ldrh	r3, [r4, #12]
 8008b74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b78:	f04f 0100 	mov.w	r1, #0
 8008b7c:	bf14      	ite	ne
 8008b7e:	2340      	movne	r3, #64	@ 0x40
 8008b80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b84:	2000      	movs	r0, #0
 8008b86:	6031      	str	r1, [r6, #0]
 8008b88:	602b      	str	r3, [r5, #0]
 8008b8a:	b016      	add	sp, #88	@ 0x58
 8008b8c:	bd70      	pop	{r4, r5, r6, pc}
 8008b8e:	466a      	mov	r2, sp
 8008b90:	f000 f848 	bl	8008c24 <_fstat_r>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	dbec      	blt.n	8008b72 <__swhatbuf_r+0x12>
 8008b98:	9901      	ldr	r1, [sp, #4]
 8008b9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ba2:	4259      	negs	r1, r3
 8008ba4:	4159      	adcs	r1, r3
 8008ba6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008baa:	e7eb      	b.n	8008b84 <__swhatbuf_r+0x24>

08008bac <__smakebuf_r>:
 8008bac:	898b      	ldrh	r3, [r1, #12]
 8008bae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bb0:	079d      	lsls	r5, r3, #30
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	d507      	bpl.n	8008bc8 <__smakebuf_r+0x1c>
 8008bb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	6123      	str	r3, [r4, #16]
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	6163      	str	r3, [r4, #20]
 8008bc4:	b003      	add	sp, #12
 8008bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bc8:	ab01      	add	r3, sp, #4
 8008bca:	466a      	mov	r2, sp
 8008bcc:	f7ff ffc8 	bl	8008b60 <__swhatbuf_r>
 8008bd0:	9f00      	ldr	r7, [sp, #0]
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f7ff f9ce 	bl	8007f78 <_malloc_r>
 8008bdc:	b948      	cbnz	r0, 8008bf2 <__smakebuf_r+0x46>
 8008bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be2:	059a      	lsls	r2, r3, #22
 8008be4:	d4ee      	bmi.n	8008bc4 <__smakebuf_r+0x18>
 8008be6:	f023 0303 	bic.w	r3, r3, #3
 8008bea:	f043 0302 	orr.w	r3, r3, #2
 8008bee:	81a3      	strh	r3, [r4, #12]
 8008bf0:	e7e2      	b.n	8008bb8 <__smakebuf_r+0xc>
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	6020      	str	r0, [r4, #0]
 8008bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bfa:	81a3      	strh	r3, [r4, #12]
 8008bfc:	9b01      	ldr	r3, [sp, #4]
 8008bfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c02:	b15b      	cbz	r3, 8008c1c <__smakebuf_r+0x70>
 8008c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c08:	4630      	mov	r0, r6
 8008c0a:	f000 f81d 	bl	8008c48 <_isatty_r>
 8008c0e:	b128      	cbz	r0, 8008c1c <__smakebuf_r+0x70>
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	f023 0303 	bic.w	r3, r3, #3
 8008c16:	f043 0301 	orr.w	r3, r3, #1
 8008c1a:	81a3      	strh	r3, [r4, #12]
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	431d      	orrs	r5, r3
 8008c20:	81a5      	strh	r5, [r4, #12]
 8008c22:	e7cf      	b.n	8008bc4 <__smakebuf_r+0x18>

08008c24 <_fstat_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d07      	ldr	r5, [pc, #28]	@ (8008c44 <_fstat_r+0x20>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	4611      	mov	r1, r2
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	f7f8 fe13 	bl	800185c <_fstat>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	d102      	bne.n	8008c40 <_fstat_r+0x1c>
 8008c3a:	682b      	ldr	r3, [r5, #0]
 8008c3c:	b103      	cbz	r3, 8008c40 <_fstat_r+0x1c>
 8008c3e:	6023      	str	r3, [r4, #0]
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
 8008c42:	bf00      	nop
 8008c44:	20000480 	.word	0x20000480

08008c48 <_isatty_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4d06      	ldr	r5, [pc, #24]	@ (8008c64 <_isatty_r+0x1c>)
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4608      	mov	r0, r1
 8008c52:	602b      	str	r3, [r5, #0]
 8008c54:	f7f8 fe12 	bl	800187c <_isatty>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_isatty_r+0x1a>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_isatty_r+0x1a>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	20000480 	.word	0x20000480

08008c68 <_sbrk_r>:
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4d06      	ldr	r5, [pc, #24]	@ (8008c84 <_sbrk_r+0x1c>)
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	4604      	mov	r4, r0
 8008c70:	4608      	mov	r0, r1
 8008c72:	602b      	str	r3, [r5, #0]
 8008c74:	f7f8 fe1a 	bl	80018ac <_sbrk>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	d102      	bne.n	8008c82 <_sbrk_r+0x1a>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	b103      	cbz	r3, 8008c82 <_sbrk_r+0x1a>
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	20000480 	.word	0x20000480

08008c88 <memcpy>:
 8008c88:	440a      	add	r2, r1
 8008c8a:	4291      	cmp	r1, r2
 8008c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c90:	d100      	bne.n	8008c94 <memcpy+0xc>
 8008c92:	4770      	bx	lr
 8008c94:	b510      	push	{r4, lr}
 8008c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c9e:	4291      	cmp	r1, r2
 8008ca0:	d1f9      	bne.n	8008c96 <memcpy+0xe>
 8008ca2:	bd10      	pop	{r4, pc}

08008ca4 <__assert_func>:
 8008ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ca6:	4614      	mov	r4, r2
 8008ca8:	461a      	mov	r2, r3
 8008caa:	4b09      	ldr	r3, [pc, #36]	@ (8008cd0 <__assert_func+0x2c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4605      	mov	r5, r0
 8008cb0:	68d8      	ldr	r0, [r3, #12]
 8008cb2:	b14c      	cbz	r4, 8008cc8 <__assert_func+0x24>
 8008cb4:	4b07      	ldr	r3, [pc, #28]	@ (8008cd4 <__assert_func+0x30>)
 8008cb6:	9100      	str	r1, [sp, #0]
 8008cb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cbc:	4906      	ldr	r1, [pc, #24]	@ (8008cd8 <__assert_func+0x34>)
 8008cbe:	462b      	mov	r3, r5
 8008cc0:	f000 f842 	bl	8008d48 <fiprintf>
 8008cc4:	f000 f852 	bl	8008d6c <abort>
 8008cc8:	4b04      	ldr	r3, [pc, #16]	@ (8008cdc <__assert_func+0x38>)
 8008cca:	461c      	mov	r4, r3
 8008ccc:	e7f3      	b.n	8008cb6 <__assert_func+0x12>
 8008cce:	bf00      	nop
 8008cd0:	2000001c 	.word	0x2000001c
 8008cd4:	08009029 	.word	0x08009029
 8008cd8:	08009036 	.word	0x08009036
 8008cdc:	08009064 	.word	0x08009064

08008ce0 <_calloc_r>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	fba1 5402 	umull	r5, r4, r1, r2
 8008ce6:	b934      	cbnz	r4, 8008cf6 <_calloc_r+0x16>
 8008ce8:	4629      	mov	r1, r5
 8008cea:	f7ff f945 	bl	8007f78 <_malloc_r>
 8008cee:	4606      	mov	r6, r0
 8008cf0:	b928      	cbnz	r0, 8008cfe <_calloc_r+0x1e>
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	bd70      	pop	{r4, r5, r6, pc}
 8008cf6:	220c      	movs	r2, #12
 8008cf8:	6002      	str	r2, [r0, #0]
 8008cfa:	2600      	movs	r6, #0
 8008cfc:	e7f9      	b.n	8008cf2 <_calloc_r+0x12>
 8008cfe:	462a      	mov	r2, r5
 8008d00:	4621      	mov	r1, r4
 8008d02:	f7fe f9eb 	bl	80070dc <memset>
 8008d06:	e7f4      	b.n	8008cf2 <_calloc_r+0x12>

08008d08 <__ascii_mbtowc>:
 8008d08:	b082      	sub	sp, #8
 8008d0a:	b901      	cbnz	r1, 8008d0e <__ascii_mbtowc+0x6>
 8008d0c:	a901      	add	r1, sp, #4
 8008d0e:	b142      	cbz	r2, 8008d22 <__ascii_mbtowc+0x1a>
 8008d10:	b14b      	cbz	r3, 8008d26 <__ascii_mbtowc+0x1e>
 8008d12:	7813      	ldrb	r3, [r2, #0]
 8008d14:	600b      	str	r3, [r1, #0]
 8008d16:	7812      	ldrb	r2, [r2, #0]
 8008d18:	1e10      	subs	r0, r2, #0
 8008d1a:	bf18      	it	ne
 8008d1c:	2001      	movne	r0, #1
 8008d1e:	b002      	add	sp, #8
 8008d20:	4770      	bx	lr
 8008d22:	4610      	mov	r0, r2
 8008d24:	e7fb      	b.n	8008d1e <__ascii_mbtowc+0x16>
 8008d26:	f06f 0001 	mvn.w	r0, #1
 8008d2a:	e7f8      	b.n	8008d1e <__ascii_mbtowc+0x16>

08008d2c <__ascii_wctomb>:
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	4608      	mov	r0, r1
 8008d30:	b141      	cbz	r1, 8008d44 <__ascii_wctomb+0x18>
 8008d32:	2aff      	cmp	r2, #255	@ 0xff
 8008d34:	d904      	bls.n	8008d40 <__ascii_wctomb+0x14>
 8008d36:	228a      	movs	r2, #138	@ 0x8a
 8008d38:	601a      	str	r2, [r3, #0]
 8008d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3e:	4770      	bx	lr
 8008d40:	700a      	strb	r2, [r1, #0]
 8008d42:	2001      	movs	r0, #1
 8008d44:	4770      	bx	lr
	...

08008d48 <fiprintf>:
 8008d48:	b40e      	push	{r1, r2, r3}
 8008d4a:	b503      	push	{r0, r1, lr}
 8008d4c:	4601      	mov	r1, r0
 8008d4e:	ab03      	add	r3, sp, #12
 8008d50:	4805      	ldr	r0, [pc, #20]	@ (8008d68 <fiprintf+0x20>)
 8008d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d56:	6800      	ldr	r0, [r0, #0]
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	f7ff fd3d 	bl	80087d8 <_vfiprintf_r>
 8008d5e:	b002      	add	sp, #8
 8008d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d64:	b003      	add	sp, #12
 8008d66:	4770      	bx	lr
 8008d68:	2000001c 	.word	0x2000001c

08008d6c <abort>:
 8008d6c:	b508      	push	{r3, lr}
 8008d6e:	2006      	movs	r0, #6
 8008d70:	f000 f82c 	bl	8008dcc <raise>
 8008d74:	2001      	movs	r0, #1
 8008d76:	f7f8 fd21 	bl	80017bc <_exit>

08008d7a <_raise_r>:
 8008d7a:	291f      	cmp	r1, #31
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4605      	mov	r5, r0
 8008d80:	460c      	mov	r4, r1
 8008d82:	d904      	bls.n	8008d8e <_raise_r+0x14>
 8008d84:	2316      	movs	r3, #22
 8008d86:	6003      	str	r3, [r0, #0]
 8008d88:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8c:	bd38      	pop	{r3, r4, r5, pc}
 8008d8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d90:	b112      	cbz	r2, 8008d98 <_raise_r+0x1e>
 8008d92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d96:	b94b      	cbnz	r3, 8008dac <_raise_r+0x32>
 8008d98:	4628      	mov	r0, r5
 8008d9a:	f000 f831 	bl	8008e00 <_getpid_r>
 8008d9e:	4622      	mov	r2, r4
 8008da0:	4601      	mov	r1, r0
 8008da2:	4628      	mov	r0, r5
 8008da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008da8:	f000 b818 	b.w	8008ddc <_kill_r>
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d00a      	beq.n	8008dc6 <_raise_r+0x4c>
 8008db0:	1c59      	adds	r1, r3, #1
 8008db2:	d103      	bne.n	8008dbc <_raise_r+0x42>
 8008db4:	2316      	movs	r3, #22
 8008db6:	6003      	str	r3, [r0, #0]
 8008db8:	2001      	movs	r0, #1
 8008dba:	e7e7      	b.n	8008d8c <_raise_r+0x12>
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	4798      	blx	r3
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	e7e0      	b.n	8008d8c <_raise_r+0x12>
	...

08008dcc <raise>:
 8008dcc:	4b02      	ldr	r3, [pc, #8]	@ (8008dd8 <raise+0xc>)
 8008dce:	4601      	mov	r1, r0
 8008dd0:	6818      	ldr	r0, [r3, #0]
 8008dd2:	f7ff bfd2 	b.w	8008d7a <_raise_r>
 8008dd6:	bf00      	nop
 8008dd8:	2000001c 	.word	0x2000001c

08008ddc <_kill_r>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	4d07      	ldr	r5, [pc, #28]	@ (8008dfc <_kill_r+0x20>)
 8008de0:	2300      	movs	r3, #0
 8008de2:	4604      	mov	r4, r0
 8008de4:	4608      	mov	r0, r1
 8008de6:	4611      	mov	r1, r2
 8008de8:	602b      	str	r3, [r5, #0]
 8008dea:	f7f8 fcd7 	bl	800179c <_kill>
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	d102      	bne.n	8008df8 <_kill_r+0x1c>
 8008df2:	682b      	ldr	r3, [r5, #0]
 8008df4:	b103      	cbz	r3, 8008df8 <_kill_r+0x1c>
 8008df6:	6023      	str	r3, [r4, #0]
 8008df8:	bd38      	pop	{r3, r4, r5, pc}
 8008dfa:	bf00      	nop
 8008dfc:	20000480 	.word	0x20000480

08008e00 <_getpid_r>:
 8008e00:	f7f8 bcc4 	b.w	800178c <_getpid>

08008e04 <_init>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	bf00      	nop
 8008e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0a:	bc08      	pop	{r3}
 8008e0c:	469e      	mov	lr, r3
 8008e0e:	4770      	bx	lr

08008e10 <_fini>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	bf00      	nop
 8008e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e16:	bc08      	pop	{r3}
 8008e18:	469e      	mov	lr, r3
 8008e1a:	4770      	bx	lr
