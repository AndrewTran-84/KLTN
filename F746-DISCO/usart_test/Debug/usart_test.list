
usart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a78  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003c48  08003c48  00004c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cd0  08003cd0  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003cd0  08003cd0  00004cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cd8  08003cd8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cd8  08003cd8  00004cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cdc  08003cdc  00004cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003ce0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  08003d48  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003d48  00005260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2aa  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190c  00000000  00000000  0000f342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  00010c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000060a  00000000  00000000  00011448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c53  00000000  00000000  00011a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3d0  00000000  00000000  000376a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7d39  00000000  00000000  00042a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a7ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026cc  00000000  00000000  0012a7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0012cec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003c30 	.word	0x08003c30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003c30 	.word	0x08003c30

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__io_putchar>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
int __io_putchar(int ch)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    uint8_t c = (uint8_t)ch;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart1, &c, 1, HAL_MAX_DELAY);
 80005ea:	f107 010f 	add.w	r1, r7, #15
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	2201      	movs	r2, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <__io_putchar+0x28>)
 80005f6:	f001 fed7 	bl	80023a8 <HAL_UART_Transmit>
    return ch;
 80005fa:	687b      	ldr	r3, [r7, #4]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000084 	.word	0x20000084

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 faa1 	bl	8000b52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f818 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f8b4 	bl	8000780 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000618:	f000 f882 	bl	8000720 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello from STM32F746G DISCO via ST-Link VCP\r\n");
 800061c:	4807      	ldr	r0, [pc, #28]	@ (800063c <main+0x34>)
 800061e:	f002 fca5 	bl	8002f6c <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8000622:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000626:	f000 faf1 	bl	8000c0c <HAL_Delay>
	  printf("Tick: %lu\r\n", HAL_GetTick());
 800062a:	f000 fae3 	bl	8000bf4 <HAL_GetTick>
 800062e:	4603      	mov	r3, r0
 8000630:	4619      	mov	r1, r3
 8000632:	4803      	ldr	r0, [pc, #12]	@ (8000640 <main+0x38>)
 8000634:	f002 fc32 	bl	8002e9c <iprintf>
	  HAL_Delay(1000);
 8000638:	bf00      	nop
 800063a:	e7f2      	b.n	8000622 <main+0x1a>
 800063c:	08003c48 	.word	0x08003c48
 8000640:	08003c78 	.word	0x08003c78

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	@ 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 fd6a 	bl	800312c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	4b2b      	ldr	r3, [pc, #172]	@ (8000718 <SystemClock_Config+0xd4>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	4a2a      	ldr	r2, [pc, #168]	@ (8000718 <SystemClock_Config+0xd4>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	@ 0x40
 8000674:	4b28      	ldr	r3, [pc, #160]	@ (8000718 <SystemClock_Config+0xd4>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	4b26      	ldr	r3, [pc, #152]	@ (800071c <SystemClock_Config+0xd8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a25      	ldr	r2, [pc, #148]	@ (800071c <SystemClock_Config+0xd8>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b23      	ldr	r3, [pc, #140]	@ (800071c <SystemClock_Config+0xd8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006ac:	2319      	movs	r3, #25
 80006ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80006b0:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80006b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006ba:	2309      	movs	r3, #9
 80006bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fda8 	bl	8001218 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006ce:	f000 f887 	bl	80007e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006d2:	f000 fd51 	bl	8001178 <HAL_PWREx_EnableOverDrive>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006dc:	f000 f880 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2107      	movs	r1, #7
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 f82e 	bl	8001760 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800070a:	f000 f869 	bl	80007e0 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	@ 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 8000726:	4a15      	ldr	r2, [pc, #84]	@ (800077c <MX_USART1_UART_Init+0x5c>)
 8000728:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800072a:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_USART1_UART_Init+0x58>)
 8000764:	f001 fdd2 	bl	800230c <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800076e:	f000 f837 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000084 	.word	0x20000084
 800077c:	40011000 	.word	0x40011000

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <MX_GPIO_Init+0x5c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a14      	ldr	r2, [pc, #80]	@ (80007dc <MX_GPIO_Init+0x5c>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <MX_GPIO_Init+0x5c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_GPIO_Init+0x5c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <MX_GPIO_Init+0x5c>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_GPIO_Init+0x5c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_GPIO_Init+0x5c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <MX_GPIO_Init+0x5c>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_GPIO_Init+0x5c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <Error_Handler+0x8>

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <HAL_MspInit+0x44>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000830 <HAL_MspInit+0x44>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <HAL_MspInit+0x44>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <HAL_MspInit+0x44>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800080e:	4a08      	ldr	r2, [pc, #32]	@ (8000830 <HAL_MspInit+0x44>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000814:	6453      	str	r3, [r2, #68]	@ 0x44
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <HAL_MspInit+0x44>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b0ac      	sub	sp, #176	@ 0xb0
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800084c:	f107 0318 	add.w	r3, r7, #24
 8000850:	2284      	movs	r2, #132	@ 0x84
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f002 fc69 	bl	800312c <memset>
  if(huart->Instance==USART1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a32      	ldr	r2, [pc, #200]	@ (8000928 <HAL_UART_MspInit+0xf4>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d15c      	bne.n	800091e <HAL_UART_MspInit+0xea>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000864:	2340      	movs	r3, #64	@ 0x40
 8000866:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000868:	2300      	movs	r3, #0
 800086a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800086c:	f107 0318 	add.w	r3, r7, #24
 8000870:	4618      	mov	r0, r3
 8000872:	f001 f95b 	bl	8001b2c <HAL_RCCEx_PeriphCLKConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800087c:	f7ff ffb0 	bl	80007e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000880:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <HAL_UART_MspInit+0xf8>)
 8000882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000884:	4a29      	ldr	r2, [pc, #164]	@ (800092c <HAL_UART_MspInit+0xf8>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6453      	str	r3, [r2, #68]	@ 0x44
 800088c:	4b27      	ldr	r3, [pc, #156]	@ (800092c <HAL_UART_MspInit+0xf8>)
 800088e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000890:	f003 0310 	and.w	r3, r3, #16
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000898:	4b24      	ldr	r3, [pc, #144]	@ (800092c <HAL_UART_MspInit+0xf8>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089c:	4a23      	ldr	r2, [pc, #140]	@ (800092c <HAL_UART_MspInit+0xf8>)
 800089e:	f043 0302 	orr.w	r3, r3, #2
 80008a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a4:	4b21      	ldr	r3, [pc, #132]	@ (800092c <HAL_UART_MspInit+0xf8>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a8:	f003 0302 	and.w	r3, r3, #2
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <HAL_UART_MspInit+0xf8>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b4:	4a1d      	ldr	r2, [pc, #116]	@ (800092c <HAL_UART_MspInit+0xf8>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80008bc:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <HAL_UART_MspInit+0xf8>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008c8:	2380      	movs	r3, #128	@ 0x80
 80008ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008e0:	2307      	movs	r3, #7
 80008e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008ea:	4619      	mov	r1, r3
 80008ec:	4810      	ldr	r0, [pc, #64]	@ (8000930 <HAL_UART_MspInit+0xfc>)
 80008ee:	f000 fa97 	bl	8000e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800090c:	2307      	movs	r3, #7
 800090e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000916:	4619      	mov	r1, r3
 8000918:	4806      	ldr	r0, [pc, #24]	@ (8000934 <HAL_UART_MspInit+0x100>)
 800091a:	f000 fa81 	bl	8000e20 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800091e:	bf00      	nop
 8000920:	37b0      	adds	r7, #176	@ 0xb0
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40011000 	.word	0x40011000
 800092c:	40023800 	.word	0x40023800
 8000930:	40020400 	.word	0x40020400
 8000934:	40020000 	.word	0x40020000

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <NMI_Handler+0x4>

08000940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <MemManage_Handler+0x4>

08000950 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <UsageFault_Handler+0x4>

08000960 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098e:	f000 f91d 	bl	8000bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}

08000996 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b086      	sub	sp, #24
 800099a:	af00      	add	r7, sp, #0
 800099c:	60f8      	str	r0, [r7, #12]
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	e00a      	b.n	80009be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009a8:	f3af 8000 	nop.w
 80009ac:	4601      	mov	r1, r0
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	1c5a      	adds	r2, r3, #1
 80009b2:	60ba      	str	r2, [r7, #8]
 80009b4:	b2ca      	uxtb	r2, r1
 80009b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	3301      	adds	r3, #1
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	dbf0      	blt.n	80009a8 <_read+0x12>
  }

  return len;
 80009c6:	687b      	ldr	r3, [r7, #4]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	e009      	b.n	80009f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	60ba      	str	r2, [r7, #8]
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fdf6 	bl	80005dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	3301      	adds	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	dbf1      	blt.n	80009e2 <_write+0x12>
  }
  return len;
 80009fe:	687b      	ldr	r3, [r7, #4]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <_close>:

int _close(int file)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a30:	605a      	str	r2, [r3, #4]
  return 0;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <_isatty>:

int _isatty(int file)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a48:	2301      	movs	r3, #1
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b085      	sub	sp, #20
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a78:	4a14      	ldr	r2, [pc, #80]	@ (8000acc <_sbrk+0x5c>)
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <_sbrk+0x60>)
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a84:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <_sbrk+0x64>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ad8 <_sbrk+0x68>)
 8000a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d207      	bcs.n	8000ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa0:	f002 fb92 	bl	80031c8 <__errno>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	e009      	b.n	8000ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a05      	ldr	r2, [pc, #20]	@ (8000ad4 <_sbrk+0x64>)
 8000ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20050000 	.word	0x20050000
 8000ad0:	00000400 	.word	0x00000400
 8000ad4:	2000010c 	.word	0x2000010c
 8000ad8:	20000260 	.word	0x20000260

08000adc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	@ (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b04:	f7ff ffea 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	@ (8000b40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	@ (8000b4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f002 fb51 	bl	80031d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b32:	f7ff fd69 	bl	8000608 <main>
  bx  lr    
 8000b36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b38:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b44:	08003ce0 	.word	0x08003ce0
  ldr r2, =_sbss
 8000b48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b4c:	20000260 	.word	0x20000260

08000b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC_IRQHandler>

08000b52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b56:	2003      	movs	r0, #3
 8000b58:	f000 f92e 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5c:	200f      	movs	r0, #15
 8000b5e:	f000 f805 	bl	8000b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b62:	f7ff fe43 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_InitTick+0x54>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <HAL_InitTick+0x58>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f93b 	bl	8000e06 <HAL_SYSTICK_Config>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00e      	b.n	8000bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d80a      	bhi.n	8000bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f000 f911 	bl	8000dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bac:	4a06      	ldr	r2, [pc, #24]	@ (8000bc8 <HAL_InitTick+0x5c>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e000      	b.n	8000bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000004 	.word	0x20000004

08000bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_IncTick+0x20>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_IncTick+0x24>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <HAL_IncTick+0x24>)
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000110 	.word	0x20000110

08000bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf8:	4b03      	ldr	r3, [pc, #12]	@ (8000c08 <HAL_GetTick+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000110 	.word	0x20000110

08000c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c14:	f7ff ffee 	bl	8000bf4 <HAL_GetTick>
 8000c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c24:	d005      	beq.n	8000c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c26:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <HAL_Delay+0x44>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c32:	bf00      	nop
 8000c34:	f7ff ffde 	bl	8000bf4 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d8f7      	bhi.n	8000c34 <HAL_Delay+0x28>
  {
  }
}
 8000c44:	bf00      	nop
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x40>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x40>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00
 8000c98:	05fa0000 	.word	0x05fa0000

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	@ (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	@ (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	@ 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	@ 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f7ff ff8e 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff47 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de0:	f7ff ff5c 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff8e 	bl	8000d0c <NVIC_EncodePriority>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff5d 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ffb0 	bl	8000d74 <SysTick_Config>
 8000e14:	4603      	mov	r3, r0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	@ 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	e175      	b.n	800112c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f040 8164 	bne.w	8001126 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d005      	beq.n	8000e76 <HAL_GPIO_Init+0x56>
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d130      	bne.n	8000ed8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eac:	2201      	movs	r2, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	091b      	lsrs	r3, r3, #4
 8000ec2:	f003 0201 	and.w	r2, r3, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d017      	beq.n	8000f14 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d123      	bne.n	8000f68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	69b9      	ldr	r1, [r7, #24]
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0203 	and.w	r2, r3, #3
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80be 	beq.w	8001126 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	4b66      	ldr	r3, [pc, #408]	@ (8001144 <HAL_GPIO_Init+0x324>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	4a65      	ldr	r2, [pc, #404]	@ (8001144 <HAL_GPIO_Init+0x324>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb6:	4b63      	ldr	r3, [pc, #396]	@ (8001144 <HAL_GPIO_Init+0x324>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fc2:	4a61      	ldr	r2, [pc, #388]	@ (8001148 <HAL_GPIO_Init+0x328>)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a58      	ldr	r2, [pc, #352]	@ (800114c <HAL_GPIO_Init+0x32c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d037      	beq.n	800105e <HAL_GPIO_Init+0x23e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a57      	ldr	r2, [pc, #348]	@ (8001150 <HAL_GPIO_Init+0x330>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d031      	beq.n	800105a <HAL_GPIO_Init+0x23a>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a56      	ldr	r2, [pc, #344]	@ (8001154 <HAL_GPIO_Init+0x334>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d02b      	beq.n	8001056 <HAL_GPIO_Init+0x236>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a55      	ldr	r2, [pc, #340]	@ (8001158 <HAL_GPIO_Init+0x338>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d025      	beq.n	8001052 <HAL_GPIO_Init+0x232>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a54      	ldr	r2, [pc, #336]	@ (800115c <HAL_GPIO_Init+0x33c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d01f      	beq.n	800104e <HAL_GPIO_Init+0x22e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a53      	ldr	r2, [pc, #332]	@ (8001160 <HAL_GPIO_Init+0x340>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x22a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a52      	ldr	r2, [pc, #328]	@ (8001164 <HAL_GPIO_Init+0x344>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x226>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a51      	ldr	r2, [pc, #324]	@ (8001168 <HAL_GPIO_Init+0x348>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x222>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a50      	ldr	r2, [pc, #320]	@ (800116c <HAL_GPIO_Init+0x34c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x21e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4f      	ldr	r2, [pc, #316]	@ (8001170 <HAL_GPIO_Init+0x350>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x21a>
 8001036:	2309      	movs	r3, #9
 8001038:	e012      	b.n	8001060 <HAL_GPIO_Init+0x240>
 800103a:	230a      	movs	r3, #10
 800103c:	e010      	b.n	8001060 <HAL_GPIO_Init+0x240>
 800103e:	2308      	movs	r3, #8
 8001040:	e00e      	b.n	8001060 <HAL_GPIO_Init+0x240>
 8001042:	2307      	movs	r3, #7
 8001044:	e00c      	b.n	8001060 <HAL_GPIO_Init+0x240>
 8001046:	2306      	movs	r3, #6
 8001048:	e00a      	b.n	8001060 <HAL_GPIO_Init+0x240>
 800104a:	2305      	movs	r3, #5
 800104c:	e008      	b.n	8001060 <HAL_GPIO_Init+0x240>
 800104e:	2304      	movs	r3, #4
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x240>
 8001052:	2303      	movs	r3, #3
 8001054:	e004      	b.n	8001060 <HAL_GPIO_Init+0x240>
 8001056:	2302      	movs	r3, #2
 8001058:	e002      	b.n	8001060 <HAL_GPIO_Init+0x240>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x240>
 800105e:	2300      	movs	r3, #0
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	f002 0203 	and.w	r2, r2, #3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4093      	lsls	r3, r2
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001070:	4935      	ldr	r1, [pc, #212]	@ (8001148 <HAL_GPIO_Init+0x328>)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107e:	4b3d      	ldr	r3, [pc, #244]	@ (8001174 <HAL_GPIO_Init+0x354>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a2:	4a34      	ldr	r2, [pc, #208]	@ (8001174 <HAL_GPIO_Init+0x354>)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a8:	4b32      	ldr	r3, [pc, #200]	@ (8001174 <HAL_GPIO_Init+0x354>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010cc:	4a29      	ldr	r2, [pc, #164]	@ (8001174 <HAL_GPIO_Init+0x354>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010d2:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <HAL_GPIO_Init+0x354>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001174 <HAL_GPIO_Init+0x354>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <HAL_GPIO_Init+0x354>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001120:	4a14      	ldr	r2, [pc, #80]	@ (8001174 <HAL_GPIO_Init+0x354>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3301      	adds	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	2b0f      	cmp	r3, #15
 8001130:	f67f ae86 	bls.w	8000e40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3724      	adds	r7, #36	@ 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40013800 	.word	0x40013800
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400
 8001154:	40020800 	.word	0x40020800
 8001158:	40020c00 	.word	0x40020c00
 800115c:	40021000 	.word	0x40021000
 8001160:	40021400 	.word	0x40021400
 8001164:	40021800 	.word	0x40021800
 8001168:	40021c00 	.word	0x40021c00
 800116c:	40022000 	.word	0x40022000
 8001170:	40022400 	.word	0x40022400
 8001174:	40013c00 	.word	0x40013c00

08001178 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	4b23      	ldr	r3, [pc, #140]	@ (8001210 <HAL_PWREx_EnableOverDrive+0x98>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	4a22      	ldr	r2, [pc, #136]	@ (8001210 <HAL_PWREx_EnableOverDrive+0x98>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800118c:	6413      	str	r3, [r2, #64]	@ 0x40
 800118e:	4b20      	ldr	r3, [pc, #128]	@ (8001210 <HAL_PWREx_EnableOverDrive+0x98>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800119a:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <HAL_PWREx_EnableOverDrive+0x9c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a1d      	ldr	r2, [pc, #116]	@ (8001214 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011a6:	f7ff fd25 	bl	8000bf4 <HAL_GetTick>
 80011aa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011ac:	e009      	b.n	80011c2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011ae:	f7ff fd21 	bl	8000bf4 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011bc:	d901      	bls.n	80011c2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e022      	b.n	8001208 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011c2:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ce:	d1ee      	bne.n	80011ae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011dc:	f7ff fd0a 	bl	8000bf4 <HAL_GetTick>
 80011e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011e2:	e009      	b.n	80011f8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011e4:	f7ff fd06 	bl	8000bf4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011f2:	d901      	bls.n	80011f8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e007      	b.n	8001208 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001200:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001204:	d1ee      	bne.n	80011e4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40023800 	.word	0x40023800
 8001214:	40007000 	.word	0x40007000

08001218 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e291      	b.n	8001752 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 8087 	beq.w	800134a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800123c:	4b96      	ldr	r3, [pc, #600]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	2b04      	cmp	r3, #4
 8001246:	d00c      	beq.n	8001262 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001248:	4b93      	ldr	r3, [pc, #588]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b08      	cmp	r3, #8
 8001252:	d112      	bne.n	800127a <HAL_RCC_OscConfig+0x62>
 8001254:	4b90      	ldr	r3, [pc, #576]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800125c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001260:	d10b      	bne.n	800127a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001262:	4b8d      	ldr	r3, [pc, #564]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d06c      	beq.n	8001348 <HAL_RCC_OscConfig+0x130>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d168      	bne.n	8001348 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e26b      	b.n	8001752 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001282:	d106      	bne.n	8001292 <HAL_RCC_OscConfig+0x7a>
 8001284:	4b84      	ldr	r3, [pc, #528]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a83      	ldr	r2, [pc, #524]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 800128a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	e02e      	b.n	80012f0 <HAL_RCC_OscConfig+0xd8>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x9c>
 800129a:	4b7f      	ldr	r3, [pc, #508]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a7e      	ldr	r2, [pc, #504]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80012a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a7b      	ldr	r2, [pc, #492]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80012ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e01d      	b.n	80012f0 <HAL_RCC_OscConfig+0xd8>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012bc:	d10c      	bne.n	80012d8 <HAL_RCC_OscConfig+0xc0>
 80012be:	4b76      	ldr	r3, [pc, #472]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a75      	ldr	r2, [pc, #468]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	4b73      	ldr	r3, [pc, #460]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a72      	ldr	r2, [pc, #456]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80012d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	e00b      	b.n	80012f0 <HAL_RCC_OscConfig+0xd8>
 80012d8:	4b6f      	ldr	r3, [pc, #444]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a6e      	ldr	r2, [pc, #440]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80012de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a6b      	ldr	r2, [pc, #428]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80012ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d013      	beq.n	8001320 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f8:	f7ff fc7c 	bl	8000bf4 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff fc78 	bl	8000bf4 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	@ 0x64
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e21f      	b.n	8001752 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	4b61      	ldr	r3, [pc, #388]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0xe8>
 800131e:	e014      	b.n	800134a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001320:	f7ff fc68 	bl	8000bf4 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fc64 	bl	8000bf4 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	@ 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e20b      	b.n	8001752 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	4b57      	ldr	r3, [pc, #348]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x110>
 8001346:	e000      	b.n	800134a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d069      	beq.n	800142a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001356:	4b50      	ldr	r3, [pc, #320]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001362:	4b4d      	ldr	r3, [pc, #308]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b08      	cmp	r3, #8
 800136c:	d11c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x190>
 800136e:	4b4a      	ldr	r3, [pc, #296]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d116      	bne.n	80013a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137a:	4b47      	ldr	r3, [pc, #284]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <HAL_RCC_OscConfig+0x17a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d001      	beq.n	8001392 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e1df      	b.n	8001752 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001392:	4b41      	ldr	r3, [pc, #260]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	493d      	ldr	r1, [pc, #244]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	e040      	b.n	800142a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d023      	beq.n	80013f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b0:	4b39      	ldr	r3, [pc, #228]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a38      	ldr	r2, [pc, #224]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff fc1a 	bl	8000bf4 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c4:	f7ff fc16 	bl	8000bf4 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e1bd      	b.n	8001752 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d6:	4b30      	ldr	r3, [pc, #192]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4929      	ldr	r1, [pc, #164]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
 80013f6:	e018      	b.n	800142a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f8:	4b27      	ldr	r3, [pc, #156]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a26      	ldr	r2, [pc, #152]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 80013fe:	f023 0301 	bic.w	r3, r3, #1
 8001402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fbf6 	bl	8000bf4 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fbf2 	bl	8000bf4 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e199      	b.n	8001752 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d038      	beq.n	80014a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d019      	beq.n	8001472 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 8001440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001442:	4a15      	ldr	r2, [pc, #84]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144a:	f7ff fbd3 	bl	8000bf4 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001452:	f7ff fbcf 	bl	8000bf4 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e176      	b.n	8001752 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 8001466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x23a>
 8001470:	e01a      	b.n	80014a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001472:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 8001474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001476:	4a08      	ldr	r2, [pc, #32]	@ (8001498 <HAL_RCC_OscConfig+0x280>)
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147e:	f7ff fbb9 	bl	8000bf4 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	e00a      	b.n	800149c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001486:	f7ff fbb5 	bl	8000bf4 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d903      	bls.n	800149c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e15c      	b.n	8001752 <HAL_RCC_OscConfig+0x53a>
 8001498:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149c:	4b91      	ldr	r3, [pc, #580]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 800149e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1ee      	bne.n	8001486 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80a4 	beq.w	80015fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b6:	4b8b      	ldr	r3, [pc, #556]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10d      	bne.n	80014de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	4b88      	ldr	r3, [pc, #544]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	4a87      	ldr	r2, [pc, #540]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ce:	4b85      	ldr	r3, [pc, #532]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014da:	2301      	movs	r3, #1
 80014dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014de:	4b82      	ldr	r3, [pc, #520]	@ (80016e8 <HAL_RCC_OscConfig+0x4d0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d118      	bne.n	800151c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014ea:	4b7f      	ldr	r3, [pc, #508]	@ (80016e8 <HAL_RCC_OscConfig+0x4d0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a7e      	ldr	r2, [pc, #504]	@ (80016e8 <HAL_RCC_OscConfig+0x4d0>)
 80014f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fb7d 	bl	8000bf4 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fe:	f7ff fb79 	bl	8000bf4 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b64      	cmp	r3, #100	@ 0x64
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e120      	b.n	8001752 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001510:	4b75      	ldr	r3, [pc, #468]	@ (80016e8 <HAL_RCC_OscConfig+0x4d0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d106      	bne.n	8001532 <HAL_RCC_OscConfig+0x31a>
 8001524:	4b6f      	ldr	r3, [pc, #444]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001528:	4a6e      	ldr	r2, [pc, #440]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001530:	e02d      	b.n	800158e <HAL_RCC_OscConfig+0x376>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10c      	bne.n	8001554 <HAL_RCC_OscConfig+0x33c>
 800153a:	4b6a      	ldr	r3, [pc, #424]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800153e:	4a69      	ldr	r2, [pc, #420]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	6713      	str	r3, [r2, #112]	@ 0x70
 8001546:	4b67      	ldr	r3, [pc, #412]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154a:	4a66      	ldr	r2, [pc, #408]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 800154c:	f023 0304 	bic.w	r3, r3, #4
 8001550:	6713      	str	r3, [r2, #112]	@ 0x70
 8001552:	e01c      	b.n	800158e <HAL_RCC_OscConfig+0x376>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b05      	cmp	r3, #5
 800155a:	d10c      	bne.n	8001576 <HAL_RCC_OscConfig+0x35e>
 800155c:	4b61      	ldr	r3, [pc, #388]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001560:	4a60      	ldr	r2, [pc, #384]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	6713      	str	r3, [r2, #112]	@ 0x70
 8001568:	4b5e      	ldr	r3, [pc, #376]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800156c:	4a5d      	ldr	r2, [pc, #372]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6713      	str	r3, [r2, #112]	@ 0x70
 8001574:	e00b      	b.n	800158e <HAL_RCC_OscConfig+0x376>
 8001576:	4b5b      	ldr	r3, [pc, #364]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157a:	4a5a      	ldr	r2, [pc, #360]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	6713      	str	r3, [r2, #112]	@ 0x70
 8001582:	4b58      	ldr	r3, [pc, #352]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001586:	4a57      	ldr	r2, [pc, #348]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001588:	f023 0304 	bic.w	r3, r3, #4
 800158c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d015      	beq.n	80015c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001596:	f7ff fb2d 	bl	8000bf4 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159c:	e00a      	b.n	80015b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159e:	f7ff fb29 	bl	8000bf4 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e0ce      	b.n	8001752 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b4:	4b4b      	ldr	r3, [pc, #300]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0ee      	beq.n	800159e <HAL_RCC_OscConfig+0x386>
 80015c0:	e014      	b.n	80015ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c2:	f7ff fb17 	bl	8000bf4 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c8:	e00a      	b.n	80015e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ca:	f7ff fb13 	bl	8000bf4 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d8:	4293      	cmp	r3, r2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e0b8      	b.n	8001752 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e0:	4b40      	ldr	r3, [pc, #256]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1ee      	bne.n	80015ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d105      	bne.n	80015fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f2:	4b3c      	ldr	r3, [pc, #240]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	4a3b      	ldr	r2, [pc, #236]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 80015f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015fc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 80a4 	beq.w	8001750 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001608:	4b36      	ldr	r3, [pc, #216]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 030c 	and.w	r3, r3, #12
 8001610:	2b08      	cmp	r3, #8
 8001612:	d06b      	beq.n	80016ec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d149      	bne.n	80016b0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161c:	4b31      	ldr	r3, [pc, #196]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a30      	ldr	r2, [pc, #192]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001622:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fae4 	bl	8000bf4 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001630:	f7ff fae0 	bl	8000bf4 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e087      	b.n	8001752 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	4b28      	ldr	r3, [pc, #160]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69da      	ldr	r2, [r3, #28]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165c:	019b      	lsls	r3, r3, #6
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001664:	085b      	lsrs	r3, r3, #1
 8001666:	3b01      	subs	r3, #1
 8001668:	041b      	lsls	r3, r3, #16
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	4313      	orrs	r3, r2
 8001674:	4a1b      	ldr	r2, [pc, #108]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001676:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800167a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800167c:	4b19      	ldr	r3, [pc, #100]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a18      	ldr	r2, [pc, #96]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001682:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fab4 	bl	8000bf4 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fab0 	bl	8000bf4 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e057      	b.n	8001752 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x478>
 80016ae:	e04f      	b.n	8001750 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0b      	ldr	r2, [pc, #44]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 80016b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fa9a 	bl	8000bf4 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff fa96 	bl	8000bf4 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e03d      	b.n	8001752 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d6:	4b03      	ldr	r3, [pc, #12]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4ac>
 80016e2:	e035      	b.n	8001750 <HAL_RCC_OscConfig+0x538>
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <HAL_RCC_OscConfig+0x544>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d028      	beq.n	800174c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d121      	bne.n	800174c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d11a      	bne.n	800174c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800171c:	4013      	ands	r3, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001722:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001724:	4293      	cmp	r3, r2
 8001726:	d111      	bne.n	800174c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	3b01      	subs	r3, #1
 8001736:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d107      	bne.n	800174c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001746:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800

08001760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0d0      	b.n	800191a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b6a      	ldr	r3, [pc, #424]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d910      	bls.n	80017a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b67      	ldr	r3, [pc, #412]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 020f 	bic.w	r2, r3, #15
 800178e:	4965      	ldr	r1, [pc, #404]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	4313      	orrs	r3, r2
 8001794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b63      	ldr	r3, [pc, #396]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0b8      	b.n	800191a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c0:	4b59      	ldr	r3, [pc, #356]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4a58      	ldr	r2, [pc, #352]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80017c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d8:	4b53      	ldr	r3, [pc, #332]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4a52      	ldr	r2, [pc, #328]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80017de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e4:	4b50      	ldr	r3, [pc, #320]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	494d      	ldr	r1, [pc, #308]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d040      	beq.n	8001884 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	4b47      	ldr	r3, [pc, #284]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d115      	bne.n	8001842 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e07f      	b.n	800191a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	4b41      	ldr	r3, [pc, #260]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e073      	b.n	800191a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	4b3d      	ldr	r3, [pc, #244]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06b      	b.n	800191a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001842:	4b39      	ldr	r3, [pc, #228]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f023 0203 	bic.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4936      	ldr	r1, [pc, #216]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001854:	f7ff f9ce 	bl	8000bf4 <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	e00a      	b.n	8001872 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7ff f9ca 	bl	8000bf4 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e053      	b.n	800191a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	4b2d      	ldr	r3, [pc, #180]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 020c 	and.w	r2, r3, #12
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	429a      	cmp	r2, r3
 8001882:	d1eb      	bne.n	800185c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001884:	4b27      	ldr	r3, [pc, #156]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d210      	bcs.n	80018b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b24      	ldr	r3, [pc, #144]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 020f 	bic.w	r2, r3, #15
 800189a:	4922      	ldr	r1, [pc, #136]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b20      	ldr	r3, [pc, #128]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e032      	b.n	800191a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c0:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4916      	ldr	r1, [pc, #88]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018de:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	490e      	ldr	r1, [pc, #56]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018f2:	f000 f821 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80018f6:	4602      	mov	r2, r0
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	490a      	ldr	r1, [pc, #40]	@ (800192c <HAL_RCC_ClockConfig+0x1cc>)
 8001904:	5ccb      	ldrb	r3, [r1, r3]
 8001906:	fa22 f303 	lsr.w	r3, r2, r3
 800190a:	4a09      	ldr	r2, [pc, #36]	@ (8001930 <HAL_RCC_ClockConfig+0x1d0>)
 800190c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_RCC_ClockConfig+0x1d4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f92a 	bl	8000b6c <HAL_InitTick>

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023c00 	.word	0x40023c00
 8001928:	40023800 	.word	0x40023800
 800192c:	08003c84 	.word	0x08003c84
 8001930:	20000000 	.word	0x20000000
 8001934:	20000004 	.word	0x20000004

08001938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800193c:	b090      	sub	sp, #64	@ 0x40
 800193e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	637b      	str	r3, [r7, #52]	@ 0x34
 8001944:	2300      	movs	r3, #0
 8001946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001948:	2300      	movs	r3, #0
 800194a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001950:	4b59      	ldr	r3, [pc, #356]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b08      	cmp	r3, #8
 800195a:	d00d      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x40>
 800195c:	2b08      	cmp	r3, #8
 800195e:	f200 80a1 	bhi.w	8001aa4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x34>
 8001966:	2b04      	cmp	r3, #4
 8001968:	d003      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x3a>
 800196a:	e09b      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b53      	ldr	r3, [pc, #332]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x184>)
 800196e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001970:	e09b      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001972:	4b53      	ldr	r3, [pc, #332]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001974:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001976:	e098      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001978:	4b4f      	ldr	r3, [pc, #316]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001980:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001982:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d028      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	099b      	lsrs	r3, r3, #6
 8001994:	2200      	movs	r2, #0
 8001996:	623b      	str	r3, [r7, #32]
 8001998:	627a      	str	r2, [r7, #36]	@ 0x24
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019a0:	2100      	movs	r1, #0
 80019a2:	4b47      	ldr	r3, [pc, #284]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x188>)
 80019a4:	fb03 f201 	mul.w	r2, r3, r1
 80019a8:	2300      	movs	r3, #0
 80019aa:	fb00 f303 	mul.w	r3, r0, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	4a43      	ldr	r2, [pc, #268]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x188>)
 80019b2:	fba0 1202 	umull	r1, r2, r0, r2
 80019b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019b8:	460a      	mov	r2, r1
 80019ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80019bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019be:	4413      	add	r3, r2
 80019c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c4:	2200      	movs	r2, #0
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	61fa      	str	r2, [r7, #28]
 80019ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019d2:	f7fe fc6d 	bl	80002b0 <__aeabi_uldivmod>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4613      	mov	r3, r2
 80019dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019de:	e053      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e0:	4b35      	ldr	r3, [pc, #212]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	099b      	lsrs	r3, r3, #6
 80019e6:	2200      	movs	r2, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	617a      	str	r2, [r7, #20]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019f2:	f04f 0b00 	mov.w	fp, #0
 80019f6:	4652      	mov	r2, sl
 80019f8:	465b      	mov	r3, fp
 80019fa:	f04f 0000 	mov.w	r0, #0
 80019fe:	f04f 0100 	mov.w	r1, #0
 8001a02:	0159      	lsls	r1, r3, #5
 8001a04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a08:	0150      	lsls	r0, r2, #5
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	ebb2 080a 	subs.w	r8, r2, sl
 8001a12:	eb63 090b 	sbc.w	r9, r3, fp
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a2a:	ebb2 0408 	subs.w	r4, r2, r8
 8001a2e:	eb63 0509 	sbc.w	r5, r3, r9
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	00eb      	lsls	r3, r5, #3
 8001a3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a40:	00e2      	lsls	r2, r4, #3
 8001a42:	4614      	mov	r4, r2
 8001a44:	461d      	mov	r5, r3
 8001a46:	eb14 030a 	adds.w	r3, r4, sl
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	eb45 030b 	adc.w	r3, r5, fp
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a5e:	4629      	mov	r1, r5
 8001a60:	028b      	lsls	r3, r1, #10
 8001a62:	4621      	mov	r1, r4
 8001a64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a68:	4621      	mov	r1, r4
 8001a6a:	028a      	lsls	r2, r1, #10
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a72:	2200      	movs	r2, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	60fa      	str	r2, [r7, #12]
 8001a78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a7c:	f7fe fc18 	bl	80002b0 <__aeabi_uldivmod>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4613      	mov	r3, r2
 8001a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a88:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	0c1b      	lsrs	r3, r3, #16
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	3301      	adds	r3, #1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001aa2:	e002      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x184>)
 8001aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3740      	adds	r7, #64	@ 0x40
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	00f42400 	.word	0x00f42400
 8001ac0:	017d7840 	.word	0x017d7840

08001ac4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	@ (8001ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000000 	.word	0x20000000

08001adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ae0:	f7ff fff0 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	0a9b      	lsrs	r3, r3, #10
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	4903      	ldr	r1, [pc, #12]	@ (8001b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	08003c94 	.word	0x08003c94

08001b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b08:	f7ff ffdc 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0b5b      	lsrs	r3, r3, #13
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4903      	ldr	r1, [pc, #12]	@ (8001b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	08003c94 	.word	0x08003c94

08001b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d012      	beq.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b54:	4b69      	ldr	r3, [pc, #420]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4a68      	ldr	r2, [pc, #416]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001b5e:	6093      	str	r3, [r2, #8]
 8001b60:	4b66      	ldr	r3, [pc, #408]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b68:	4964      	ldr	r1, [pc, #400]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d017      	beq.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b86:	4b5d      	ldr	r3, [pc, #372]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b8c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b94:	4959      	ldr	r1, [pc, #356]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ba4:	d101      	bne.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d017      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001bc2:	4b4e      	ldr	r3, [pc, #312]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bc8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	494a      	ldr	r1, [pc, #296]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001be0:	d101      	bne.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 808b 	beq.w	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c10:	4b3a      	ldr	r3, [pc, #232]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	4a39      	ldr	r2, [pc, #228]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1c:	4b37      	ldr	r3, [pc, #220]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c28:	4b35      	ldr	r3, [pc, #212]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a34      	ldr	r2, [pc, #208]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c34:	f7fe ffde 	bl	8000bf4 <HAL_GetTick>
 8001c38:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3c:	f7fe ffda 	bl	8000bf4 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	@ 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e357      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c5a:	4b28      	ldr	r3, [pc, #160]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d035      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d02e      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c78:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c82:	4b1e      	ldr	r3, [pc, #120]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c86:	4a1d      	ldr	r2, [pc, #116]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c8c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c92:	4a1a      	ldr	r2, [pc, #104]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c98:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001c9a:	4a18      	ldr	r2, [pc, #96]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ca0:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d114      	bne.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7fe ffa2 	bl	8000bf4 <HAL_GetTick>
 8001cb0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7fe ff9e 	bl	8000bf4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e319      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cca:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0ee      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001ce2:	d111      	bne.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ce4:	4b05      	ldr	r3, [pc, #20]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cf0:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	4901      	ldr	r1, [pc, #4]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40007000 	.word	0x40007000
 8001d04:	0ffffcff 	.word	0x0ffffcff
 8001d08:	4baa      	ldr	r3, [pc, #680]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4aa9      	ldr	r2, [pc, #676]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d0e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001d12:	6093      	str	r3, [r2, #8]
 8001d14:	4ba7      	ldr	r3, [pc, #668]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d20:	49a4      	ldr	r1, [pc, #656]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d010      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d32:	4ba0      	ldr	r3, [pc, #640]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d38:	4a9e      	ldr	r2, [pc, #632]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d42:	4b9c      	ldr	r3, [pc, #624]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d44:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d4c:	4999      	ldr	r1, [pc, #612]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00a      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d60:	4b94      	ldr	r3, [pc, #592]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d66:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d6e:	4991      	ldr	r1, [pc, #580]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d82:	4b8c      	ldr	r3, [pc, #560]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d90:	4988      	ldr	r1, [pc, #544]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00a      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001da4:	4b83      	ldr	r3, [pc, #524]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001daa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001db2:	4980      	ldr	r1, [pc, #512]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001dc6:	4b7b      	ldr	r3, [pc, #492]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dcc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd4:	4977      	ldr	r1, [pc, #476]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00a      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001de8:	4b72      	ldr	r3, [pc, #456]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dee:	f023 0203 	bic.w	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	496f      	ldr	r1, [pc, #444]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00a      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e0a:	4b6a      	ldr	r3, [pc, #424]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e10:	f023 020c 	bic.w	r2, r3, #12
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e18:	4966      	ldr	r1, [pc, #408]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00a      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e2c:	4b61      	ldr	r3, [pc, #388]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e32:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3a:	495e      	ldr	r1, [pc, #376]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e4e:	4b59      	ldr	r3, [pc, #356]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e54:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e5c:	4955      	ldr	r1, [pc, #340]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e70:	4b50      	ldr	r3, [pc, #320]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7e:	494d      	ldr	r1, [pc, #308]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00a      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e92:	4b48      	ldr	r3, [pc, #288]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e98:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea0:	4944      	ldr	r1, [pc, #272]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00a      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001eb4:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec2:	493c      	ldr	r1, [pc, #240]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001ed6:	4b37      	ldr	r3, [pc, #220]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001edc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee4:	4933      	ldr	r1, [pc, #204]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00a      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f06:	492b      	ldr	r1, [pc, #172]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d011      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f1a:	4b26      	ldr	r3, [pc, #152]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f20:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f28:	4922      	ldr	r1, [pc, #136]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f38:	d101      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f5a:	4b16      	ldr	r3, [pc, #88]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f60:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f68:	4912      	ldr	r1, [pc, #72]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f82:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f8c:	4909      	ldr	r1, [pc, #36]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d006      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 80d9 	beq.w	800215a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001fa8:	4b02      	ldr	r3, [pc, #8]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a01      	ldr	r2, [pc, #4]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001fb2:	e001      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fba:	f7fe fe1b 	bl	8000bf4 <HAL_GetTick>
 8001fbe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001fc2:	f7fe fe17 	bl	8000bf4 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b64      	cmp	r3, #100	@ 0x64
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e194      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fd4:	4b6c      	ldr	r3, [pc, #432]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f0      	bne.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d021      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d11d      	bne.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ff4:	4b64      	ldr	r3, [pc, #400]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ffa:	0c1b      	lsrs	r3, r3, #16
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002002:	4b61      	ldr	r3, [pc, #388]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002004:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002008:	0e1b      	lsrs	r3, r3, #24
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	019a      	lsls	r2, r3, #6
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	041b      	lsls	r3, r3, #16
 800201a:	431a      	orrs	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	061b      	lsls	r3, r3, #24
 8002020:	431a      	orrs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	071b      	lsls	r3, r3, #28
 8002028:	4957      	ldr	r1, [pc, #348]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d004      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002040:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800204e:	2b00      	cmp	r3, #0
 8002050:	d02e      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800205a:	d129      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800205c:	4b4a      	ldr	r3, [pc, #296]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800205e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002062:	0c1b      	lsrs	r3, r3, #16
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800206a:	4b47      	ldr	r3, [pc, #284]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800206c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002070:	0f1b      	lsrs	r3, r3, #28
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	019a      	lsls	r2, r3, #6
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	041b      	lsls	r3, r3, #16
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	431a      	orrs	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	071b      	lsls	r3, r3, #28
 8002090:	493d      	ldr	r1, [pc, #244]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002098:	4b3b      	ldr	r3, [pc, #236]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800209a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800209e:	f023 021f 	bic.w	r2, r3, #31
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	3b01      	subs	r3, #1
 80020a8:	4937      	ldr	r1, [pc, #220]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01d      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020bc:	4b32      	ldr	r3, [pc, #200]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020c2:	0e1b      	lsrs	r3, r3, #24
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020d0:	0f1b      	lsrs	r3, r3, #28
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	019a      	lsls	r2, r3, #6
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	041b      	lsls	r3, r3, #16
 80020e4:	431a      	orrs	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	061b      	lsls	r3, r3, #24
 80020ea:	431a      	orrs	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	071b      	lsls	r3, r3, #28
 80020f0:	4925      	ldr	r1, [pc, #148]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d011      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	019a      	lsls	r2, r3, #6
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	041b      	lsls	r3, r3, #16
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	061b      	lsls	r3, r3, #24
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	071b      	lsls	r3, r3, #28
 8002120:	4919      	ldr	r1, [pc, #100]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002128:	4b17      	ldr	r3, [pc, #92]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a16      	ldr	r2, [pc, #88]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800212e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002134:	f7fe fd5e 	bl	8000bf4 <HAL_GetTick>
 8002138:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800213c:	f7fe fd5a 	bl	8000bf4 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	@ 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e0d7      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b01      	cmp	r3, #1
 800215e:	f040 80cd 	bne.w	80022fc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a08      	ldr	r2, [pc, #32]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800216c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800216e:	f7fe fd41 	bl	8000bf4 <HAL_GetTick>
 8002172:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002176:	f7fe fd3d 	bl	8000bf4 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b64      	cmp	r3, #100	@ 0x64
 8002182:	d903      	bls.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0ba      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002188:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800218c:	4b5e      	ldr	r3, [pc, #376]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002194:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002198:	d0ed      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x682>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d02e      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d12a      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80021c2:	4b51      	ldr	r3, [pc, #324]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c8:	0c1b      	lsrs	r3, r3, #16
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80021d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	0f1b      	lsrs	r3, r3, #28
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	019a      	lsls	r2, r3, #6
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	041b      	lsls	r3, r3, #16
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	061b      	lsls	r3, r3, #24
 80021f0:	431a      	orrs	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	071b      	lsls	r3, r3, #28
 80021f6:	4944      	ldr	r1, [pc, #272]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80021fe:	4b42      	ldr	r3, [pc, #264]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002200:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002204:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220c:	3b01      	subs	r3, #1
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	493d      	ldr	r1, [pc, #244]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d022      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002228:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800222c:	d11d      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800222e:	4b36      	ldr	r3, [pc, #216]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002234:	0e1b      	lsrs	r3, r3, #24
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800223c:	4b32      	ldr	r3, [pc, #200]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002242:	0f1b      	lsrs	r3, r3, #28
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	019a      	lsls	r2, r3, #6
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	041b      	lsls	r3, r3, #16
 8002256:	431a      	orrs	r2, r3
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	061b      	lsls	r3, r3, #24
 800225c:	431a      	orrs	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	071b      	lsls	r3, r3, #28
 8002262:	4929      	ldr	r1, [pc, #164]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d028      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002276:	4b24      	ldr	r3, [pc, #144]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227c:	0e1b      	lsrs	r3, r3, #24
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002284:	4b20      	ldr	r3, [pc, #128]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228a:	0c1b      	lsrs	r3, r3, #16
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	019a      	lsls	r2, r3, #6
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	041b      	lsls	r3, r3, #16
 800229c:	431a      	orrs	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	071b      	lsls	r3, r3, #28
 80022aa:	4917      	ldr	r1, [pc, #92]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80022b2:	4b15      	ldr	r3, [pc, #84]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	4911      	ldr	r1, [pc, #68]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80022c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d4:	f7fe fc8e 	bl	8000bf4 <HAL_GetTick>
 80022d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022dc:	f7fe fc8a 	bl	8000bf4 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	@ 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e007      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022fa:	d1ef      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e040      	b.n	80023a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7fe fa80 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2224      	movs	r2, #36	@ 0x24
 8002338:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0201 	bic.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fb16 	bl	8002984 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f8af 	bl	80024bc <UART_SetConfig>
 800235e:	4603      	mov	r3, r0
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e01b      	b.n	80023a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fb95 	bl	8002ac8 <UART_CheckIdleState>
 800239e:	4603      	mov	r3, r0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	@ 0x28
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d177      	bne.n	80024b0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_UART_Transmit+0x24>
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e070      	b.n	80024b2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2221      	movs	r2, #33	@ 0x21
 80023dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023de:	f7fe fc09 	bl	8000bf4 <HAL_GetTick>
 80023e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	88fa      	ldrh	r2, [r7, #6]
 80023e8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	88fa      	ldrh	r2, [r7, #6]
 80023f0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023fc:	d108      	bne.n	8002410 <HAL_UART_Transmit+0x68>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d104      	bne.n	8002410 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	e003      	b.n	8002418 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002418:	e02f      	b.n	800247a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2200      	movs	r2, #0
 8002422:	2180      	movs	r1, #128	@ 0x80
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 fba6 	bl	8002b76 <UART_WaitOnFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d004      	beq.n	800243a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e03b      	b.n	80024b2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10b      	bne.n	8002458 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800244e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	3302      	adds	r3, #2
 8002454:	61bb      	str	r3, [r7, #24]
 8002456:	e007      	b.n	8002468 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	781a      	ldrb	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3301      	adds	r3, #1
 8002466:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800246e:	b29b      	uxth	r3, r3
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1c9      	bne.n	800241a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2200      	movs	r2, #0
 800248e:	2140      	movs	r1, #64	@ 0x40
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fb70 	bl	8002b76 <UART_WaitOnFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e005      	b.n	80024b2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2220      	movs	r2, #32
 80024aa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e000      	b.n	80024b2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80024b0:	2302      	movs	r3, #2
  }
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4ba6      	ldr	r3, [pc, #664]	@ (8002780 <UART_SetConfig+0x2c4>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	6979      	ldr	r1, [r7, #20]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	430a      	orrs	r2, r1
 800252c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a94      	ldr	r2, [pc, #592]	@ (8002784 <UART_SetConfig+0x2c8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d120      	bne.n	800257a <UART_SetConfig+0xbe>
 8002538:	4b93      	ldr	r3, [pc, #588]	@ (8002788 <UART_SetConfig+0x2cc>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b03      	cmp	r3, #3
 8002544:	d816      	bhi.n	8002574 <UART_SetConfig+0xb8>
 8002546:	a201      	add	r2, pc, #4	@ (adr r2, 800254c <UART_SetConfig+0x90>)
 8002548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254c:	0800255d 	.word	0x0800255d
 8002550:	08002569 	.word	0x08002569
 8002554:	08002563 	.word	0x08002563
 8002558:	0800256f 	.word	0x0800256f
 800255c:	2301      	movs	r3, #1
 800255e:	77fb      	strb	r3, [r7, #31]
 8002560:	e150      	b.n	8002804 <UART_SetConfig+0x348>
 8002562:	2302      	movs	r3, #2
 8002564:	77fb      	strb	r3, [r7, #31]
 8002566:	e14d      	b.n	8002804 <UART_SetConfig+0x348>
 8002568:	2304      	movs	r3, #4
 800256a:	77fb      	strb	r3, [r7, #31]
 800256c:	e14a      	b.n	8002804 <UART_SetConfig+0x348>
 800256e:	2308      	movs	r3, #8
 8002570:	77fb      	strb	r3, [r7, #31]
 8002572:	e147      	b.n	8002804 <UART_SetConfig+0x348>
 8002574:	2310      	movs	r3, #16
 8002576:	77fb      	strb	r3, [r7, #31]
 8002578:	e144      	b.n	8002804 <UART_SetConfig+0x348>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a83      	ldr	r2, [pc, #524]	@ (800278c <UART_SetConfig+0x2d0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d132      	bne.n	80025ea <UART_SetConfig+0x12e>
 8002584:	4b80      	ldr	r3, [pc, #512]	@ (8002788 <UART_SetConfig+0x2cc>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d828      	bhi.n	80025e4 <UART_SetConfig+0x128>
 8002592:	a201      	add	r2, pc, #4	@ (adr r2, 8002598 <UART_SetConfig+0xdc>)
 8002594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002598:	080025cd 	.word	0x080025cd
 800259c:	080025e5 	.word	0x080025e5
 80025a0:	080025e5 	.word	0x080025e5
 80025a4:	080025e5 	.word	0x080025e5
 80025a8:	080025d9 	.word	0x080025d9
 80025ac:	080025e5 	.word	0x080025e5
 80025b0:	080025e5 	.word	0x080025e5
 80025b4:	080025e5 	.word	0x080025e5
 80025b8:	080025d3 	.word	0x080025d3
 80025bc:	080025e5 	.word	0x080025e5
 80025c0:	080025e5 	.word	0x080025e5
 80025c4:	080025e5 	.word	0x080025e5
 80025c8:	080025df 	.word	0x080025df
 80025cc:	2300      	movs	r3, #0
 80025ce:	77fb      	strb	r3, [r7, #31]
 80025d0:	e118      	b.n	8002804 <UART_SetConfig+0x348>
 80025d2:	2302      	movs	r3, #2
 80025d4:	77fb      	strb	r3, [r7, #31]
 80025d6:	e115      	b.n	8002804 <UART_SetConfig+0x348>
 80025d8:	2304      	movs	r3, #4
 80025da:	77fb      	strb	r3, [r7, #31]
 80025dc:	e112      	b.n	8002804 <UART_SetConfig+0x348>
 80025de:	2308      	movs	r3, #8
 80025e0:	77fb      	strb	r3, [r7, #31]
 80025e2:	e10f      	b.n	8002804 <UART_SetConfig+0x348>
 80025e4:	2310      	movs	r3, #16
 80025e6:	77fb      	strb	r3, [r7, #31]
 80025e8:	e10c      	b.n	8002804 <UART_SetConfig+0x348>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a68      	ldr	r2, [pc, #416]	@ (8002790 <UART_SetConfig+0x2d4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d120      	bne.n	8002636 <UART_SetConfig+0x17a>
 80025f4:	4b64      	ldr	r3, [pc, #400]	@ (8002788 <UART_SetConfig+0x2cc>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80025fe:	2b30      	cmp	r3, #48	@ 0x30
 8002600:	d013      	beq.n	800262a <UART_SetConfig+0x16e>
 8002602:	2b30      	cmp	r3, #48	@ 0x30
 8002604:	d814      	bhi.n	8002630 <UART_SetConfig+0x174>
 8002606:	2b20      	cmp	r3, #32
 8002608:	d009      	beq.n	800261e <UART_SetConfig+0x162>
 800260a:	2b20      	cmp	r3, #32
 800260c:	d810      	bhi.n	8002630 <UART_SetConfig+0x174>
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <UART_SetConfig+0x15c>
 8002612:	2b10      	cmp	r3, #16
 8002614:	d006      	beq.n	8002624 <UART_SetConfig+0x168>
 8002616:	e00b      	b.n	8002630 <UART_SetConfig+0x174>
 8002618:	2300      	movs	r3, #0
 800261a:	77fb      	strb	r3, [r7, #31]
 800261c:	e0f2      	b.n	8002804 <UART_SetConfig+0x348>
 800261e:	2302      	movs	r3, #2
 8002620:	77fb      	strb	r3, [r7, #31]
 8002622:	e0ef      	b.n	8002804 <UART_SetConfig+0x348>
 8002624:	2304      	movs	r3, #4
 8002626:	77fb      	strb	r3, [r7, #31]
 8002628:	e0ec      	b.n	8002804 <UART_SetConfig+0x348>
 800262a:	2308      	movs	r3, #8
 800262c:	77fb      	strb	r3, [r7, #31]
 800262e:	e0e9      	b.n	8002804 <UART_SetConfig+0x348>
 8002630:	2310      	movs	r3, #16
 8002632:	77fb      	strb	r3, [r7, #31]
 8002634:	e0e6      	b.n	8002804 <UART_SetConfig+0x348>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a56      	ldr	r2, [pc, #344]	@ (8002794 <UART_SetConfig+0x2d8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d120      	bne.n	8002682 <UART_SetConfig+0x1c6>
 8002640:	4b51      	ldr	r3, [pc, #324]	@ (8002788 <UART_SetConfig+0x2cc>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002646:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800264a:	2bc0      	cmp	r3, #192	@ 0xc0
 800264c:	d013      	beq.n	8002676 <UART_SetConfig+0x1ba>
 800264e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002650:	d814      	bhi.n	800267c <UART_SetConfig+0x1c0>
 8002652:	2b80      	cmp	r3, #128	@ 0x80
 8002654:	d009      	beq.n	800266a <UART_SetConfig+0x1ae>
 8002656:	2b80      	cmp	r3, #128	@ 0x80
 8002658:	d810      	bhi.n	800267c <UART_SetConfig+0x1c0>
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <UART_SetConfig+0x1a8>
 800265e:	2b40      	cmp	r3, #64	@ 0x40
 8002660:	d006      	beq.n	8002670 <UART_SetConfig+0x1b4>
 8002662:	e00b      	b.n	800267c <UART_SetConfig+0x1c0>
 8002664:	2300      	movs	r3, #0
 8002666:	77fb      	strb	r3, [r7, #31]
 8002668:	e0cc      	b.n	8002804 <UART_SetConfig+0x348>
 800266a:	2302      	movs	r3, #2
 800266c:	77fb      	strb	r3, [r7, #31]
 800266e:	e0c9      	b.n	8002804 <UART_SetConfig+0x348>
 8002670:	2304      	movs	r3, #4
 8002672:	77fb      	strb	r3, [r7, #31]
 8002674:	e0c6      	b.n	8002804 <UART_SetConfig+0x348>
 8002676:	2308      	movs	r3, #8
 8002678:	77fb      	strb	r3, [r7, #31]
 800267a:	e0c3      	b.n	8002804 <UART_SetConfig+0x348>
 800267c:	2310      	movs	r3, #16
 800267e:	77fb      	strb	r3, [r7, #31]
 8002680:	e0c0      	b.n	8002804 <UART_SetConfig+0x348>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a44      	ldr	r2, [pc, #272]	@ (8002798 <UART_SetConfig+0x2dc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d125      	bne.n	80026d8 <UART_SetConfig+0x21c>
 800268c:	4b3e      	ldr	r3, [pc, #248]	@ (8002788 <UART_SetConfig+0x2cc>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002696:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800269a:	d017      	beq.n	80026cc <UART_SetConfig+0x210>
 800269c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026a0:	d817      	bhi.n	80026d2 <UART_SetConfig+0x216>
 80026a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026a6:	d00b      	beq.n	80026c0 <UART_SetConfig+0x204>
 80026a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026ac:	d811      	bhi.n	80026d2 <UART_SetConfig+0x216>
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <UART_SetConfig+0x1fe>
 80026b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026b6:	d006      	beq.n	80026c6 <UART_SetConfig+0x20a>
 80026b8:	e00b      	b.n	80026d2 <UART_SetConfig+0x216>
 80026ba:	2300      	movs	r3, #0
 80026bc:	77fb      	strb	r3, [r7, #31]
 80026be:	e0a1      	b.n	8002804 <UART_SetConfig+0x348>
 80026c0:	2302      	movs	r3, #2
 80026c2:	77fb      	strb	r3, [r7, #31]
 80026c4:	e09e      	b.n	8002804 <UART_SetConfig+0x348>
 80026c6:	2304      	movs	r3, #4
 80026c8:	77fb      	strb	r3, [r7, #31]
 80026ca:	e09b      	b.n	8002804 <UART_SetConfig+0x348>
 80026cc:	2308      	movs	r3, #8
 80026ce:	77fb      	strb	r3, [r7, #31]
 80026d0:	e098      	b.n	8002804 <UART_SetConfig+0x348>
 80026d2:	2310      	movs	r3, #16
 80026d4:	77fb      	strb	r3, [r7, #31]
 80026d6:	e095      	b.n	8002804 <UART_SetConfig+0x348>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2f      	ldr	r2, [pc, #188]	@ (800279c <UART_SetConfig+0x2e0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d125      	bne.n	800272e <UART_SetConfig+0x272>
 80026e2:	4b29      	ldr	r3, [pc, #164]	@ (8002788 <UART_SetConfig+0x2cc>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80026ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80026f0:	d017      	beq.n	8002722 <UART_SetConfig+0x266>
 80026f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80026f6:	d817      	bhi.n	8002728 <UART_SetConfig+0x26c>
 80026f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026fc:	d00b      	beq.n	8002716 <UART_SetConfig+0x25a>
 80026fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002702:	d811      	bhi.n	8002728 <UART_SetConfig+0x26c>
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <UART_SetConfig+0x254>
 8002708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800270c:	d006      	beq.n	800271c <UART_SetConfig+0x260>
 800270e:	e00b      	b.n	8002728 <UART_SetConfig+0x26c>
 8002710:	2301      	movs	r3, #1
 8002712:	77fb      	strb	r3, [r7, #31]
 8002714:	e076      	b.n	8002804 <UART_SetConfig+0x348>
 8002716:	2302      	movs	r3, #2
 8002718:	77fb      	strb	r3, [r7, #31]
 800271a:	e073      	b.n	8002804 <UART_SetConfig+0x348>
 800271c:	2304      	movs	r3, #4
 800271e:	77fb      	strb	r3, [r7, #31]
 8002720:	e070      	b.n	8002804 <UART_SetConfig+0x348>
 8002722:	2308      	movs	r3, #8
 8002724:	77fb      	strb	r3, [r7, #31]
 8002726:	e06d      	b.n	8002804 <UART_SetConfig+0x348>
 8002728:	2310      	movs	r3, #16
 800272a:	77fb      	strb	r3, [r7, #31]
 800272c:	e06a      	b.n	8002804 <UART_SetConfig+0x348>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a1b      	ldr	r2, [pc, #108]	@ (80027a0 <UART_SetConfig+0x2e4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d138      	bne.n	80027aa <UART_SetConfig+0x2ee>
 8002738:	4b13      	ldr	r3, [pc, #76]	@ (8002788 <UART_SetConfig+0x2cc>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002742:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002746:	d017      	beq.n	8002778 <UART_SetConfig+0x2bc>
 8002748:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800274c:	d82a      	bhi.n	80027a4 <UART_SetConfig+0x2e8>
 800274e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002752:	d00b      	beq.n	800276c <UART_SetConfig+0x2b0>
 8002754:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002758:	d824      	bhi.n	80027a4 <UART_SetConfig+0x2e8>
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <UART_SetConfig+0x2aa>
 800275e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002762:	d006      	beq.n	8002772 <UART_SetConfig+0x2b6>
 8002764:	e01e      	b.n	80027a4 <UART_SetConfig+0x2e8>
 8002766:	2300      	movs	r3, #0
 8002768:	77fb      	strb	r3, [r7, #31]
 800276a:	e04b      	b.n	8002804 <UART_SetConfig+0x348>
 800276c:	2302      	movs	r3, #2
 800276e:	77fb      	strb	r3, [r7, #31]
 8002770:	e048      	b.n	8002804 <UART_SetConfig+0x348>
 8002772:	2304      	movs	r3, #4
 8002774:	77fb      	strb	r3, [r7, #31]
 8002776:	e045      	b.n	8002804 <UART_SetConfig+0x348>
 8002778:	2308      	movs	r3, #8
 800277a:	77fb      	strb	r3, [r7, #31]
 800277c:	e042      	b.n	8002804 <UART_SetConfig+0x348>
 800277e:	bf00      	nop
 8002780:	efff69f3 	.word	0xefff69f3
 8002784:	40011000 	.word	0x40011000
 8002788:	40023800 	.word	0x40023800
 800278c:	40004400 	.word	0x40004400
 8002790:	40004800 	.word	0x40004800
 8002794:	40004c00 	.word	0x40004c00
 8002798:	40005000 	.word	0x40005000
 800279c:	40011400 	.word	0x40011400
 80027a0:	40007800 	.word	0x40007800
 80027a4:	2310      	movs	r3, #16
 80027a6:	77fb      	strb	r3, [r7, #31]
 80027a8:	e02c      	b.n	8002804 <UART_SetConfig+0x348>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a72      	ldr	r2, [pc, #456]	@ (8002978 <UART_SetConfig+0x4bc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d125      	bne.n	8002800 <UART_SetConfig+0x344>
 80027b4:	4b71      	ldr	r3, [pc, #452]	@ (800297c <UART_SetConfig+0x4c0>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027be:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80027c2:	d017      	beq.n	80027f4 <UART_SetConfig+0x338>
 80027c4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80027c8:	d817      	bhi.n	80027fa <UART_SetConfig+0x33e>
 80027ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027ce:	d00b      	beq.n	80027e8 <UART_SetConfig+0x32c>
 80027d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027d4:	d811      	bhi.n	80027fa <UART_SetConfig+0x33e>
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <UART_SetConfig+0x326>
 80027da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027de:	d006      	beq.n	80027ee <UART_SetConfig+0x332>
 80027e0:	e00b      	b.n	80027fa <UART_SetConfig+0x33e>
 80027e2:	2300      	movs	r3, #0
 80027e4:	77fb      	strb	r3, [r7, #31]
 80027e6:	e00d      	b.n	8002804 <UART_SetConfig+0x348>
 80027e8:	2302      	movs	r3, #2
 80027ea:	77fb      	strb	r3, [r7, #31]
 80027ec:	e00a      	b.n	8002804 <UART_SetConfig+0x348>
 80027ee:	2304      	movs	r3, #4
 80027f0:	77fb      	strb	r3, [r7, #31]
 80027f2:	e007      	b.n	8002804 <UART_SetConfig+0x348>
 80027f4:	2308      	movs	r3, #8
 80027f6:	77fb      	strb	r3, [r7, #31]
 80027f8:	e004      	b.n	8002804 <UART_SetConfig+0x348>
 80027fa:	2310      	movs	r3, #16
 80027fc:	77fb      	strb	r3, [r7, #31]
 80027fe:	e001      	b.n	8002804 <UART_SetConfig+0x348>
 8002800:	2310      	movs	r3, #16
 8002802:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800280c:	d15b      	bne.n	80028c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800280e:	7ffb      	ldrb	r3, [r7, #31]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d828      	bhi.n	8002866 <UART_SetConfig+0x3aa>
 8002814:	a201      	add	r2, pc, #4	@ (adr r2, 800281c <UART_SetConfig+0x360>)
 8002816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281a:	bf00      	nop
 800281c:	08002841 	.word	0x08002841
 8002820:	08002849 	.word	0x08002849
 8002824:	08002851 	.word	0x08002851
 8002828:	08002867 	.word	0x08002867
 800282c:	08002857 	.word	0x08002857
 8002830:	08002867 	.word	0x08002867
 8002834:	08002867 	.word	0x08002867
 8002838:	08002867 	.word	0x08002867
 800283c:	0800285f 	.word	0x0800285f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002840:	f7ff f94c 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 8002844:	61b8      	str	r0, [r7, #24]
        break;
 8002846:	e013      	b.n	8002870 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002848:	f7ff f95c 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 800284c:	61b8      	str	r0, [r7, #24]
        break;
 800284e:	e00f      	b.n	8002870 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002850:	4b4b      	ldr	r3, [pc, #300]	@ (8002980 <UART_SetConfig+0x4c4>)
 8002852:	61bb      	str	r3, [r7, #24]
        break;
 8002854:	e00c      	b.n	8002870 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002856:	f7ff f86f 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 800285a:	61b8      	str	r0, [r7, #24]
        break;
 800285c:	e008      	b.n	8002870 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800285e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002862:	61bb      	str	r3, [r7, #24]
        break;
 8002864:	e004      	b.n	8002870 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	77bb      	strb	r3, [r7, #30]
        break;
 800286e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d074      	beq.n	8002960 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	005a      	lsls	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	085b      	lsrs	r3, r3, #1
 8002880:	441a      	add	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	fbb2 f3f3 	udiv	r3, r2, r3
 800288a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b0f      	cmp	r3, #15
 8002890:	d916      	bls.n	80028c0 <UART_SetConfig+0x404>
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002898:	d212      	bcs.n	80028c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	b29b      	uxth	r3, r3
 800289e:	f023 030f 	bic.w	r3, r3, #15
 80028a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	89fb      	ldrh	r3, [r7, #14]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	89fa      	ldrh	r2, [r7, #14]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	e04f      	b.n	8002960 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	77bb      	strb	r3, [r7, #30]
 80028c4:	e04c      	b.n	8002960 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028c6:	7ffb      	ldrb	r3, [r7, #31]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d828      	bhi.n	800291e <UART_SetConfig+0x462>
 80028cc:	a201      	add	r2, pc, #4	@ (adr r2, 80028d4 <UART_SetConfig+0x418>)
 80028ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d2:	bf00      	nop
 80028d4:	080028f9 	.word	0x080028f9
 80028d8:	08002901 	.word	0x08002901
 80028dc:	08002909 	.word	0x08002909
 80028e0:	0800291f 	.word	0x0800291f
 80028e4:	0800290f 	.word	0x0800290f
 80028e8:	0800291f 	.word	0x0800291f
 80028ec:	0800291f 	.word	0x0800291f
 80028f0:	0800291f 	.word	0x0800291f
 80028f4:	08002917 	.word	0x08002917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028f8:	f7ff f8f0 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 80028fc:	61b8      	str	r0, [r7, #24]
        break;
 80028fe:	e013      	b.n	8002928 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002900:	f7ff f900 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 8002904:	61b8      	str	r0, [r7, #24]
        break;
 8002906:	e00f      	b.n	8002928 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002908:	4b1d      	ldr	r3, [pc, #116]	@ (8002980 <UART_SetConfig+0x4c4>)
 800290a:	61bb      	str	r3, [r7, #24]
        break;
 800290c:	e00c      	b.n	8002928 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800290e:	f7ff f813 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 8002912:	61b8      	str	r0, [r7, #24]
        break;
 8002914:	e008      	b.n	8002928 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002916:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800291a:	61bb      	str	r3, [r7, #24]
        break;
 800291c:	e004      	b.n	8002928 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	77bb      	strb	r3, [r7, #30]
        break;
 8002926:	bf00      	nop
    }

    if (pclk != 0U)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d018      	beq.n	8002960 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	085a      	lsrs	r2, r3, #1
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	441a      	add	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b0f      	cmp	r3, #15
 8002946:	d909      	bls.n	800295c <UART_SetConfig+0x4a0>
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800294e:	d205      	bcs.n	800295c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	b29a      	uxth	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	e001      	b.n	8002960 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800296c:	7fbb      	ldrb	r3, [r7, #30]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40007c00 	.word	0x40007c00
 800297c:	40023800 	.word	0x40023800
 8002980:	00f42400 	.word	0x00f42400

08002984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01a      	beq.n	8002a9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a82:	d10a      	bne.n	8002a9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]
  }
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08c      	sub	sp, #48	@ 0x30
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ad8:	f7fe f88c 	bl	8000bf4 <HAL_GetTick>
 8002adc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d12e      	bne.n	8002b4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002aec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	2200      	movs	r2, #0
 8002af6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f83b 	bl	8002b76 <UART_WaitOnFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d021      	beq.n	8002b4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	e853 3f00 	ldrex	r3, [r3]
 8002b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b1a:	623b      	str	r3, [r7, #32]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b28:	69b9      	ldr	r1, [r7, #24]
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	e841 2300 	strex	r3, r2, [r1]
 8002b30:	617b      	str	r3, [r7, #20]
   return(result);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e6      	bne.n	8002b06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e011      	b.n	8002b6e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3728      	adds	r7, #40	@ 0x28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	4613      	mov	r3, r2
 8002b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b86:	e04f      	b.n	8002c28 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8e:	d04b      	beq.n	8002c28 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b90:	f7fe f830 	bl	8000bf4 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d302      	bcc.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e04e      	b.n	8002c48 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d037      	beq.n	8002c28 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b80      	cmp	r3, #128	@ 0x80
 8002bbc:	d034      	beq.n	8002c28 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b40      	cmp	r3, #64	@ 0x40
 8002bc2:	d031      	beq.n	8002c28 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d110      	bne.n	8002bf4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2208      	movs	r2, #8
 8002bd8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f838 	bl	8002c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2208      	movs	r2, #8
 8002be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e029      	b.n	8002c48 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c02:	d111      	bne.n	8002c28 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c0c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f81e 	bl	8002c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e00f      	b.n	8002c48 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69da      	ldr	r2, [r3, #28]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4013      	ands	r3, r2
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d0a0      	beq.n	8002b88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b095      	sub	sp, #84	@ 0x54
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c60:	e853 3f00 	ldrex	r3, [r3]
 8002c64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c76:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c78:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c7e:	e841 2300 	strex	r3, r2, [r1]
 8002c82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1e6      	bne.n	8002c58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3308      	adds	r3, #8
 8002c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	e853 3f00 	ldrex	r3, [r3]
 8002c98:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002caa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cb2:	e841 2300 	strex	r3, r2, [r1]
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1e5      	bne.n	8002c8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d118      	bne.n	8002cf8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	e853 3f00 	ldrex	r3, [r3]
 8002cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f023 0310 	bic.w	r3, r3, #16
 8002cda:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce8:	6979      	ldr	r1, [r7, #20]
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	e841 2300 	strex	r3, r2, [r1]
 8002cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1e6      	bne.n	8002cc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002d0c:	bf00      	nop
 8002d0e:	3754      	adds	r7, #84	@ 0x54
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <std>:
 8002d18:	2300      	movs	r3, #0
 8002d1a:	b510      	push	{r4, lr}
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8002d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d26:	6083      	str	r3, [r0, #8]
 8002d28:	8181      	strh	r1, [r0, #12]
 8002d2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d2c:	81c2      	strh	r2, [r0, #14]
 8002d2e:	6183      	str	r3, [r0, #24]
 8002d30:	4619      	mov	r1, r3
 8002d32:	2208      	movs	r2, #8
 8002d34:	305c      	adds	r0, #92	@ 0x5c
 8002d36:	f000 f9f9 	bl	800312c <memset>
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <std+0x58>)
 8002d3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d74 <std+0x5c>)
 8002d40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d42:	4b0d      	ldr	r3, [pc, #52]	@ (8002d78 <std+0x60>)
 8002d44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d46:	4b0d      	ldr	r3, [pc, #52]	@ (8002d7c <std+0x64>)
 8002d48:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d80 <std+0x68>)
 8002d4c:	6224      	str	r4, [r4, #32]
 8002d4e:	429c      	cmp	r4, r3
 8002d50:	d006      	beq.n	8002d60 <std+0x48>
 8002d52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d56:	4294      	cmp	r4, r2
 8002d58:	d002      	beq.n	8002d60 <std+0x48>
 8002d5a:	33d0      	adds	r3, #208	@ 0xd0
 8002d5c:	429c      	cmp	r4, r3
 8002d5e:	d105      	bne.n	8002d6c <std+0x54>
 8002d60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d68:	f000 ba58 	b.w	800321c <__retarget_lock_init_recursive>
 8002d6c:	bd10      	pop	{r4, pc}
 8002d6e:	bf00      	nop
 8002d70:	08002f7d 	.word	0x08002f7d
 8002d74:	08002f9f 	.word	0x08002f9f
 8002d78:	08002fd7 	.word	0x08002fd7
 8002d7c:	08002ffb 	.word	0x08002ffb
 8002d80:	20000114 	.word	0x20000114

08002d84 <stdio_exit_handler>:
 8002d84:	4a02      	ldr	r2, [pc, #8]	@ (8002d90 <stdio_exit_handler+0xc>)
 8002d86:	4903      	ldr	r1, [pc, #12]	@ (8002d94 <stdio_exit_handler+0x10>)
 8002d88:	4803      	ldr	r0, [pc, #12]	@ (8002d98 <stdio_exit_handler+0x14>)
 8002d8a:	f000 b869 	b.w	8002e60 <_fwalk_sglue>
 8002d8e:	bf00      	nop
 8002d90:	2000000c 	.word	0x2000000c
 8002d94:	08003ab9 	.word	0x08003ab9
 8002d98:	2000001c 	.word	0x2000001c

08002d9c <cleanup_stdio>:
 8002d9c:	6841      	ldr	r1, [r0, #4]
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd0 <cleanup_stdio+0x34>)
 8002da0:	4299      	cmp	r1, r3
 8002da2:	b510      	push	{r4, lr}
 8002da4:	4604      	mov	r4, r0
 8002da6:	d001      	beq.n	8002dac <cleanup_stdio+0x10>
 8002da8:	f000 fe86 	bl	8003ab8 <_fflush_r>
 8002dac:	68a1      	ldr	r1, [r4, #8]
 8002dae:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <cleanup_stdio+0x38>)
 8002db0:	4299      	cmp	r1, r3
 8002db2:	d002      	beq.n	8002dba <cleanup_stdio+0x1e>
 8002db4:	4620      	mov	r0, r4
 8002db6:	f000 fe7f 	bl	8003ab8 <_fflush_r>
 8002dba:	68e1      	ldr	r1, [r4, #12]
 8002dbc:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <cleanup_stdio+0x3c>)
 8002dbe:	4299      	cmp	r1, r3
 8002dc0:	d004      	beq.n	8002dcc <cleanup_stdio+0x30>
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dc8:	f000 be76 	b.w	8003ab8 <_fflush_r>
 8002dcc:	bd10      	pop	{r4, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000114 	.word	0x20000114
 8002dd4:	2000017c 	.word	0x2000017c
 8002dd8:	200001e4 	.word	0x200001e4

08002ddc <global_stdio_init.part.0>:
 8002ddc:	b510      	push	{r4, lr}
 8002dde:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <global_stdio_init.part.0+0x30>)
 8002de0:	4c0b      	ldr	r4, [pc, #44]	@ (8002e10 <global_stdio_init.part.0+0x34>)
 8002de2:	4a0c      	ldr	r2, [pc, #48]	@ (8002e14 <global_stdio_init.part.0+0x38>)
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	4620      	mov	r0, r4
 8002de8:	2200      	movs	r2, #0
 8002dea:	2104      	movs	r1, #4
 8002dec:	f7ff ff94 	bl	8002d18 <std>
 8002df0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002df4:	2201      	movs	r2, #1
 8002df6:	2109      	movs	r1, #9
 8002df8:	f7ff ff8e 	bl	8002d18 <std>
 8002dfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e00:	2202      	movs	r2, #2
 8002e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e06:	2112      	movs	r1, #18
 8002e08:	f7ff bf86 	b.w	8002d18 <std>
 8002e0c:	2000024c 	.word	0x2000024c
 8002e10:	20000114 	.word	0x20000114
 8002e14:	08002d85 	.word	0x08002d85

08002e18 <__sfp_lock_acquire>:
 8002e18:	4801      	ldr	r0, [pc, #4]	@ (8002e20 <__sfp_lock_acquire+0x8>)
 8002e1a:	f000 ba00 	b.w	800321e <__retarget_lock_acquire_recursive>
 8002e1e:	bf00      	nop
 8002e20:	20000255 	.word	0x20000255

08002e24 <__sfp_lock_release>:
 8002e24:	4801      	ldr	r0, [pc, #4]	@ (8002e2c <__sfp_lock_release+0x8>)
 8002e26:	f000 b9fb 	b.w	8003220 <__retarget_lock_release_recursive>
 8002e2a:	bf00      	nop
 8002e2c:	20000255 	.word	0x20000255

08002e30 <__sinit>:
 8002e30:	b510      	push	{r4, lr}
 8002e32:	4604      	mov	r4, r0
 8002e34:	f7ff fff0 	bl	8002e18 <__sfp_lock_acquire>
 8002e38:	6a23      	ldr	r3, [r4, #32]
 8002e3a:	b11b      	cbz	r3, 8002e44 <__sinit+0x14>
 8002e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e40:	f7ff bff0 	b.w	8002e24 <__sfp_lock_release>
 8002e44:	4b04      	ldr	r3, [pc, #16]	@ (8002e58 <__sinit+0x28>)
 8002e46:	6223      	str	r3, [r4, #32]
 8002e48:	4b04      	ldr	r3, [pc, #16]	@ (8002e5c <__sinit+0x2c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f5      	bne.n	8002e3c <__sinit+0xc>
 8002e50:	f7ff ffc4 	bl	8002ddc <global_stdio_init.part.0>
 8002e54:	e7f2      	b.n	8002e3c <__sinit+0xc>
 8002e56:	bf00      	nop
 8002e58:	08002d9d 	.word	0x08002d9d
 8002e5c:	2000024c 	.word	0x2000024c

08002e60 <_fwalk_sglue>:
 8002e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e64:	4607      	mov	r7, r0
 8002e66:	4688      	mov	r8, r1
 8002e68:	4614      	mov	r4, r2
 8002e6a:	2600      	movs	r6, #0
 8002e6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e70:	f1b9 0901 	subs.w	r9, r9, #1
 8002e74:	d505      	bpl.n	8002e82 <_fwalk_sglue+0x22>
 8002e76:	6824      	ldr	r4, [r4, #0]
 8002e78:	2c00      	cmp	r4, #0
 8002e7a:	d1f7      	bne.n	8002e6c <_fwalk_sglue+0xc>
 8002e7c:	4630      	mov	r0, r6
 8002e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e82:	89ab      	ldrh	r3, [r5, #12]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d907      	bls.n	8002e98 <_fwalk_sglue+0x38>
 8002e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	d003      	beq.n	8002e98 <_fwalk_sglue+0x38>
 8002e90:	4629      	mov	r1, r5
 8002e92:	4638      	mov	r0, r7
 8002e94:	47c0      	blx	r8
 8002e96:	4306      	orrs	r6, r0
 8002e98:	3568      	adds	r5, #104	@ 0x68
 8002e9a:	e7e9      	b.n	8002e70 <_fwalk_sglue+0x10>

08002e9c <iprintf>:
 8002e9c:	b40f      	push	{r0, r1, r2, r3}
 8002e9e:	b507      	push	{r0, r1, r2, lr}
 8002ea0:	4906      	ldr	r1, [pc, #24]	@ (8002ebc <iprintf+0x20>)
 8002ea2:	ab04      	add	r3, sp, #16
 8002ea4:	6808      	ldr	r0, [r1, #0]
 8002ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002eaa:	6881      	ldr	r1, [r0, #8]
 8002eac:	9301      	str	r3, [sp, #4]
 8002eae:	f000 fadb 	bl	8003468 <_vfiprintf_r>
 8002eb2:	b003      	add	sp, #12
 8002eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002eb8:	b004      	add	sp, #16
 8002eba:	4770      	bx	lr
 8002ebc:	20000018 	.word	0x20000018

08002ec0 <_puts_r>:
 8002ec0:	6a03      	ldr	r3, [r0, #32]
 8002ec2:	b570      	push	{r4, r5, r6, lr}
 8002ec4:	6884      	ldr	r4, [r0, #8]
 8002ec6:	4605      	mov	r5, r0
 8002ec8:	460e      	mov	r6, r1
 8002eca:	b90b      	cbnz	r3, 8002ed0 <_puts_r+0x10>
 8002ecc:	f7ff ffb0 	bl	8002e30 <__sinit>
 8002ed0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ed2:	07db      	lsls	r3, r3, #31
 8002ed4:	d405      	bmi.n	8002ee2 <_puts_r+0x22>
 8002ed6:	89a3      	ldrh	r3, [r4, #12]
 8002ed8:	0598      	lsls	r0, r3, #22
 8002eda:	d402      	bmi.n	8002ee2 <_puts_r+0x22>
 8002edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ede:	f000 f99e 	bl	800321e <__retarget_lock_acquire_recursive>
 8002ee2:	89a3      	ldrh	r3, [r4, #12]
 8002ee4:	0719      	lsls	r1, r3, #28
 8002ee6:	d502      	bpl.n	8002eee <_puts_r+0x2e>
 8002ee8:	6923      	ldr	r3, [r4, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d135      	bne.n	8002f5a <_puts_r+0x9a>
 8002eee:	4621      	mov	r1, r4
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	f000 f8c5 	bl	8003080 <__swsetup_r>
 8002ef6:	b380      	cbz	r0, 8002f5a <_puts_r+0x9a>
 8002ef8:	f04f 35ff 	mov.w	r5, #4294967295
 8002efc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002efe:	07da      	lsls	r2, r3, #31
 8002f00:	d405      	bmi.n	8002f0e <_puts_r+0x4e>
 8002f02:	89a3      	ldrh	r3, [r4, #12]
 8002f04:	059b      	lsls	r3, r3, #22
 8002f06:	d402      	bmi.n	8002f0e <_puts_r+0x4e>
 8002f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f0a:	f000 f989 	bl	8003220 <__retarget_lock_release_recursive>
 8002f0e:	4628      	mov	r0, r5
 8002f10:	bd70      	pop	{r4, r5, r6, pc}
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	da04      	bge.n	8002f20 <_puts_r+0x60>
 8002f16:	69a2      	ldr	r2, [r4, #24]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	dc17      	bgt.n	8002f4c <_puts_r+0x8c>
 8002f1c:	290a      	cmp	r1, #10
 8002f1e:	d015      	beq.n	8002f4c <_puts_r+0x8c>
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	6022      	str	r2, [r4, #0]
 8002f26:	7019      	strb	r1, [r3, #0]
 8002f28:	68a3      	ldr	r3, [r4, #8]
 8002f2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	60a3      	str	r3, [r4, #8]
 8002f32:	2900      	cmp	r1, #0
 8002f34:	d1ed      	bne.n	8002f12 <_puts_r+0x52>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	da11      	bge.n	8002f5e <_puts_r+0x9e>
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	210a      	movs	r1, #10
 8002f3e:	4628      	mov	r0, r5
 8002f40:	f000 f85f 	bl	8003002 <__swbuf_r>
 8002f44:	3001      	adds	r0, #1
 8002f46:	d0d7      	beq.n	8002ef8 <_puts_r+0x38>
 8002f48:	250a      	movs	r5, #10
 8002f4a:	e7d7      	b.n	8002efc <_puts_r+0x3c>
 8002f4c:	4622      	mov	r2, r4
 8002f4e:	4628      	mov	r0, r5
 8002f50:	f000 f857 	bl	8003002 <__swbuf_r>
 8002f54:	3001      	adds	r0, #1
 8002f56:	d1e7      	bne.n	8002f28 <_puts_r+0x68>
 8002f58:	e7ce      	b.n	8002ef8 <_puts_r+0x38>
 8002f5a:	3e01      	subs	r6, #1
 8002f5c:	e7e4      	b.n	8002f28 <_puts_r+0x68>
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	6022      	str	r2, [r4, #0]
 8002f64:	220a      	movs	r2, #10
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	e7ee      	b.n	8002f48 <_puts_r+0x88>
	...

08002f6c <puts>:
 8002f6c:	4b02      	ldr	r3, [pc, #8]	@ (8002f78 <puts+0xc>)
 8002f6e:	4601      	mov	r1, r0
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	f7ff bfa5 	b.w	8002ec0 <_puts_r>
 8002f76:	bf00      	nop
 8002f78:	20000018 	.word	0x20000018

08002f7c <__sread>:
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	460c      	mov	r4, r1
 8002f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f84:	f000 f8fc 	bl	8003180 <_read_r>
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	bfab      	itete	ge
 8002f8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002f8e:	89a3      	ldrhlt	r3, [r4, #12]
 8002f90:	181b      	addge	r3, r3, r0
 8002f92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002f96:	bfac      	ite	ge
 8002f98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002f9a:	81a3      	strhlt	r3, [r4, #12]
 8002f9c:	bd10      	pop	{r4, pc}

08002f9e <__swrite>:
 8002f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fa2:	461f      	mov	r7, r3
 8002fa4:	898b      	ldrh	r3, [r1, #12]
 8002fa6:	05db      	lsls	r3, r3, #23
 8002fa8:	4605      	mov	r5, r0
 8002faa:	460c      	mov	r4, r1
 8002fac:	4616      	mov	r6, r2
 8002fae:	d505      	bpl.n	8002fbc <__swrite+0x1e>
 8002fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f000 f8d0 	bl	800315c <_lseek_r>
 8002fbc:	89a3      	ldrh	r3, [r4, #12]
 8002fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fc6:	81a3      	strh	r3, [r4, #12]
 8002fc8:	4632      	mov	r2, r6
 8002fca:	463b      	mov	r3, r7
 8002fcc:	4628      	mov	r0, r5
 8002fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fd2:	f000 b8e7 	b.w	80031a4 <_write_r>

08002fd6 <__sseek>:
 8002fd6:	b510      	push	{r4, lr}
 8002fd8:	460c      	mov	r4, r1
 8002fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fde:	f000 f8bd 	bl	800315c <_lseek_r>
 8002fe2:	1c43      	adds	r3, r0, #1
 8002fe4:	89a3      	ldrh	r3, [r4, #12]
 8002fe6:	bf15      	itete	ne
 8002fe8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002fea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002fee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002ff2:	81a3      	strheq	r3, [r4, #12]
 8002ff4:	bf18      	it	ne
 8002ff6:	81a3      	strhne	r3, [r4, #12]
 8002ff8:	bd10      	pop	{r4, pc}

08002ffa <__sclose>:
 8002ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ffe:	f000 b89d 	b.w	800313c <_close_r>

08003002 <__swbuf_r>:
 8003002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003004:	460e      	mov	r6, r1
 8003006:	4614      	mov	r4, r2
 8003008:	4605      	mov	r5, r0
 800300a:	b118      	cbz	r0, 8003014 <__swbuf_r+0x12>
 800300c:	6a03      	ldr	r3, [r0, #32]
 800300e:	b90b      	cbnz	r3, 8003014 <__swbuf_r+0x12>
 8003010:	f7ff ff0e 	bl	8002e30 <__sinit>
 8003014:	69a3      	ldr	r3, [r4, #24]
 8003016:	60a3      	str	r3, [r4, #8]
 8003018:	89a3      	ldrh	r3, [r4, #12]
 800301a:	071a      	lsls	r2, r3, #28
 800301c:	d501      	bpl.n	8003022 <__swbuf_r+0x20>
 800301e:	6923      	ldr	r3, [r4, #16]
 8003020:	b943      	cbnz	r3, 8003034 <__swbuf_r+0x32>
 8003022:	4621      	mov	r1, r4
 8003024:	4628      	mov	r0, r5
 8003026:	f000 f82b 	bl	8003080 <__swsetup_r>
 800302a:	b118      	cbz	r0, 8003034 <__swbuf_r+0x32>
 800302c:	f04f 37ff 	mov.w	r7, #4294967295
 8003030:	4638      	mov	r0, r7
 8003032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	6922      	ldr	r2, [r4, #16]
 8003038:	1a98      	subs	r0, r3, r2
 800303a:	6963      	ldr	r3, [r4, #20]
 800303c:	b2f6      	uxtb	r6, r6
 800303e:	4283      	cmp	r3, r0
 8003040:	4637      	mov	r7, r6
 8003042:	dc05      	bgt.n	8003050 <__swbuf_r+0x4e>
 8003044:	4621      	mov	r1, r4
 8003046:	4628      	mov	r0, r5
 8003048:	f000 fd36 	bl	8003ab8 <_fflush_r>
 800304c:	2800      	cmp	r0, #0
 800304e:	d1ed      	bne.n	800302c <__swbuf_r+0x2a>
 8003050:	68a3      	ldr	r3, [r4, #8]
 8003052:	3b01      	subs	r3, #1
 8003054:	60a3      	str	r3, [r4, #8]
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	6022      	str	r2, [r4, #0]
 800305c:	701e      	strb	r6, [r3, #0]
 800305e:	6962      	ldr	r2, [r4, #20]
 8003060:	1c43      	adds	r3, r0, #1
 8003062:	429a      	cmp	r2, r3
 8003064:	d004      	beq.n	8003070 <__swbuf_r+0x6e>
 8003066:	89a3      	ldrh	r3, [r4, #12]
 8003068:	07db      	lsls	r3, r3, #31
 800306a:	d5e1      	bpl.n	8003030 <__swbuf_r+0x2e>
 800306c:	2e0a      	cmp	r6, #10
 800306e:	d1df      	bne.n	8003030 <__swbuf_r+0x2e>
 8003070:	4621      	mov	r1, r4
 8003072:	4628      	mov	r0, r5
 8003074:	f000 fd20 	bl	8003ab8 <_fflush_r>
 8003078:	2800      	cmp	r0, #0
 800307a:	d0d9      	beq.n	8003030 <__swbuf_r+0x2e>
 800307c:	e7d6      	b.n	800302c <__swbuf_r+0x2a>
	...

08003080 <__swsetup_r>:
 8003080:	b538      	push	{r3, r4, r5, lr}
 8003082:	4b29      	ldr	r3, [pc, #164]	@ (8003128 <__swsetup_r+0xa8>)
 8003084:	4605      	mov	r5, r0
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	460c      	mov	r4, r1
 800308a:	b118      	cbz	r0, 8003094 <__swsetup_r+0x14>
 800308c:	6a03      	ldr	r3, [r0, #32]
 800308e:	b90b      	cbnz	r3, 8003094 <__swsetup_r+0x14>
 8003090:	f7ff fece 	bl	8002e30 <__sinit>
 8003094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003098:	0719      	lsls	r1, r3, #28
 800309a:	d422      	bmi.n	80030e2 <__swsetup_r+0x62>
 800309c:	06da      	lsls	r2, r3, #27
 800309e:	d407      	bmi.n	80030b0 <__swsetup_r+0x30>
 80030a0:	2209      	movs	r2, #9
 80030a2:	602a      	str	r2, [r5, #0]
 80030a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030a8:	81a3      	strh	r3, [r4, #12]
 80030aa:	f04f 30ff 	mov.w	r0, #4294967295
 80030ae:	e033      	b.n	8003118 <__swsetup_r+0x98>
 80030b0:	0758      	lsls	r0, r3, #29
 80030b2:	d512      	bpl.n	80030da <__swsetup_r+0x5a>
 80030b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80030b6:	b141      	cbz	r1, 80030ca <__swsetup_r+0x4a>
 80030b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80030bc:	4299      	cmp	r1, r3
 80030be:	d002      	beq.n	80030c6 <__swsetup_r+0x46>
 80030c0:	4628      	mov	r0, r5
 80030c2:	f000 f8af 	bl	8003224 <_free_r>
 80030c6:	2300      	movs	r3, #0
 80030c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80030ca:	89a3      	ldrh	r3, [r4, #12]
 80030cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80030d0:	81a3      	strh	r3, [r4, #12]
 80030d2:	2300      	movs	r3, #0
 80030d4:	6063      	str	r3, [r4, #4]
 80030d6:	6923      	ldr	r3, [r4, #16]
 80030d8:	6023      	str	r3, [r4, #0]
 80030da:	89a3      	ldrh	r3, [r4, #12]
 80030dc:	f043 0308 	orr.w	r3, r3, #8
 80030e0:	81a3      	strh	r3, [r4, #12]
 80030e2:	6923      	ldr	r3, [r4, #16]
 80030e4:	b94b      	cbnz	r3, 80030fa <__swsetup_r+0x7a>
 80030e6:	89a3      	ldrh	r3, [r4, #12]
 80030e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80030ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030f0:	d003      	beq.n	80030fa <__swsetup_r+0x7a>
 80030f2:	4621      	mov	r1, r4
 80030f4:	4628      	mov	r0, r5
 80030f6:	f000 fd2d 	bl	8003b54 <__smakebuf_r>
 80030fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030fe:	f013 0201 	ands.w	r2, r3, #1
 8003102:	d00a      	beq.n	800311a <__swsetup_r+0x9a>
 8003104:	2200      	movs	r2, #0
 8003106:	60a2      	str	r2, [r4, #8]
 8003108:	6962      	ldr	r2, [r4, #20]
 800310a:	4252      	negs	r2, r2
 800310c:	61a2      	str	r2, [r4, #24]
 800310e:	6922      	ldr	r2, [r4, #16]
 8003110:	b942      	cbnz	r2, 8003124 <__swsetup_r+0xa4>
 8003112:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003116:	d1c5      	bne.n	80030a4 <__swsetup_r+0x24>
 8003118:	bd38      	pop	{r3, r4, r5, pc}
 800311a:	0799      	lsls	r1, r3, #30
 800311c:	bf58      	it	pl
 800311e:	6962      	ldrpl	r2, [r4, #20]
 8003120:	60a2      	str	r2, [r4, #8]
 8003122:	e7f4      	b.n	800310e <__swsetup_r+0x8e>
 8003124:	2000      	movs	r0, #0
 8003126:	e7f7      	b.n	8003118 <__swsetup_r+0x98>
 8003128:	20000018 	.word	0x20000018

0800312c <memset>:
 800312c:	4402      	add	r2, r0
 800312e:	4603      	mov	r3, r0
 8003130:	4293      	cmp	r3, r2
 8003132:	d100      	bne.n	8003136 <memset+0xa>
 8003134:	4770      	bx	lr
 8003136:	f803 1b01 	strb.w	r1, [r3], #1
 800313a:	e7f9      	b.n	8003130 <memset+0x4>

0800313c <_close_r>:
 800313c:	b538      	push	{r3, r4, r5, lr}
 800313e:	4d06      	ldr	r5, [pc, #24]	@ (8003158 <_close_r+0x1c>)
 8003140:	2300      	movs	r3, #0
 8003142:	4604      	mov	r4, r0
 8003144:	4608      	mov	r0, r1
 8003146:	602b      	str	r3, [r5, #0]
 8003148:	f7fd fc5e 	bl	8000a08 <_close>
 800314c:	1c43      	adds	r3, r0, #1
 800314e:	d102      	bne.n	8003156 <_close_r+0x1a>
 8003150:	682b      	ldr	r3, [r5, #0]
 8003152:	b103      	cbz	r3, 8003156 <_close_r+0x1a>
 8003154:	6023      	str	r3, [r4, #0]
 8003156:	bd38      	pop	{r3, r4, r5, pc}
 8003158:	20000250 	.word	0x20000250

0800315c <_lseek_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	4d07      	ldr	r5, [pc, #28]	@ (800317c <_lseek_r+0x20>)
 8003160:	4604      	mov	r4, r0
 8003162:	4608      	mov	r0, r1
 8003164:	4611      	mov	r1, r2
 8003166:	2200      	movs	r2, #0
 8003168:	602a      	str	r2, [r5, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	f7fd fc73 	bl	8000a56 <_lseek>
 8003170:	1c43      	adds	r3, r0, #1
 8003172:	d102      	bne.n	800317a <_lseek_r+0x1e>
 8003174:	682b      	ldr	r3, [r5, #0]
 8003176:	b103      	cbz	r3, 800317a <_lseek_r+0x1e>
 8003178:	6023      	str	r3, [r4, #0]
 800317a:	bd38      	pop	{r3, r4, r5, pc}
 800317c:	20000250 	.word	0x20000250

08003180 <_read_r>:
 8003180:	b538      	push	{r3, r4, r5, lr}
 8003182:	4d07      	ldr	r5, [pc, #28]	@ (80031a0 <_read_r+0x20>)
 8003184:	4604      	mov	r4, r0
 8003186:	4608      	mov	r0, r1
 8003188:	4611      	mov	r1, r2
 800318a:	2200      	movs	r2, #0
 800318c:	602a      	str	r2, [r5, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	f7fd fc01 	bl	8000996 <_read>
 8003194:	1c43      	adds	r3, r0, #1
 8003196:	d102      	bne.n	800319e <_read_r+0x1e>
 8003198:	682b      	ldr	r3, [r5, #0]
 800319a:	b103      	cbz	r3, 800319e <_read_r+0x1e>
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	bd38      	pop	{r3, r4, r5, pc}
 80031a0:	20000250 	.word	0x20000250

080031a4 <_write_r>:
 80031a4:	b538      	push	{r3, r4, r5, lr}
 80031a6:	4d07      	ldr	r5, [pc, #28]	@ (80031c4 <_write_r+0x20>)
 80031a8:	4604      	mov	r4, r0
 80031aa:	4608      	mov	r0, r1
 80031ac:	4611      	mov	r1, r2
 80031ae:	2200      	movs	r2, #0
 80031b0:	602a      	str	r2, [r5, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	f7fd fc0c 	bl	80009d0 <_write>
 80031b8:	1c43      	adds	r3, r0, #1
 80031ba:	d102      	bne.n	80031c2 <_write_r+0x1e>
 80031bc:	682b      	ldr	r3, [r5, #0]
 80031be:	b103      	cbz	r3, 80031c2 <_write_r+0x1e>
 80031c0:	6023      	str	r3, [r4, #0]
 80031c2:	bd38      	pop	{r3, r4, r5, pc}
 80031c4:	20000250 	.word	0x20000250

080031c8 <__errno>:
 80031c8:	4b01      	ldr	r3, [pc, #4]	@ (80031d0 <__errno+0x8>)
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000018 	.word	0x20000018

080031d4 <__libc_init_array>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	4d0d      	ldr	r5, [pc, #52]	@ (800320c <__libc_init_array+0x38>)
 80031d8:	4c0d      	ldr	r4, [pc, #52]	@ (8003210 <__libc_init_array+0x3c>)
 80031da:	1b64      	subs	r4, r4, r5
 80031dc:	10a4      	asrs	r4, r4, #2
 80031de:	2600      	movs	r6, #0
 80031e0:	42a6      	cmp	r6, r4
 80031e2:	d109      	bne.n	80031f8 <__libc_init_array+0x24>
 80031e4:	4d0b      	ldr	r5, [pc, #44]	@ (8003214 <__libc_init_array+0x40>)
 80031e6:	4c0c      	ldr	r4, [pc, #48]	@ (8003218 <__libc_init_array+0x44>)
 80031e8:	f000 fd22 	bl	8003c30 <_init>
 80031ec:	1b64      	subs	r4, r4, r5
 80031ee:	10a4      	asrs	r4, r4, #2
 80031f0:	2600      	movs	r6, #0
 80031f2:	42a6      	cmp	r6, r4
 80031f4:	d105      	bne.n	8003202 <__libc_init_array+0x2e>
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031fc:	4798      	blx	r3
 80031fe:	3601      	adds	r6, #1
 8003200:	e7ee      	b.n	80031e0 <__libc_init_array+0xc>
 8003202:	f855 3b04 	ldr.w	r3, [r5], #4
 8003206:	4798      	blx	r3
 8003208:	3601      	adds	r6, #1
 800320a:	e7f2      	b.n	80031f2 <__libc_init_array+0x1e>
 800320c:	08003cd8 	.word	0x08003cd8
 8003210:	08003cd8 	.word	0x08003cd8
 8003214:	08003cd8 	.word	0x08003cd8
 8003218:	08003cdc 	.word	0x08003cdc

0800321c <__retarget_lock_init_recursive>:
 800321c:	4770      	bx	lr

0800321e <__retarget_lock_acquire_recursive>:
 800321e:	4770      	bx	lr

08003220 <__retarget_lock_release_recursive>:
 8003220:	4770      	bx	lr
	...

08003224 <_free_r>:
 8003224:	b538      	push	{r3, r4, r5, lr}
 8003226:	4605      	mov	r5, r0
 8003228:	2900      	cmp	r1, #0
 800322a:	d041      	beq.n	80032b0 <_free_r+0x8c>
 800322c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003230:	1f0c      	subs	r4, r1, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	bfb8      	it	lt
 8003236:	18e4      	addlt	r4, r4, r3
 8003238:	f000 f8e0 	bl	80033fc <__malloc_lock>
 800323c:	4a1d      	ldr	r2, [pc, #116]	@ (80032b4 <_free_r+0x90>)
 800323e:	6813      	ldr	r3, [r2, #0]
 8003240:	b933      	cbnz	r3, 8003250 <_free_r+0x2c>
 8003242:	6063      	str	r3, [r4, #4]
 8003244:	6014      	str	r4, [r2, #0]
 8003246:	4628      	mov	r0, r5
 8003248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800324c:	f000 b8dc 	b.w	8003408 <__malloc_unlock>
 8003250:	42a3      	cmp	r3, r4
 8003252:	d908      	bls.n	8003266 <_free_r+0x42>
 8003254:	6820      	ldr	r0, [r4, #0]
 8003256:	1821      	adds	r1, r4, r0
 8003258:	428b      	cmp	r3, r1
 800325a:	bf01      	itttt	eq
 800325c:	6819      	ldreq	r1, [r3, #0]
 800325e:	685b      	ldreq	r3, [r3, #4]
 8003260:	1809      	addeq	r1, r1, r0
 8003262:	6021      	streq	r1, [r4, #0]
 8003264:	e7ed      	b.n	8003242 <_free_r+0x1e>
 8003266:	461a      	mov	r2, r3
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	b10b      	cbz	r3, 8003270 <_free_r+0x4c>
 800326c:	42a3      	cmp	r3, r4
 800326e:	d9fa      	bls.n	8003266 <_free_r+0x42>
 8003270:	6811      	ldr	r1, [r2, #0]
 8003272:	1850      	adds	r0, r2, r1
 8003274:	42a0      	cmp	r0, r4
 8003276:	d10b      	bne.n	8003290 <_free_r+0x6c>
 8003278:	6820      	ldr	r0, [r4, #0]
 800327a:	4401      	add	r1, r0
 800327c:	1850      	adds	r0, r2, r1
 800327e:	4283      	cmp	r3, r0
 8003280:	6011      	str	r1, [r2, #0]
 8003282:	d1e0      	bne.n	8003246 <_free_r+0x22>
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	6053      	str	r3, [r2, #4]
 800328a:	4408      	add	r0, r1
 800328c:	6010      	str	r0, [r2, #0]
 800328e:	e7da      	b.n	8003246 <_free_r+0x22>
 8003290:	d902      	bls.n	8003298 <_free_r+0x74>
 8003292:	230c      	movs	r3, #12
 8003294:	602b      	str	r3, [r5, #0]
 8003296:	e7d6      	b.n	8003246 <_free_r+0x22>
 8003298:	6820      	ldr	r0, [r4, #0]
 800329a:	1821      	adds	r1, r4, r0
 800329c:	428b      	cmp	r3, r1
 800329e:	bf04      	itt	eq
 80032a0:	6819      	ldreq	r1, [r3, #0]
 80032a2:	685b      	ldreq	r3, [r3, #4]
 80032a4:	6063      	str	r3, [r4, #4]
 80032a6:	bf04      	itt	eq
 80032a8:	1809      	addeq	r1, r1, r0
 80032aa:	6021      	streq	r1, [r4, #0]
 80032ac:	6054      	str	r4, [r2, #4]
 80032ae:	e7ca      	b.n	8003246 <_free_r+0x22>
 80032b0:	bd38      	pop	{r3, r4, r5, pc}
 80032b2:	bf00      	nop
 80032b4:	2000025c 	.word	0x2000025c

080032b8 <sbrk_aligned>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	4e0f      	ldr	r6, [pc, #60]	@ (80032f8 <sbrk_aligned+0x40>)
 80032bc:	460c      	mov	r4, r1
 80032be:	6831      	ldr	r1, [r6, #0]
 80032c0:	4605      	mov	r5, r0
 80032c2:	b911      	cbnz	r1, 80032ca <sbrk_aligned+0x12>
 80032c4:	f000 fca4 	bl	8003c10 <_sbrk_r>
 80032c8:	6030      	str	r0, [r6, #0]
 80032ca:	4621      	mov	r1, r4
 80032cc:	4628      	mov	r0, r5
 80032ce:	f000 fc9f 	bl	8003c10 <_sbrk_r>
 80032d2:	1c43      	adds	r3, r0, #1
 80032d4:	d103      	bne.n	80032de <sbrk_aligned+0x26>
 80032d6:	f04f 34ff 	mov.w	r4, #4294967295
 80032da:	4620      	mov	r0, r4
 80032dc:	bd70      	pop	{r4, r5, r6, pc}
 80032de:	1cc4      	adds	r4, r0, #3
 80032e0:	f024 0403 	bic.w	r4, r4, #3
 80032e4:	42a0      	cmp	r0, r4
 80032e6:	d0f8      	beq.n	80032da <sbrk_aligned+0x22>
 80032e8:	1a21      	subs	r1, r4, r0
 80032ea:	4628      	mov	r0, r5
 80032ec:	f000 fc90 	bl	8003c10 <_sbrk_r>
 80032f0:	3001      	adds	r0, #1
 80032f2:	d1f2      	bne.n	80032da <sbrk_aligned+0x22>
 80032f4:	e7ef      	b.n	80032d6 <sbrk_aligned+0x1e>
 80032f6:	bf00      	nop
 80032f8:	20000258 	.word	0x20000258

080032fc <_malloc_r>:
 80032fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003300:	1ccd      	adds	r5, r1, #3
 8003302:	f025 0503 	bic.w	r5, r5, #3
 8003306:	3508      	adds	r5, #8
 8003308:	2d0c      	cmp	r5, #12
 800330a:	bf38      	it	cc
 800330c:	250c      	movcc	r5, #12
 800330e:	2d00      	cmp	r5, #0
 8003310:	4606      	mov	r6, r0
 8003312:	db01      	blt.n	8003318 <_malloc_r+0x1c>
 8003314:	42a9      	cmp	r1, r5
 8003316:	d904      	bls.n	8003322 <_malloc_r+0x26>
 8003318:	230c      	movs	r3, #12
 800331a:	6033      	str	r3, [r6, #0]
 800331c:	2000      	movs	r0, #0
 800331e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033f8 <_malloc_r+0xfc>
 8003326:	f000 f869 	bl	80033fc <__malloc_lock>
 800332a:	f8d8 3000 	ldr.w	r3, [r8]
 800332e:	461c      	mov	r4, r3
 8003330:	bb44      	cbnz	r4, 8003384 <_malloc_r+0x88>
 8003332:	4629      	mov	r1, r5
 8003334:	4630      	mov	r0, r6
 8003336:	f7ff ffbf 	bl	80032b8 <sbrk_aligned>
 800333a:	1c43      	adds	r3, r0, #1
 800333c:	4604      	mov	r4, r0
 800333e:	d158      	bne.n	80033f2 <_malloc_r+0xf6>
 8003340:	f8d8 4000 	ldr.w	r4, [r8]
 8003344:	4627      	mov	r7, r4
 8003346:	2f00      	cmp	r7, #0
 8003348:	d143      	bne.n	80033d2 <_malloc_r+0xd6>
 800334a:	2c00      	cmp	r4, #0
 800334c:	d04b      	beq.n	80033e6 <_malloc_r+0xea>
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	4639      	mov	r1, r7
 8003352:	4630      	mov	r0, r6
 8003354:	eb04 0903 	add.w	r9, r4, r3
 8003358:	f000 fc5a 	bl	8003c10 <_sbrk_r>
 800335c:	4581      	cmp	r9, r0
 800335e:	d142      	bne.n	80033e6 <_malloc_r+0xea>
 8003360:	6821      	ldr	r1, [r4, #0]
 8003362:	1a6d      	subs	r5, r5, r1
 8003364:	4629      	mov	r1, r5
 8003366:	4630      	mov	r0, r6
 8003368:	f7ff ffa6 	bl	80032b8 <sbrk_aligned>
 800336c:	3001      	adds	r0, #1
 800336e:	d03a      	beq.n	80033e6 <_malloc_r+0xea>
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	442b      	add	r3, r5
 8003374:	6023      	str	r3, [r4, #0]
 8003376:	f8d8 3000 	ldr.w	r3, [r8]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	bb62      	cbnz	r2, 80033d8 <_malloc_r+0xdc>
 800337e:	f8c8 7000 	str.w	r7, [r8]
 8003382:	e00f      	b.n	80033a4 <_malloc_r+0xa8>
 8003384:	6822      	ldr	r2, [r4, #0]
 8003386:	1b52      	subs	r2, r2, r5
 8003388:	d420      	bmi.n	80033cc <_malloc_r+0xd0>
 800338a:	2a0b      	cmp	r2, #11
 800338c:	d917      	bls.n	80033be <_malloc_r+0xc2>
 800338e:	1961      	adds	r1, r4, r5
 8003390:	42a3      	cmp	r3, r4
 8003392:	6025      	str	r5, [r4, #0]
 8003394:	bf18      	it	ne
 8003396:	6059      	strne	r1, [r3, #4]
 8003398:	6863      	ldr	r3, [r4, #4]
 800339a:	bf08      	it	eq
 800339c:	f8c8 1000 	streq.w	r1, [r8]
 80033a0:	5162      	str	r2, [r4, r5]
 80033a2:	604b      	str	r3, [r1, #4]
 80033a4:	4630      	mov	r0, r6
 80033a6:	f000 f82f 	bl	8003408 <__malloc_unlock>
 80033aa:	f104 000b 	add.w	r0, r4, #11
 80033ae:	1d23      	adds	r3, r4, #4
 80033b0:	f020 0007 	bic.w	r0, r0, #7
 80033b4:	1ac2      	subs	r2, r0, r3
 80033b6:	bf1c      	itt	ne
 80033b8:	1a1b      	subne	r3, r3, r0
 80033ba:	50a3      	strne	r3, [r4, r2]
 80033bc:	e7af      	b.n	800331e <_malloc_r+0x22>
 80033be:	6862      	ldr	r2, [r4, #4]
 80033c0:	42a3      	cmp	r3, r4
 80033c2:	bf0c      	ite	eq
 80033c4:	f8c8 2000 	streq.w	r2, [r8]
 80033c8:	605a      	strne	r2, [r3, #4]
 80033ca:	e7eb      	b.n	80033a4 <_malloc_r+0xa8>
 80033cc:	4623      	mov	r3, r4
 80033ce:	6864      	ldr	r4, [r4, #4]
 80033d0:	e7ae      	b.n	8003330 <_malloc_r+0x34>
 80033d2:	463c      	mov	r4, r7
 80033d4:	687f      	ldr	r7, [r7, #4]
 80033d6:	e7b6      	b.n	8003346 <_malloc_r+0x4a>
 80033d8:	461a      	mov	r2, r3
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	42a3      	cmp	r3, r4
 80033de:	d1fb      	bne.n	80033d8 <_malloc_r+0xdc>
 80033e0:	2300      	movs	r3, #0
 80033e2:	6053      	str	r3, [r2, #4]
 80033e4:	e7de      	b.n	80033a4 <_malloc_r+0xa8>
 80033e6:	230c      	movs	r3, #12
 80033e8:	6033      	str	r3, [r6, #0]
 80033ea:	4630      	mov	r0, r6
 80033ec:	f000 f80c 	bl	8003408 <__malloc_unlock>
 80033f0:	e794      	b.n	800331c <_malloc_r+0x20>
 80033f2:	6005      	str	r5, [r0, #0]
 80033f4:	e7d6      	b.n	80033a4 <_malloc_r+0xa8>
 80033f6:	bf00      	nop
 80033f8:	2000025c 	.word	0x2000025c

080033fc <__malloc_lock>:
 80033fc:	4801      	ldr	r0, [pc, #4]	@ (8003404 <__malloc_lock+0x8>)
 80033fe:	f7ff bf0e 	b.w	800321e <__retarget_lock_acquire_recursive>
 8003402:	bf00      	nop
 8003404:	20000254 	.word	0x20000254

08003408 <__malloc_unlock>:
 8003408:	4801      	ldr	r0, [pc, #4]	@ (8003410 <__malloc_unlock+0x8>)
 800340a:	f7ff bf09 	b.w	8003220 <__retarget_lock_release_recursive>
 800340e:	bf00      	nop
 8003410:	20000254 	.word	0x20000254

08003414 <__sfputc_r>:
 8003414:	6893      	ldr	r3, [r2, #8]
 8003416:	3b01      	subs	r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	b410      	push	{r4}
 800341c:	6093      	str	r3, [r2, #8]
 800341e:	da08      	bge.n	8003432 <__sfputc_r+0x1e>
 8003420:	6994      	ldr	r4, [r2, #24]
 8003422:	42a3      	cmp	r3, r4
 8003424:	db01      	blt.n	800342a <__sfputc_r+0x16>
 8003426:	290a      	cmp	r1, #10
 8003428:	d103      	bne.n	8003432 <__sfputc_r+0x1e>
 800342a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800342e:	f7ff bde8 	b.w	8003002 <__swbuf_r>
 8003432:	6813      	ldr	r3, [r2, #0]
 8003434:	1c58      	adds	r0, r3, #1
 8003436:	6010      	str	r0, [r2, #0]
 8003438:	7019      	strb	r1, [r3, #0]
 800343a:	4608      	mov	r0, r1
 800343c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003440:	4770      	bx	lr

08003442 <__sfputs_r>:
 8003442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003444:	4606      	mov	r6, r0
 8003446:	460f      	mov	r7, r1
 8003448:	4614      	mov	r4, r2
 800344a:	18d5      	adds	r5, r2, r3
 800344c:	42ac      	cmp	r4, r5
 800344e:	d101      	bne.n	8003454 <__sfputs_r+0x12>
 8003450:	2000      	movs	r0, #0
 8003452:	e007      	b.n	8003464 <__sfputs_r+0x22>
 8003454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003458:	463a      	mov	r2, r7
 800345a:	4630      	mov	r0, r6
 800345c:	f7ff ffda 	bl	8003414 <__sfputc_r>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d1f3      	bne.n	800344c <__sfputs_r+0xa>
 8003464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003468 <_vfiprintf_r>:
 8003468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800346c:	460d      	mov	r5, r1
 800346e:	b09d      	sub	sp, #116	@ 0x74
 8003470:	4614      	mov	r4, r2
 8003472:	4698      	mov	r8, r3
 8003474:	4606      	mov	r6, r0
 8003476:	b118      	cbz	r0, 8003480 <_vfiprintf_r+0x18>
 8003478:	6a03      	ldr	r3, [r0, #32]
 800347a:	b90b      	cbnz	r3, 8003480 <_vfiprintf_r+0x18>
 800347c:	f7ff fcd8 	bl	8002e30 <__sinit>
 8003480:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003482:	07d9      	lsls	r1, r3, #31
 8003484:	d405      	bmi.n	8003492 <_vfiprintf_r+0x2a>
 8003486:	89ab      	ldrh	r3, [r5, #12]
 8003488:	059a      	lsls	r2, r3, #22
 800348a:	d402      	bmi.n	8003492 <_vfiprintf_r+0x2a>
 800348c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800348e:	f7ff fec6 	bl	800321e <__retarget_lock_acquire_recursive>
 8003492:	89ab      	ldrh	r3, [r5, #12]
 8003494:	071b      	lsls	r3, r3, #28
 8003496:	d501      	bpl.n	800349c <_vfiprintf_r+0x34>
 8003498:	692b      	ldr	r3, [r5, #16]
 800349a:	b99b      	cbnz	r3, 80034c4 <_vfiprintf_r+0x5c>
 800349c:	4629      	mov	r1, r5
 800349e:	4630      	mov	r0, r6
 80034a0:	f7ff fdee 	bl	8003080 <__swsetup_r>
 80034a4:	b170      	cbz	r0, 80034c4 <_vfiprintf_r+0x5c>
 80034a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034a8:	07dc      	lsls	r4, r3, #31
 80034aa:	d504      	bpl.n	80034b6 <_vfiprintf_r+0x4e>
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	b01d      	add	sp, #116	@ 0x74
 80034b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b6:	89ab      	ldrh	r3, [r5, #12]
 80034b8:	0598      	lsls	r0, r3, #22
 80034ba:	d4f7      	bmi.n	80034ac <_vfiprintf_r+0x44>
 80034bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034be:	f7ff feaf 	bl	8003220 <__retarget_lock_release_recursive>
 80034c2:	e7f3      	b.n	80034ac <_vfiprintf_r+0x44>
 80034c4:	2300      	movs	r3, #0
 80034c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80034c8:	2320      	movs	r3, #32
 80034ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80034d2:	2330      	movs	r3, #48	@ 0x30
 80034d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003684 <_vfiprintf_r+0x21c>
 80034d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80034dc:	f04f 0901 	mov.w	r9, #1
 80034e0:	4623      	mov	r3, r4
 80034e2:	469a      	mov	sl, r3
 80034e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034e8:	b10a      	cbz	r2, 80034ee <_vfiprintf_r+0x86>
 80034ea:	2a25      	cmp	r2, #37	@ 0x25
 80034ec:	d1f9      	bne.n	80034e2 <_vfiprintf_r+0x7a>
 80034ee:	ebba 0b04 	subs.w	fp, sl, r4
 80034f2:	d00b      	beq.n	800350c <_vfiprintf_r+0xa4>
 80034f4:	465b      	mov	r3, fp
 80034f6:	4622      	mov	r2, r4
 80034f8:	4629      	mov	r1, r5
 80034fa:	4630      	mov	r0, r6
 80034fc:	f7ff ffa1 	bl	8003442 <__sfputs_r>
 8003500:	3001      	adds	r0, #1
 8003502:	f000 80a7 	beq.w	8003654 <_vfiprintf_r+0x1ec>
 8003506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003508:	445a      	add	r2, fp
 800350a:	9209      	str	r2, [sp, #36]	@ 0x24
 800350c:	f89a 3000 	ldrb.w	r3, [sl]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 809f 	beq.w	8003654 <_vfiprintf_r+0x1ec>
 8003516:	2300      	movs	r3, #0
 8003518:	f04f 32ff 	mov.w	r2, #4294967295
 800351c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003520:	f10a 0a01 	add.w	sl, sl, #1
 8003524:	9304      	str	r3, [sp, #16]
 8003526:	9307      	str	r3, [sp, #28]
 8003528:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800352c:	931a      	str	r3, [sp, #104]	@ 0x68
 800352e:	4654      	mov	r4, sl
 8003530:	2205      	movs	r2, #5
 8003532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003536:	4853      	ldr	r0, [pc, #332]	@ (8003684 <_vfiprintf_r+0x21c>)
 8003538:	f7fc fe6a 	bl	8000210 <memchr>
 800353c:	9a04      	ldr	r2, [sp, #16]
 800353e:	b9d8      	cbnz	r0, 8003578 <_vfiprintf_r+0x110>
 8003540:	06d1      	lsls	r1, r2, #27
 8003542:	bf44      	itt	mi
 8003544:	2320      	movmi	r3, #32
 8003546:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800354a:	0713      	lsls	r3, r2, #28
 800354c:	bf44      	itt	mi
 800354e:	232b      	movmi	r3, #43	@ 0x2b
 8003550:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003554:	f89a 3000 	ldrb.w	r3, [sl]
 8003558:	2b2a      	cmp	r3, #42	@ 0x2a
 800355a:	d015      	beq.n	8003588 <_vfiprintf_r+0x120>
 800355c:	9a07      	ldr	r2, [sp, #28]
 800355e:	4654      	mov	r4, sl
 8003560:	2000      	movs	r0, #0
 8003562:	f04f 0c0a 	mov.w	ip, #10
 8003566:	4621      	mov	r1, r4
 8003568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800356c:	3b30      	subs	r3, #48	@ 0x30
 800356e:	2b09      	cmp	r3, #9
 8003570:	d94b      	bls.n	800360a <_vfiprintf_r+0x1a2>
 8003572:	b1b0      	cbz	r0, 80035a2 <_vfiprintf_r+0x13a>
 8003574:	9207      	str	r2, [sp, #28]
 8003576:	e014      	b.n	80035a2 <_vfiprintf_r+0x13a>
 8003578:	eba0 0308 	sub.w	r3, r0, r8
 800357c:	fa09 f303 	lsl.w	r3, r9, r3
 8003580:	4313      	orrs	r3, r2
 8003582:	9304      	str	r3, [sp, #16]
 8003584:	46a2      	mov	sl, r4
 8003586:	e7d2      	b.n	800352e <_vfiprintf_r+0xc6>
 8003588:	9b03      	ldr	r3, [sp, #12]
 800358a:	1d19      	adds	r1, r3, #4
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	9103      	str	r1, [sp, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	bfbb      	ittet	lt
 8003594:	425b      	neglt	r3, r3
 8003596:	f042 0202 	orrlt.w	r2, r2, #2
 800359a:	9307      	strge	r3, [sp, #28]
 800359c:	9307      	strlt	r3, [sp, #28]
 800359e:	bfb8      	it	lt
 80035a0:	9204      	strlt	r2, [sp, #16]
 80035a2:	7823      	ldrb	r3, [r4, #0]
 80035a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80035a6:	d10a      	bne.n	80035be <_vfiprintf_r+0x156>
 80035a8:	7863      	ldrb	r3, [r4, #1]
 80035aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80035ac:	d132      	bne.n	8003614 <_vfiprintf_r+0x1ac>
 80035ae:	9b03      	ldr	r3, [sp, #12]
 80035b0:	1d1a      	adds	r2, r3, #4
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	9203      	str	r2, [sp, #12]
 80035b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035ba:	3402      	adds	r4, #2
 80035bc:	9305      	str	r3, [sp, #20]
 80035be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003694 <_vfiprintf_r+0x22c>
 80035c2:	7821      	ldrb	r1, [r4, #0]
 80035c4:	2203      	movs	r2, #3
 80035c6:	4650      	mov	r0, sl
 80035c8:	f7fc fe22 	bl	8000210 <memchr>
 80035cc:	b138      	cbz	r0, 80035de <_vfiprintf_r+0x176>
 80035ce:	9b04      	ldr	r3, [sp, #16]
 80035d0:	eba0 000a 	sub.w	r0, r0, sl
 80035d4:	2240      	movs	r2, #64	@ 0x40
 80035d6:	4082      	lsls	r2, r0
 80035d8:	4313      	orrs	r3, r2
 80035da:	3401      	adds	r4, #1
 80035dc:	9304      	str	r3, [sp, #16]
 80035de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035e2:	4829      	ldr	r0, [pc, #164]	@ (8003688 <_vfiprintf_r+0x220>)
 80035e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80035e8:	2206      	movs	r2, #6
 80035ea:	f7fc fe11 	bl	8000210 <memchr>
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d03f      	beq.n	8003672 <_vfiprintf_r+0x20a>
 80035f2:	4b26      	ldr	r3, [pc, #152]	@ (800368c <_vfiprintf_r+0x224>)
 80035f4:	bb1b      	cbnz	r3, 800363e <_vfiprintf_r+0x1d6>
 80035f6:	9b03      	ldr	r3, [sp, #12]
 80035f8:	3307      	adds	r3, #7
 80035fa:	f023 0307 	bic.w	r3, r3, #7
 80035fe:	3308      	adds	r3, #8
 8003600:	9303      	str	r3, [sp, #12]
 8003602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003604:	443b      	add	r3, r7
 8003606:	9309      	str	r3, [sp, #36]	@ 0x24
 8003608:	e76a      	b.n	80034e0 <_vfiprintf_r+0x78>
 800360a:	fb0c 3202 	mla	r2, ip, r2, r3
 800360e:	460c      	mov	r4, r1
 8003610:	2001      	movs	r0, #1
 8003612:	e7a8      	b.n	8003566 <_vfiprintf_r+0xfe>
 8003614:	2300      	movs	r3, #0
 8003616:	3401      	adds	r4, #1
 8003618:	9305      	str	r3, [sp, #20]
 800361a:	4619      	mov	r1, r3
 800361c:	f04f 0c0a 	mov.w	ip, #10
 8003620:	4620      	mov	r0, r4
 8003622:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003626:	3a30      	subs	r2, #48	@ 0x30
 8003628:	2a09      	cmp	r2, #9
 800362a:	d903      	bls.n	8003634 <_vfiprintf_r+0x1cc>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0c6      	beq.n	80035be <_vfiprintf_r+0x156>
 8003630:	9105      	str	r1, [sp, #20]
 8003632:	e7c4      	b.n	80035be <_vfiprintf_r+0x156>
 8003634:	fb0c 2101 	mla	r1, ip, r1, r2
 8003638:	4604      	mov	r4, r0
 800363a:	2301      	movs	r3, #1
 800363c:	e7f0      	b.n	8003620 <_vfiprintf_r+0x1b8>
 800363e:	ab03      	add	r3, sp, #12
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	462a      	mov	r2, r5
 8003644:	4b12      	ldr	r3, [pc, #72]	@ (8003690 <_vfiprintf_r+0x228>)
 8003646:	a904      	add	r1, sp, #16
 8003648:	4630      	mov	r0, r6
 800364a:	f3af 8000 	nop.w
 800364e:	4607      	mov	r7, r0
 8003650:	1c78      	adds	r0, r7, #1
 8003652:	d1d6      	bne.n	8003602 <_vfiprintf_r+0x19a>
 8003654:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003656:	07d9      	lsls	r1, r3, #31
 8003658:	d405      	bmi.n	8003666 <_vfiprintf_r+0x1fe>
 800365a:	89ab      	ldrh	r3, [r5, #12]
 800365c:	059a      	lsls	r2, r3, #22
 800365e:	d402      	bmi.n	8003666 <_vfiprintf_r+0x1fe>
 8003660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003662:	f7ff fddd 	bl	8003220 <__retarget_lock_release_recursive>
 8003666:	89ab      	ldrh	r3, [r5, #12]
 8003668:	065b      	lsls	r3, r3, #25
 800366a:	f53f af1f 	bmi.w	80034ac <_vfiprintf_r+0x44>
 800366e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003670:	e71e      	b.n	80034b0 <_vfiprintf_r+0x48>
 8003672:	ab03      	add	r3, sp, #12
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	462a      	mov	r2, r5
 8003678:	4b05      	ldr	r3, [pc, #20]	@ (8003690 <_vfiprintf_r+0x228>)
 800367a:	a904      	add	r1, sp, #16
 800367c:	4630      	mov	r0, r6
 800367e:	f000 f879 	bl	8003774 <_printf_i>
 8003682:	e7e4      	b.n	800364e <_vfiprintf_r+0x1e6>
 8003684:	08003c9c 	.word	0x08003c9c
 8003688:	08003ca6 	.word	0x08003ca6
 800368c:	00000000 	.word	0x00000000
 8003690:	08003443 	.word	0x08003443
 8003694:	08003ca2 	.word	0x08003ca2

08003698 <_printf_common>:
 8003698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800369c:	4616      	mov	r6, r2
 800369e:	4698      	mov	r8, r3
 80036a0:	688a      	ldr	r2, [r1, #8]
 80036a2:	690b      	ldr	r3, [r1, #16]
 80036a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036a8:	4293      	cmp	r3, r2
 80036aa:	bfb8      	it	lt
 80036ac:	4613      	movlt	r3, r2
 80036ae:	6033      	str	r3, [r6, #0]
 80036b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036b4:	4607      	mov	r7, r0
 80036b6:	460c      	mov	r4, r1
 80036b8:	b10a      	cbz	r2, 80036be <_printf_common+0x26>
 80036ba:	3301      	adds	r3, #1
 80036bc:	6033      	str	r3, [r6, #0]
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	0699      	lsls	r1, r3, #26
 80036c2:	bf42      	ittt	mi
 80036c4:	6833      	ldrmi	r3, [r6, #0]
 80036c6:	3302      	addmi	r3, #2
 80036c8:	6033      	strmi	r3, [r6, #0]
 80036ca:	6825      	ldr	r5, [r4, #0]
 80036cc:	f015 0506 	ands.w	r5, r5, #6
 80036d0:	d106      	bne.n	80036e0 <_printf_common+0x48>
 80036d2:	f104 0a19 	add.w	sl, r4, #25
 80036d6:	68e3      	ldr	r3, [r4, #12]
 80036d8:	6832      	ldr	r2, [r6, #0]
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	42ab      	cmp	r3, r5
 80036de:	dc26      	bgt.n	800372e <_printf_common+0x96>
 80036e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036e4:	6822      	ldr	r2, [r4, #0]
 80036e6:	3b00      	subs	r3, #0
 80036e8:	bf18      	it	ne
 80036ea:	2301      	movne	r3, #1
 80036ec:	0692      	lsls	r2, r2, #26
 80036ee:	d42b      	bmi.n	8003748 <_printf_common+0xb0>
 80036f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80036f4:	4641      	mov	r1, r8
 80036f6:	4638      	mov	r0, r7
 80036f8:	47c8      	blx	r9
 80036fa:	3001      	adds	r0, #1
 80036fc:	d01e      	beq.n	800373c <_printf_common+0xa4>
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	6922      	ldr	r2, [r4, #16]
 8003702:	f003 0306 	and.w	r3, r3, #6
 8003706:	2b04      	cmp	r3, #4
 8003708:	bf02      	ittt	eq
 800370a:	68e5      	ldreq	r5, [r4, #12]
 800370c:	6833      	ldreq	r3, [r6, #0]
 800370e:	1aed      	subeq	r5, r5, r3
 8003710:	68a3      	ldr	r3, [r4, #8]
 8003712:	bf0c      	ite	eq
 8003714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003718:	2500      	movne	r5, #0
 800371a:	4293      	cmp	r3, r2
 800371c:	bfc4      	itt	gt
 800371e:	1a9b      	subgt	r3, r3, r2
 8003720:	18ed      	addgt	r5, r5, r3
 8003722:	2600      	movs	r6, #0
 8003724:	341a      	adds	r4, #26
 8003726:	42b5      	cmp	r5, r6
 8003728:	d11a      	bne.n	8003760 <_printf_common+0xc8>
 800372a:	2000      	movs	r0, #0
 800372c:	e008      	b.n	8003740 <_printf_common+0xa8>
 800372e:	2301      	movs	r3, #1
 8003730:	4652      	mov	r2, sl
 8003732:	4641      	mov	r1, r8
 8003734:	4638      	mov	r0, r7
 8003736:	47c8      	blx	r9
 8003738:	3001      	adds	r0, #1
 800373a:	d103      	bne.n	8003744 <_printf_common+0xac>
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003744:	3501      	adds	r5, #1
 8003746:	e7c6      	b.n	80036d6 <_printf_common+0x3e>
 8003748:	18e1      	adds	r1, r4, r3
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	2030      	movs	r0, #48	@ 0x30
 800374e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003752:	4422      	add	r2, r4
 8003754:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003758:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800375c:	3302      	adds	r3, #2
 800375e:	e7c7      	b.n	80036f0 <_printf_common+0x58>
 8003760:	2301      	movs	r3, #1
 8003762:	4622      	mov	r2, r4
 8003764:	4641      	mov	r1, r8
 8003766:	4638      	mov	r0, r7
 8003768:	47c8      	blx	r9
 800376a:	3001      	adds	r0, #1
 800376c:	d0e6      	beq.n	800373c <_printf_common+0xa4>
 800376e:	3601      	adds	r6, #1
 8003770:	e7d9      	b.n	8003726 <_printf_common+0x8e>
	...

08003774 <_printf_i>:
 8003774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003778:	7e0f      	ldrb	r7, [r1, #24]
 800377a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800377c:	2f78      	cmp	r7, #120	@ 0x78
 800377e:	4691      	mov	r9, r2
 8003780:	4680      	mov	r8, r0
 8003782:	460c      	mov	r4, r1
 8003784:	469a      	mov	sl, r3
 8003786:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800378a:	d807      	bhi.n	800379c <_printf_i+0x28>
 800378c:	2f62      	cmp	r7, #98	@ 0x62
 800378e:	d80a      	bhi.n	80037a6 <_printf_i+0x32>
 8003790:	2f00      	cmp	r7, #0
 8003792:	f000 80d1 	beq.w	8003938 <_printf_i+0x1c4>
 8003796:	2f58      	cmp	r7, #88	@ 0x58
 8003798:	f000 80b8 	beq.w	800390c <_printf_i+0x198>
 800379c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037a4:	e03a      	b.n	800381c <_printf_i+0xa8>
 80037a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037aa:	2b15      	cmp	r3, #21
 80037ac:	d8f6      	bhi.n	800379c <_printf_i+0x28>
 80037ae:	a101      	add	r1, pc, #4	@ (adr r1, 80037b4 <_printf_i+0x40>)
 80037b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037b4:	0800380d 	.word	0x0800380d
 80037b8:	08003821 	.word	0x08003821
 80037bc:	0800379d 	.word	0x0800379d
 80037c0:	0800379d 	.word	0x0800379d
 80037c4:	0800379d 	.word	0x0800379d
 80037c8:	0800379d 	.word	0x0800379d
 80037cc:	08003821 	.word	0x08003821
 80037d0:	0800379d 	.word	0x0800379d
 80037d4:	0800379d 	.word	0x0800379d
 80037d8:	0800379d 	.word	0x0800379d
 80037dc:	0800379d 	.word	0x0800379d
 80037e0:	0800391f 	.word	0x0800391f
 80037e4:	0800384b 	.word	0x0800384b
 80037e8:	080038d9 	.word	0x080038d9
 80037ec:	0800379d 	.word	0x0800379d
 80037f0:	0800379d 	.word	0x0800379d
 80037f4:	08003941 	.word	0x08003941
 80037f8:	0800379d 	.word	0x0800379d
 80037fc:	0800384b 	.word	0x0800384b
 8003800:	0800379d 	.word	0x0800379d
 8003804:	0800379d 	.word	0x0800379d
 8003808:	080038e1 	.word	0x080038e1
 800380c:	6833      	ldr	r3, [r6, #0]
 800380e:	1d1a      	adds	r2, r3, #4
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6032      	str	r2, [r6, #0]
 8003814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003818:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800381c:	2301      	movs	r3, #1
 800381e:	e09c      	b.n	800395a <_printf_i+0x1e6>
 8003820:	6833      	ldr	r3, [r6, #0]
 8003822:	6820      	ldr	r0, [r4, #0]
 8003824:	1d19      	adds	r1, r3, #4
 8003826:	6031      	str	r1, [r6, #0]
 8003828:	0606      	lsls	r6, r0, #24
 800382a:	d501      	bpl.n	8003830 <_printf_i+0xbc>
 800382c:	681d      	ldr	r5, [r3, #0]
 800382e:	e003      	b.n	8003838 <_printf_i+0xc4>
 8003830:	0645      	lsls	r5, r0, #25
 8003832:	d5fb      	bpl.n	800382c <_printf_i+0xb8>
 8003834:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003838:	2d00      	cmp	r5, #0
 800383a:	da03      	bge.n	8003844 <_printf_i+0xd0>
 800383c:	232d      	movs	r3, #45	@ 0x2d
 800383e:	426d      	negs	r5, r5
 8003840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003844:	4858      	ldr	r0, [pc, #352]	@ (80039a8 <_printf_i+0x234>)
 8003846:	230a      	movs	r3, #10
 8003848:	e011      	b.n	800386e <_printf_i+0xfa>
 800384a:	6821      	ldr	r1, [r4, #0]
 800384c:	6833      	ldr	r3, [r6, #0]
 800384e:	0608      	lsls	r0, r1, #24
 8003850:	f853 5b04 	ldr.w	r5, [r3], #4
 8003854:	d402      	bmi.n	800385c <_printf_i+0xe8>
 8003856:	0649      	lsls	r1, r1, #25
 8003858:	bf48      	it	mi
 800385a:	b2ad      	uxthmi	r5, r5
 800385c:	2f6f      	cmp	r7, #111	@ 0x6f
 800385e:	4852      	ldr	r0, [pc, #328]	@ (80039a8 <_printf_i+0x234>)
 8003860:	6033      	str	r3, [r6, #0]
 8003862:	bf14      	ite	ne
 8003864:	230a      	movne	r3, #10
 8003866:	2308      	moveq	r3, #8
 8003868:	2100      	movs	r1, #0
 800386a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800386e:	6866      	ldr	r6, [r4, #4]
 8003870:	60a6      	str	r6, [r4, #8]
 8003872:	2e00      	cmp	r6, #0
 8003874:	db05      	blt.n	8003882 <_printf_i+0x10e>
 8003876:	6821      	ldr	r1, [r4, #0]
 8003878:	432e      	orrs	r6, r5
 800387a:	f021 0104 	bic.w	r1, r1, #4
 800387e:	6021      	str	r1, [r4, #0]
 8003880:	d04b      	beq.n	800391a <_printf_i+0x1a6>
 8003882:	4616      	mov	r6, r2
 8003884:	fbb5 f1f3 	udiv	r1, r5, r3
 8003888:	fb03 5711 	mls	r7, r3, r1, r5
 800388c:	5dc7      	ldrb	r7, [r0, r7]
 800388e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003892:	462f      	mov	r7, r5
 8003894:	42bb      	cmp	r3, r7
 8003896:	460d      	mov	r5, r1
 8003898:	d9f4      	bls.n	8003884 <_printf_i+0x110>
 800389a:	2b08      	cmp	r3, #8
 800389c:	d10b      	bne.n	80038b6 <_printf_i+0x142>
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	07df      	lsls	r7, r3, #31
 80038a2:	d508      	bpl.n	80038b6 <_printf_i+0x142>
 80038a4:	6923      	ldr	r3, [r4, #16]
 80038a6:	6861      	ldr	r1, [r4, #4]
 80038a8:	4299      	cmp	r1, r3
 80038aa:	bfde      	ittt	le
 80038ac:	2330      	movle	r3, #48	@ 0x30
 80038ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038b6:	1b92      	subs	r2, r2, r6
 80038b8:	6122      	str	r2, [r4, #16]
 80038ba:	f8cd a000 	str.w	sl, [sp]
 80038be:	464b      	mov	r3, r9
 80038c0:	aa03      	add	r2, sp, #12
 80038c2:	4621      	mov	r1, r4
 80038c4:	4640      	mov	r0, r8
 80038c6:	f7ff fee7 	bl	8003698 <_printf_common>
 80038ca:	3001      	adds	r0, #1
 80038cc:	d14a      	bne.n	8003964 <_printf_i+0x1f0>
 80038ce:	f04f 30ff 	mov.w	r0, #4294967295
 80038d2:	b004      	add	sp, #16
 80038d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	f043 0320 	orr.w	r3, r3, #32
 80038de:	6023      	str	r3, [r4, #0]
 80038e0:	4832      	ldr	r0, [pc, #200]	@ (80039ac <_printf_i+0x238>)
 80038e2:	2778      	movs	r7, #120	@ 0x78
 80038e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	6831      	ldr	r1, [r6, #0]
 80038ec:	061f      	lsls	r7, r3, #24
 80038ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80038f2:	d402      	bmi.n	80038fa <_printf_i+0x186>
 80038f4:	065f      	lsls	r7, r3, #25
 80038f6:	bf48      	it	mi
 80038f8:	b2ad      	uxthmi	r5, r5
 80038fa:	6031      	str	r1, [r6, #0]
 80038fc:	07d9      	lsls	r1, r3, #31
 80038fe:	bf44      	itt	mi
 8003900:	f043 0320 	orrmi.w	r3, r3, #32
 8003904:	6023      	strmi	r3, [r4, #0]
 8003906:	b11d      	cbz	r5, 8003910 <_printf_i+0x19c>
 8003908:	2310      	movs	r3, #16
 800390a:	e7ad      	b.n	8003868 <_printf_i+0xf4>
 800390c:	4826      	ldr	r0, [pc, #152]	@ (80039a8 <_printf_i+0x234>)
 800390e:	e7e9      	b.n	80038e4 <_printf_i+0x170>
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	f023 0320 	bic.w	r3, r3, #32
 8003916:	6023      	str	r3, [r4, #0]
 8003918:	e7f6      	b.n	8003908 <_printf_i+0x194>
 800391a:	4616      	mov	r6, r2
 800391c:	e7bd      	b.n	800389a <_printf_i+0x126>
 800391e:	6833      	ldr	r3, [r6, #0]
 8003920:	6825      	ldr	r5, [r4, #0]
 8003922:	6961      	ldr	r1, [r4, #20]
 8003924:	1d18      	adds	r0, r3, #4
 8003926:	6030      	str	r0, [r6, #0]
 8003928:	062e      	lsls	r6, r5, #24
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	d501      	bpl.n	8003932 <_printf_i+0x1be>
 800392e:	6019      	str	r1, [r3, #0]
 8003930:	e002      	b.n	8003938 <_printf_i+0x1c4>
 8003932:	0668      	lsls	r0, r5, #25
 8003934:	d5fb      	bpl.n	800392e <_printf_i+0x1ba>
 8003936:	8019      	strh	r1, [r3, #0]
 8003938:	2300      	movs	r3, #0
 800393a:	6123      	str	r3, [r4, #16]
 800393c:	4616      	mov	r6, r2
 800393e:	e7bc      	b.n	80038ba <_printf_i+0x146>
 8003940:	6833      	ldr	r3, [r6, #0]
 8003942:	1d1a      	adds	r2, r3, #4
 8003944:	6032      	str	r2, [r6, #0]
 8003946:	681e      	ldr	r6, [r3, #0]
 8003948:	6862      	ldr	r2, [r4, #4]
 800394a:	2100      	movs	r1, #0
 800394c:	4630      	mov	r0, r6
 800394e:	f7fc fc5f 	bl	8000210 <memchr>
 8003952:	b108      	cbz	r0, 8003958 <_printf_i+0x1e4>
 8003954:	1b80      	subs	r0, r0, r6
 8003956:	6060      	str	r0, [r4, #4]
 8003958:	6863      	ldr	r3, [r4, #4]
 800395a:	6123      	str	r3, [r4, #16]
 800395c:	2300      	movs	r3, #0
 800395e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003962:	e7aa      	b.n	80038ba <_printf_i+0x146>
 8003964:	6923      	ldr	r3, [r4, #16]
 8003966:	4632      	mov	r2, r6
 8003968:	4649      	mov	r1, r9
 800396a:	4640      	mov	r0, r8
 800396c:	47d0      	blx	sl
 800396e:	3001      	adds	r0, #1
 8003970:	d0ad      	beq.n	80038ce <_printf_i+0x15a>
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	079b      	lsls	r3, r3, #30
 8003976:	d413      	bmi.n	80039a0 <_printf_i+0x22c>
 8003978:	68e0      	ldr	r0, [r4, #12]
 800397a:	9b03      	ldr	r3, [sp, #12]
 800397c:	4298      	cmp	r0, r3
 800397e:	bfb8      	it	lt
 8003980:	4618      	movlt	r0, r3
 8003982:	e7a6      	b.n	80038d2 <_printf_i+0x15e>
 8003984:	2301      	movs	r3, #1
 8003986:	4632      	mov	r2, r6
 8003988:	4649      	mov	r1, r9
 800398a:	4640      	mov	r0, r8
 800398c:	47d0      	blx	sl
 800398e:	3001      	adds	r0, #1
 8003990:	d09d      	beq.n	80038ce <_printf_i+0x15a>
 8003992:	3501      	adds	r5, #1
 8003994:	68e3      	ldr	r3, [r4, #12]
 8003996:	9903      	ldr	r1, [sp, #12]
 8003998:	1a5b      	subs	r3, r3, r1
 800399a:	42ab      	cmp	r3, r5
 800399c:	dcf2      	bgt.n	8003984 <_printf_i+0x210>
 800399e:	e7eb      	b.n	8003978 <_printf_i+0x204>
 80039a0:	2500      	movs	r5, #0
 80039a2:	f104 0619 	add.w	r6, r4, #25
 80039a6:	e7f5      	b.n	8003994 <_printf_i+0x220>
 80039a8:	08003cad 	.word	0x08003cad
 80039ac:	08003cbe 	.word	0x08003cbe

080039b0 <__sflush_r>:
 80039b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b8:	0716      	lsls	r6, r2, #28
 80039ba:	4605      	mov	r5, r0
 80039bc:	460c      	mov	r4, r1
 80039be:	d454      	bmi.n	8003a6a <__sflush_r+0xba>
 80039c0:	684b      	ldr	r3, [r1, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	dc02      	bgt.n	80039cc <__sflush_r+0x1c>
 80039c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	dd48      	ble.n	8003a5e <__sflush_r+0xae>
 80039cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039ce:	2e00      	cmp	r6, #0
 80039d0:	d045      	beq.n	8003a5e <__sflush_r+0xae>
 80039d2:	2300      	movs	r3, #0
 80039d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80039d8:	682f      	ldr	r7, [r5, #0]
 80039da:	6a21      	ldr	r1, [r4, #32]
 80039dc:	602b      	str	r3, [r5, #0]
 80039de:	d030      	beq.n	8003a42 <__sflush_r+0x92>
 80039e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80039e2:	89a3      	ldrh	r3, [r4, #12]
 80039e4:	0759      	lsls	r1, r3, #29
 80039e6:	d505      	bpl.n	80039f4 <__sflush_r+0x44>
 80039e8:	6863      	ldr	r3, [r4, #4]
 80039ea:	1ad2      	subs	r2, r2, r3
 80039ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80039ee:	b10b      	cbz	r3, 80039f4 <__sflush_r+0x44>
 80039f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80039f2:	1ad2      	subs	r2, r2, r3
 80039f4:	2300      	movs	r3, #0
 80039f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039f8:	6a21      	ldr	r1, [r4, #32]
 80039fa:	4628      	mov	r0, r5
 80039fc:	47b0      	blx	r6
 80039fe:	1c43      	adds	r3, r0, #1
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	d106      	bne.n	8003a12 <__sflush_r+0x62>
 8003a04:	6829      	ldr	r1, [r5, #0]
 8003a06:	291d      	cmp	r1, #29
 8003a08:	d82b      	bhi.n	8003a62 <__sflush_r+0xb2>
 8003a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ab4 <__sflush_r+0x104>)
 8003a0c:	40ca      	lsrs	r2, r1
 8003a0e:	07d6      	lsls	r6, r2, #31
 8003a10:	d527      	bpl.n	8003a62 <__sflush_r+0xb2>
 8003a12:	2200      	movs	r2, #0
 8003a14:	6062      	str	r2, [r4, #4]
 8003a16:	04d9      	lsls	r1, r3, #19
 8003a18:	6922      	ldr	r2, [r4, #16]
 8003a1a:	6022      	str	r2, [r4, #0]
 8003a1c:	d504      	bpl.n	8003a28 <__sflush_r+0x78>
 8003a1e:	1c42      	adds	r2, r0, #1
 8003a20:	d101      	bne.n	8003a26 <__sflush_r+0x76>
 8003a22:	682b      	ldr	r3, [r5, #0]
 8003a24:	b903      	cbnz	r3, 8003a28 <__sflush_r+0x78>
 8003a26:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a2a:	602f      	str	r7, [r5, #0]
 8003a2c:	b1b9      	cbz	r1, 8003a5e <__sflush_r+0xae>
 8003a2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a32:	4299      	cmp	r1, r3
 8003a34:	d002      	beq.n	8003a3c <__sflush_r+0x8c>
 8003a36:	4628      	mov	r0, r5
 8003a38:	f7ff fbf4 	bl	8003224 <_free_r>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a40:	e00d      	b.n	8003a5e <__sflush_r+0xae>
 8003a42:	2301      	movs	r3, #1
 8003a44:	4628      	mov	r0, r5
 8003a46:	47b0      	blx	r6
 8003a48:	4602      	mov	r2, r0
 8003a4a:	1c50      	adds	r0, r2, #1
 8003a4c:	d1c9      	bne.n	80039e2 <__sflush_r+0x32>
 8003a4e:	682b      	ldr	r3, [r5, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0c6      	beq.n	80039e2 <__sflush_r+0x32>
 8003a54:	2b1d      	cmp	r3, #29
 8003a56:	d001      	beq.n	8003a5c <__sflush_r+0xac>
 8003a58:	2b16      	cmp	r3, #22
 8003a5a:	d11e      	bne.n	8003a9a <__sflush_r+0xea>
 8003a5c:	602f      	str	r7, [r5, #0]
 8003a5e:	2000      	movs	r0, #0
 8003a60:	e022      	b.n	8003aa8 <__sflush_r+0xf8>
 8003a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a66:	b21b      	sxth	r3, r3
 8003a68:	e01b      	b.n	8003aa2 <__sflush_r+0xf2>
 8003a6a:	690f      	ldr	r7, [r1, #16]
 8003a6c:	2f00      	cmp	r7, #0
 8003a6e:	d0f6      	beq.n	8003a5e <__sflush_r+0xae>
 8003a70:	0793      	lsls	r3, r2, #30
 8003a72:	680e      	ldr	r6, [r1, #0]
 8003a74:	bf08      	it	eq
 8003a76:	694b      	ldreq	r3, [r1, #20]
 8003a78:	600f      	str	r7, [r1, #0]
 8003a7a:	bf18      	it	ne
 8003a7c:	2300      	movne	r3, #0
 8003a7e:	eba6 0807 	sub.w	r8, r6, r7
 8003a82:	608b      	str	r3, [r1, #8]
 8003a84:	f1b8 0f00 	cmp.w	r8, #0
 8003a88:	dde9      	ble.n	8003a5e <__sflush_r+0xae>
 8003a8a:	6a21      	ldr	r1, [r4, #32]
 8003a8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003a8e:	4643      	mov	r3, r8
 8003a90:	463a      	mov	r2, r7
 8003a92:	4628      	mov	r0, r5
 8003a94:	47b0      	blx	r6
 8003a96:	2800      	cmp	r0, #0
 8003a98:	dc08      	bgt.n	8003aac <__sflush_r+0xfc>
 8003a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aa2:	81a3      	strh	r3, [r4, #12]
 8003aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aac:	4407      	add	r7, r0
 8003aae:	eba8 0800 	sub.w	r8, r8, r0
 8003ab2:	e7e7      	b.n	8003a84 <__sflush_r+0xd4>
 8003ab4:	20400001 	.word	0x20400001

08003ab8 <_fflush_r>:
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	690b      	ldr	r3, [r1, #16]
 8003abc:	4605      	mov	r5, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	b913      	cbnz	r3, 8003ac8 <_fflush_r+0x10>
 8003ac2:	2500      	movs	r5, #0
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	b118      	cbz	r0, 8003ad2 <_fflush_r+0x1a>
 8003aca:	6a03      	ldr	r3, [r0, #32]
 8003acc:	b90b      	cbnz	r3, 8003ad2 <_fflush_r+0x1a>
 8003ace:	f7ff f9af 	bl	8002e30 <__sinit>
 8003ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f3      	beq.n	8003ac2 <_fflush_r+0xa>
 8003ada:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003adc:	07d0      	lsls	r0, r2, #31
 8003ade:	d404      	bmi.n	8003aea <_fflush_r+0x32>
 8003ae0:	0599      	lsls	r1, r3, #22
 8003ae2:	d402      	bmi.n	8003aea <_fflush_r+0x32>
 8003ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ae6:	f7ff fb9a 	bl	800321e <__retarget_lock_acquire_recursive>
 8003aea:	4628      	mov	r0, r5
 8003aec:	4621      	mov	r1, r4
 8003aee:	f7ff ff5f 	bl	80039b0 <__sflush_r>
 8003af2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003af4:	07da      	lsls	r2, r3, #31
 8003af6:	4605      	mov	r5, r0
 8003af8:	d4e4      	bmi.n	8003ac4 <_fflush_r+0xc>
 8003afa:	89a3      	ldrh	r3, [r4, #12]
 8003afc:	059b      	lsls	r3, r3, #22
 8003afe:	d4e1      	bmi.n	8003ac4 <_fflush_r+0xc>
 8003b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b02:	f7ff fb8d 	bl	8003220 <__retarget_lock_release_recursive>
 8003b06:	e7dd      	b.n	8003ac4 <_fflush_r+0xc>

08003b08 <__swhatbuf_r>:
 8003b08:	b570      	push	{r4, r5, r6, lr}
 8003b0a:	460c      	mov	r4, r1
 8003b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b10:	2900      	cmp	r1, #0
 8003b12:	b096      	sub	sp, #88	@ 0x58
 8003b14:	4615      	mov	r5, r2
 8003b16:	461e      	mov	r6, r3
 8003b18:	da0d      	bge.n	8003b36 <__swhatbuf_r+0x2e>
 8003b1a:	89a3      	ldrh	r3, [r4, #12]
 8003b1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b20:	f04f 0100 	mov.w	r1, #0
 8003b24:	bf14      	ite	ne
 8003b26:	2340      	movne	r3, #64	@ 0x40
 8003b28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	6031      	str	r1, [r6, #0]
 8003b30:	602b      	str	r3, [r5, #0]
 8003b32:	b016      	add	sp, #88	@ 0x58
 8003b34:	bd70      	pop	{r4, r5, r6, pc}
 8003b36:	466a      	mov	r2, sp
 8003b38:	f000 f848 	bl	8003bcc <_fstat_r>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	dbec      	blt.n	8003b1a <__swhatbuf_r+0x12>
 8003b40:	9901      	ldr	r1, [sp, #4]
 8003b42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003b46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003b4a:	4259      	negs	r1, r3
 8003b4c:	4159      	adcs	r1, r3
 8003b4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b52:	e7eb      	b.n	8003b2c <__swhatbuf_r+0x24>

08003b54 <__smakebuf_r>:
 8003b54:	898b      	ldrh	r3, [r1, #12]
 8003b56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b58:	079d      	lsls	r5, r3, #30
 8003b5a:	4606      	mov	r6, r0
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	d507      	bpl.n	8003b70 <__smakebuf_r+0x1c>
 8003b60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	6123      	str	r3, [r4, #16]
 8003b68:	2301      	movs	r3, #1
 8003b6a:	6163      	str	r3, [r4, #20]
 8003b6c:	b003      	add	sp, #12
 8003b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b70:	ab01      	add	r3, sp, #4
 8003b72:	466a      	mov	r2, sp
 8003b74:	f7ff ffc8 	bl	8003b08 <__swhatbuf_r>
 8003b78:	9f00      	ldr	r7, [sp, #0]
 8003b7a:	4605      	mov	r5, r0
 8003b7c:	4639      	mov	r1, r7
 8003b7e:	4630      	mov	r0, r6
 8003b80:	f7ff fbbc 	bl	80032fc <_malloc_r>
 8003b84:	b948      	cbnz	r0, 8003b9a <__smakebuf_r+0x46>
 8003b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b8a:	059a      	lsls	r2, r3, #22
 8003b8c:	d4ee      	bmi.n	8003b6c <__smakebuf_r+0x18>
 8003b8e:	f023 0303 	bic.w	r3, r3, #3
 8003b92:	f043 0302 	orr.w	r3, r3, #2
 8003b96:	81a3      	strh	r3, [r4, #12]
 8003b98:	e7e2      	b.n	8003b60 <__smakebuf_r+0xc>
 8003b9a:	89a3      	ldrh	r3, [r4, #12]
 8003b9c:	6020      	str	r0, [r4, #0]
 8003b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba2:	81a3      	strh	r3, [r4, #12]
 8003ba4:	9b01      	ldr	r3, [sp, #4]
 8003ba6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003baa:	b15b      	cbz	r3, 8003bc4 <__smakebuf_r+0x70>
 8003bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f000 f81d 	bl	8003bf0 <_isatty_r>
 8003bb6:	b128      	cbz	r0, 8003bc4 <__smakebuf_r+0x70>
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	f023 0303 	bic.w	r3, r3, #3
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	81a3      	strh	r3, [r4, #12]
 8003bc4:	89a3      	ldrh	r3, [r4, #12]
 8003bc6:	431d      	orrs	r5, r3
 8003bc8:	81a5      	strh	r5, [r4, #12]
 8003bca:	e7cf      	b.n	8003b6c <__smakebuf_r+0x18>

08003bcc <_fstat_r>:
 8003bcc:	b538      	push	{r3, r4, r5, lr}
 8003bce:	4d07      	ldr	r5, [pc, #28]	@ (8003bec <_fstat_r+0x20>)
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	4608      	mov	r0, r1
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	602b      	str	r3, [r5, #0]
 8003bda:	f7fc ff21 	bl	8000a20 <_fstat>
 8003bde:	1c43      	adds	r3, r0, #1
 8003be0:	d102      	bne.n	8003be8 <_fstat_r+0x1c>
 8003be2:	682b      	ldr	r3, [r5, #0]
 8003be4:	b103      	cbz	r3, 8003be8 <_fstat_r+0x1c>
 8003be6:	6023      	str	r3, [r4, #0]
 8003be8:	bd38      	pop	{r3, r4, r5, pc}
 8003bea:	bf00      	nop
 8003bec:	20000250 	.word	0x20000250

08003bf0 <_isatty_r>:
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	4d06      	ldr	r5, [pc, #24]	@ (8003c0c <_isatty_r+0x1c>)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	602b      	str	r3, [r5, #0]
 8003bfc:	f7fc ff20 	bl	8000a40 <_isatty>
 8003c00:	1c43      	adds	r3, r0, #1
 8003c02:	d102      	bne.n	8003c0a <_isatty_r+0x1a>
 8003c04:	682b      	ldr	r3, [r5, #0]
 8003c06:	b103      	cbz	r3, 8003c0a <_isatty_r+0x1a>
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	bd38      	pop	{r3, r4, r5, pc}
 8003c0c:	20000250 	.word	0x20000250

08003c10 <_sbrk_r>:
 8003c10:	b538      	push	{r3, r4, r5, lr}
 8003c12:	4d06      	ldr	r5, [pc, #24]	@ (8003c2c <_sbrk_r+0x1c>)
 8003c14:	2300      	movs	r3, #0
 8003c16:	4604      	mov	r4, r0
 8003c18:	4608      	mov	r0, r1
 8003c1a:	602b      	str	r3, [r5, #0]
 8003c1c:	f7fc ff28 	bl	8000a70 <_sbrk>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d102      	bne.n	8003c2a <_sbrk_r+0x1a>
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	b103      	cbz	r3, 8003c2a <_sbrk_r+0x1a>
 8003c28:	6023      	str	r3, [r4, #0]
 8003c2a:	bd38      	pop	{r3, r4, r5, pc}
 8003c2c:	20000250 	.word	0x20000250

08003c30 <_init>:
 8003c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c32:	bf00      	nop
 8003c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c36:	bc08      	pop	{r3}
 8003c38:	469e      	mov	lr, r3
 8003c3a:	4770      	bx	lr

08003c3c <_fini>:
 8003c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3e:	bf00      	nop
 8003c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c42:	bc08      	pop	{r3}
 8003c44:	469e      	mov	lr, r3
 8003c46:	4770      	bx	lr
