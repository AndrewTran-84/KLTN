
SDcard_SDMMC_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c074  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  0800c248  0800c248  0000d248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8fc  0800c8fc  0000e1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c8fc  0800c8fc  0000d8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c904  0800c904  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c904  0800c904  0000d904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c908  0800c908  0000d908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c90c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  200001d4  0800cae0  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20000784  0800cae0  0000e784  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e41  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c0  00000000  00000000  00022045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00025108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3f  00000000  00000000  00026128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029363  00000000  00000000  00026d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d6d  00000000  00000000  000500ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1032  00000000  00000000  00067e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158e69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000514c  00000000  00000000  00158eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0015dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c22c 	.word	0x0800c22c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800c22c 	.word	0x0800c22c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <__io_putchar>:
UART_HandleTypeDef huart1;

static uint8_t workBuffer[_MAX_SS];

/* USER CODE BEGIN PV */
int __io_putchar(int ch){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	uint8_t c = (uint8_t)ch;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, HAL_MAX_DELAY);
 8000f22:	f107 010f 	add.w	r1, r7, #15
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4803      	ldr	r0, [pc, #12]	@ (8000f3c <__io_putchar+0x28>)
 8000f2e:	f004 fcc2 	bl	80058b6 <HAL_UART_Transmit>
	return ch;
 8000f32:	687b      	ldr	r3, [r7, #4]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000334 	.word	0x20000334

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	f5ad 7d48 	sub.w	sp, sp, #800	@ 0x320
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	FRESULT res = FR_NOT_READY;                       /* FatFs function common result code */
 8000f48:	2303      	movs	r3, #3
 8000f4a:	f887 331f 	strb.w	r3, [r7, #799]	@ 0x31f
	uint32_t bytesToWritten = 0;                      /* File write counts */
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
	uint32_t bytesToRead = 0;                         /* File read counts */
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
	uint8_t filePath[] = "STM32.TXT";                 /* File path buffer */
 8000f5a:	4a6d      	ldr	r2, [pc, #436]	@ (8001110 <main+0x1d0>)
 8000f5c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8000f60:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f62:	c303      	stmia	r3!, {r0, r1}
 8000f64:	801a      	strh	r2, [r3, #0]
	uint8_t writeText[] = "STM32F746G FatFs + uSD";   /* File write buffer */
 8000f66:	4b6b      	ldr	r3, [pc, #428]	@ (8001114 <main+0x1d4>)
 8000f68:	f507 7438 	add.w	r4, r7, #736	@ 0x2e0
 8000f6c:	461d      	mov	r5, r3
 8000f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f72:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f76:	6020      	str	r0, [r4, #0]
 8000f78:	3404      	adds	r4, #4
 8000f7a:	8021      	strh	r1, [r4, #0]
 8000f7c:	3402      	adds	r4, #2
 8000f7e:	0c0b      	lsrs	r3, r1, #16
 8000f80:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f82:	f001 f936 	bl	80021f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f86:	f000 f8eb 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8a:	f000 f9cf 	bl	800132c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f8e:	f000 f9a7 	bl	80012e0 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000f92:	f000 f955 	bl	8001240 <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 8000f96:	f000 f973 	bl	8001280 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000f9a:	f005 feb9 	bl	8006d10 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* --- DEBUG helper: in trạng thái uSD detect + mount without formatting --- */
  printf("UART alive\n");
 8000f9e:	485e      	ldr	r0, [pc, #376]	@ (8001118 <main+0x1d8>)
 8000fa0:	f009 f9d0 	bl	800a344 <puts>

  /* 0) debug: read SD detect pin (if defined) */
  #ifdef uSD_Detect_GPIO_Port
    GPIO_PinState detect = HAL_GPIO_ReadPin(uSD_Detect_GPIO_Port, uSD_Detect_Pin);
 8000fa4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fa8:	485c      	ldr	r0, [pc, #368]	@ (800111c <main+0x1dc>)
 8000faa:	f002 f807 	bl	8002fbc <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f887 3313 	strb.w	r3, [r7, #787]	@ 0x313
    printf("uSD_Detect pin = %d (0=inserted on many boards, 1=not inserted) \r\n", (int)detect);
 8000fb4:	f897 3313 	ldrb.w	r3, [r7, #787]	@ 0x313
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4859      	ldr	r0, [pc, #356]	@ (8001120 <main+0x1e0>)
 8000fbc:	f009 f95a 	bl	800a274 <iprintf>
  #else
    printf("uSD_Detect pin NOT defined in this build.\r\n");
  #endif

  /* 1) link driver */
  int linkRes = FATFS_LinkDriver(&SD_Driver, SDPath);
 8000fc0:	4958      	ldr	r1, [pc, #352]	@ (8001124 <main+0x1e4>)
 8000fc2:	4859      	ldr	r0, [pc, #356]	@ (8001128 <main+0x1e8>)
 8000fc4:	f008 fbea 	bl	800979c <FATFS_LinkDriver>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
  printf("FATFS_LinkDriver() = %d\r\n", linkRes);
 8000fce:	f8d7 130c 	ldr.w	r1, [r7, #780]	@ 0x30c
 8000fd2:	4856      	ldr	r0, [pc, #344]	@ (800112c <main+0x1ec>)
 8000fd4:	f009 f94e 	bl	800a274 <iprintf>

  /* 2) try mount (don't format) */
  FRESULT fres = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4952      	ldr	r1, [pc, #328]	@ (8001124 <main+0x1e4>)
 8000fdc:	4854      	ldr	r0, [pc, #336]	@ (8001130 <main+0x1f0>)
 8000fde:	f007 fe35 	bl	8008c4c <f_mount>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f887 330b 	strb.w	r3, [r7, #779]	@ 0x30b
  printf("f_mount() returned: %d\r\n", (int)fres);
 8000fe8:	f897 330b 	ldrb.w	r3, [r7, #779]	@ 0x30b
 8000fec:	4619      	mov	r1, r3
 8000fee:	4851      	ldr	r0, [pc, #324]	@ (8001134 <main+0x1f4>)
 8000ff0:	f009 f940 	bl	800a274 <iprintf>
  if (fres != FR_OK) {
 8000ff4:	f897 330b 	ldrb.w	r3, [r7, #779]	@ 0x30b
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d016      	beq.n	800102a <main+0xea>
      /* print a human-friendly hint */
      if (fres == FR_NO_FILESYSTEM) {
 8000ffc:	f897 330b 	ldrb.w	r3, [r7, #779]	@ 0x30b
 8001000:	2b0d      	cmp	r3, #13
 8001002:	d103      	bne.n	800100c <main+0xcc>
        printf("Mount failed: no filesystem (FR_NO_FILESYSTEM) - maybe unformatted card.\r\n");
 8001004:	484c      	ldr	r0, [pc, #304]	@ (8001138 <main+0x1f8>)
 8001006:	f009 f99d 	bl	800a344 <puts>
 800100a:	e07c      	b.n	8001106 <main+0x1c6>
      } else if (fres == FR_NOT_READY) {
 800100c:	f897 330b 	ldrb.w	r3, [r7, #779]	@ 0x30b
 8001010:	2b03      	cmp	r3, #3
 8001012:	d103      	bne.n	800101c <main+0xdc>
        printf("Mount failed: NOT_READY (maybe card not detected or init failed).\r\n");
 8001014:	4849      	ldr	r0, [pc, #292]	@ (800113c <main+0x1fc>)
 8001016:	f009 f995 	bl	800a344 <puts>
 800101a:	e074      	b.n	8001106 <main+0x1c6>
      } else {
        printf("Mount failed: code %d\r\n", (int)fres);
 800101c:	f897 330b 	ldrb.w	r3, [r7, #779]	@ 0x30b
 8001020:	4619      	mov	r1, r3
 8001022:	4847      	ldr	r0, [pc, #284]	@ (8001140 <main+0x200>)
 8001024:	f009 f926 	bl	800a274 <iprintf>
 8001028:	e06d      	b.n	8001106 <main+0x1c6>
      }
      /* keep running so output stays visible, do not format yet */
  } else {
      printf("Mount OK. Trying file open/write test...\r\n");
 800102a:	4846      	ldr	r0, [pc, #280]	@ (8001144 <main+0x204>)
 800102c:	f009 f98a 	bl	800a344 <puts>
      /* simple write/read test */
      FRESULT resw;
      FIL f;
      UINT bw, br;
      resw = f_open(&f, (const TCHAR*)"TEST.TXT", FA_CREATE_ALWAYS | FA_WRITE);
 8001030:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001034:	220a      	movs	r2, #10
 8001036:	4944      	ldr	r1, [pc, #272]	@ (8001148 <main+0x208>)
 8001038:	4618      	mov	r0, r3
 800103a:	f007 fe4d 	bl	8008cd8 <f_open>
 800103e:	4603      	mov	r3, r0
 8001040:	f887 330a 	strb.w	r3, [r7, #778]	@ 0x30a
      printf("f_open(write) => %d\r\n", (int)resw);
 8001044:	f897 330a 	ldrb.w	r3, [r7, #778]	@ 0x30a
 8001048:	4619      	mov	r1, r3
 800104a:	4840      	ldr	r0, [pc, #256]	@ (800114c <main+0x20c>)
 800104c:	f009 f912 	bl	800a274 <iprintf>
      if (resw == FR_OK) {
 8001050:	f897 330a 	ldrb.w	r3, [r7, #778]	@ 0x30a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d14e      	bne.n	80010f6 <main+0x1b6>
          const char *s = "Hello from STM32F746G\r\n";
 8001058:	4b3d      	ldr	r3, [pc, #244]	@ (8001150 <main+0x210>)
 800105a:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
          f_write(&f, s, strlen(s), &bw);
 800105e:	f8d7 0304 	ldr.w	r0, [r7, #772]	@ 0x304
 8001062:	f7ff f925 	bl	80002b0 <strlen>
 8001066:	4602      	mov	r2, r0
 8001068:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 800106c:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001070:	f8d7 1304 	ldr.w	r1, [r7, #772]	@ 0x304
 8001074:	f008 f929 	bl	80092ca <f_write>
          printf("f_write wrote %u bytes, res=%d\r\n", bw, (int)resw);
 8001078:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800107c:	f897 230a 	ldrb.w	r2, [r7, #778]	@ 0x30a
 8001080:	4619      	mov	r1, r3
 8001082:	4834      	ldr	r0, [pc, #208]	@ (8001154 <main+0x214>)
 8001084:	f009 f8f6 	bl	800a274 <iprintf>
          f_close(&f);
 8001088:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800108c:	4618      	mov	r0, r3
 800108e:	f008 fb0f 	bl	80096b0 <f_close>

          /* read back */
          resw = f_open(&f, (const TCHAR*)"TEST.TXT", FA_READ);
 8001092:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001096:	2201      	movs	r2, #1
 8001098:	492b      	ldr	r1, [pc, #172]	@ (8001148 <main+0x208>)
 800109a:	4618      	mov	r0, r3
 800109c:	f007 fe1c 	bl	8008cd8 <f_open>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f887 330a 	strb.w	r3, [r7, #778]	@ 0x30a
          printf("f_open(read) => %d\r\n", (int)resw);
 80010a6:	f897 330a 	ldrb.w	r3, [r7, #778]	@ 0x30a
 80010aa:	4619      	mov	r1, r3
 80010ac:	482a      	ldr	r0, [pc, #168]	@ (8001158 <main+0x218>)
 80010ae:	f009 f8e1 	bl	800a274 <iprintf>
          if (resw == FR_OK) {
 80010b2:	f897 330a 	ldrb.w	r3, [r7, #778]	@ 0x30a
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d11d      	bne.n	80010f6 <main+0x1b6>
              char buf[64] = {0};
 80010ba:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 80010be:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 80010c2:	4618      	mov	r0, r3
 80010c4:	2340      	movs	r3, #64	@ 0x40
 80010c6:	461a      	mov	r2, r3
 80010c8:	2100      	movs	r1, #0
 80010ca:	f009 fa1b 	bl	800a504 <memset>
              f_read(&f, buf, sizeof(buf)-1, &br);
 80010ce:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 80010d2:	1d39      	adds	r1, r7, #4
 80010d4:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80010d8:	223f      	movs	r2, #63	@ 0x3f
 80010da:	f007 ffb7 	bl	800904c <f_read>
              printf("Read %u bytes: '%s'\r\n", br, buf);
 80010de:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80010e2:	1d3a      	adds	r2, r7, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	481d      	ldr	r0, [pc, #116]	@ (800115c <main+0x21c>)
 80010e8:	f009 f8c4 	bl	800a274 <iprintf>
              f_close(&f);
 80010ec:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80010f0:	4618      	mov	r0, r3
 80010f2:	f008 fadd 	bl	80096b0 <f_close>
          }
      }
      /* unmount at end of test */
      f_mount(NULL, (TCHAR const*)SDPath, 1);
 80010f6:	2201      	movs	r2, #1
 80010f8:	490a      	ldr	r1, [pc, #40]	@ (8001124 <main+0x1e4>)
 80010fa:	2000      	movs	r0, #0
 80010fc:	f007 fda6 	bl	8008c4c <f_mount>
      FATFS_UnLinkDriver(SDPath);
 8001100:	4808      	ldr	r0, [pc, #32]	@ (8001124 <main+0x1e4>)
 8001102:	f008 fb93 	bl	800982c <FATFS_UnLinkDriver>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(500);
 8001106:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800110a:	f001 f8cf 	bl	80022ac <HAL_Delay>
 800110e:	e7fa      	b.n	8001106 <main+0x1c6>
 8001110:	0800c434 	.word	0x0800c434
 8001114:	0800c440 	.word	0x0800c440
 8001118:	0800c248 	.word	0x0800c248
 800111c:	40020800 	.word	0x40020800
 8001120:	0800c254 	.word	0x0800c254
 8001124:	200003c8 	.word	0x200003c8
 8001128:	0800c4f0 	.word	0x0800c4f0
 800112c:	0800c298 	.word	0x0800c298
 8001130:	200003cc 	.word	0x200003cc
 8001134:	0800c2b4 	.word	0x0800c2b4
 8001138:	0800c2d0 	.word	0x0800c2d0
 800113c:	0800c31c 	.word	0x0800c31c
 8001140:	0800c360 	.word	0x0800c360
 8001144:	0800c378 	.word	0x0800c378
 8001148:	0800c3a4 	.word	0x0800c3a4
 800114c:	0800c3b0 	.word	0x0800c3b0
 8001150:	0800c3c8 	.word	0x0800c3c8
 8001154:	0800c3e0 	.word	0x0800c3e0
 8001158:	0800c404 	.word	0x0800c404
 800115c:	0800c41c 	.word	0x0800c41c

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	@ 0x50
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	2230      	movs	r2, #48	@ 0x30
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f009 f9c8 	bl	800a504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001184:	f001 ff4c 	bl	8003020 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	4b2b      	ldr	r3, [pc, #172]	@ (8001238 <SystemClock_Config+0xd8>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	4a2a      	ldr	r2, [pc, #168]	@ (8001238 <SystemClock_Config+0xd8>)
 800118e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001192:	6413      	str	r3, [r2, #64]	@ 0x40
 8001194:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <SystemClock_Config+0xd8>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a0:	4b26      	ldr	r3, [pc, #152]	@ (800123c <SystemClock_Config+0xdc>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a25      	ldr	r2, [pc, #148]	@ (800123c <SystemClock_Config+0xdc>)
 80011a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b23      	ldr	r3, [pc, #140]	@ (800123c <SystemClock_Config+0xdc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011b8:	2301      	movs	r3, #1
 80011ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c2:	2302      	movs	r3, #2
 80011c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011cc:	2319      	movs	r3, #25
 80011ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80011d0:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80011d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011da:	2309      	movs	r3, #9
 80011dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 ff7c 	bl	80030e0 <HAL_RCC_OscConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011ee:	f000 fcef 	bl	8001bd0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011f2:	f001 ff25 	bl	8003040 <HAL_PWREx_EnableOverDrive>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80011fc:	f000 fce8 	bl	8001bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001200:	230f      	movs	r3, #15
 8001202:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001204:	2302      	movs	r3, #2
 8001206:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800120c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001210:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001212:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001216:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	2107      	movs	r1, #7
 800121e:	4618      	mov	r0, r3
 8001220:	f002 fa02 	bl	8003628 <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800122a:	f000 fcd1 	bl	8001bd0 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3750      	adds	r7, #80	@ 0x50
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40007000 	.word	0x40007000

08001240 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <MX_SDMMC1_SD_Init+0x38>)
 8001246:	4a0d      	ldr	r2, [pc, #52]	@ (800127c <MX_SDMMC1_SD_Init+0x3c>)
 8001248:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <MX_SDMMC1_SD_Init+0x38>)
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <MX_SDMMC1_SD_Init+0x38>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <MX_SDMMC1_SD_Init+0x38>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <MX_SDMMC1_SD_Init+0x38>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001262:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <MX_SDMMC1_SD_Init+0x38>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <MX_SDMMC1_SD_Init+0x38>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	200001f0 	.word	0x200001f0
 800127c:	40012c00 	.word	0x40012c00

08001280 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001284:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 8001286:	4a15      	ldr	r2, [pc, #84]	@ (80012dc <MX_USART1_UART_Init+0x5c>)
 8001288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800128a:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 80012c4:	f004 faa9 	bl	800581a <HAL_UART_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012ce:	f000 fc7f 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000334 	.word	0x20000334
 80012dc:	40011000 	.word	0x40011000

080012e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012e6:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <MX_DMA_Init+0x48>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001328 <MX_DMA_Init+0x48>)
 80012ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001328 <MX_DMA_Init+0x48>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	203b      	movs	r0, #59	@ 0x3b
 8001304:	f001 f8d1 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001308:	203b      	movs	r0, #59	@ 0x3b
 800130a:	f001 f8ea 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	2045      	movs	r0, #69	@ 0x45
 8001314:	f001 f8c9 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001318:	2045      	movs	r0, #69	@ 0x45
 800131a:	f001 f8e2 	bl	80024e2 <HAL_NVIC_EnableIRQ>

}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800

0800132c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b090      	sub	sp, #64	@ 0x40
 8001330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001342:	4bad      	ldr	r3, [pc, #692]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4aac      	ldr	r2, [pc, #688]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001348:	f043 0310 	orr.w	r3, r3, #16
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4baa      	ldr	r3, [pc, #680]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800135a:	4ba7      	ldr	r3, [pc, #668]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4aa6      	ldr	r2, [pc, #664]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4ba4      	ldr	r3, [pc, #656]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	4ba1      	ldr	r3, [pc, #644]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4aa0      	ldr	r2, [pc, #640]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b9e      	ldr	r3, [pc, #632]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	623b      	str	r3, [r7, #32]
 8001388:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138a:	4b9b      	ldr	r3, [pc, #620]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a9a      	ldr	r2, [pc, #616]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b98      	ldr	r3, [pc, #608]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a2:	4b95      	ldr	r3, [pc, #596]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a94      	ldr	r2, [pc, #592]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b92      	ldr	r3, [pc, #584]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	4b8f      	ldr	r3, [pc, #572]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a8e      	ldr	r2, [pc, #568]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b8c      	ldr	r3, [pc, #560]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013d2:	4b89      	ldr	r3, [pc, #548]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a88      	ldr	r2, [pc, #544]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 80013d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b86      	ldr	r3, [pc, #536]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80013ea:	4b83      	ldr	r3, [pc, #524]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a82      	ldr	r2, [pc, #520]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 80013f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b80      	ldr	r3, [pc, #512]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001402:	4b7d      	ldr	r3, [pc, #500]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a7c      	ldr	r2, [pc, #496]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001408:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b7a      	ldr	r3, [pc, #488]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800141a:	4b77      	ldr	r3, [pc, #476]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a76      	ldr	r2, [pc, #472]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001420:	f043 0320 	orr.w	r3, r3, #32
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b74      	ldr	r3, [pc, #464]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001432:	4b71      	ldr	r3, [pc, #452]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a70      	ldr	r2, [pc, #448]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b6e      	ldr	r3, [pc, #440]	@ (80015f8 <MX_GPIO_Init+0x2cc>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	2120      	movs	r1, #32
 800144e:	486b      	ldr	r0, [pc, #428]	@ (80015fc <MX_GPIO_Init+0x2d0>)
 8001450:	f001 fdcc 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f241 010c 	movw	r1, #4108	@ 0x100c
 800145a:	4869      	ldr	r0, [pc, #420]	@ (8001600 <MX_GPIO_Init+0x2d4>)
 800145c:	f001 fdc6 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	2108      	movs	r1, #8
 8001464:	4867      	ldr	r0, [pc, #412]	@ (8001604 <MX_GPIO_Init+0x2d8>)
 8001466:	f001 fdc1 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001470:	4865      	ldr	r0, [pc, #404]	@ (8001608 <MX_GPIO_Init+0x2dc>)
 8001472:	f001 fdbb 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	21c8      	movs	r1, #200	@ 0xc8
 800147a:	4864      	ldr	r0, [pc, #400]	@ (800160c <MX_GPIO_Init+0x2e0>)
 800147c:	f001 fdb6 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001480:	2310      	movs	r3, #16
 8001482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001490:	230e      	movs	r3, #14
 8001492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001498:	4619      	mov	r1, r3
 800149a:	485d      	ldr	r0, [pc, #372]	@ (8001610 <MX_GPIO_Init+0x2e4>)
 800149c:	f001 fbe2 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80014a0:	2308      	movs	r3, #8
 80014a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b0:	4619      	mov	r1, r3
 80014b2:	4857      	ldr	r0, [pc, #348]	@ (8001610 <MX_GPIO_Init+0x2e4>)
 80014b4:	f001 fbd6 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80014b8:	2304      	movs	r3, #4
 80014ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80014c8:	2309      	movs	r3, #9
 80014ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014d0:	4619      	mov	r1, r3
 80014d2:	484f      	ldr	r0, [pc, #316]	@ (8001610 <MX_GPIO_Init+0x2e4>)
 80014d4:	f001 fbc6 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80014d8:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ea:	230b      	movs	r3, #11
 80014ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014f2:	4619      	mov	r1, r3
 80014f4:	4845      	ldr	r0, [pc, #276]	@ (800160c <MX_GPIO_Init+0x2e0>)
 80014f6:	f001 fbb5 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80014fa:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80014fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800150c:	230c      	movs	r3, #12
 800150e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001510:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001514:	4619      	mov	r1, r3
 8001516:	483e      	ldr	r0, [pc, #248]	@ (8001610 <MX_GPIO_Init+0x2e4>)
 8001518:	f001 fba4 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800151c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001522:	2312      	movs	r3, #18
 8001524:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800152e:	2304      	movs	r3, #4
 8001530:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001532:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001536:	4619      	mov	r1, r3
 8001538:	4836      	ldr	r0, [pc, #216]	@ (8001614 <MX_GPIO_Init+0x2e8>)
 800153a:	f001 fb93 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800153e:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001550:	230a      	movs	r3, #10
 8001552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001558:	4619      	mov	r1, r3
 800155a:	482e      	ldr	r0, [pc, #184]	@ (8001614 <MX_GPIO_Init+0x2e8>)
 800155c:	f001 fb82 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001560:	2310      	movs	r3, #16
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001570:	2302      	movs	r3, #2
 8001572:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001578:	4619      	mov	r1, r3
 800157a:	4826      	ldr	r0, [pc, #152]	@ (8001614 <MX_GPIO_Init+0x2e8>)
 800157c:	f001 fb72 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001580:	2380      	movs	r3, #128	@ 0x80
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001590:	2308      	movs	r3, #8
 8001592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001598:	4619      	mov	r1, r3
 800159a:	4818      	ldr	r0, [pc, #96]	@ (80015fc <MX_GPIO_Init+0x2d0>)
 800159c:	f001 fb62 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80015a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015b2:	2301      	movs	r3, #1
 80015b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015ba:	4619      	mov	r1, r3
 80015bc:	4816      	ldr	r0, [pc, #88]	@ (8001618 <MX_GPIO_Init+0x2ec>)
 80015be:	f001 fb51 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80015c2:	2360      	movs	r3, #96	@ 0x60
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015d2:	230d      	movs	r3, #13
 80015d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015da:	4619      	mov	r1, r3
 80015dc:	480c      	ldr	r0, [pc, #48]	@ (8001610 <MX_GPIO_Init+0x2e4>)
 80015de:	f001 fb41 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80015e2:	2340      	movs	r3, #64	@ 0x40
 80015e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015f2:	230a      	movs	r3, #10
 80015f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015f6:	e011      	b.n	800161c <MX_GPIO_Init+0x2f0>
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	40022000 	.word	0x40022000
 8001604:	40022800 	.word	0x40022800
 8001608:	40021c00 	.word	0x40021c00
 800160c:	40021800 	.word	0x40021800
 8001610:	40021000 	.word	0x40021000
 8001614:	40020400 	.word	0x40020400
 8001618:	40020000 	.word	0x40020000
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001620:	4619      	mov	r1, r3
 8001622:	48bd      	ldr	r0, [pc, #756]	@ (8001918 <MX_GPIO_Init+0x5ec>)
 8001624:	f001 fb1e 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001628:	f248 1333 	movw	r3, #33075	@ 0x8133
 800162c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800163a:	230c      	movs	r3, #12
 800163c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800163e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001642:	4619      	mov	r1, r3
 8001644:	48b5      	ldr	r0, [pc, #724]	@ (800191c <MX_GPIO_Init+0x5f0>)
 8001646:	f001 fb0d 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800164a:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800165c:	230e      	movs	r3, #14
 800165e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001660:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001664:	4619      	mov	r1, r3
 8001666:	48ae      	ldr	r0, [pc, #696]	@ (8001920 <MX_GPIO_Init+0x5f4>)
 8001668:	f001 fafc 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800166c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800167e:	4619      	mov	r1, r3
 8001680:	48a7      	ldr	r0, [pc, #668]	@ (8001920 <MX_GPIO_Init+0x5f4>)
 8001682:	f001 faef 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001686:	2340      	movs	r3, #64	@ 0x40
 8001688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800168a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800168e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001698:	4619      	mov	r1, r3
 800169a:	48a2      	ldr	r0, [pc, #648]	@ (8001924 <MX_GPIO_Init+0x5f8>)
 800169c:	f001 fae2 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80016a0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80016a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016b2:	230c      	movs	r3, #12
 80016b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016ba:	4619      	mov	r1, r3
 80016bc:	4899      	ldr	r0, [pc, #612]	@ (8001924 <MX_GPIO_Init+0x5f8>)
 80016be:	f001 fad1 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80016c2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016d4:	230a      	movs	r3, #10
 80016d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016dc:	4619      	mov	r1, r3
 80016de:	4892      	ldr	r0, [pc, #584]	@ (8001928 <MX_GPIO_Init+0x5fc>)
 80016e0:	f001 fac0 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80016e4:	23f0      	movs	r3, #240	@ 0xf0
 80016e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80016f4:	230a      	movs	r3, #10
 80016f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016fc:	4619      	mov	r1, r3
 80016fe:	488b      	ldr	r0, [pc, #556]	@ (800192c <MX_GPIO_Init+0x600>)
 8001700:	f001 fab0 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001704:	23f7      	movs	r3, #247	@ 0xf7
 8001706:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001714:	230e      	movs	r3, #14
 8001716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001718:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800171c:	4619      	mov	r1, r3
 800171e:	4884      	ldr	r0, [pc, #528]	@ (8001930 <MX_GPIO_Init+0x604>)
 8001720:	f001 faa0 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001736:	2309      	movs	r3, #9
 8001738:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800173e:	4619      	mov	r1, r3
 8001740:	4876      	ldr	r0, [pc, #472]	@ (800191c <MX_GPIO_Init+0x5f0>)
 8001742:	f001 fa8f 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001758:	230a      	movs	r3, #10
 800175a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001760:	4619      	mov	r1, r3
 8001762:	486e      	ldr	r0, [pc, #440]	@ (800191c <MX_GPIO_Init+0x5f0>)
 8001764:	f001 fa7e 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001768:	2320      	movs	r3, #32
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800177c:	4619      	mov	r1, r3
 800177e:	4869      	ldr	r0, [pc, #420]	@ (8001924 <MX_GPIO_Init+0x5f8>)
 8001780:	f001 fa70 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001784:	2308      	movs	r3, #8
 8001786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001794:	230d      	movs	r3, #13
 8001796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800179c:	4619      	mov	r1, r3
 800179e:	4861      	ldr	r0, [pc, #388]	@ (8001924 <MX_GPIO_Init+0x5f8>)
 80017a0:	f001 fa60 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80017a4:	f241 030c 	movw	r3, #4108	@ 0x100c
 80017a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017aa:	2301      	movs	r3, #1
 80017ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017ba:	4619      	mov	r1, r3
 80017bc:	485b      	ldr	r0, [pc, #364]	@ (800192c <MX_GPIO_Init+0x600>)
 80017be:	f001 fa51 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80017c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017d4:	4619      	mov	r1, r3
 80017d6:	4857      	ldr	r0, [pc, #348]	@ (8001934 <MX_GPIO_Init+0x608>)
 80017d8:	f001 fa44 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80017dc:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80017e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017ee:	230c      	movs	r3, #12
 80017f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017f6:	4619      	mov	r1, r3
 80017f8:	484f      	ldr	r0, [pc, #316]	@ (8001938 <MX_GPIO_Init+0x60c>)
 80017fa:	f001 fa33 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80017fe:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001810:	230e      	movs	r3, #14
 8001812:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001814:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001818:	4619      	mov	r1, r3
 800181a:	4844      	ldr	r0, [pc, #272]	@ (800192c <MX_GPIO_Init+0x600>)
 800181c:	f001 fa22 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001820:	2308      	movs	r3, #8
 8001822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001830:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001834:	4619      	mov	r1, r3
 8001836:	483e      	ldr	r0, [pc, #248]	@ (8001930 <MX_GPIO_Init+0x604>)
 8001838:	f001 fa14 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800183c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800184e:	230d      	movs	r3, #13
 8001850:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001856:	4619      	mov	r1, r3
 8001858:	4830      	ldr	r0, [pc, #192]	@ (800191c <MX_GPIO_Init+0x5f0>)
 800185a:	f001 fa03 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800185e:	2310      	movs	r3, #16
 8001860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001862:	2300      	movs	r3, #0
 8001864:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800186e:	4619      	mov	r1, r3
 8001870:	482c      	ldr	r0, [pc, #176]	@ (8001924 <MX_GPIO_Init+0x5f8>)
 8001872:	f001 f9f7 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001876:	f248 0304 	movw	r3, #32772	@ 0x8004
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187c:	2300      	movs	r3, #0
 800187e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001884:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001888:	4619      	mov	r1, r3
 800188a:	482c      	ldr	r0, [pc, #176]	@ (800193c <MX_GPIO_Init+0x610>)
 800188c:	f001 f9ea 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001890:	2302      	movs	r3, #2
 8001892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018a0:	2305      	movs	r3, #5
 80018a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018a8:	4619      	mov	r1, r3
 80018aa:	4820      	ldr	r0, [pc, #128]	@ (800192c <MX_GPIO_Init+0x600>)
 80018ac:	f001 f9da 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80018b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018c6:	4619      	mov	r1, r3
 80018c8:	481c      	ldr	r0, [pc, #112]	@ (800193c <MX_GPIO_Init+0x610>)
 80018ca:	f001 f9cb 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80018ce:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80018d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80018e0:	230d      	movs	r3, #13
 80018e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018e8:	4619      	mov	r1, r3
 80018ea:	4814      	ldr	r0, [pc, #80]	@ (800193c <MX_GPIO_Init+0x610>)
 80018ec:	f001 f9ba 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80018f0:	2301      	movs	r3, #1
 80018f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001900:	2302      	movs	r3, #2
 8001902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001908:	4619      	mov	r1, r3
 800190a:	4808      	ldr	r0, [pc, #32]	@ (800192c <MX_GPIO_Init+0x600>)
 800190c:	f001 f9aa 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001910:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001914:	e014      	b.n	8001940 <MX_GPIO_Init+0x614>
 8001916:	bf00      	nop
 8001918:	40020400 	.word	0x40020400
 800191c:	40021800 	.word	0x40021800
 8001920:	40022400 	.word	0x40022400
 8001924:	40020c00 	.word	0x40020c00
 8001928:	40020000 	.word	0x40020000
 800192c:	40022000 	.word	0x40022000
 8001930:	40022800 	.word	0x40022800
 8001934:	40020800 	.word	0x40020800
 8001938:	40021400 	.word	0x40021400
 800193c:	40021c00 	.word	0x40021c00
 8001940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800194e:	2301      	movs	r3, #1
 8001950:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001956:	4619      	mov	r1, r3
 8001958:	4895      	ldr	r0, [pc, #596]	@ (8001bb0 <MX_GPIO_Init+0x884>)
 800195a:	f001 f983 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800195e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001964:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001968:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001972:	4619      	mov	r1, r3
 8001974:	488f      	ldr	r0, [pc, #572]	@ (8001bb4 <MX_GPIO_Init+0x888>)
 8001976:	f001 f975 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800197a:	23c0      	movs	r3, #192	@ 0xc0
 800197c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800198a:	2308      	movs	r3, #8
 800198c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001992:	4619      	mov	r1, r3
 8001994:	4888      	ldr	r0, [pc, #544]	@ (8001bb8 <MX_GPIO_Init+0x88c>)
 8001996:	f001 f965 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800199a:	2310      	movs	r3, #16
 800199c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019aa:	230a      	movs	r3, #10
 80019ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019b2:	4619      	mov	r1, r3
 80019b4:	4881      	ldr	r0, [pc, #516]	@ (8001bbc <MX_GPIO_Init+0x890>)
 80019b6:	f001 f955 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80019ba:	2328      	movs	r3, #40	@ 0x28
 80019bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019ca:	230c      	movs	r3, #12
 80019cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019d2:	4619      	mov	r1, r3
 80019d4:	4879      	ldr	r0, [pc, #484]	@ (8001bbc <MX_GPIO_Init+0x890>)
 80019d6:	f001 f945 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80019da:	23c8      	movs	r3, #200	@ 0xc8
 80019dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ee:	4619      	mov	r1, r3
 80019f0:	4873      	ldr	r0, [pc, #460]	@ (8001bc0 <MX_GPIO_Init+0x894>)
 80019f2:	f001 f937 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80019f6:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80019fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fc:	2303      	movs	r3, #3
 80019fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a08:	4619      	mov	r1, r3
 8001a0a:	486e      	ldr	r0, [pc, #440]	@ (8001bc4 <MX_GPIO_Init+0x898>)
 8001a0c:	f001 f92a 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001a10:	2308      	movs	r3, #8
 8001a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a20:	230c      	movs	r3, #12
 8001a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4863      	ldr	r0, [pc, #396]	@ (8001bb8 <MX_GPIO_Init+0x88c>)
 8001a2c:	f001 f91a 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001a30:	2305      	movs	r3, #5
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a40:	230a      	movs	r3, #10
 8001a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	485b      	ldr	r0, [pc, #364]	@ (8001bb8 <MX_GPIO_Init+0x88c>)
 8001a4c:	f001 f90a 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001a50:	2332      	movs	r3, #50	@ 0x32
 8001a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a60:	230b      	movs	r3, #11
 8001a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4853      	ldr	r0, [pc, #332]	@ (8001bb8 <MX_GPIO_Init+0x88c>)
 8001a6c:	f001 f8fa 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a70:	2304      	movs	r3, #4
 8001a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a80:	2309      	movs	r3, #9
 8001a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a88:	4619      	mov	r1, r3
 8001a8a:	484f      	ldr	r0, [pc, #316]	@ (8001bc8 <MX_GPIO_Init+0x89c>)
 8001a8c:	f001 f8ea 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001a90:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001aa2:	2309      	movs	r3, #9
 8001aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4847      	ldr	r0, [pc, #284]	@ (8001bcc <MX_GPIO_Init+0x8a0>)
 8001aae:	f001 f8d9 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	483e      	ldr	r0, [pc, #248]	@ (8001bc0 <MX_GPIO_Init+0x894>)
 8001ac6:	f001 f8cd 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001aca:	2386      	movs	r3, #134	@ 0x86
 8001acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ada:	230b      	movs	r3, #11
 8001adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4832      	ldr	r0, [pc, #200]	@ (8001bb0 <MX_GPIO_Init+0x884>)
 8001ae6:	f001 f8bd 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001aea:	2301      	movs	r3, #1
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aee:	2303      	movs	r3, #3
 8001af0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001af6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001afa:	4619      	mov	r1, r3
 8001afc:	482c      	ldr	r0, [pc, #176]	@ (8001bb0 <MX_GPIO_Init+0x884>)
 8001afe:	f001 f8b1 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001b02:	2350      	movs	r3, #80	@ 0x50
 8001b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b12:	230d      	movs	r3, #13
 8001b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4824      	ldr	r0, [pc, #144]	@ (8001bb0 <MX_GPIO_Init+0x884>)
 8001b1e:	f001 f8a1 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001b22:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b28:	2312      	movs	r3, #18
 8001b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b34:	2304      	movs	r3, #4
 8001b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	481f      	ldr	r0, [pc, #124]	@ (8001bbc <MX_GPIO_Init+0x890>)
 8001b40:	f001 f890 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001b44:	2328      	movs	r3, #40	@ 0x28
 8001b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b54:	230a      	movs	r3, #10
 8001b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4814      	ldr	r0, [pc, #80]	@ (8001bb0 <MX_GPIO_Init+0x884>)
 8001b60:	f001 f880 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001b64:	2340      	movs	r3, #64	@ 0x40
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001b74:	2309      	movs	r3, #9
 8001b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001b78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480f      	ldr	r0, [pc, #60]	@ (8001bbc <MX_GPIO_Init+0x890>)
 8001b80:	f001 f870 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001b84:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b96:	2305      	movs	r3, #5
 8001b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4809      	ldr	r0, [pc, #36]	@ (8001bc8 <MX_GPIO_Init+0x89c>)
 8001ba2:	f001 f85f 	bl	8002c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ba6:	bf00      	nop
 8001ba8:	3740      	adds	r7, #64	@ 0x40
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40022000 	.word	0x40022000
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	40021c00 	.word	0x40021c00
 8001bc0:	40021800 	.word	0x40021800
 8001bc4:	40021400 	.word	0x40021400
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020c00 	.word	0x40020c00

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler: fatal error, entering infinite loop\r\n");
 8001bd4:	4804      	ldr	r0, [pc, #16]	@ (8001be8 <Error_Handler+0x18>)
 8001bd6:	f008 fbb5 	bl	800a344 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bda:	b672      	cpsid	i
}
 8001bdc:	bf00      	nop
  __disable_irq();
  while (1)
  {
	  HAL_Delay(250);
 8001bde:	20fa      	movs	r0, #250	@ 0xfa
 8001be0:	f000 fb64 	bl	80022ac <HAL_Delay>
 8001be4:	e7fb      	b.n	8001bde <Error_Handler+0xe>
 8001be6:	bf00      	nop
 8001be8:	0800c458 	.word	0x0800c458

08001bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <HAL_MspInit+0x44>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8001c30 <HAL_MspInit+0x44>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <HAL_MspInit+0x44>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <HAL_MspInit+0x44>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	4a08      	ldr	r2, [pc, #32]	@ (8001c30 <HAL_MspInit+0x44>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_MspInit+0x44>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b0ac      	sub	sp, #176	@ 0xb0
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c4c:	f107 0318 	add.w	r3, r7, #24
 8001c50:	2284      	movs	r2, #132	@ 0x84
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f008 fc55 	bl	800a504 <memset>
  if(hsd->Instance==SDMMC1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a74      	ldr	r2, [pc, #464]	@ (8001e30 <HAL_SD_MspInit+0x1fc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	f040 80e0 	bne.w	8001e26 <HAL_SD_MspInit+0x1f2>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001c66:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8001c6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c78:	f107 0318 	add.w	r3, r7, #24
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 feb9 	bl	80039f4 <HAL_RCCEx_PeriphCLKConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001c88:	f7ff ffa2 	bl	8001bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001c8c:	4b69      	ldr	r3, [pc, #420]	@ (8001e34 <HAL_SD_MspInit+0x200>)
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c90:	4a68      	ldr	r2, [pc, #416]	@ (8001e34 <HAL_SD_MspInit+0x200>)
 8001c92:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c96:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c98:	4b66      	ldr	r3, [pc, #408]	@ (8001e34 <HAL_SD_MspInit+0x200>)
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca4:	4b63      	ldr	r3, [pc, #396]	@ (8001e34 <HAL_SD_MspInit+0x200>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca8:	4a62      	ldr	r2, [pc, #392]	@ (8001e34 <HAL_SD_MspInit+0x200>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb0:	4b60      	ldr	r3, [pc, #384]	@ (8001e34 <HAL_SD_MspInit+0x200>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cbc:	4b5d      	ldr	r3, [pc, #372]	@ (8001e34 <HAL_SD_MspInit+0x200>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc0:	4a5c      	ldr	r2, [pc, #368]	@ (8001e34 <HAL_SD_MspInit+0x200>)
 8001cc2:	f043 0308 	orr.w	r3, r3, #8
 8001cc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e34 <HAL_SD_MspInit+0x200>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001cd4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001cd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001cee:	230c      	movs	r3, #12
 8001cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	484f      	ldr	r0, [pc, #316]	@ (8001e38 <HAL_SD_MspInit+0x204>)
 8001cfc:	f000 ffb2 	bl	8002c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001d00:	2304      	movs	r3, #4
 8001d02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d18:	230c      	movs	r3, #12
 8001d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d22:	4619      	mov	r1, r3
 8001d24:	4845      	ldr	r0, [pc, #276]	@ (8001e3c <HAL_SD_MspInit+0x208>)
 8001d26:	f000 ff9d 	bl	8002c64 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001d2a:	4b45      	ldr	r3, [pc, #276]	@ (8001e40 <HAL_SD_MspInit+0x20c>)
 8001d2c:	4a45      	ldr	r2, [pc, #276]	@ (8001e44 <HAL_SD_MspInit+0x210>)
 8001d2e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d30:	4b43      	ldr	r3, [pc, #268]	@ (8001e40 <HAL_SD_MspInit+0x20c>)
 8001d32:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d36:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d38:	4b41      	ldr	r3, [pc, #260]	@ (8001e40 <HAL_SD_MspInit+0x20c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d3e:	4b40      	ldr	r3, [pc, #256]	@ (8001e40 <HAL_SD_MspInit+0x20c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d44:	4b3e      	ldr	r3, [pc, #248]	@ (8001e40 <HAL_SD_MspInit+0x20c>)
 8001d46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d4a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e40 <HAL_SD_MspInit+0x20c>)
 8001d4e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d52:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d54:	4b3a      	ldr	r3, [pc, #232]	@ (8001e40 <HAL_SD_MspInit+0x20c>)
 8001d56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d5a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001d5c:	4b38      	ldr	r3, [pc, #224]	@ (8001e40 <HAL_SD_MspInit+0x20c>)
 8001d5e:	2220      	movs	r2, #32
 8001d60:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d62:	4b37      	ldr	r3, [pc, #220]	@ (8001e40 <HAL_SD_MspInit+0x20c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d68:	4b35      	ldr	r3, [pc, #212]	@ (8001e40 <HAL_SD_MspInit+0x20c>)
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001d6e:	4b34      	ldr	r3, [pc, #208]	@ (8001e40 <HAL_SD_MspInit+0x20c>)
 8001d70:	2203      	movs	r2, #3
 8001d72:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001d74:	4b32      	ldr	r3, [pc, #200]	@ (8001e40 <HAL_SD_MspInit+0x20c>)
 8001d76:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001d7c:	4b30      	ldr	r3, [pc, #192]	@ (8001e40 <HAL_SD_MspInit+0x20c>)
 8001d7e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001d82:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001d84:	482e      	ldr	r0, [pc, #184]	@ (8001e40 <HAL_SD_MspInit+0x20c>)
 8001d86:	f000 fbc7 	bl	8002518 <HAL_DMA_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001d90:	f7ff ff1e 	bl	8001bd0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a2a      	ldr	r2, [pc, #168]	@ (8001e40 <HAL_SD_MspInit+0x20c>)
 8001d98:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d9a:	4a29      	ldr	r2, [pc, #164]	@ (8001e40 <HAL_SD_MspInit+0x20c>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001da0:	4b29      	ldr	r3, [pc, #164]	@ (8001e48 <HAL_SD_MspInit+0x214>)
 8001da2:	4a2a      	ldr	r2, [pc, #168]	@ (8001e4c <HAL_SD_MspInit+0x218>)
 8001da4:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001da6:	4b28      	ldr	r3, [pc, #160]	@ (8001e48 <HAL_SD_MspInit+0x214>)
 8001da8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001dac:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dae:	4b26      	ldr	r3, [pc, #152]	@ (8001e48 <HAL_SD_MspInit+0x214>)
 8001db0:	2240      	movs	r2, #64	@ 0x40
 8001db2:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db4:	4b24      	ldr	r3, [pc, #144]	@ (8001e48 <HAL_SD_MspInit+0x214>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dba:	4b23      	ldr	r3, [pc, #140]	@ (8001e48 <HAL_SD_MspInit+0x214>)
 8001dbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dc0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dc2:	4b21      	ldr	r3, [pc, #132]	@ (8001e48 <HAL_SD_MspInit+0x214>)
 8001dc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dc8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dca:	4b1f      	ldr	r3, [pc, #124]	@ (8001e48 <HAL_SD_MspInit+0x214>)
 8001dcc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dd0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e48 <HAL_SD_MspInit+0x214>)
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <HAL_SD_MspInit+0x214>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001dde:	4b1a      	ldr	r3, [pc, #104]	@ (8001e48 <HAL_SD_MspInit+0x214>)
 8001de0:	2204      	movs	r2, #4
 8001de2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001de4:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <HAL_SD_MspInit+0x214>)
 8001de6:	2203      	movs	r2, #3
 8001de8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001dea:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <HAL_SD_MspInit+0x214>)
 8001dec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001df0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <HAL_SD_MspInit+0x214>)
 8001df4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001df8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001dfa:	4813      	ldr	r0, [pc, #76]	@ (8001e48 <HAL_SD_MspInit+0x214>)
 8001dfc:	f000 fb8c 	bl	8002518 <HAL_DMA_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001e06:	f7ff fee3 	bl	8001bd0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001e48 <HAL_SD_MspInit+0x214>)
 8001e0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e10:	4a0d      	ldr	r2, [pc, #52]	@ (8001e48 <HAL_SD_MspInit+0x214>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2100      	movs	r1, #0
 8001e1a:	2031      	movs	r0, #49	@ 0x31
 8001e1c:	f000 fb45 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001e20:	2031      	movs	r0, #49	@ 0x31
 8001e22:	f000 fb5e 	bl	80024e2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001e26:	bf00      	nop
 8001e28:	37b0      	adds	r7, #176	@ 0xb0
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40012c00 	.word	0x40012c00
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020800 	.word	0x40020800
 8001e3c:	40020c00 	.word	0x40020c00
 8001e40:	20000274 	.word	0x20000274
 8001e44:	40026458 	.word	0x40026458
 8001e48:	200002d4 	.word	0x200002d4
 8001e4c:	400264a0 	.word	0x400264a0

08001e50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b0ac      	sub	sp, #176	@ 0xb0
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e68:	f107 0318 	add.w	r3, r7, #24
 8001e6c:	2284      	movs	r2, #132	@ 0x84
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f008 fb47 	bl	800a504 <memset>
  if(huart->Instance==USART1)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a32      	ldr	r2, [pc, #200]	@ (8001f44 <HAL_UART_MspInit+0xf4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d15c      	bne.n	8001f3a <HAL_UART_MspInit+0xea>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e80:	2340      	movs	r3, #64	@ 0x40
 8001e82:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e84:	2300      	movs	r3, #0
 8001e86:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e88:	f107 0318 	add.w	r3, r7, #24
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f001 fdb1 	bl	80039f4 <HAL_RCCEx_PeriphCLKConfig>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e98:	f7ff fe9a 	bl	8001bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f48 <HAL_UART_MspInit+0xf8>)
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea0:	4a29      	ldr	r2, [pc, #164]	@ (8001f48 <HAL_UART_MspInit+0xf8>)
 8001ea2:	f043 0310 	orr.w	r3, r3, #16
 8001ea6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ea8:	4b27      	ldr	r3, [pc, #156]	@ (8001f48 <HAL_UART_MspInit+0xf8>)
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eac:	f003 0310 	and.w	r3, r3, #16
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb4:	4b24      	ldr	r3, [pc, #144]	@ (8001f48 <HAL_UART_MspInit+0xf8>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb8:	4a23      	ldr	r2, [pc, #140]	@ (8001f48 <HAL_UART_MspInit+0xf8>)
 8001eba:	f043 0302 	orr.w	r3, r3, #2
 8001ebe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec0:	4b21      	ldr	r3, [pc, #132]	@ (8001f48 <HAL_UART_MspInit+0xf8>)
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f48 <HAL_UART_MspInit+0xf8>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f48 <HAL_UART_MspInit+0xf8>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_UART_MspInit+0xf8>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001efc:	2307      	movs	r3, #7
 8001efe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001f02:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f06:	4619      	mov	r1, r3
 8001f08:	4810      	ldr	r0, [pc, #64]	@ (8001f4c <HAL_UART_MspInit+0xfc>)
 8001f0a:	f000 feab 	bl	8002c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001f0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f28:	2307      	movs	r3, #7
 8001f2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001f2e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f32:	4619      	mov	r1, r3
 8001f34:	4806      	ldr	r0, [pc, #24]	@ (8001f50 <HAL_UART_MspInit+0x100>)
 8001f36:	f000 fe95 	bl	8002c64 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f3a:	bf00      	nop
 8001f3c:	37b0      	adds	r7, #176	@ 0xb0
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40011000 	.word	0x40011000
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	40020000 	.word	0x40020000

08001f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <NMI_Handler+0x4>

08001f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <HardFault_Handler+0x4>

08001f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <MemManage_Handler+0x4>

08001f6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <BusFault_Handler+0x4>

08001f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <UsageFault_Handler+0x4>

08001f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001faa:	f000 f95f 	bl	800226c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <SDMMC1_IRQHandler+0x10>)
 8001fba:	f002 fb83 	bl	80046c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200001f0 	.word	0x200001f0

08001fc8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <DMA2_Stream3_IRQHandler+0x10>)
 8001fce:	f000 fbd3 	bl	8002778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000274 	.word	0x20000274

08001fdc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001fe0:	4802      	ldr	r0, [pc, #8]	@ (8001fec <DMA2_Stream6_IRQHandler+0x10>)
 8001fe2:	f000 fbc9 	bl	8002778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200002d4 	.word	0x200002d4

08001ff0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return 1;
 8001ff4:	2301      	movs	r3, #1
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_kill>:

int _kill(int pid, int sig)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800200a:	f008 facd 	bl	800a5a8 <__errno>
 800200e:	4603      	mov	r3, r0
 8002010:	2216      	movs	r2, #22
 8002012:	601a      	str	r2, [r3, #0]
  return -1;
 8002014:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <_exit>:

void _exit (int status)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ffe7 	bl	8002000 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002032:	bf00      	nop
 8002034:	e7fd      	b.n	8002032 <_exit+0x12>

08002036 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	e00a      	b.n	800205e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002048:	f3af 8000 	nop.w
 800204c:	4601      	mov	r1, r0
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	60ba      	str	r2, [r7, #8]
 8002054:	b2ca      	uxtb	r2, r1
 8002056:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3301      	adds	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	429a      	cmp	r2, r3
 8002064:	dbf0      	blt.n	8002048 <_read+0x12>
  }

  return len;
 8002066:	687b      	ldr	r3, [r7, #4]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	e009      	b.n	8002096 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	60ba      	str	r2, [r7, #8]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe ff42 	bl	8000f14 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	3301      	adds	r3, #1
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	429a      	cmp	r2, r3
 800209c:	dbf1      	blt.n	8002082 <_write+0x12>
  }
  return len;
 800209e:	687b      	ldr	r3, [r7, #4]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_close>:

int _close(int file)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020d0:	605a      	str	r2, [r3, #4]
  return 0;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <_isatty>:

int _isatty(int file)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020e8:	2301      	movs	r3, #1
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b085      	sub	sp, #20
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002118:	4a14      	ldr	r2, [pc, #80]	@ (800216c <_sbrk+0x5c>)
 800211a:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <_sbrk+0x60>)
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002124:	4b13      	ldr	r3, [pc, #76]	@ (8002174 <_sbrk+0x64>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <_sbrk+0x64>)
 800212e:	4a12      	ldr	r2, [pc, #72]	@ (8002178 <_sbrk+0x68>)
 8002130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002132:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	429a      	cmp	r2, r3
 800213e:	d207      	bcs.n	8002150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002140:	f008 fa32 	bl	800a5a8 <__errno>
 8002144:	4603      	mov	r3, r0
 8002146:	220c      	movs	r2, #12
 8002148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
 800214e:	e009      	b.n	8002164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002150:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <_sbrk+0x64>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002156:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	4a05      	ldr	r2, [pc, #20]	@ (8002174 <_sbrk+0x64>)
 8002160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002162:	68fb      	ldr	r3, [r7, #12]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20050000 	.word	0x20050000
 8002170:	00000800 	.word	0x00000800
 8002174:	200003bc 	.word	0x200003bc
 8002178:	20000788 	.word	0x20000788

0800217c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002180:	4b06      	ldr	r3, [pc, #24]	@ (800219c <SystemInit+0x20>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002186:	4a05      	ldr	r2, [pc, #20]	@ (800219c <SystemInit+0x20>)
 8002188:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800218c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021a4:	f7ff ffea 	bl	800217c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021a8:	480c      	ldr	r0, [pc, #48]	@ (80021dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021aa:	490d      	ldr	r1, [pc, #52]	@ (80021e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021ac:	4a0d      	ldr	r2, [pc, #52]	@ (80021e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b0:	e002      	b.n	80021b8 <LoopCopyDataInit>

080021b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b6:	3304      	adds	r3, #4

080021b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021bc:	d3f9      	bcc.n	80021b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021be:	4a0a      	ldr	r2, [pc, #40]	@ (80021e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021c0:	4c0a      	ldr	r4, [pc, #40]	@ (80021ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80021c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c4:	e001      	b.n	80021ca <LoopFillZerobss>

080021c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c8:	3204      	adds	r2, #4

080021ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021cc:	d3fb      	bcc.n	80021c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021ce:	f008 f9f1 	bl	800a5b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021d2:	f7fe feb5 	bl	8000f40 <main>
  bx  lr    
 80021d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021d8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80021dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80021e4:	0800c90c 	.word	0x0800c90c
  ldr r2, =_sbss
 80021e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80021ec:	20000784 	.word	0x20000784

080021f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021f0:	e7fe      	b.n	80021f0 <ADC_IRQHandler>

080021f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f6:	2003      	movs	r0, #3
 80021f8:	f000 f94c 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f000 f805 	bl	800220c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002202:	f7ff fcf3 	bl	8001bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002214:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <HAL_InitTick+0x54>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b12      	ldr	r3, [pc, #72]	@ (8002264 <HAL_InitTick+0x58>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	4619      	mov	r1, r3
 800221e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002222:	fbb3 f3f1 	udiv	r3, r3, r1
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f967 	bl	80024fe <HAL_SYSTICK_Config>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e00e      	b.n	8002258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b0f      	cmp	r3, #15
 800223e:	d80a      	bhi.n	8002256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002240:	2200      	movs	r2, #0
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f000 f92f 	bl	80024aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800224c:	4a06      	ldr	r2, [pc, #24]	@ (8002268 <HAL_InitTick+0x5c>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000000 	.word	0x20000000
 8002264:	20000008 	.word	0x20000008
 8002268:	20000004 	.word	0x20000004

0800226c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002270:	4b06      	ldr	r3, [pc, #24]	@ (800228c <HAL_IncTick+0x20>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <HAL_IncTick+0x24>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4413      	add	r3, r2
 800227c:	4a04      	ldr	r2, [pc, #16]	@ (8002290 <HAL_IncTick+0x24>)
 800227e:	6013      	str	r3, [r2, #0]
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000008 	.word	0x20000008
 8002290:	200003c0 	.word	0x200003c0

08002294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return uwTick;
 8002298:	4b03      	ldr	r3, [pc, #12]	@ (80022a8 <HAL_GetTick+0x14>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	200003c0 	.word	0x200003c0

080022ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff ffee 	bl	8002294 <HAL_GetTick>
 80022b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d005      	beq.n	80022d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c6:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <HAL_Delay+0x44>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022d2:	bf00      	nop
 80022d4:	f7ff ffde 	bl	8002294 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d8f7      	bhi.n	80022d4 <HAL_Delay+0x28>
  {
  }
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000008 	.word	0x20000008

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <__NVIC_SetPriorityGrouping+0x40>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800231c:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 800231e:	4313      	orrs	r3, r2
 8002320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002322:	4a04      	ldr	r2, [pc, #16]	@ (8002334 <__NVIC_SetPriorityGrouping+0x40>)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	60d3      	str	r3, [r2, #12]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00
 8002338:	05fa0000 	.word	0x05fa0000

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	@ (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	@ (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	@ (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	@ 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	@ 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002460:	d301      	bcc.n	8002466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002462:	2301      	movs	r3, #1
 8002464:	e00f      	b.n	8002486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002466:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <SysTick_Config+0x40>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246e:	210f      	movs	r1, #15
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f7ff ff8e 	bl	8002394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <SysTick_Config+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	@ (8002490 <SysTick_Config+0x40>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff29 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024bc:	f7ff ff3e 	bl	800233c <__NVIC_GetPriorityGrouping>
 80024c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	6978      	ldr	r0, [r7, #20]
 80024c8:	f7ff ff8e 	bl	80023e8 <NVIC_EncodePriority>
 80024cc:	4602      	mov	r2, r0
 80024ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff5d 	bl	8002394 <__NVIC_SetPriority>
}
 80024da:	bf00      	nop
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff31 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffa2 	bl	8002450 <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff feb6 	bl	8002294 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e099      	b.n	8002668 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002554:	e00f      	b.n	8002576 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002556:	f7ff fe9d 	bl	8002294 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b05      	cmp	r3, #5
 8002562:	d908      	bls.n	8002576 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2203      	movs	r2, #3
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e078      	b.n	8002668 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1e8      	bne.n	8002556 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4b38      	ldr	r3, [pc, #224]	@ (8002670 <HAL_DMA_Init+0x158>)
 8002590:	4013      	ands	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d107      	bne.n	80025e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d8:	4313      	orrs	r3, r2
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f023 0307 	bic.w	r3, r3, #7
 80025f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	2b04      	cmp	r3, #4
 8002608:	d117      	bne.n	800263a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 faa5 	bl	8002b6c <DMA_CheckFifoParam>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2240      	movs	r2, #64	@ 0x40
 800262c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002636:	2301      	movs	r3, #1
 8002638:	e016      	b.n	8002668 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fa5c 	bl	8002b00 <DMA_CalcBaseAndBitshift>
 8002648:	4603      	mov	r3, r0
 800264a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002650:	223f      	movs	r2, #63	@ 0x3f
 8002652:	409a      	lsls	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	f010803f 	.word	0xf010803f

08002674 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_DMA_Start_IT+0x26>
 8002696:	2302      	movs	r3, #2
 8002698:	e048      	b.n	800272c <HAL_DMA_Start_IT+0xb8>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d137      	bne.n	800271e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2202      	movs	r2, #2
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f9ee 	bl	8002aa4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026cc:	223f      	movs	r2, #63	@ 0x3f
 80026ce:	409a      	lsls	r2, r3
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0216 	orr.w	r2, r2, #22
 80026e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026f2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0208 	orr.w	r2, r2, #8
 800270a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e005      	b.n	800272a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002726:	2302      	movs	r3, #2
 8002728:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800272a:	7dfb      	ldrb	r3, [r7, #23]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d004      	beq.n	8002752 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2280      	movs	r2, #128	@ 0x80
 800274c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e00c      	b.n	800276c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2205      	movs	r2, #5
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002784:	4b8e      	ldr	r3, [pc, #568]	@ (80029c0 <HAL_DMA_IRQHandler+0x248>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a8e      	ldr	r2, [pc, #568]	@ (80029c4 <HAL_DMA_IRQHandler+0x24c>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0a9b      	lsrs	r3, r3, #10
 8002790:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002796:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a2:	2208      	movs	r2, #8
 80027a4:	409a      	lsls	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01a      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0204 	bic.w	r2, r2, #4
 80027ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d0:	2208      	movs	r2, #8
 80027d2:	409a      	lsls	r2, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e8:	2201      	movs	r2, #1
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d012      	beq.n	800281a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002806:	2201      	movs	r2, #1
 8002808:	409a      	lsls	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002812:	f043 0202 	orr.w	r2, r3, #2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281e:	2204      	movs	r2, #4
 8002820:	409a      	lsls	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d012      	beq.n	8002850 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283c:	2204      	movs	r2, #4
 800283e:	409a      	lsls	r2, r3
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002848:	f043 0204 	orr.w	r2, r3, #4
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002854:	2210      	movs	r2, #16
 8002856:	409a      	lsls	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d043      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d03c      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002872:	2210      	movs	r2, #16
 8002874:	409a      	lsls	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d018      	beq.n	80028ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d108      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d024      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	4798      	blx	r3
 80028a6:	e01f      	b.n	80028e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01b      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4798      	blx	r3
 80028b8:	e016      	b.n	80028e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0208 	bic.w	r2, r2, #8
 80028d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ec:	2220      	movs	r2, #32
 80028ee:	409a      	lsls	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 808f 	beq.w	8002a18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 8087 	beq.w	8002a18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290e:	2220      	movs	r2, #32
 8002910:	409a      	lsls	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b05      	cmp	r3, #5
 8002920:	d136      	bne.n	8002990 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0216 	bic.w	r2, r2, #22
 8002930:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002940:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d103      	bne.n	8002952 <HAL_DMA_IRQHandler+0x1da>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0208 	bic.w	r2, r2, #8
 8002960:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002966:	223f      	movs	r2, #63	@ 0x3f
 8002968:	409a      	lsls	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002982:	2b00      	cmp	r3, #0
 8002984:	d07e      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
        }
        return;
 800298e:	e079      	b.n	8002a84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01d      	beq.n	80029da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10d      	bne.n	80029c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d031      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
 80029bc:	e02c      	b.n	8002a18 <HAL_DMA_IRQHandler+0x2a0>
 80029be:	bf00      	nop
 80029c0:	20000000 	.word	0x20000000
 80029c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d023      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
 80029d8:	e01e      	b.n	8002a18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10f      	bne.n	8002a08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0210 	bic.w	r2, r2, #16
 80029f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d032      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d022      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2205      	movs	r2, #5
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	3301      	adds	r3, #1
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d307      	bcc.n	8002a60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f2      	bne.n	8002a44 <HAL_DMA_IRQHandler+0x2cc>
 8002a5e:	e000      	b.n	8002a62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
 8002a82:	e000      	b.n	8002a86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a84:	bf00      	nop
    }
  }
}
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ac0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b40      	cmp	r3, #64	@ 0x40
 8002ad0:	d108      	bne.n	8002ae4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ae2:	e007      	b.n	8002af4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	60da      	str	r2, [r3, #12]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	3b10      	subs	r3, #16
 8002b10:	4a13      	ldr	r2, [pc, #76]	@ (8002b60 <DMA_CalcBaseAndBitshift+0x60>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b1a:	4a12      	ldr	r2, [pc, #72]	@ (8002b64 <DMA_CalcBaseAndBitshift+0x64>)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d908      	bls.n	8002b40 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <DMA_CalcBaseAndBitshift+0x68>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	1d1a      	adds	r2, r3, #4
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b3e:	e006      	b.n	8002b4e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b08      	ldr	r3, [pc, #32]	@ (8002b68 <DMA_CalcBaseAndBitshift+0x68>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	aaaaaaab 	.word	0xaaaaaaab
 8002b64:	0800c4e8 	.word	0x0800c4e8
 8002b68:	fffffc00 	.word	0xfffffc00

08002b6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d11f      	bne.n	8002bc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d856      	bhi.n	8002c3a <DMA_CheckFifoParam+0xce>
 8002b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b94 <DMA_CheckFifoParam+0x28>)
 8002b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b92:	bf00      	nop
 8002b94:	08002ba5 	.word	0x08002ba5
 8002b98:	08002bb7 	.word	0x08002bb7
 8002b9c:	08002ba5 	.word	0x08002ba5
 8002ba0:	08002c3b 	.word	0x08002c3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d046      	beq.n	8002c3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb4:	e043      	b.n	8002c3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bbe:	d140      	bne.n	8002c42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc4:	e03d      	b.n	8002c42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bce:	d121      	bne.n	8002c14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d837      	bhi.n	8002c46 <DMA_CheckFifoParam+0xda>
 8002bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bdc <DMA_CheckFifoParam+0x70>)
 8002bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bdc:	08002bed 	.word	0x08002bed
 8002be0:	08002bf3 	.word	0x08002bf3
 8002be4:	08002bed 	.word	0x08002bed
 8002be8:	08002c05 	.word	0x08002c05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf0:	e030      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d025      	beq.n	8002c4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c02:	e022      	b.n	8002c4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c0c:	d11f      	bne.n	8002c4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c12:	e01c      	b.n	8002c4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d903      	bls.n	8002c22 <DMA_CheckFifoParam+0xb6>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d003      	beq.n	8002c28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c20:	e018      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
      break;
 8002c26:	e015      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00e      	beq.n	8002c52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      break;
 8002c38:	e00b      	b.n	8002c52 <DMA_CheckFifoParam+0xe6>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e00a      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e008      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c42:	bf00      	nop
 8002c44:	e006      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c46:	bf00      	nop
 8002c48:	e004      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e002      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c4e:	bf00      	nop
 8002c50:	e000      	b.n	8002c54 <DMA_CheckFifoParam+0xe8>
      break;
 8002c52:	bf00      	nop
    }
  } 
  
  return status; 
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop

08002c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b089      	sub	sp, #36	@ 0x24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	e175      	b.n	8002f70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c84:	2201      	movs	r2, #1
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f040 8164 	bne.w	8002f6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d005      	beq.n	8002cba <HAL_GPIO_Init+0x56>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d130      	bne.n	8002d1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 0201 	and.w	r2, r3, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d017      	beq.n	8002d58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2203      	movs	r2, #3
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d123      	bne.n	8002dac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	08da      	lsrs	r2, r3, #3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3208      	adds	r2, #8
 8002d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	220f      	movs	r2, #15
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	08da      	lsrs	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3208      	adds	r2, #8
 8002da6:	69b9      	ldr	r1, [r7, #24]
 8002da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	2203      	movs	r2, #3
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0203 	and.w	r2, r3, #3
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80be 	beq.w	8002f6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dee:	4b66      	ldr	r3, [pc, #408]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	4a65      	ldr	r2, [pc, #404]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dfa:	4b63      	ldr	r3, [pc, #396]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e06:	4a61      	ldr	r2, [pc, #388]	@ (8002f8c <HAL_GPIO_Init+0x328>)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a58      	ldr	r2, [pc, #352]	@ (8002f90 <HAL_GPIO_Init+0x32c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d037      	beq.n	8002ea2 <HAL_GPIO_Init+0x23e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a57      	ldr	r2, [pc, #348]	@ (8002f94 <HAL_GPIO_Init+0x330>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d031      	beq.n	8002e9e <HAL_GPIO_Init+0x23a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a56      	ldr	r2, [pc, #344]	@ (8002f98 <HAL_GPIO_Init+0x334>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d02b      	beq.n	8002e9a <HAL_GPIO_Init+0x236>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a55      	ldr	r2, [pc, #340]	@ (8002f9c <HAL_GPIO_Init+0x338>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d025      	beq.n	8002e96 <HAL_GPIO_Init+0x232>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a54      	ldr	r2, [pc, #336]	@ (8002fa0 <HAL_GPIO_Init+0x33c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d01f      	beq.n	8002e92 <HAL_GPIO_Init+0x22e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a53      	ldr	r2, [pc, #332]	@ (8002fa4 <HAL_GPIO_Init+0x340>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d019      	beq.n	8002e8e <HAL_GPIO_Init+0x22a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a52      	ldr	r2, [pc, #328]	@ (8002fa8 <HAL_GPIO_Init+0x344>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d013      	beq.n	8002e8a <HAL_GPIO_Init+0x226>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a51      	ldr	r2, [pc, #324]	@ (8002fac <HAL_GPIO_Init+0x348>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00d      	beq.n	8002e86 <HAL_GPIO_Init+0x222>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a50      	ldr	r2, [pc, #320]	@ (8002fb0 <HAL_GPIO_Init+0x34c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <HAL_GPIO_Init+0x21e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a4f      	ldr	r2, [pc, #316]	@ (8002fb4 <HAL_GPIO_Init+0x350>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d101      	bne.n	8002e7e <HAL_GPIO_Init+0x21a>
 8002e7a:	2309      	movs	r3, #9
 8002e7c:	e012      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e7e:	230a      	movs	r3, #10
 8002e80:	e010      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e82:	2308      	movs	r3, #8
 8002e84:	e00e      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e86:	2307      	movs	r3, #7
 8002e88:	e00c      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e8a:	2306      	movs	r3, #6
 8002e8c:	e00a      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e8e:	2305      	movs	r3, #5
 8002e90:	e008      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e92:	2304      	movs	r3, #4
 8002e94:	e006      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e96:	2303      	movs	r3, #3
 8002e98:	e004      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e002      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <HAL_GPIO_Init+0x240>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	f002 0203 	and.w	r2, r2, #3
 8002eaa:	0092      	lsls	r2, r2, #2
 8002eac:	4093      	lsls	r3, r2
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002eb4:	4935      	ldr	r1, [pc, #212]	@ (8002f8c <HAL_GPIO_Init+0x328>)
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	089b      	lsrs	r3, r3, #2
 8002eba:	3302      	adds	r3, #2
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb8 <HAL_GPIO_Init+0x354>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ee6:	4a34      	ldr	r2, [pc, #208]	@ (8002fb8 <HAL_GPIO_Init+0x354>)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eec:	4b32      	ldr	r3, [pc, #200]	@ (8002fb8 <HAL_GPIO_Init+0x354>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f10:	4a29      	ldr	r2, [pc, #164]	@ (8002fb8 <HAL_GPIO_Init+0x354>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f16:	4b28      	ldr	r3, [pc, #160]	@ (8002fb8 <HAL_GPIO_Init+0x354>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb8 <HAL_GPIO_Init+0x354>)
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f40:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb8 <HAL_GPIO_Init+0x354>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f64:	4a14      	ldr	r2, [pc, #80]	@ (8002fb8 <HAL_GPIO_Init+0x354>)
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	61fb      	str	r3, [r7, #28]
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	2b0f      	cmp	r3, #15
 8002f74:	f67f ae86 	bls.w	8002c84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f78:	bf00      	nop
 8002f7a:	bf00      	nop
 8002f7c:	3724      	adds	r7, #36	@ 0x24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40013800 	.word	0x40013800
 8002f90:	40020000 	.word	0x40020000
 8002f94:	40020400 	.word	0x40020400
 8002f98:	40020800 	.word	0x40020800
 8002f9c:	40020c00 	.word	0x40020c00
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40021400 	.word	0x40021400
 8002fa8:	40021800 	.word	0x40021800
 8002fac:	40021c00 	.word	0x40021c00
 8002fb0:	40022000 	.word	0x40022000
 8002fb4:	40022400 	.word	0x40022400
 8002fb8:	40013c00 	.word	0x40013c00

08002fbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	887b      	ldrh	r3, [r7, #2]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
 8002fd8:	e001      	b.n	8002fde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	807b      	strh	r3, [r7, #2]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ffc:	787b      	ldrb	r3, [r7, #1]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003002:	887a      	ldrh	r2, [r7, #2]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003008:	e003      	b.n	8003012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	041a      	lsls	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	619a      	str	r2, [r3, #24]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003024:	4b05      	ldr	r3, [pc, #20]	@ (800303c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a04      	ldr	r2, [pc, #16]	@ (800303c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800302a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800302e:	6013      	str	r3, [r2, #0]
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40007000 	.word	0x40007000

08003040 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800304a:	4b23      	ldr	r3, [pc, #140]	@ (80030d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	4a22      	ldr	r2, [pc, #136]	@ (80030d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003054:	6413      	str	r3, [r2, #64]	@ 0x40
 8003056:	4b20      	ldr	r3, [pc, #128]	@ (80030d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003062:	4b1e      	ldr	r3, [pc, #120]	@ (80030dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1d      	ldr	r2, [pc, #116]	@ (80030dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800306c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800306e:	f7ff f911 	bl	8002294 <HAL_GetTick>
 8003072:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003074:	e009      	b.n	800308a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003076:	f7ff f90d 	bl	8002294 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003084:	d901      	bls.n	800308a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e022      	b.n	80030d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800308a:	4b14      	ldr	r3, [pc, #80]	@ (80030dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003092:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003096:	d1ee      	bne.n	8003076 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003098:	4b10      	ldr	r3, [pc, #64]	@ (80030dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a0f      	ldr	r2, [pc, #60]	@ (80030dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800309e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030a4:	f7ff f8f6 	bl	8002294 <HAL_GetTick>
 80030a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030aa:	e009      	b.n	80030c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030ac:	f7ff f8f2 	bl	8002294 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030ba:	d901      	bls.n	80030c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e007      	b.n	80030d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030c0:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030cc:	d1ee      	bne.n	80030ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40007000 	.word	0x40007000

080030e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80030e8:	2300      	movs	r3, #0
 80030ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e291      	b.n	800361a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8087 	beq.w	8003212 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003104:	4b96      	ldr	r3, [pc, #600]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b04      	cmp	r3, #4
 800310e:	d00c      	beq.n	800312a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003110:	4b93      	ldr	r3, [pc, #588]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	2b08      	cmp	r3, #8
 800311a:	d112      	bne.n	8003142 <HAL_RCC_OscConfig+0x62>
 800311c:	4b90      	ldr	r3, [pc, #576]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003124:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003128:	d10b      	bne.n	8003142 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312a:	4b8d      	ldr	r3, [pc, #564]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d06c      	beq.n	8003210 <HAL_RCC_OscConfig+0x130>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d168      	bne.n	8003210 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e26b      	b.n	800361a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800314a:	d106      	bne.n	800315a <HAL_RCC_OscConfig+0x7a>
 800314c:	4b84      	ldr	r3, [pc, #528]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a83      	ldr	r2, [pc, #524]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 8003152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	e02e      	b.n	80031b8 <HAL_RCC_OscConfig+0xd8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0x9c>
 8003162:	4b7f      	ldr	r3, [pc, #508]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a7e      	ldr	r2, [pc, #504]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 8003168:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	4b7c      	ldr	r3, [pc, #496]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a7b      	ldr	r2, [pc, #492]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 8003174:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e01d      	b.n	80031b8 <HAL_RCC_OscConfig+0xd8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0xc0>
 8003186:	4b76      	ldr	r3, [pc, #472]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a75      	ldr	r2, [pc, #468]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 800318c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	4b73      	ldr	r3, [pc, #460]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a72      	ldr	r2, [pc, #456]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e00b      	b.n	80031b8 <HAL_RCC_OscConfig+0xd8>
 80031a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 80031a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 80031b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d013      	beq.n	80031e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7ff f868 	bl	8002294 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c8:	f7ff f864 	bl	8002294 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	@ 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e21f      	b.n	800361a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	4b61      	ldr	r3, [pc, #388]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0xe8>
 80031e6:	e014      	b.n	8003212 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7ff f854 	bl	8002294 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f0:	f7ff f850 	bl	8002294 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	@ 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e20b      	b.n	800361a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	4b57      	ldr	r3, [pc, #348]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x110>
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d069      	beq.n	80032f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800321e:	4b50      	ldr	r3, [pc, #320]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00b      	beq.n	8003242 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800322a:	4b4d      	ldr	r3, [pc, #308]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b08      	cmp	r3, #8
 8003234:	d11c      	bne.n	8003270 <HAL_RCC_OscConfig+0x190>
 8003236:	4b4a      	ldr	r3, [pc, #296]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d116      	bne.n	8003270 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003242:	4b47      	ldr	r3, [pc, #284]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_RCC_OscConfig+0x17a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d001      	beq.n	800325a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e1df      	b.n	800361a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325a:	4b41      	ldr	r3, [pc, #260]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	493d      	ldr	r1, [pc, #244]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	e040      	b.n	80032f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d023      	beq.n	80032c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003278:	4b39      	ldr	r3, [pc, #228]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a38      	ldr	r2, [pc, #224]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7ff f806 	bl	8002294 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328c:	f7ff f802 	bl	8002294 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e1bd      	b.n	800361a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329e:	4b30      	ldr	r3, [pc, #192]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4929      	ldr	r1, [pc, #164]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]
 80032be:	e018      	b.n	80032f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c0:	4b27      	ldr	r3, [pc, #156]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a26      	ldr	r2, [pc, #152]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe ffe2 	bl	8002294 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d4:	f7fe ffde 	bl	8002294 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e199      	b.n	800361a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d038      	beq.n	8003370 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d019      	beq.n	800333a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003306:	4b16      	ldr	r3, [pc, #88]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 8003308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800330a:	4a15      	ldr	r2, [pc, #84]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003312:	f7fe ffbf 	bl	8002294 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800331a:	f7fe ffbb 	bl	8002294 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e176      	b.n	800361a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332c:	4b0c      	ldr	r3, [pc, #48]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 800332e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x23a>
 8003338:	e01a      	b.n	8003370 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800333a:	4b09      	ldr	r3, [pc, #36]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 800333c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800333e:	4a08      	ldr	r2, [pc, #32]	@ (8003360 <HAL_RCC_OscConfig+0x280>)
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003346:	f7fe ffa5 	bl	8002294 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334c:	e00a      	b.n	8003364 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334e:	f7fe ffa1 	bl	8002294 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d903      	bls.n	8003364 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e15c      	b.n	800361a <HAL_RCC_OscConfig+0x53a>
 8003360:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003364:	4b91      	ldr	r3, [pc, #580]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 8003366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1ee      	bne.n	800334e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80a4 	beq.w	80034c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337e:	4b8b      	ldr	r3, [pc, #556]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10d      	bne.n	80033a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	4b88      	ldr	r3, [pc, #544]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	4a87      	ldr	r2, [pc, #540]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 8003390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003394:	6413      	str	r3, [r2, #64]	@ 0x40
 8003396:	4b85      	ldr	r3, [pc, #532]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a6:	4b82      	ldr	r3, [pc, #520]	@ (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d118      	bne.n	80033e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033b2:	4b7f      	ldr	r3, [pc, #508]	@ (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a7e      	ldr	r2, [pc, #504]	@ (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033be:	f7fe ff69 	bl	8002294 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c6:	f7fe ff65 	bl	8002294 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b64      	cmp	r3, #100	@ 0x64
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e120      	b.n	800361a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d8:	4b75      	ldr	r3, [pc, #468]	@ (80035b0 <HAL_RCC_OscConfig+0x4d0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d106      	bne.n	80033fa <HAL_RCC_OscConfig+0x31a>
 80033ec:	4b6f      	ldr	r3, [pc, #444]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f0:	4a6e      	ldr	r2, [pc, #440]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f8:	e02d      	b.n	8003456 <HAL_RCC_OscConfig+0x376>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10c      	bne.n	800341c <HAL_RCC_OscConfig+0x33c>
 8003402:	4b6a      	ldr	r3, [pc, #424]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003406:	4a69      	ldr	r2, [pc, #420]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	6713      	str	r3, [r2, #112]	@ 0x70
 800340e:	4b67      	ldr	r3, [pc, #412]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003412:	4a66      	ldr	r2, [pc, #408]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 8003414:	f023 0304 	bic.w	r3, r3, #4
 8003418:	6713      	str	r3, [r2, #112]	@ 0x70
 800341a:	e01c      	b.n	8003456 <HAL_RCC_OscConfig+0x376>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b05      	cmp	r3, #5
 8003422:	d10c      	bne.n	800343e <HAL_RCC_OscConfig+0x35e>
 8003424:	4b61      	ldr	r3, [pc, #388]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003428:	4a60      	ldr	r2, [pc, #384]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003430:	4b5e      	ldr	r3, [pc, #376]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 8003432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003434:	4a5d      	ldr	r2, [pc, #372]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6713      	str	r3, [r2, #112]	@ 0x70
 800343c:	e00b      	b.n	8003456 <HAL_RCC_OscConfig+0x376>
 800343e:	4b5b      	ldr	r3, [pc, #364]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003442:	4a5a      	ldr	r2, [pc, #360]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	6713      	str	r3, [r2, #112]	@ 0x70
 800344a:	4b58      	ldr	r3, [pc, #352]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344e:	4a57      	ldr	r2, [pc, #348]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 8003450:	f023 0304 	bic.w	r3, r3, #4
 8003454:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d015      	beq.n	800348a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345e:	f7fe ff19 	bl	8002294 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003464:	e00a      	b.n	800347c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003466:	f7fe ff15 	bl	8002294 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003474:	4293      	cmp	r3, r2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e0ce      	b.n	800361a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347c:	4b4b      	ldr	r3, [pc, #300]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 800347e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ee      	beq.n	8003466 <HAL_RCC_OscConfig+0x386>
 8003488:	e014      	b.n	80034b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348a:	f7fe ff03 	bl	8002294 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7fe feff 	bl	8002294 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e0b8      	b.n	800361a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a8:	4b40      	ldr	r3, [pc, #256]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ee      	bne.n	8003492 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d105      	bne.n	80034c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ba:	4b3c      	ldr	r3, [pc, #240]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	4a3b      	ldr	r2, [pc, #236]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 80034c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034c4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80a4 	beq.w	8003618 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034d0:	4b36      	ldr	r3, [pc, #216]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 030c 	and.w	r3, r3, #12
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d06b      	beq.n	80035b4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d149      	bne.n	8003578 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e4:	4b31      	ldr	r3, [pc, #196]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a30      	ldr	r2, [pc, #192]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 80034ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fe fed0 	bl	8002294 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fe fecc 	bl	8002294 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e087      	b.n	800361a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	4b28      	ldr	r3, [pc, #160]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	019b      	lsls	r3, r3, #6
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	3b01      	subs	r3, #1
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	061b      	lsls	r3, r3, #24
 800353a:	4313      	orrs	r3, r2
 800353c:	4a1b      	ldr	r2, [pc, #108]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 800353e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003542:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003544:	4b19      	ldr	r3, [pc, #100]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a18      	ldr	r2, [pc, #96]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 800354a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800354e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003550:	f7fe fea0 	bl	8002294 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003558:	f7fe fe9c 	bl	8002294 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e057      	b.n	800361a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356a:	4b10      	ldr	r3, [pc, #64]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x478>
 8003576:	e04f      	b.n	8003618 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003578:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0b      	ldr	r2, [pc, #44]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 800357e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fe fe86 	bl	8002294 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358c:	f7fe fe82 	bl	8002294 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e03d      	b.n	800361a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	4b03      	ldr	r3, [pc, #12]	@ (80035ac <HAL_RCC_OscConfig+0x4cc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x4ac>
 80035aa:	e035      	b.n	8003618 <HAL_RCC_OscConfig+0x538>
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003624 <HAL_RCC_OscConfig+0x544>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d028      	beq.n	8003614 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d121      	bne.n	8003614 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d11a      	bne.n	8003614 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035e4:	4013      	ands	r3, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d111      	bne.n	8003614 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fa:	085b      	lsrs	r3, r3, #1
 80035fc:	3b01      	subs	r3, #1
 80035fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d107      	bne.n	8003614 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800

08003628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0d0      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003640:	4b6a      	ldr	r3, [pc, #424]	@ (80037ec <HAL_RCC_ClockConfig+0x1c4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d910      	bls.n	8003670 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b67      	ldr	r3, [pc, #412]	@ (80037ec <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 020f 	bic.w	r2, r3, #15
 8003656:	4965      	ldr	r1, [pc, #404]	@ (80037ec <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b63      	ldr	r3, [pc, #396]	@ (80037ec <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0b8      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003688:	4b59      	ldr	r3, [pc, #356]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4a58      	ldr	r2, [pc, #352]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 800368e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003692:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a0:	4b53      	ldr	r3, [pc, #332]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a52      	ldr	r2, [pc, #328]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 80036a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ac:	4b50      	ldr	r3, [pc, #320]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	494d      	ldr	r1, [pc, #308]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d040      	beq.n	800374c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	4b47      	ldr	r3, [pc, #284]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d115      	bne.n	800370a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e07f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ea:	4b41      	ldr	r3, [pc, #260]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e073      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fa:	4b3d      	ldr	r3, [pc, #244]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e06b      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370a:	4b39      	ldr	r3, [pc, #228]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 0203 	bic.w	r2, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4936      	ldr	r1, [pc, #216]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 8003718:	4313      	orrs	r3, r2
 800371a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371c:	f7fe fdba 	bl	8002294 <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	e00a      	b.n	800373a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003724:	f7fe fdb6 	bl	8002294 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e053      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	4b2d      	ldr	r3, [pc, #180]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 020c 	and.w	r2, r3, #12
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	429a      	cmp	r2, r3
 800374a:	d1eb      	bne.n	8003724 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800374c:	4b27      	ldr	r3, [pc, #156]	@ (80037ec <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d210      	bcs.n	800377c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b24      	ldr	r3, [pc, #144]	@ (80037ec <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 020f 	bic.w	r2, r3, #15
 8003762:	4922      	ldr	r1, [pc, #136]	@ (80037ec <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b20      	ldr	r3, [pc, #128]	@ (80037ec <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e032      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003788:	4b19      	ldr	r3, [pc, #100]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4916      	ldr	r1, [pc, #88]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 8003796:	4313      	orrs	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037a6:	4b12      	ldr	r3, [pc, #72]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	490e      	ldr	r1, [pc, #56]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ba:	f000 f821 	bl	8003800 <HAL_RCC_GetSysClockFreq>
 80037be:	4602      	mov	r2, r0
 80037c0:	4b0b      	ldr	r3, [pc, #44]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	490a      	ldr	r1, [pc, #40]	@ (80037f4 <HAL_RCC_ClockConfig+0x1cc>)
 80037cc:	5ccb      	ldrb	r3, [r1, r3]
 80037ce:	fa22 f303 	lsr.w	r3, r2, r3
 80037d2:	4a09      	ldr	r2, [pc, #36]	@ (80037f8 <HAL_RCC_ClockConfig+0x1d0>)
 80037d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037d6:	4b09      	ldr	r3, [pc, #36]	@ (80037fc <HAL_RCC_ClockConfig+0x1d4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe fd16 	bl	800220c <HAL_InitTick>

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023c00 	.word	0x40023c00
 80037f0:	40023800 	.word	0x40023800
 80037f4:	0800c4d0 	.word	0x0800c4d0
 80037f8:	20000000 	.word	0x20000000
 80037fc:	20000004 	.word	0x20000004

08003800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003804:	b090      	sub	sp, #64	@ 0x40
 8003806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	637b      	str	r3, [r7, #52]	@ 0x34
 800380c:	2300      	movs	r3, #0
 800380e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003810:	2300      	movs	r3, #0
 8003812:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003818:	4b59      	ldr	r3, [pc, #356]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x180>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 030c 	and.w	r3, r3, #12
 8003820:	2b08      	cmp	r3, #8
 8003822:	d00d      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x40>
 8003824:	2b08      	cmp	r3, #8
 8003826:	f200 80a1 	bhi.w	800396c <HAL_RCC_GetSysClockFreq+0x16c>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x34>
 800382e:	2b04      	cmp	r3, #4
 8003830:	d003      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x3a>
 8003832:	e09b      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b53      	ldr	r3, [pc, #332]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x184>)
 8003836:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003838:	e09b      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800383a:	4b53      	ldr	r3, [pc, #332]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x188>)
 800383c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800383e:	e098      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003840:	4b4f      	ldr	r3, [pc, #316]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x180>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003848:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800384a:	4b4d      	ldr	r3, [pc, #308]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x180>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d028      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003856:	4b4a      	ldr	r3, [pc, #296]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x180>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	099b      	lsrs	r3, r3, #6
 800385c:	2200      	movs	r2, #0
 800385e:	623b      	str	r3, [r7, #32]
 8003860:	627a      	str	r2, [r7, #36]	@ 0x24
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003868:	2100      	movs	r1, #0
 800386a:	4b47      	ldr	r3, [pc, #284]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x188>)
 800386c:	fb03 f201 	mul.w	r2, r3, r1
 8003870:	2300      	movs	r3, #0
 8003872:	fb00 f303 	mul.w	r3, r0, r3
 8003876:	4413      	add	r3, r2
 8003878:	4a43      	ldr	r2, [pc, #268]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x188>)
 800387a:	fba0 1202 	umull	r1, r2, r0, r2
 800387e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003880:	460a      	mov	r2, r1
 8003882:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003884:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003886:	4413      	add	r3, r2
 8003888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800388a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800388c:	2200      	movs	r2, #0
 800388e:	61bb      	str	r3, [r7, #24]
 8003890:	61fa      	str	r2, [r7, #28]
 8003892:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003896:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800389a:	f7fd f9a5 	bl	8000be8 <__aeabi_uldivmod>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4613      	mov	r3, r2
 80038a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038a6:	e053      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a8:	4b35      	ldr	r3, [pc, #212]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x180>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	099b      	lsrs	r3, r3, #6
 80038ae:	2200      	movs	r2, #0
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	617a      	str	r2, [r7, #20]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038ba:	f04f 0b00 	mov.w	fp, #0
 80038be:	4652      	mov	r2, sl
 80038c0:	465b      	mov	r3, fp
 80038c2:	f04f 0000 	mov.w	r0, #0
 80038c6:	f04f 0100 	mov.w	r1, #0
 80038ca:	0159      	lsls	r1, r3, #5
 80038cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d0:	0150      	lsls	r0, r2, #5
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	ebb2 080a 	subs.w	r8, r2, sl
 80038da:	eb63 090b 	sbc.w	r9, r3, fp
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038f2:	ebb2 0408 	subs.w	r4, r2, r8
 80038f6:	eb63 0509 	sbc.w	r5, r3, r9
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	00eb      	lsls	r3, r5, #3
 8003904:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003908:	00e2      	lsls	r2, r4, #3
 800390a:	4614      	mov	r4, r2
 800390c:	461d      	mov	r5, r3
 800390e:	eb14 030a 	adds.w	r3, r4, sl
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	eb45 030b 	adc.w	r3, r5, fp
 8003918:	607b      	str	r3, [r7, #4]
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003926:	4629      	mov	r1, r5
 8003928:	028b      	lsls	r3, r1, #10
 800392a:	4621      	mov	r1, r4
 800392c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003930:	4621      	mov	r1, r4
 8003932:	028a      	lsls	r2, r1, #10
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800393a:	2200      	movs	r2, #0
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	60fa      	str	r2, [r7, #12]
 8003940:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003944:	f7fd f950 	bl	8000be8 <__aeabi_uldivmod>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4613      	mov	r3, r2
 800394e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003950:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <HAL_RCC_GetSysClockFreq+0x180>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	0c1b      	lsrs	r3, r3, #16
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	3301      	adds	r3, #1
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003960:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800396a:	e002      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800396c:	4b05      	ldr	r3, [pc, #20]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x184>)
 800396e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003974:	4618      	mov	r0, r3
 8003976:	3740      	adds	r7, #64	@ 0x40
 8003978:	46bd      	mov	sp, r7
 800397a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800
 8003984:	00f42400 	.word	0x00f42400
 8003988:	017d7840 	.word	0x017d7840

0800398c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003990:	4b03      	ldr	r3, [pc, #12]	@ (80039a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003992:	681b      	ldr	r3, [r3, #0]
}
 8003994:	4618      	mov	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000000 	.word	0x20000000

080039a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039a8:	f7ff fff0 	bl	800398c <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	0a9b      	lsrs	r3, r3, #10
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4903      	ldr	r1, [pc, #12]	@ (80039c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40023800 	.word	0x40023800
 80039c8:	0800c4e0 	.word	0x0800c4e0

080039cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039d0:	f7ff ffdc 	bl	800398c <HAL_RCC_GetHCLKFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	0b5b      	lsrs	r3, r3, #13
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	4903      	ldr	r1, [pc, #12]	@ (80039f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40023800 	.word	0x40023800
 80039f0:	0800c4e0 	.word	0x0800c4e0

080039f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d012      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a1c:	4b69      	ldr	r3, [pc, #420]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a68      	ldr	r2, [pc, #416]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a22:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a26:	6093      	str	r3, [r2, #8]
 8003a28:	4b66      	ldr	r3, [pc, #408]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a30:	4964      	ldr	r1, [pc, #400]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d017      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a54:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5c:	4959      	ldr	r1, [pc, #356]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d017      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a8a:	4b4e      	ldr	r3, [pc, #312]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	494a      	ldr	r1, [pc, #296]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aa8:	d101      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 808b 	beq.w	8003bee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	4a39      	ldr	r2, [pc, #228]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ae4:	4b37      	ldr	r3, [pc, #220]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003af0:	4b35      	ldr	r3, [pc, #212]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a34      	ldr	r2, [pc, #208]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003afc:	f7fe fbca 	bl	8002294 <HAL_GetTick>
 8003b00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b04:	f7fe fbc6 	bl	8002294 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	@ 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e357      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b16:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b22:	4b28      	ldr	r3, [pc, #160]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d035      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d02e      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b40:	4b20      	ldr	r3, [pc, #128]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b54:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b56:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b60:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b62:	4a18      	ldr	r2, [pc, #96]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b68:	4b16      	ldr	r3, [pc, #88]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d114      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fe fb8e 	bl	8002294 <HAL_GetTick>
 8003b78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fe fb8a 	bl	8002294 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e319      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b92:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0ee      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003baa:	d111      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bac:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003bb8:	4b04      	ldr	r3, [pc, #16]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bba:	400b      	ands	r3, r1
 8003bbc:	4901      	ldr	r1, [pc, #4]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40007000 	.word	0x40007000
 8003bcc:	0ffffcff 	.word	0x0ffffcff
 8003bd0:	4baa      	ldr	r3, [pc, #680]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4aa9      	ldr	r2, [pc, #676]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003bda:	6093      	str	r3, [r2, #8]
 8003bdc:	4ba7      	ldr	r3, [pc, #668]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	49a4      	ldr	r1, [pc, #656]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d010      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bfa:	4ba0      	ldr	r3, [pc, #640]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c00:	4a9e      	ldr	r2, [pc, #632]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c14:	4999      	ldr	r1, [pc, #612]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c28:	4b94      	ldr	r3, [pc, #592]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c36:	4991      	ldr	r1, [pc, #580]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c4a:	4b8c      	ldr	r3, [pc, #560]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c58:	4988      	ldr	r1, [pc, #544]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c6c:	4b83      	ldr	r3, [pc, #524]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c7a:	4980      	ldr	r1, [pc, #512]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9c:	4977      	ldr	r1, [pc, #476]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cb0:	4b72      	ldr	r3, [pc, #456]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb6:	f023 0203 	bic.w	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	496f      	ldr	r1, [pc, #444]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd8:	f023 020c 	bic.w	r2, r3, #12
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce0:	4966      	ldr	r1, [pc, #408]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cf4:	4b61      	ldr	r3, [pc, #388]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d02:	495e      	ldr	r1, [pc, #376]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d16:	4b59      	ldr	r3, [pc, #356]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d24:	4955      	ldr	r1, [pc, #340]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d38:	4b50      	ldr	r3, [pc, #320]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d46:	494d      	ldr	r1, [pc, #308]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d5a:	4b48      	ldr	r3, [pc, #288]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d60:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d68:	4944      	ldr	r1, [pc, #272]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d82:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d8a:	493c      	ldr	r1, [pc, #240]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d9e:	4b37      	ldr	r3, [pc, #220]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dac:	4933      	ldr	r1, [pc, #204]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dce:	492b      	ldr	r1, [pc, #172]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d011      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003de2:	4b26      	ldr	r3, [pc, #152]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df0:	4922      	ldr	r1, [pc, #136]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e00:	d101      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e22:	4b16      	ldr	r3, [pc, #88]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e28:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e30:	4912      	ldr	r1, [pc, #72]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00b      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e44:	4b0d      	ldr	r3, [pc, #52]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e54:	4909      	ldr	r1, [pc, #36]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d006      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 80d9 	beq.w	8004022 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e70:	4b02      	ldr	r3, [pc, #8]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a01      	ldr	r2, [pc, #4]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e7a:	e001      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e82:	f7fe fa07 	bl	8002294 <HAL_GetTick>
 8003e86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e8a:	f7fe fa03 	bl	8002294 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b64      	cmp	r3, #100	@ 0x64
 8003e96:	d901      	bls.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e194      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e9c:	4b6c      	ldr	r3, [pc, #432]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f0      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d021      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d11d      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ebc:	4b64      	ldr	r3, [pc, #400]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ec2:	0c1b      	lsrs	r3, r3, #16
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003eca:	4b61      	ldr	r3, [pc, #388]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ed0:	0e1b      	lsrs	r3, r3, #24
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	019a      	lsls	r2, r3, #6
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	061b      	lsls	r3, r3, #24
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	071b      	lsls	r3, r3, #28
 8003ef0:	4957      	ldr	r1, [pc, #348]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d004      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d02e      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f22:	d129      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f24:	4b4a      	ldr	r3, [pc, #296]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f2a:	0c1b      	lsrs	r3, r3, #16
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f32:	4b47      	ldr	r3, [pc, #284]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f38:	0f1b      	lsrs	r3, r3, #28
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	019a      	lsls	r2, r3, #6
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	061b      	lsls	r3, r3, #24
 8003f52:	431a      	orrs	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	071b      	lsls	r3, r3, #28
 8003f58:	493d      	ldr	r1, [pc, #244]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f60:	4b3b      	ldr	r3, [pc, #236]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f66:	f023 021f 	bic.w	r2, r3, #31
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	4937      	ldr	r1, [pc, #220]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01d      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f84:	4b32      	ldr	r3, [pc, #200]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f8a:	0e1b      	lsrs	r3, r3, #24
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f92:	4b2f      	ldr	r3, [pc, #188]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f98:	0f1b      	lsrs	r3, r3, #28
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	019a      	lsls	r2, r3, #6
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	431a      	orrs	r2, r3
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	071b      	lsls	r3, r3, #28
 8003fb8:	4925      	ldr	r1, [pc, #148]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d011      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	019a      	lsls	r2, r3, #6
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	061b      	lsls	r3, r3, #24
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	071b      	lsls	r3, r3, #28
 8003fe8:	4919      	ldr	r1, [pc, #100]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ff0:	4b17      	ldr	r3, [pc, #92]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a16      	ldr	r2, [pc, #88]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ffc:	f7fe f94a 	bl	8002294 <HAL_GetTick>
 8004000:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004004:	f7fe f946 	bl	8002294 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	@ 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e0d7      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004016:	4b0e      	ldr	r3, [pc, #56]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b01      	cmp	r3, #1
 8004026:	f040 80cd 	bne.w	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800402a:	4b09      	ldr	r3, [pc, #36]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a08      	ldr	r2, [pc, #32]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004030:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004036:	f7fe f92d 	bl	8002294 <HAL_GetTick>
 800403a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800403c:	e00a      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800403e:	f7fe f929 	bl	8002294 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b64      	cmp	r3, #100	@ 0x64
 800404a:	d903      	bls.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e0ba      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004050:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004054:	4b5e      	ldr	r3, [pc, #376]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800405c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004060:	d0ed      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800407e:	2b00      	cmp	r3, #0
 8004080:	d02e      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d12a      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800408a:	4b51      	ldr	r3, [pc, #324]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004098:	4b4d      	ldr	r3, [pc, #308]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409e:	0f1b      	lsrs	r3, r3, #28
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	019a      	lsls	r2, r3, #6
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	041b      	lsls	r3, r3, #16
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	061b      	lsls	r3, r3, #24
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	071b      	lsls	r3, r3, #28
 80040be:	4944      	ldr	r1, [pc, #272]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040c6:	4b42      	ldr	r3, [pc, #264]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040cc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d4:	3b01      	subs	r3, #1
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	493d      	ldr	r1, [pc, #244]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d022      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040f4:	d11d      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040f6:	4b36      	ldr	r3, [pc, #216]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fc:	0e1b      	lsrs	r3, r3, #24
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004104:	4b32      	ldr	r3, [pc, #200]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410a:	0f1b      	lsrs	r3, r3, #28
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	019a      	lsls	r2, r3, #6
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	041b      	lsls	r3, r3, #16
 800411e:	431a      	orrs	r2, r3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	061b      	lsls	r3, r3, #24
 8004124:	431a      	orrs	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	071b      	lsls	r3, r3, #28
 800412a:	4929      	ldr	r1, [pc, #164]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d028      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800413e:	4b24      	ldr	r3, [pc, #144]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004144:	0e1b      	lsrs	r3, r3, #24
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800414c:	4b20      	ldr	r3, [pc, #128]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004152:	0c1b      	lsrs	r3, r3, #16
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	019a      	lsls	r2, r3, #6
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	431a      	orrs	r2, r3
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	071b      	lsls	r3, r3, #28
 8004172:	4917      	ldr	r1, [pc, #92]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800417a:	4b15      	ldr	r3, [pc, #84]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800417c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004180:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004188:	4911      	ldr	r1, [pc, #68]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004190:	4b0f      	ldr	r3, [pc, #60]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a0e      	ldr	r2, [pc, #56]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800419a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419c:	f7fe f87a 	bl	8002294 <HAL_GetTick>
 80041a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041a4:	f7fe f876 	bl	8002294 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b64      	cmp	r3, #100	@ 0x64
 80041b0:	d901      	bls.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e007      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041b6:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041c2:	d1ef      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800

080041d4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e022      	b.n	800422c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d105      	bne.n	80041fe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7fd fd1b 	bl	8001c34 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2203      	movs	r2, #3
 8004202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f814 	bl	8004234 <HAL_SD_InitCard>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e00a      	b.n	800422c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004234:	b5b0      	push	{r4, r5, r7, lr}
 8004236:	b08e      	sub	sp, #56	@ 0x38
 8004238:	af04      	add	r7, sp, #16
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004248:	2300      	movs	r3, #0
 800424a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800424c:	2300      	movs	r3, #0
 800424e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004250:	2376      	movs	r3, #118	@ 0x76
 8004252:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681d      	ldr	r5, [r3, #0]
 8004258:	466c      	mov	r4, sp
 800425a:	f107 0318 	add.w	r3, r7, #24
 800425e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004266:	f107 030c 	add.w	r3, r7, #12
 800426a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800426c:	4628      	mov	r0, r5
 800426e:	f001 ffd9 	bl	8006224 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004280:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f002 f816 	bl	80062b8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800429a:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800429c:	2002      	movs	r0, #2
 800429e:	f7fe f805 	bl	80022ac <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fff4 	bl	8005290 <SD_PowerON>
 80042a8:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00b      	beq.n	80042c8 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e02e      	b.n	8004326 <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 ff13 	bl	80050f4 <SD_InitCard>
 80042ce:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80042d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e01b      	b.n	8004326 <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80042f6:	4618      	mov	r0, r3
 80042f8:	f002 f870 	bl	80063dc <SDMMC_CmdBlockLength>
 80042fc:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00f      	beq.n	8004324 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a09      	ldr	r2, [pc, #36]	@ (8004330 <HAL_SD_InitCard+0xfc>)
 800430a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3728      	adds	r7, #40	@ 0x28
 800432a:	46bd      	mov	sp, r7
 800432c:	bdb0      	pop	{r4, r5, r7, pc}
 800432e:	bf00      	nop
 8004330:	004005ff 	.word	0x004005ff

08004334 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08c      	sub	sp, #48	@ 0x30
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d107      	bne.n	800435c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004350:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0c3      	b.n	80044e4 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	f040 80bc 	bne.w	80044e2 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	441a      	add	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800437a:	429a      	cmp	r2, r3
 800437c:	d907      	bls.n	800438e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004382:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e0aa      	b.n	80044e4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2203      	movs	r2, #3
 8004392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2200      	movs	r2, #0
 800439c:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80043ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	4a4e      	ldr	r2, [pc, #312]	@ (80044ec <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80043b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	4a4d      	ldr	r2, [pc, #308]	@ (80044f0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80043bc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	2200      	movs	r2, #0
 80043c4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ca:	2200      	movs	r2, #0
 80043cc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3380      	adds	r3, #128	@ 0x80
 80043f4:	4619      	mov	r1, r3
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	025b      	lsls	r3, r3, #9
 80043fc:	089b      	lsrs	r3, r3, #2
 80043fe:	f7fe f939 	bl	8002674 <HAL_DMA_Start_IT>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d017      	beq.n	8004438 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8004416:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a35      	ldr	r2, [pc, #212]	@ (80044f4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800441e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004424:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e055      	b.n	80044e4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0208 	orr.w	r2, r2, #8
 8004446:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444c:	2b01      	cmp	r3, #1
 800444e:	d002      	beq.n	8004456 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8004450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004452:	025b      	lsls	r3, r3, #9
 8004454:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004456:	f04f 33ff 	mov.w	r3, #4294967295
 800445a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	025b      	lsls	r3, r3, #9
 8004460:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004462:	2390      	movs	r3, #144	@ 0x90
 8004464:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004466:	2302      	movs	r3, #2
 8004468:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800446a:	2300      	movs	r3, #0
 800446c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800446e:	2301      	movs	r3, #1
 8004470:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f107 0210 	add.w	r2, r7, #16
 800447a:	4611      	mov	r1, r2
 800447c:	4618      	mov	r0, r3
 800447e:	f001 ff81 	bl	8006384 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d90a      	bls.n	800449e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2282      	movs	r2, #130	@ 0x82
 800448c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004494:	4618      	mov	r0, r3
 8004496:	f001 ffe5 	bl	8006464 <SDMMC_CmdReadMultiBlock>
 800449a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800449c:	e009      	b.n	80044b2 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2281      	movs	r2, #129	@ 0x81
 80044a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 ffb8 	bl	8006420 <SDMMC_CmdReadSingleBlock>
 80044b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80044b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d012      	beq.n	80044de <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a0d      	ldr	r2, [pc, #52]	@ (80044f4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80044be:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c6:	431a      	orrs	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e002      	b.n	80044e4 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	e000      	b.n	80044e4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80044e2:	2302      	movs	r3, #2
  }
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3730      	adds	r7, #48	@ 0x30
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	08004f03 	.word	0x08004f03
 80044f0:	08004f75 	.word	0x08004f75
 80044f4:	004005ff 	.word	0x004005ff

080044f8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08c      	sub	sp, #48	@ 0x30
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d107      	bne.n	8004520 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004514:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e0c6      	b.n	80046ae <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	f040 80bf 	bne.w	80046ac <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	441a      	add	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453e:	429a      	cmp	r2, r3
 8004540:	d907      	bls.n	8004552 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004546:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e0ad      	b.n	80046ae <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2203      	movs	r2, #3
 8004556:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2200      	movs	r2, #0
 8004560:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 021a 	orr.w	r2, r2, #26
 8004570:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004576:	4a50      	ldr	r2, [pc, #320]	@ (80046b8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004578:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457e:	4a4f      	ldr	r2, [pc, #316]	@ (80046bc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004580:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004586:	2200      	movs	r2, #0
 8004588:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458e:	2b01      	cmp	r3, #1
 8004590:	d002      	beq.n	8004598 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8004592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004594:	025b      	lsls	r3, r3, #9
 8004596:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d90a      	bls.n	80045b4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	22a0      	movs	r2, #160	@ 0xa0
 80045a2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 ff9e 	bl	80064ec <SDMMC_CmdWriteMultiBlock>
 80045b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80045b2:	e009      	b.n	80045c8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2290      	movs	r2, #144	@ 0x90
 80045b8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045c0:	4618      	mov	r0, r3
 80045c2:	f001 ff71 	bl	80064a8 <SDMMC_CmdWriteSingleBlock>
 80045c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80045c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d012      	beq.n	80045f4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a3b      	ldr	r2, [pc, #236]	@ (80046c0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80045d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045dc:	431a      	orrs	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e05c      	b.n	80046ae <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0208 	orr.w	r2, r2, #8
 8004602:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004608:	2240      	movs	r2, #64	@ 0x40
 800460a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3380      	adds	r3, #128	@ 0x80
 8004634:	461a      	mov	r2, r3
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	025b      	lsls	r3, r3, #9
 800463a:	089b      	lsrs	r3, r3, #2
 800463c:	f7fe f81a 	bl	8002674 <HAL_DMA_Start_IT>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01a      	beq.n	800467c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 021a 	bic.w	r2, r2, #26
 8004654:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a19      	ldr	r2, [pc, #100]	@ (80046c0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800465c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004662:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e018      	b.n	80046ae <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800467c:	f04f 33ff 	mov.w	r3, #4294967295
 8004680:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	025b      	lsls	r3, r3, #9
 8004686:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004688:	2390      	movs	r3, #144	@ 0x90
 800468a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800468c:	2300      	movs	r3, #0
 800468e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004690:	2300      	movs	r3, #0
 8004692:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004694:	2301      	movs	r3, #1
 8004696:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f107 0210 	add.w	r2, r7, #16
 80046a0:	4611      	mov	r1, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 fe6e 	bl	8006384 <SDMMC_ConfigData>

      return HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e000      	b.n	80046ae <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80046ac:	2302      	movs	r3, #2
  }
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3730      	adds	r7, #48	@ 0x30
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	08004ed9 	.word	0x08004ed9
 80046bc:	08004f75 	.word	0x08004f75
 80046c0:	004005ff 	.word	0x004005ff

080046c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_SD_IRQHandler+0x2e>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 ffef 	bl	80056ce <SD_Read_IT>
 80046f0:	e15a      	b.n	80049a8 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 808d 	beq.w	800481c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800470a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b9a      	ldr	r3, [pc, #616]	@ (8004980 <HAL_SD_IRQHandler+0x2bc>)
 8004718:	400b      	ands	r3, r1
 800471a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d039      	beq.n	80047aa <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d104      	bne.n	800474a <HAL_SD_IRQHandler+0x86>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	d011      	beq.n	800476e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f001 feee 	bl	8006530 <SDMMC_CmdStopTransfer>
 8004754:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f921 	bl	80049b0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004776:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d104      	bne.n	800479a <HAL_SD_IRQHandler+0xd6>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f002 fb5e 	bl	8006e5c <HAL_SD_RxCpltCallback>
 80047a0:	e102      	b.n	80049a8 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f002 fb50 	bl	8006e48 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80047a8:	e0fe      	b.n	80049a8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80f9 	beq.w	80049a8 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d011      	beq.n	80047e4 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f001 feb3 	bl	8006530 <SDMMC_CmdStopTransfer>
 80047ca:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f8e6 	bl	80049b0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f040 80dc 	bne.w	80049a8 <HAL_SD_IRQHandler+0x2e4>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f040 80d6 	bne.w	80049a8 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0208 	bic.w	r2, r2, #8
 800480a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f002 fb17 	bl	8006e48 <HAL_SD_TxCpltCallback>
}
 800481a:	e0c5      	b.n	80049a8 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <HAL_SD_IRQHandler+0x178>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 ff9b 	bl	8005770 <SD_Write_IT>
 800483a:	e0b5      	b.n	80049a8 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004842:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80ae 	beq.w	80049a8 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	f043 0202 	orr.w	r2, r3, #2
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004878:	f043 0208 	orr.w	r2, r3, #8
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004892:	f043 0220 	orr.w	r2, r3, #32
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ac:	f043 0210 	orr.w	r2, r3, #16
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80048bc:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80048cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f001 fe2c 	bl	8006530 <SDMMC_CmdStopTransfer>
 80048d8:	4602      	mov	r2, r0
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f857 	bl	80049b0 <HAL_SD_ErrorCallback>
}
 8004902:	e051      	b.n	80049a8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800490a:	2b00      	cmp	r3, #0
 800490c:	d04c      	beq.n	80049a8 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <HAL_SD_IRQHandler+0x25e>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	d011      	beq.n	8004946 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004926:	4a17      	ldr	r2, [pc, #92]	@ (8004984 <HAL_SD_IRQHandler+0x2c0>)
 8004928:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492e:	4618      	mov	r0, r3
 8004930:	f7fd ff00 	bl	8002734 <HAL_DMA_Abort_IT>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d036      	beq.n	80049a8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fb6a 	bl	8005018 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004944:	e030      	b.n	80049a8 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d104      	bne.n	800495a <HAL_SD_IRQHandler+0x296>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d018      	beq.n	800498c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	4a0a      	ldr	r2, [pc, #40]	@ (8004988 <HAL_SD_IRQHandler+0x2c4>)
 8004960:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004966:	4618      	mov	r0, r3
 8004968:	f7fd fee4 	bl	8002734 <HAL_DMA_Abort_IT>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d01a      	beq.n	80049a8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fb85 	bl	8005086 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800497c:	e014      	b.n	80049a8 <HAL_SD_IRQHandler+0x2e4>
 800497e:	bf00      	nop
 8004980:	ffff3ec5 	.word	0xffff3ec5
 8004984:	08005019 	.word	0x08005019
 8004988:	08005087 	.word	0x08005087
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f002 fa47 	bl	8006e34 <HAL_SD_AbortCallback>
}
 80049a6:	e7ff      	b.n	80049a8 <HAL_SD_IRQHandler+0x2e4>
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049d2:	0f9b      	lsrs	r3, r3, #30
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049de:	0e9b      	lsrs	r3, r3, #26
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049f0:	0e1b      	lsrs	r3, r3, #24
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a02:	0c1b      	lsrs	r3, r3, #16
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a24:	0d1b      	lsrs	r3, r3, #20
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a42:	0bdb      	lsrs	r3, r3, #15
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a54:	0b9b      	lsrs	r3, r3, #14
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a66:	0b5b      	lsrs	r3, r3, #13
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a78:	0b1b      	lsrs	r3, r3, #12
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d163      	bne.n	8004b5c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a98:	009a      	lsls	r2, r3, #2
 8004a9a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004aa4:	0f92      	lsrs	r2, r2, #30
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ab0:	0edb      	lsrs	r3, r3, #27
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ac2:	0e1b      	lsrs	r3, r3, #24
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ad4:	0d5b      	lsrs	r3, r3, #21
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ae6:	0c9b      	lsrs	r3, r3, #18
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004af8:	0bdb      	lsrs	r3, r3, #15
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	7e1b      	ldrb	r3, [r3, #24]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	3302      	adds	r3, #2
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004b26:	fb03 f202 	mul.w	r2, r3, r2
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	7a1b      	ldrb	r3, [r3, #8]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	2201      	movs	r2, #1
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004b48:	0a52      	lsrs	r2, r2, #9
 8004b4a:	fb03 f202 	mul.w	r2, r3, r2
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b58:	661a      	str	r2, [r3, #96]	@ 0x60
 8004b5a:	e031      	b.n	8004bc0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d11d      	bne.n	8004ba0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b68:	041b      	lsls	r3, r3, #16
 8004b6a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b72:	0c1b      	lsrs	r3, r3, #16
 8004b74:	431a      	orrs	r2, r3
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	029a      	lsls	r2, r3, #10
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b94:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	661a      	str	r2, [r3, #96]	@ 0x60
 8004b9e:	e00f      	b.n	8004bc0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a58      	ldr	r2, [pc, #352]	@ (8004d08 <HAL_SD_GetCardCSD+0x344>)
 8004ba6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e09d      	b.n	8004cfc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bc4:	0b9b      	lsrs	r3, r3, #14
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bd6:	09db      	lsrs	r3, r3, #7
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf8:	0fdb      	lsrs	r3, r3, #31
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c04:	0f5b      	lsrs	r3, r3, #29
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c16:	0e9b      	lsrs	r3, r3, #26
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c28:	0d9b      	lsrs	r3, r3, #22
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c3a:	0d5b      	lsrs	r3, r3, #21
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c56:	0c1b      	lsrs	r3, r3, #16
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6a:	0bdb      	lsrs	r3, r3, #15
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7e:	0b9b      	lsrs	r3, r3, #14
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c92:	0b5b      	lsrs	r3, r3, #13
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca6:	0b1b      	lsrs	r3, r3, #12
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cba:	0a9b      	lsrs	r3, r3, #10
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cce:	0a1b      	lsrs	r3, r3, #8
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	004005ff 	.word	0x004005ff

08004d0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004d64:	b5b0      	push	{r4, r5, r7, lr}
 8004d66:	b08e      	sub	sp, #56	@ 0x38
 8004d68:	af04      	add	r7, sp, #16
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2203      	movs	r2, #3
 8004d78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d02e      	beq.n	8004de2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d8a:	d106      	bne.n	8004d9a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d98:	e029      	b.n	8004dee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004da0:	d10a      	bne.n	8004db8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fb2a 	bl	80053fc <SD_WideBus_Enable>
 8004da8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	639a      	str	r2, [r3, #56]	@ 0x38
 8004db6:	e01a      	b.n	8004dee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10a      	bne.n	8004dd4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fb67 	bl	8005492 <SD_WideBus_Disable>
 8004dc4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8004dd2:	e00c      	b.n	8004dee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	639a      	str	r2, [r3, #56]	@ 0x38
 8004de0:	e005      	b.n	8004dee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00b      	beq.n	8004e0e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a26      	ldr	r2, [pc, #152]	@ (8004e94 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004dfc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004e0c:	e01f      	b.n	8004e4e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681d      	ldr	r5, [r3, #0]
 8004e34:	466c      	mov	r4, sp
 8004e36:	f107 0314 	add.w	r3, r7, #20
 8004e3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004e42:	f107 0308 	add.w	r3, r7, #8
 8004e46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f001 f9eb 	bl	8006224 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 fac0 	bl	80063dc <SDMMC_CmdBlockLength>
 8004e5c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00c      	beq.n	8004e7e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a0a      	ldr	r2, [pc, #40]	@ (8004e94 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004e6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8004e86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3728      	adds	r7, #40	@ 0x28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bdb0      	pop	{r4, r5, r7, pc}
 8004e92:	bf00      	nop
 8004e94:	004005ff 	.word	0x004005ff

08004e98 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004ea4:	f107 030c 	add.w	r3, r7, #12
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fa7e 	bl	80053ac <SD_SendStatus>
 8004eb0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	0a5b      	lsrs	r3, r3, #9
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004ece:	693b      	ldr	r3, [r7, #16]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ef4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f14:	2b82      	cmp	r3, #130	@ 0x82
 8004f16:	d111      	bne.n	8004f3c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 fb07 	bl	8006530 <SDMMC_CmdStopTransfer>
 8004f22:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	431a      	orrs	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7ff fd3a 	bl	80049b0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0208 	bic.w	r2, r2, #8
 8004f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004f54:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f001 ff79 	bl	8006e5c <HAL_SD_RxCpltCallback>
#endif
}
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f80:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fd fd82 	bl	8002a8c <HAL_DMA_GetError>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d03e      	beq.n	800500c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f94:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d002      	beq.n	8004faa <SD_DMAError+0x36>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d12d      	bne.n	8005006 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a19      	ldr	r2, [pc, #100]	@ (8005014 <SD_DMAError+0xa0>)
 8004fb0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004fc0:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004fce:	6978      	ldr	r0, [r7, #20]
 8004fd0:	f7ff ff62 	bl	8004e98 <HAL_SD_GetCardState>
 8004fd4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b06      	cmp	r3, #6
 8004fda:	d002      	beq.n	8004fe2 <SD_DMAError+0x6e>
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b05      	cmp	r3, #5
 8004fe0:	d10a      	bne.n	8004ff8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f001 faa2 	bl	8006530 <SDMMC_CmdStopTransfer>
 8004fec:	4602      	mov	r2, r0
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005006:	6978      	ldr	r0, [r7, #20]
 8005008:	f7ff fcd2 	bl	80049b0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800500c:	bf00      	nop
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	004005ff 	.word	0x004005ff

08005018 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005024:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800502e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7ff ff31 	bl	8004e98 <HAL_SD_GetCardState>
 8005036:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b06      	cmp	r3, #6
 800504a:	d002      	beq.n	8005052 <SD_DMATxAbort+0x3a>
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b05      	cmp	r3, #5
 8005050:	d10a      	bne.n	8005068 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f001 fa6a 	bl	8006530 <SDMMC_CmdStopTransfer>
 800505c:	4602      	mov	r2, r0
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005062:	431a      	orrs	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506c:	2b00      	cmp	r3, #0
 800506e:	d103      	bne.n	8005078 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f001 fedf 	bl	8006e34 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005076:	e002      	b.n	800507e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f7ff fc99 	bl	80049b0 <HAL_SD_ErrorCallback>
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005092:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f240 523a 	movw	r2, #1338	@ 0x53a
 800509c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f7ff fefa 	bl	8004e98 <HAL_SD_GetCardState>
 80050a4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b06      	cmp	r3, #6
 80050b8:	d002      	beq.n	80050c0 <SD_DMARxAbort+0x3a>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b05      	cmp	r3, #5
 80050be:	d10a      	bne.n	80050d6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f001 fa33 	bl	8006530 <SDMMC_CmdStopTransfer>
 80050ca:	4602      	mov	r2, r0
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d0:	431a      	orrs	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d103      	bne.n	80050e6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f001 fea8 	bl	8006e34 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80050e4:	e002      	b.n	80050ec <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f7ff fc62 	bl	80049b0 <HAL_SD_ErrorCallback>
}
 80050ec:	bf00      	nop
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80050f4:	b5b0      	push	{r4, r5, r7, lr}
 80050f6:	b094      	sub	sp, #80	@ 0x50
 80050f8:	af04      	add	r7, sp, #16
 80050fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80050fc:	2301      	movs	r3, #1
 80050fe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f001 f8e5 	bl	80062d4 <SDMMC_GetPowerState>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d102      	bne.n	8005116 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005110:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005114:	e0b8      	b.n	8005288 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511a:	2b03      	cmp	r3, #3
 800511c:	d02f      	beq.n	800517e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f001 fb0f 	bl	8006746 <SDMMC_CmdSendCID>
 8005128:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800512a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <SD_InitCard+0x40>
    {
      return errorstate;
 8005130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005132:	e0a9      	b.n	8005288 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2100      	movs	r1, #0
 800513a:	4618      	mov	r0, r3
 800513c:	f001 f90f 	bl	800635e <SDMMC_GetResponse>
 8005140:	4602      	mov	r2, r0
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2104      	movs	r1, #4
 800514c:	4618      	mov	r0, r3
 800514e:	f001 f906 	bl	800635e <SDMMC_GetResponse>
 8005152:	4602      	mov	r2, r0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2108      	movs	r1, #8
 800515e:	4618      	mov	r0, r3
 8005160:	f001 f8fd 	bl	800635e <SDMMC_GetResponse>
 8005164:	4602      	mov	r2, r0
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	210c      	movs	r1, #12
 8005170:	4618      	mov	r0, r3
 8005172:	f001 f8f4 	bl	800635e <SDMMC_GetResponse>
 8005176:	4602      	mov	r2, r0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005182:	2b03      	cmp	r3, #3
 8005184:	d00d      	beq.n	80051a2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f107 020e 	add.w	r2, r7, #14
 800518e:	4611      	mov	r1, r2
 8005190:	4618      	mov	r0, r3
 8005192:	f001 fb15 	bl	80067c0 <SDMMC_CmdSetRelAdd>
 8005196:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <SD_InitCard+0xae>
    {
      return errorstate;
 800519e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a0:	e072      	b.n	8005288 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d036      	beq.n	8005218 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80051aa:	89fb      	ldrh	r3, [r7, #14]
 80051ac:	461a      	mov	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ba:	041b      	lsls	r3, r3, #16
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f001 fadf 	bl	8006782 <SDMMC_CmdSendCSD>
 80051c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80051c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80051cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ce:	e05b      	b.n	8005288 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2100      	movs	r1, #0
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 f8c1 	bl	800635e <SDMMC_GetResponse>
 80051dc:	4602      	mov	r2, r0
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2104      	movs	r1, #4
 80051e8:	4618      	mov	r0, r3
 80051ea:	f001 f8b8 	bl	800635e <SDMMC_GetResponse>
 80051ee:	4602      	mov	r2, r0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2108      	movs	r1, #8
 80051fa:	4618      	mov	r0, r3
 80051fc:	f001 f8af 	bl	800635e <SDMMC_GetResponse>
 8005200:	4602      	mov	r2, r0
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	210c      	movs	r1, #12
 800520c:	4618      	mov	r0, r3
 800520e:	f001 f8a6 	bl	800635e <SDMMC_GetResponse>
 8005212:	4602      	mov	r2, r0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2104      	movs	r1, #4
 800521e:	4618      	mov	r0, r3
 8005220:	f001 f89d 	bl	800635e <SDMMC_GetResponse>
 8005224:	4603      	mov	r3, r0
 8005226:	0d1a      	lsrs	r2, r3, #20
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800522c:	f107 0310 	add.w	r3, r7, #16
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fbc6 	bl	80049c4 <HAL_SD_GetCardCSD>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800523e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005242:	e021      	b.n	8005288 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6819      	ldr	r1, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800524c:	041b      	lsls	r3, r3, #16
 800524e:	2200      	movs	r2, #0
 8005250:	461c      	mov	r4, r3
 8005252:	4615      	mov	r5, r2
 8005254:	4622      	mov	r2, r4
 8005256:	462b      	mov	r3, r5
 8005258:	4608      	mov	r0, r1
 800525a:	f001 f98b 	bl	8006574 <SDMMC_CmdSelDesel>
 800525e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <SD_InitCard+0x176>
  {
    return errorstate;
 8005266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005268:	e00e      	b.n	8005288 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681d      	ldr	r5, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	466c      	mov	r4, sp
 8005272:	f103 0210 	add.w	r2, r3, #16
 8005276:	ca07      	ldmia	r2, {r0, r1, r2}
 8005278:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800527c:	3304      	adds	r3, #4
 800527e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005280:	4628      	mov	r0, r5
 8005282:	f000 ffcf 	bl	8006224 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3740      	adds	r7, #64	@ 0x40
 800528c:	46bd      	mov	sp, r7
 800528e:	bdb0      	pop	{r4, r5, r7, pc}

08005290 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	2300      	movs	r3, #0
 80052a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f001 f986 	bl	80065ba <SDMMC_CmdGoIdleState>
 80052ae:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <SD_PowerON+0x2a>
  {
    return errorstate;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	e072      	b.n	80053a0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f001 f999 	bl	80065f6 <SDMMC_CmdOperCond>
 80052c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00d      	beq.n	80052e8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f001 f96f 	bl	80065ba <SDMMC_CmdGoIdleState>
 80052dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d004      	beq.n	80052ee <SD_PowerON+0x5e>
    {
      return errorstate;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	e05b      	b.n	80053a0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d137      	bne.n	8005366 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2100      	movs	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f001 f999 	bl	8006634 <SDMMC_CmdAppCommand>
 8005302:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d02d      	beq.n	8005366 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800530a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800530e:	e047      	b.n	80053a0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2100      	movs	r1, #0
 8005316:	4618      	mov	r0, r3
 8005318:	f001 f98c 	bl	8006634 <SDMMC_CmdAppCommand>
 800531c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <SD_PowerON+0x98>
    {
      return errorstate;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	e03b      	b.n	80053a0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	491e      	ldr	r1, [pc, #120]	@ (80053a8 <SD_PowerON+0x118>)
 800532e:	4618      	mov	r0, r3
 8005330:	f001 f9a2 	bl	8006678 <SDMMC_CmdAppOperCommand>
 8005334:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800533c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005340:	e02e      	b.n	80053a0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2100      	movs	r1, #0
 8005348:	4618      	mov	r0, r3
 800534a:	f001 f808 	bl	800635e <SDMMC_GetResponse>
 800534e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	0fdb      	lsrs	r3, r3, #31
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <SD_PowerON+0xcc>
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <SD_PowerON+0xce>
 800535c:	2300      	movs	r3, #0
 800535e:	613b      	str	r3, [r7, #16]

    count++;
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	3301      	adds	r3, #1
 8005364:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800536c:	4293      	cmp	r3, r2
 800536e:	d802      	bhi.n	8005376 <SD_PowerON+0xe6>
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0cc      	beq.n	8005310 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800537c:	4293      	cmp	r3, r2
 800537e:	d902      	bls.n	8005386 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005380:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005384:	e00c      	b.n	80053a0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	645a      	str	r2, [r3, #68]	@ 0x44
 8005396:	e002      	b.n	800539e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3718      	adds	r7, #24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	c1100000 	.word	0xc1100000

080053ac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80053bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80053c0:	e018      	b.n	80053f4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ca:	041b      	lsls	r3, r3, #16
 80053cc:	4619      	mov	r1, r3
 80053ce:	4610      	mov	r0, r2
 80053d0:	f001 fa17 	bl	8006802 <SDMMC_CmdSendStatus>
 80053d4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	e009      	b.n	80053f4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2100      	movs	r1, #0
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 ffb9 	bl	800635e <SDMMC_GetResponse>
 80053ec:	4602      	mov	r2, r0
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	2300      	movs	r3, #0
 800540a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2100      	movs	r1, #0
 8005412:	4618      	mov	r0, r3
 8005414:	f000 ffa3 	bl	800635e <SDMMC_GetResponse>
 8005418:	4603      	mov	r3, r0
 800541a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800541e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005422:	d102      	bne.n	800542a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005424:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005428:	e02f      	b.n	800548a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800542a:	f107 030c 	add.w	r3, r7, #12
 800542e:	4619      	mov	r1, r3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f879 	bl	8005528 <SD_FindSCR>
 8005436:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	e023      	b.n	800548a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01c      	beq.n	8005486 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005454:	041b      	lsls	r3, r3, #16
 8005456:	4619      	mov	r1, r3
 8005458:	4610      	mov	r0, r2
 800545a:	f001 f8eb 	bl	8006634 <SDMMC_CmdAppCommand>
 800545e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	e00f      	b.n	800548a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2102      	movs	r1, #2
 8005470:	4618      	mov	r0, r3
 8005472:	f001 f925 	bl	80066c0 <SDMMC_CmdBusWidth>
 8005476:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	e003      	b.n	800548a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005482:	2300      	movs	r3, #0
 8005484:	e001      	b.n	800548a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005486:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800548a:	4618      	mov	r0, r3
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b086      	sub	sp, #24
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2100      	movs	r1, #0
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 ff58 	bl	800635e <SDMMC_GetResponse>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054b8:	d102      	bne.n	80054c0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80054ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80054be:	e02f      	b.n	8005520 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80054c0:	f107 030c 	add.w	r3, r7, #12
 80054c4:	4619      	mov	r1, r3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f82e 	bl	8005528 <SD_FindSCR>
 80054cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	e023      	b.n	8005520 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01c      	beq.n	800551c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ea:	041b      	lsls	r3, r3, #16
 80054ec:	4619      	mov	r1, r3
 80054ee:	4610      	mov	r0, r2
 80054f0:	f001 f8a0 	bl	8006634 <SDMMC_CmdAppCommand>
 80054f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	e00f      	b.n	8005520 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2100      	movs	r1, #0
 8005506:	4618      	mov	r0, r3
 8005508:	f001 f8da 	bl	80066c0 <SDMMC_CmdBusWidth>
 800550c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	e003      	b.n	8005520 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005518:	2300      	movs	r3, #0
 800551a:	e001      	b.n	8005520 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800551c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005528:	b590      	push	{r4, r7, lr}
 800552a:	b08f      	sub	sp, #60	@ 0x3c
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005532:	f7fc feaf 	bl	8002294 <HAL_GetTick>
 8005536:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800553c:	2300      	movs	r3, #0
 800553e:	60bb      	str	r3, [r7, #8]
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2108      	movs	r1, #8
 800554e:	4618      	mov	r0, r3
 8005550:	f000 ff44 	bl	80063dc <SDMMC_CmdBlockLength>
 8005554:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <SD_FindSCR+0x38>
  {
    return errorstate;
 800555c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555e:	e0b2      	b.n	80056c6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005568:	041b      	lsls	r3, r3, #16
 800556a:	4619      	mov	r1, r3
 800556c:	4610      	mov	r0, r2
 800556e:	f001 f861 	bl	8006634 <SDMMC_CmdAppCommand>
 8005572:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <SD_FindSCR+0x56>
  {
    return errorstate;
 800557a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557c:	e0a3      	b.n	80056c6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800557e:	f04f 33ff 	mov.w	r3, #4294967295
 8005582:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005584:	2308      	movs	r3, #8
 8005586:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005588:	2330      	movs	r3, #48	@ 0x30
 800558a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800558c:	2302      	movs	r3, #2
 800558e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005590:	2300      	movs	r3, #0
 8005592:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005594:	2301      	movs	r3, #1
 8005596:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f107 0210 	add.w	r2, r7, #16
 80055a0:	4611      	mov	r1, r2
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 feee 	bl	8006384 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 f8a9 	bl	8006704 <SDMMC_CmdSendSCR>
 80055b2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80055b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d02a      	beq.n	8005610 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80055ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055bc:	e083      	b.n	80056c6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00f      	beq.n	80055ec <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6819      	ldr	r1, [r3, #0]
 80055d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	f107 0208 	add.w	r2, r7, #8
 80055d8:	18d4      	adds	r4, r2, r3
 80055da:	4608      	mov	r0, r1
 80055dc:	f000 fe4e 	bl	800627c <SDMMC_ReadFIFO>
 80055e0:	4603      	mov	r3, r0
 80055e2:	6023      	str	r3, [r4, #0]
      index++;
 80055e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e6:	3301      	adds	r3, #1
 80055e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ea:	e006      	b.n	80055fa <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d012      	beq.n	8005620 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80055fa:	f7fc fe4b 	bl	8002294 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d102      	bne.n	8005610 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800560a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800560e:	e05a      	b.n	80056c6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005616:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0cf      	beq.n	80055be <SD_FindSCR+0x96>
 800561e:	e000      	b.n	8005622 <SD_FindSCR+0xfa>
      break;
 8005620:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2208      	movs	r2, #8
 8005636:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005638:	2308      	movs	r3, #8
 800563a:	e044      	b.n	80056c6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2202      	movs	r2, #2
 8005650:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005652:	2302      	movs	r3, #2
 8005654:	e037      	b.n	80056c6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2220      	movs	r2, #32
 800566a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800566c:	2320      	movs	r3, #32
 800566e:	e02a      	b.n	80056c6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005678:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	061a      	lsls	r2, r3, #24
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005686:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	0a1b      	lsrs	r3, r3, #8
 800568c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005690:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	0e1b      	lsrs	r3, r3, #24
 8005696:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569a:	601a      	str	r2, [r3, #0]
    scr++;
 800569c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569e:	3304      	adds	r3, #4
 80056a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	061a      	lsls	r2, r3, #24
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80056ae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	0a1b      	lsrs	r3, r3, #8
 80056b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80056b8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	0e1b      	lsrs	r3, r3, #24
 80056be:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80056c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	373c      	adds	r7, #60	@ 0x3c
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd90      	pop	{r4, r7, pc}

080056ce <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b086      	sub	sp, #24
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056da:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d03f      	beq.n	8005768 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80056e8:	2300      	movs	r3, #0
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	e033      	b.n	8005756 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fdc2 	bl	800627c <SDMMC_ReadFIFO>
 80056f8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3301      	adds	r3, #1
 8005706:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	3b01      	subs	r3, #1
 800570c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	0a1b      	lsrs	r3, r3, #8
 8005712:	b2da      	uxtb	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3301      	adds	r3, #1
 800571c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	3b01      	subs	r3, #1
 8005722:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	0c1b      	lsrs	r3, r3, #16
 8005728:	b2da      	uxtb	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3301      	adds	r3, #1
 8005732:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	3b01      	subs	r3, #1
 8005738:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	0e1b      	lsrs	r3, r3, #24
 800573e:	b2da      	uxtb	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3301      	adds	r3, #1
 8005748:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	3b01      	subs	r3, #1
 800574e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	3301      	adds	r3, #1
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b07      	cmp	r3, #7
 800575a:	d9c8      	bls.n	80056ee <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8005768:	bf00      	nop
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d043      	beq.n	8005812 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	e037      	b.n	8005800 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3301      	adds	r3, #1
 800579a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	3b01      	subs	r3, #1
 80057a0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	021a      	lsls	r2, r3, #8
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60bb      	str	r3, [r7, #8]
      tmp++;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3301      	adds	r3, #1
 80057b2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	041a      	lsls	r2, r3, #16
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3301      	adds	r3, #1
 80057ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	3b01      	subs	r3, #1
 80057d0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	061a      	lsls	r2, r3, #24
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f107 0208 	add.w	r2, r7, #8
 80057f2:	4611      	mov	r1, r2
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fd4e 	bl	8006296 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	3301      	adds	r3, #1
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2b07      	cmp	r3, #7
 8005804:	d9c4      	bls.n	8005790 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8005812:	bf00      	nop
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b082      	sub	sp, #8
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e040      	b.n	80058ae <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d106      	bne.n	8005842 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7fc fb07 	bl	8001e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2224      	movs	r2, #36	@ 0x24
 8005846:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0201 	bic.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fb15 	bl	8005e90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f8ae 	bl	80059c8 <UART_SetConfig>
 800586c:	4603      	mov	r3, r0
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e01b      	b.n	80058ae <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005884:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005894:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0201 	orr.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fb94 	bl	8005fd4 <UART_CheckIdleState>
 80058ac:	4603      	mov	r3, r0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b08a      	sub	sp, #40	@ 0x28
 80058ba:	af02      	add	r7, sp, #8
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	603b      	str	r3, [r7, #0]
 80058c2:	4613      	mov	r3, r2
 80058c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d177      	bne.n	80059be <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <HAL_UART_Transmit+0x24>
 80058d4:	88fb      	ldrh	r3, [r7, #6]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e070      	b.n	80059c0 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2221      	movs	r2, #33	@ 0x21
 80058ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ec:	f7fc fcd2 	bl	8002294 <HAL_GetTick>
 80058f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	88fa      	ldrh	r2, [r7, #6]
 80058f6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	88fa      	ldrh	r2, [r7, #6]
 80058fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800590a:	d108      	bne.n	800591e <HAL_UART_Transmit+0x68>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d104      	bne.n	800591e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005914:	2300      	movs	r3, #0
 8005916:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	61bb      	str	r3, [r7, #24]
 800591c:	e003      	b.n	8005926 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005922:	2300      	movs	r3, #0
 8005924:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005926:	e02f      	b.n	8005988 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2200      	movs	r2, #0
 8005930:	2180      	movs	r1, #128	@ 0x80
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 fba5 	bl	8006082 <UART_WaitOnFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d004      	beq.n	8005948 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e03b      	b.n	80059c0 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10b      	bne.n	8005966 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800595c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	3302      	adds	r3, #2
 8005962:	61bb      	str	r3, [r7, #24]
 8005964:	e007      	b.n	8005976 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	781a      	ldrb	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	3301      	adds	r3, #1
 8005974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1c9      	bne.n	8005928 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2200      	movs	r2, #0
 800599c:	2140      	movs	r1, #64	@ 0x40
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 fb6f 	bl	8006082 <UART_WaitOnFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d004      	beq.n	80059b4 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2220      	movs	r2, #32
 80059ae:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e005      	b.n	80059c0 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e000      	b.n	80059c0 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80059be:	2302      	movs	r3, #2
  }
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3720      	adds	r7, #32
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	4ba6      	ldr	r3, [pc, #664]	@ (8005c8c <UART_SetConfig+0x2c4>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6812      	ldr	r2, [r2, #0]
 80059fa:	6979      	ldr	r1, [r7, #20]
 80059fc:	430b      	orrs	r3, r1
 80059fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a94      	ldr	r2, [pc, #592]	@ (8005c90 <UART_SetConfig+0x2c8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d120      	bne.n	8005a86 <UART_SetConfig+0xbe>
 8005a44:	4b93      	ldr	r3, [pc, #588]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d816      	bhi.n	8005a80 <UART_SetConfig+0xb8>
 8005a52:	a201      	add	r2, pc, #4	@ (adr r2, 8005a58 <UART_SetConfig+0x90>)
 8005a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a58:	08005a69 	.word	0x08005a69
 8005a5c:	08005a75 	.word	0x08005a75
 8005a60:	08005a6f 	.word	0x08005a6f
 8005a64:	08005a7b 	.word	0x08005a7b
 8005a68:	2301      	movs	r3, #1
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e150      	b.n	8005d10 <UART_SetConfig+0x348>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	77fb      	strb	r3, [r7, #31]
 8005a72:	e14d      	b.n	8005d10 <UART_SetConfig+0x348>
 8005a74:	2304      	movs	r3, #4
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e14a      	b.n	8005d10 <UART_SetConfig+0x348>
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	77fb      	strb	r3, [r7, #31]
 8005a7e:	e147      	b.n	8005d10 <UART_SetConfig+0x348>
 8005a80:	2310      	movs	r3, #16
 8005a82:	77fb      	strb	r3, [r7, #31]
 8005a84:	e144      	b.n	8005d10 <UART_SetConfig+0x348>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a83      	ldr	r2, [pc, #524]	@ (8005c98 <UART_SetConfig+0x2d0>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d132      	bne.n	8005af6 <UART_SetConfig+0x12e>
 8005a90:	4b80      	ldr	r3, [pc, #512]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a96:	f003 030c 	and.w	r3, r3, #12
 8005a9a:	2b0c      	cmp	r3, #12
 8005a9c:	d828      	bhi.n	8005af0 <UART_SetConfig+0x128>
 8005a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa4 <UART_SetConfig+0xdc>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005ad9 	.word	0x08005ad9
 8005aa8:	08005af1 	.word	0x08005af1
 8005aac:	08005af1 	.word	0x08005af1
 8005ab0:	08005af1 	.word	0x08005af1
 8005ab4:	08005ae5 	.word	0x08005ae5
 8005ab8:	08005af1 	.word	0x08005af1
 8005abc:	08005af1 	.word	0x08005af1
 8005ac0:	08005af1 	.word	0x08005af1
 8005ac4:	08005adf 	.word	0x08005adf
 8005ac8:	08005af1 	.word	0x08005af1
 8005acc:	08005af1 	.word	0x08005af1
 8005ad0:	08005af1 	.word	0x08005af1
 8005ad4:	08005aeb 	.word	0x08005aeb
 8005ad8:	2300      	movs	r3, #0
 8005ada:	77fb      	strb	r3, [r7, #31]
 8005adc:	e118      	b.n	8005d10 <UART_SetConfig+0x348>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	77fb      	strb	r3, [r7, #31]
 8005ae2:	e115      	b.n	8005d10 <UART_SetConfig+0x348>
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	77fb      	strb	r3, [r7, #31]
 8005ae8:	e112      	b.n	8005d10 <UART_SetConfig+0x348>
 8005aea:	2308      	movs	r3, #8
 8005aec:	77fb      	strb	r3, [r7, #31]
 8005aee:	e10f      	b.n	8005d10 <UART_SetConfig+0x348>
 8005af0:	2310      	movs	r3, #16
 8005af2:	77fb      	strb	r3, [r7, #31]
 8005af4:	e10c      	b.n	8005d10 <UART_SetConfig+0x348>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a68      	ldr	r2, [pc, #416]	@ (8005c9c <UART_SetConfig+0x2d4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d120      	bne.n	8005b42 <UART_SetConfig+0x17a>
 8005b00:	4b64      	ldr	r3, [pc, #400]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b06:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b0a:	2b30      	cmp	r3, #48	@ 0x30
 8005b0c:	d013      	beq.n	8005b36 <UART_SetConfig+0x16e>
 8005b0e:	2b30      	cmp	r3, #48	@ 0x30
 8005b10:	d814      	bhi.n	8005b3c <UART_SetConfig+0x174>
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d009      	beq.n	8005b2a <UART_SetConfig+0x162>
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	d810      	bhi.n	8005b3c <UART_SetConfig+0x174>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <UART_SetConfig+0x15c>
 8005b1e:	2b10      	cmp	r3, #16
 8005b20:	d006      	beq.n	8005b30 <UART_SetConfig+0x168>
 8005b22:	e00b      	b.n	8005b3c <UART_SetConfig+0x174>
 8005b24:	2300      	movs	r3, #0
 8005b26:	77fb      	strb	r3, [r7, #31]
 8005b28:	e0f2      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	77fb      	strb	r3, [r7, #31]
 8005b2e:	e0ef      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b30:	2304      	movs	r3, #4
 8005b32:	77fb      	strb	r3, [r7, #31]
 8005b34:	e0ec      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b36:	2308      	movs	r3, #8
 8005b38:	77fb      	strb	r3, [r7, #31]
 8005b3a:	e0e9      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b3c:	2310      	movs	r3, #16
 8005b3e:	77fb      	strb	r3, [r7, #31]
 8005b40:	e0e6      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a56      	ldr	r2, [pc, #344]	@ (8005ca0 <UART_SetConfig+0x2d8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d120      	bne.n	8005b8e <UART_SetConfig+0x1c6>
 8005b4c:	4b51      	ldr	r3, [pc, #324]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b56:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b58:	d013      	beq.n	8005b82 <UART_SetConfig+0x1ba>
 8005b5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b5c:	d814      	bhi.n	8005b88 <UART_SetConfig+0x1c0>
 8005b5e:	2b80      	cmp	r3, #128	@ 0x80
 8005b60:	d009      	beq.n	8005b76 <UART_SetConfig+0x1ae>
 8005b62:	2b80      	cmp	r3, #128	@ 0x80
 8005b64:	d810      	bhi.n	8005b88 <UART_SetConfig+0x1c0>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <UART_SetConfig+0x1a8>
 8005b6a:	2b40      	cmp	r3, #64	@ 0x40
 8005b6c:	d006      	beq.n	8005b7c <UART_SetConfig+0x1b4>
 8005b6e:	e00b      	b.n	8005b88 <UART_SetConfig+0x1c0>
 8005b70:	2300      	movs	r3, #0
 8005b72:	77fb      	strb	r3, [r7, #31]
 8005b74:	e0cc      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b76:	2302      	movs	r3, #2
 8005b78:	77fb      	strb	r3, [r7, #31]
 8005b7a:	e0c9      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b7c:	2304      	movs	r3, #4
 8005b7e:	77fb      	strb	r3, [r7, #31]
 8005b80:	e0c6      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b82:	2308      	movs	r3, #8
 8005b84:	77fb      	strb	r3, [r7, #31]
 8005b86:	e0c3      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	77fb      	strb	r3, [r7, #31]
 8005b8c:	e0c0      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a44      	ldr	r2, [pc, #272]	@ (8005ca4 <UART_SetConfig+0x2dc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d125      	bne.n	8005be4 <UART_SetConfig+0x21c>
 8005b98:	4b3e      	ldr	r3, [pc, #248]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ba2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ba6:	d017      	beq.n	8005bd8 <UART_SetConfig+0x210>
 8005ba8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bac:	d817      	bhi.n	8005bde <UART_SetConfig+0x216>
 8005bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb2:	d00b      	beq.n	8005bcc <UART_SetConfig+0x204>
 8005bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb8:	d811      	bhi.n	8005bde <UART_SetConfig+0x216>
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <UART_SetConfig+0x1fe>
 8005bbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bc2:	d006      	beq.n	8005bd2 <UART_SetConfig+0x20a>
 8005bc4:	e00b      	b.n	8005bde <UART_SetConfig+0x216>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	77fb      	strb	r3, [r7, #31]
 8005bca:	e0a1      	b.n	8005d10 <UART_SetConfig+0x348>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	77fb      	strb	r3, [r7, #31]
 8005bd0:	e09e      	b.n	8005d10 <UART_SetConfig+0x348>
 8005bd2:	2304      	movs	r3, #4
 8005bd4:	77fb      	strb	r3, [r7, #31]
 8005bd6:	e09b      	b.n	8005d10 <UART_SetConfig+0x348>
 8005bd8:	2308      	movs	r3, #8
 8005bda:	77fb      	strb	r3, [r7, #31]
 8005bdc:	e098      	b.n	8005d10 <UART_SetConfig+0x348>
 8005bde:	2310      	movs	r3, #16
 8005be0:	77fb      	strb	r3, [r7, #31]
 8005be2:	e095      	b.n	8005d10 <UART_SetConfig+0x348>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a2f      	ldr	r2, [pc, #188]	@ (8005ca8 <UART_SetConfig+0x2e0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d125      	bne.n	8005c3a <UART_SetConfig+0x272>
 8005bee:	4b29      	ldr	r3, [pc, #164]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005bf8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bfc:	d017      	beq.n	8005c2e <UART_SetConfig+0x266>
 8005bfe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c02:	d817      	bhi.n	8005c34 <UART_SetConfig+0x26c>
 8005c04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c08:	d00b      	beq.n	8005c22 <UART_SetConfig+0x25a>
 8005c0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c0e:	d811      	bhi.n	8005c34 <UART_SetConfig+0x26c>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <UART_SetConfig+0x254>
 8005c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c18:	d006      	beq.n	8005c28 <UART_SetConfig+0x260>
 8005c1a:	e00b      	b.n	8005c34 <UART_SetConfig+0x26c>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	77fb      	strb	r3, [r7, #31]
 8005c20:	e076      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c22:	2302      	movs	r3, #2
 8005c24:	77fb      	strb	r3, [r7, #31]
 8005c26:	e073      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	77fb      	strb	r3, [r7, #31]
 8005c2c:	e070      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c2e:	2308      	movs	r3, #8
 8005c30:	77fb      	strb	r3, [r7, #31]
 8005c32:	e06d      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c34:	2310      	movs	r3, #16
 8005c36:	77fb      	strb	r3, [r7, #31]
 8005c38:	e06a      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005cac <UART_SetConfig+0x2e4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d138      	bne.n	8005cb6 <UART_SetConfig+0x2ee>
 8005c44:	4b13      	ldr	r3, [pc, #76]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c4a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005c4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c52:	d017      	beq.n	8005c84 <UART_SetConfig+0x2bc>
 8005c54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c58:	d82a      	bhi.n	8005cb0 <UART_SetConfig+0x2e8>
 8005c5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c5e:	d00b      	beq.n	8005c78 <UART_SetConfig+0x2b0>
 8005c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c64:	d824      	bhi.n	8005cb0 <UART_SetConfig+0x2e8>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <UART_SetConfig+0x2aa>
 8005c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6e:	d006      	beq.n	8005c7e <UART_SetConfig+0x2b6>
 8005c70:	e01e      	b.n	8005cb0 <UART_SetConfig+0x2e8>
 8005c72:	2300      	movs	r3, #0
 8005c74:	77fb      	strb	r3, [r7, #31]
 8005c76:	e04b      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	77fb      	strb	r3, [r7, #31]
 8005c7c:	e048      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c7e:	2304      	movs	r3, #4
 8005c80:	77fb      	strb	r3, [r7, #31]
 8005c82:	e045      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c84:	2308      	movs	r3, #8
 8005c86:	77fb      	strb	r3, [r7, #31]
 8005c88:	e042      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c8a:	bf00      	nop
 8005c8c:	efff69f3 	.word	0xefff69f3
 8005c90:	40011000 	.word	0x40011000
 8005c94:	40023800 	.word	0x40023800
 8005c98:	40004400 	.word	0x40004400
 8005c9c:	40004800 	.word	0x40004800
 8005ca0:	40004c00 	.word	0x40004c00
 8005ca4:	40005000 	.word	0x40005000
 8005ca8:	40011400 	.word	0x40011400
 8005cac:	40007800 	.word	0x40007800
 8005cb0:	2310      	movs	r3, #16
 8005cb2:	77fb      	strb	r3, [r7, #31]
 8005cb4:	e02c      	b.n	8005d10 <UART_SetConfig+0x348>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a72      	ldr	r2, [pc, #456]	@ (8005e84 <UART_SetConfig+0x4bc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d125      	bne.n	8005d0c <UART_SetConfig+0x344>
 8005cc0:	4b71      	ldr	r3, [pc, #452]	@ (8005e88 <UART_SetConfig+0x4c0>)
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005cca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005cce:	d017      	beq.n	8005d00 <UART_SetConfig+0x338>
 8005cd0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005cd4:	d817      	bhi.n	8005d06 <UART_SetConfig+0x33e>
 8005cd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cda:	d00b      	beq.n	8005cf4 <UART_SetConfig+0x32c>
 8005cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ce0:	d811      	bhi.n	8005d06 <UART_SetConfig+0x33e>
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <UART_SetConfig+0x326>
 8005ce6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cea:	d006      	beq.n	8005cfa <UART_SetConfig+0x332>
 8005cec:	e00b      	b.n	8005d06 <UART_SetConfig+0x33e>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	77fb      	strb	r3, [r7, #31]
 8005cf2:	e00d      	b.n	8005d10 <UART_SetConfig+0x348>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e00a      	b.n	8005d10 <UART_SetConfig+0x348>
 8005cfa:	2304      	movs	r3, #4
 8005cfc:	77fb      	strb	r3, [r7, #31]
 8005cfe:	e007      	b.n	8005d10 <UART_SetConfig+0x348>
 8005d00:	2308      	movs	r3, #8
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e004      	b.n	8005d10 <UART_SetConfig+0x348>
 8005d06:	2310      	movs	r3, #16
 8005d08:	77fb      	strb	r3, [r7, #31]
 8005d0a:	e001      	b.n	8005d10 <UART_SetConfig+0x348>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d18:	d15b      	bne.n	8005dd2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005d1a:	7ffb      	ldrb	r3, [r7, #31]
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d828      	bhi.n	8005d72 <UART_SetConfig+0x3aa>
 8005d20:	a201      	add	r2, pc, #4	@ (adr r2, 8005d28 <UART_SetConfig+0x360>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005d4d 	.word	0x08005d4d
 8005d2c:	08005d55 	.word	0x08005d55
 8005d30:	08005d5d 	.word	0x08005d5d
 8005d34:	08005d73 	.word	0x08005d73
 8005d38:	08005d63 	.word	0x08005d63
 8005d3c:	08005d73 	.word	0x08005d73
 8005d40:	08005d73 	.word	0x08005d73
 8005d44:	08005d73 	.word	0x08005d73
 8005d48:	08005d6b 	.word	0x08005d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d4c:	f7fd fe2a 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 8005d50:	61b8      	str	r0, [r7, #24]
        break;
 8005d52:	e013      	b.n	8005d7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d54:	f7fd fe3a 	bl	80039cc <HAL_RCC_GetPCLK2Freq>
 8005d58:	61b8      	str	r0, [r7, #24]
        break;
 8005d5a:	e00f      	b.n	8005d7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8005e8c <UART_SetConfig+0x4c4>)
 8005d5e:	61bb      	str	r3, [r7, #24]
        break;
 8005d60:	e00c      	b.n	8005d7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d62:	f7fd fd4d 	bl	8003800 <HAL_RCC_GetSysClockFreq>
 8005d66:	61b8      	str	r0, [r7, #24]
        break;
 8005d68:	e008      	b.n	8005d7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d6e:	61bb      	str	r3, [r7, #24]
        break;
 8005d70:	e004      	b.n	8005d7c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	77bb      	strb	r3, [r7, #30]
        break;
 8005d7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d074      	beq.n	8005e6c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	005a      	lsls	r2, r3, #1
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	085b      	lsrs	r3, r3, #1
 8005d8c:	441a      	add	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2b0f      	cmp	r3, #15
 8005d9c:	d916      	bls.n	8005dcc <UART_SetConfig+0x404>
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005da4:	d212      	bcs.n	8005dcc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f023 030f 	bic.w	r3, r3, #15
 8005dae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	89fb      	ldrh	r3, [r7, #14]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	89fa      	ldrh	r2, [r7, #14]
 8005dc8:	60da      	str	r2, [r3, #12]
 8005dca:	e04f      	b.n	8005e6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	77bb      	strb	r3, [r7, #30]
 8005dd0:	e04c      	b.n	8005e6c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dd2:	7ffb      	ldrb	r3, [r7, #31]
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d828      	bhi.n	8005e2a <UART_SetConfig+0x462>
 8005dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8005de0 <UART_SetConfig+0x418>)
 8005dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dde:	bf00      	nop
 8005de0:	08005e05 	.word	0x08005e05
 8005de4:	08005e0d 	.word	0x08005e0d
 8005de8:	08005e15 	.word	0x08005e15
 8005dec:	08005e2b 	.word	0x08005e2b
 8005df0:	08005e1b 	.word	0x08005e1b
 8005df4:	08005e2b 	.word	0x08005e2b
 8005df8:	08005e2b 	.word	0x08005e2b
 8005dfc:	08005e2b 	.word	0x08005e2b
 8005e00:	08005e23 	.word	0x08005e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e04:	f7fd fdce 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 8005e08:	61b8      	str	r0, [r7, #24]
        break;
 8005e0a:	e013      	b.n	8005e34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e0c:	f7fd fdde 	bl	80039cc <HAL_RCC_GetPCLK2Freq>
 8005e10:	61b8      	str	r0, [r7, #24]
        break;
 8005e12:	e00f      	b.n	8005e34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e14:	4b1d      	ldr	r3, [pc, #116]	@ (8005e8c <UART_SetConfig+0x4c4>)
 8005e16:	61bb      	str	r3, [r7, #24]
        break;
 8005e18:	e00c      	b.n	8005e34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e1a:	f7fd fcf1 	bl	8003800 <HAL_RCC_GetSysClockFreq>
 8005e1e:	61b8      	str	r0, [r7, #24]
        break;
 8005e20:	e008      	b.n	8005e34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e26:	61bb      	str	r3, [r7, #24]
        break;
 8005e28:	e004      	b.n	8005e34 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	77bb      	strb	r3, [r7, #30]
        break;
 8005e32:	bf00      	nop
    }

    if (pclk != 0U)
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d018      	beq.n	8005e6c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	085a      	lsrs	r2, r3, #1
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	441a      	add	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b0f      	cmp	r3, #15
 8005e52:	d909      	bls.n	8005e68 <UART_SetConfig+0x4a0>
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e5a:	d205      	bcs.n	8005e68 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60da      	str	r2, [r3, #12]
 8005e66:	e001      	b.n	8005e6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005e78:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3720      	adds	r7, #32
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40007c00 	.word	0x40007c00
 8005e88:	40023800 	.word	0x40023800
 8005e8c:	00f42400 	.word	0x00f42400

08005e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00a      	beq.n	8005efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01a      	beq.n	8005fa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f8e:	d10a      	bne.n	8005fa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	605a      	str	r2, [r3, #4]
  }
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08c      	sub	sp, #48	@ 0x30
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fe4:	f7fc f956 	bl	8002294 <HAL_GetTick>
 8005fe8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0308 	and.w	r3, r3, #8
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d12e      	bne.n	8006056 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006000:	2200      	movs	r2, #0
 8006002:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f83b 	bl	8006082 <UART_WaitOnFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d021      	beq.n	8006056 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006026:	623b      	str	r3, [r7, #32]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	461a      	mov	r2, r3
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	61fb      	str	r3, [r7, #28]
 8006032:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006034:	69b9      	ldr	r1, [r7, #24]
 8006036:	69fa      	ldr	r2, [r7, #28]
 8006038:	e841 2300 	strex	r3, r2, [r1]
 800603c:	617b      	str	r3, [r7, #20]
   return(result);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e6      	bne.n	8006012 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e011      	b.n	800607a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3728      	adds	r7, #40	@ 0x28
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	603b      	str	r3, [r7, #0]
 800608e:	4613      	mov	r3, r2
 8006090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006092:	e04f      	b.n	8006134 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609a:	d04b      	beq.n	8006134 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609c:	f7fc f8fa 	bl	8002294 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d302      	bcc.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e04e      	b.n	8006154 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d037      	beq.n	8006134 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b80      	cmp	r3, #128	@ 0x80
 80060c8:	d034      	beq.n	8006134 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b40      	cmp	r3, #64	@ 0x40
 80060ce:	d031      	beq.n	8006134 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b08      	cmp	r3, #8
 80060dc:	d110      	bne.n	8006100 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2208      	movs	r2, #8
 80060e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 f838 	bl	800615c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2208      	movs	r2, #8
 80060f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e029      	b.n	8006154 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800610a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800610e:	d111      	bne.n	8006134 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006118:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 f81e 	bl	800615c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e00f      	b.n	8006154 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69da      	ldr	r2, [r3, #28]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	4013      	ands	r3, r2
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	429a      	cmp	r2, r3
 8006142:	bf0c      	ite	eq
 8006144:	2301      	moveq	r3, #1
 8006146:	2300      	movne	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	79fb      	ldrb	r3, [r7, #7]
 800614e:	429a      	cmp	r2, r3
 8006150:	d0a0      	beq.n	8006094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800615c:	b480      	push	{r7}
 800615e:	b095      	sub	sp, #84	@ 0x54
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006178:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006182:	643b      	str	r3, [r7, #64]	@ 0x40
 8006184:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006188:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e6      	bne.n	8006164 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3308      	adds	r3, #8
 800619c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3308      	adds	r3, #8
 80061b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e5      	bne.n	8006196 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d118      	bne.n	8006204 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	60bb      	str	r3, [r7, #8]
   return(result);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f023 0310 	bic.w	r3, r3, #16
 80061e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061f0:	61bb      	str	r3, [r7, #24]
 80061f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6979      	ldr	r1, [r7, #20]
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	613b      	str	r3, [r7, #16]
   return(result);
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e6      	bne.n	80061d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006218:	bf00      	nop
 800621a:	3754      	adds	r7, #84	@ 0x54
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006224:	b084      	sub	sp, #16
 8006226:	b480      	push	{r7}
 8006228:	b085      	sub	sp, #20
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	f107 001c 	add.w	r0, r7, #28
 8006232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800623a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800623c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800623e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8006242:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8006246:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800624a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800624e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	4b07      	ldr	r3, [pc, #28]	@ (8006278 <SDMMC_Init+0x54>)
 800625c:	4013      	ands	r3, r2
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	b004      	add	sp, #16
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	ffff8100 	.word	0xffff8100

0800627c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800628a:	4618      	mov	r0, r3
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2203      	movs	r2, #3
 80062c4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0303 	and.w	r3, r3, #3
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800630e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006314:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800631a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	4b06      	ldr	r3, [pc, #24]	@ (8006340 <SDMMC_SendCommand+0x50>)
 8006328:	4013      	ands	r3, r2
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	fffff000 	.word	0xfffff000

08006344 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	b2db      	uxtb	r3, r3
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3314      	adds	r3, #20
 800636c:	461a      	mov	r2, r3
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	4413      	add	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
}  
 8006378:	4618      	mov	r0, r3
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80063aa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80063b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80063b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c2:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	431a      	orrs	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0

}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80063ea:	2310      	movs	r3, #16
 80063ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80063ee:	2340      	movs	r3, #64	@ 0x40
 80063f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80063f2:	2300      	movs	r3, #0
 80063f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80063f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80063fc:	f107 0308 	add.w	r3, r7, #8
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7ff ff74 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800640c:	2110      	movs	r1, #16
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fa1a 	bl	8006848 <SDMMC_GetCmdResp1>
 8006414:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006416:	69fb      	ldr	r3, [r7, #28]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3720      	adds	r7, #32
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800642e:	2311      	movs	r3, #17
 8006430:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006432:	2340      	movs	r3, #64	@ 0x40
 8006434:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800643a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800643e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006440:	f107 0308 	add.w	r3, r7, #8
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff ff52 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800644c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006450:	2111      	movs	r1, #17
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f9f8 	bl	8006848 <SDMMC_GetCmdResp1>
 8006458:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800645a:	69fb      	ldr	r3, [r7, #28]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3720      	adds	r7, #32
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006472:	2312      	movs	r3, #18
 8006474:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006476:	2340      	movs	r3, #64	@ 0x40
 8006478:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800647e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006482:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006484:	f107 0308 	add.w	r3, r7, #8
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff ff30 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006494:	2112      	movs	r1, #18
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f9d6 	bl	8006848 <SDMMC_GetCmdResp1>
 800649c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800649e:	69fb      	ldr	r3, [r7, #28]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3720      	adds	r7, #32
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80064b6:	2318      	movs	r3, #24
 80064b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80064ba:	2340      	movs	r3, #64	@ 0x40
 80064bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064be:	2300      	movs	r3, #0
 80064c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064c8:	f107 0308 	add.w	r3, r7, #8
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff ff0e 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80064d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064d8:	2118      	movs	r1, #24
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f9b4 	bl	8006848 <SDMMC_GetCmdResp1>
 80064e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064e2:	69fb      	ldr	r3, [r7, #28]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3720      	adds	r7, #32
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80064fa:	2319      	movs	r3, #25
 80064fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80064fe:	2340      	movs	r3, #64	@ 0x40
 8006500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006502:	2300      	movs	r3, #0
 8006504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800650a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800650c:	f107 0308 	add.w	r3, r7, #8
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff feec 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800651c:	2119      	movs	r1, #25
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f992 	bl	8006848 <SDMMC_GetCmdResp1>
 8006524:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006526:	69fb      	ldr	r3, [r7, #28]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3720      	adds	r7, #32
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800653c:	230c      	movs	r3, #12
 800653e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006540:	2340      	movs	r3, #64	@ 0x40
 8006542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006544:	2300      	movs	r3, #0
 8006546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006548:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800654c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800654e:	f107 0308 	add.w	r3, r7, #8
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff fecb 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800655a:	4a05      	ldr	r2, [pc, #20]	@ (8006570 <SDMMC_CmdStopTransfer+0x40>)
 800655c:	210c      	movs	r1, #12
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f972 	bl	8006848 <SDMMC_GetCmdResp1>
 8006564:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006566:	69fb      	ldr	r3, [r7, #28]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3720      	adds	r7, #32
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	05f5e100 	.word	0x05f5e100

08006574 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b08a      	sub	sp, #40	@ 0x28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006584:	2307      	movs	r3, #7
 8006586:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006588:	2340      	movs	r3, #64	@ 0x40
 800658a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800658c:	2300      	movs	r3, #0
 800658e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006590:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006594:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006596:	f107 0310 	add.w	r3, r7, #16
 800659a:	4619      	mov	r1, r3
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f7ff fea7 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80065a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065a6:	2107      	movs	r1, #7
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f94d 	bl	8006848 <SDMMC_GetCmdResp1>
 80065ae:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3728      	adds	r7, #40	@ 0x28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b088      	sub	sp, #32
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80065ca:	2300      	movs	r3, #0
 80065cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80065d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80065d8:	f107 0308 	add.w	r3, r7, #8
 80065dc:	4619      	mov	r1, r3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff fe86 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fb67 	bl	8006cb8 <SDMMC_GetCmdError>
 80065ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065ec:	69fb      	ldr	r3, [r7, #28]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b088      	sub	sp, #32
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80065fe:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8006602:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006604:	2308      	movs	r3, #8
 8006606:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006608:	2340      	movs	r3, #64	@ 0x40
 800660a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800660c:	2300      	movs	r3, #0
 800660e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006614:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006616:	f107 0308 	add.w	r3, r7, #8
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff fe67 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fafa 	bl	8006c1c <SDMMC_GetCmdResp7>
 8006628:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800662a:	69fb      	ldr	r3, [r7, #28]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3720      	adds	r7, #32
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b088      	sub	sp, #32
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006642:	2337      	movs	r3, #55	@ 0x37
 8006644:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006646:	2340      	movs	r3, #64	@ 0x40
 8006648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800664a:	2300      	movs	r3, #0
 800664c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800664e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006652:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006654:	f107 0308 	add.w	r3, r7, #8
 8006658:	4619      	mov	r1, r3
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7ff fe48 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006664:	2137      	movs	r1, #55	@ 0x37
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f8ee 	bl	8006848 <SDMMC_GetCmdResp1>
 800666c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800666e:	69fb      	ldr	r3, [r7, #28]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3720      	adds	r7, #32
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	4b0d      	ldr	r3, [pc, #52]	@ (80066bc <SDMMC_CmdAppOperCommand+0x44>)
 8006686:	4313      	orrs	r3, r2
 8006688:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800668a:	2329      	movs	r3, #41	@ 0x29
 800668c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800668e:	2340      	movs	r3, #64	@ 0x40
 8006690:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006692:	2300      	movs	r3, #0
 8006694:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800669a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800669c:	f107 0308 	add.w	r3, r7, #8
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff fe24 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fa03 	bl	8006ab4 <SDMMC_GetCmdResp3>
 80066ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066b0:	69fb      	ldr	r3, [r7, #28]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3720      	adds	r7, #32
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	80100000 	.word	0x80100000

080066c0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b088      	sub	sp, #32
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80066ce:	2306      	movs	r3, #6
 80066d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066d2:	2340      	movs	r3, #64	@ 0x40
 80066d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066d6:	2300      	movs	r3, #0
 80066d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066e0:	f107 0308 	add.w	r3, r7, #8
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff fe02 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80066ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066f0:	2106      	movs	r1, #6
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f8a8 	bl	8006848 <SDMMC_GetCmdResp1>
 80066f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066fa:	69fb      	ldr	r3, [r7, #28]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3720      	adds	r7, #32
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006710:	2333      	movs	r3, #51	@ 0x33
 8006712:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006714:	2340      	movs	r3, #64	@ 0x40
 8006716:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006718:	2300      	movs	r3, #0
 800671a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800671c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006720:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006722:	f107 0308 	add.w	r3, r7, #8
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff fde1 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800672e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006732:	2133      	movs	r1, #51	@ 0x33
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f887 	bl	8006848 <SDMMC_GetCmdResp1>
 800673a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800673c:	69fb      	ldr	r3, [r7, #28]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3720      	adds	r7, #32
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b088      	sub	sp, #32
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006752:	2302      	movs	r3, #2
 8006754:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006756:	23c0      	movs	r3, #192	@ 0xc0
 8006758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800675a:	2300      	movs	r3, #0
 800675c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800675e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006762:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006764:	f107 0308 	add.w	r3, r7, #8
 8006768:	4619      	mov	r1, r3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff fdc0 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f957 	bl	8006a24 <SDMMC_GetCmdResp2>
 8006776:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006778:	69fb      	ldr	r3, [r7, #28]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3720      	adds	r7, #32
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b088      	sub	sp, #32
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006790:	2309      	movs	r3, #9
 8006792:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006794:	23c0      	movs	r3, #192	@ 0xc0
 8006796:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800679c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067a2:	f107 0308 	add.w	r3, r7, #8
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff fda1 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f938 	bl	8006a24 <SDMMC_GetCmdResp2>
 80067b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067b6:	69fb      	ldr	r3, [r7, #28]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3720      	adds	r7, #32
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80067ce:	2303      	movs	r3, #3
 80067d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80067d2:	2340      	movs	r3, #64	@ 0x40
 80067d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80067d6:	2300      	movs	r3, #0
 80067d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80067da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067e0:	f107 0308 	add.w	r3, r7, #8
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7ff fd82 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	2103      	movs	r1, #3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f99d 	bl	8006b30 <SDMMC_GetCmdResp6>
 80067f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067f8:	69fb      	ldr	r3, [r7, #28]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3720      	adds	r7, #32
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b088      	sub	sp, #32
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006810:	230d      	movs	r3, #13
 8006812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006814:	2340      	movs	r3, #64	@ 0x40
 8006816:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800681c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006820:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006822:	f107 0308 	add.w	r3, r7, #8
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7ff fd61 	bl	80062f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800682e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006832:	210d      	movs	r1, #13
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f807 	bl	8006848 <SDMMC_GetCmdResp1>
 800683a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800683c:	69fb      	ldr	r3, [r7, #28]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3720      	adds	r7, #32
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	460b      	mov	r3, r1
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006856:	4b70      	ldr	r3, [pc, #448]	@ (8006a18 <SDMMC_GetCmdResp1+0x1d0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a70      	ldr	r2, [pc, #448]	@ (8006a1c <SDMMC_GetCmdResp1+0x1d4>)
 800685c:	fba2 2303 	umull	r2, r3, r2, r3
 8006860:	0a5a      	lsrs	r2, r3, #9
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	fb02 f303 	mul.w	r3, r2, r3
 8006868:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	1e5a      	subs	r2, r3, #1
 800686e:	61fa      	str	r2, [r7, #28]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d102      	bne.n	800687a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006874:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006878:	e0c9      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800687e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0ef      	beq.n	800686a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1ea      	bne.n	800686a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b00      	cmp	r3, #0
 800689e:	d004      	beq.n	80068aa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2204      	movs	r2, #4
 80068a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068a6:	2304      	movs	r3, #4
 80068a8:	e0b1      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d004      	beq.n	80068c0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2201      	movs	r2, #1
 80068ba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068bc:	2301      	movs	r3, #1
 80068be:	e0a6      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	22c5      	movs	r2, #197	@ 0xc5
 80068c4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f7ff fd3c 	bl	8006344 <SDMMC_GetCommandResponse>
 80068cc:	4603      	mov	r3, r0
 80068ce:	461a      	mov	r2, r3
 80068d0:	7afb      	ldrb	r3, [r7, #11]
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d001      	beq.n	80068da <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e099      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80068da:	2100      	movs	r1, #0
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f7ff fd3e 	bl	800635e <SDMMC_GetResponse>
 80068e2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	4b4e      	ldr	r3, [pc, #312]	@ (8006a20 <SDMMC_GetCmdResp1+0x1d8>)
 80068e8:	4013      	ands	r3, r2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80068ee:	2300      	movs	r3, #0
 80068f0:	e08d      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	da02      	bge.n	80068fe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80068f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80068fc:	e087      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006908:	2340      	movs	r3, #64	@ 0x40
 800690a:	e080      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006916:	2380      	movs	r3, #128	@ 0x80
 8006918:	e079      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006924:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006928:	e071      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006934:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006938:	e069      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006944:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006948:	e061      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006954:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006958:	e059      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006964:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006968:	e051      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006974:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006978:	e049      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006984:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006988:	e041      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006994:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006998:	e039      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80069a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80069a8:	e031      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80069b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80069b8:	e029      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80069c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80069c8:	e021      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80069d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80069d8:	e019      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80069e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80069e8:	e011      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80069f4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80069f8:	e009      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f003 0308 	and.w	r3, r3, #8
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006a04:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006a08:	e001      	b.n	8006a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006a0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3720      	adds	r7, #32
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20000000 	.word	0x20000000
 8006a1c:	10624dd3 	.word	0x10624dd3
 8006a20:	fdffe008 	.word	0xfdffe008

08006a24 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8006aac <SDMMC_GetCmdResp2+0x88>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab0 <SDMMC_GetCmdResp2+0x8c>)
 8006a32:	fba2 2303 	umull	r2, r3, r2, r3
 8006a36:	0a5b      	lsrs	r3, r3, #9
 8006a38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a3c:	fb02 f303 	mul.w	r3, r2, r3
 8006a40:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	1e5a      	subs	r2, r3, #1
 8006a46:	60fa      	str	r2, [r7, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d102      	bne.n	8006a52 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006a50:	e026      	b.n	8006aa0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a56:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0ef      	beq.n	8006a42 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1ea      	bne.n	8006a42 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d004      	beq.n	8006a82 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2204      	movs	r2, #4
 8006a7c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a7e:	2304      	movs	r3, #4
 8006a80:	e00e      	b.n	8006aa0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d004      	beq.n	8006a98 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e003      	b.n	8006aa0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	22c5      	movs	r2, #197	@ 0xc5
 8006a9c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	20000000 	.word	0x20000000
 8006ab0:	10624dd3 	.word	0x10624dd3

08006ab4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006abc:	4b1a      	ldr	r3, [pc, #104]	@ (8006b28 <SDMMC_GetCmdResp3+0x74>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8006b2c <SDMMC_GetCmdResp3+0x78>)
 8006ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac6:	0a5b      	lsrs	r3, r3, #9
 8006ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006acc:	fb02 f303 	mul.w	r3, r2, r3
 8006ad0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	1e5a      	subs	r2, r3, #1
 8006ad6:	60fa      	str	r2, [r7, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d102      	bne.n	8006ae2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006adc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006ae0:	e01b      	b.n	8006b1a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0ef      	beq.n	8006ad2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1ea      	bne.n	8006ad2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d004      	beq.n	8006b12 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2204      	movs	r2, #4
 8006b0c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b0e:	2304      	movs	r3, #4
 8006b10:	e003      	b.n	8006b1a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	22c5      	movs	r2, #197	@ 0xc5
 8006b16:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	20000000 	.word	0x20000000
 8006b2c:	10624dd3 	.word	0x10624dd3

08006b30 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b088      	sub	sp, #32
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	607a      	str	r2, [r7, #4]
 8006b3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b3e:	4b35      	ldr	r3, [pc, #212]	@ (8006c14 <SDMMC_GetCmdResp6+0xe4>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a35      	ldr	r2, [pc, #212]	@ (8006c18 <SDMMC_GetCmdResp6+0xe8>)
 8006b44:	fba2 2303 	umull	r2, r3, r2, r3
 8006b48:	0a5b      	lsrs	r3, r3, #9
 8006b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b4e:	fb02 f303 	mul.w	r3, r2, r3
 8006b52:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	1e5a      	subs	r2, r3, #1
 8006b58:	61fa      	str	r2, [r7, #28]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d102      	bne.n	8006b64 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b5e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006b62:	e052      	b.n	8006c0a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b68:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d0ef      	beq.n	8006b54 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1ea      	bne.n	8006b54 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b82:	f003 0304 	and.w	r3, r3, #4
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d004      	beq.n	8006b94 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2204      	movs	r2, #4
 8006b8e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b90:	2304      	movs	r3, #4
 8006b92:	e03a      	b.n	8006c0a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d004      	beq.n	8006baa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e02f      	b.n	8006c0a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f7ff fbca 	bl	8006344 <SDMMC_GetCommandResponse>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	7afb      	ldrb	r3, [r7, #11]
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d001      	beq.n	8006bbe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e025      	b.n	8006c0a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	22c5      	movs	r2, #197	@ 0xc5
 8006bc2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7ff fbc9 	bl	800635e <SDMMC_GetResponse>
 8006bcc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d106      	bne.n	8006be6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	0c1b      	lsrs	r3, r3, #16
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e011      	b.n	8006c0a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006bf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006bf4:	e009      	b.n	8006c0a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006c00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c04:	e001      	b.n	8006c0a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006c06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3720      	adds	r7, #32
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	20000000 	.word	0x20000000
 8006c18:	10624dd3 	.word	0x10624dd3

08006c1c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c24:	4b22      	ldr	r3, [pc, #136]	@ (8006cb0 <SDMMC_GetCmdResp7+0x94>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a22      	ldr	r2, [pc, #136]	@ (8006cb4 <SDMMC_GetCmdResp7+0x98>)
 8006c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2e:	0a5b      	lsrs	r3, r3, #9
 8006c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c34:	fb02 f303 	mul.w	r3, r2, r3
 8006c38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	1e5a      	subs	r2, r3, #1
 8006c3e:	60fa      	str	r2, [r7, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006c48:	e02c      	b.n	8006ca4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0ef      	beq.n	8006c3a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1ea      	bne.n	8006c3a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d004      	beq.n	8006c7a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2204      	movs	r2, #4
 8006c74:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c76:	2304      	movs	r3, #4
 8006c78:	e014      	b.n	8006ca4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e009      	b.n	8006ca4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2240      	movs	r2, #64	@ 0x40
 8006ca0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006ca2:	2300      	movs	r3, #0
  
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	20000000 	.word	0x20000000
 8006cb4:	10624dd3 	.word	0x10624dd3

08006cb8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006cc0:	4b11      	ldr	r3, [pc, #68]	@ (8006d08 <SDMMC_GetCmdError+0x50>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a11      	ldr	r2, [pc, #68]	@ (8006d0c <SDMMC_GetCmdError+0x54>)
 8006cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cca:	0a5b      	lsrs	r3, r3, #9
 8006ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cd0:	fb02 f303 	mul.w	r3, r2, r3
 8006cd4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	1e5a      	subs	r2, r3, #1
 8006cda:	60fa      	str	r2, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d102      	bne.n	8006ce6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ce0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006ce4:	e009      	b.n	8006cfa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0f1      	beq.n	8006cd6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	22c5      	movs	r2, #197	@ 0xc5
 8006cf6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20000000 	.word	0x20000000
 8006d0c:	10624dd3 	.word	0x10624dd3

08006d10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006d14:	4904      	ldr	r1, [pc, #16]	@ (8006d28 <MX_FATFS_Init+0x18>)
 8006d16:	4805      	ldr	r0, [pc, #20]	@ (8006d2c <MX_FATFS_Init+0x1c>)
 8006d18:	f002 fd40 	bl	800979c <FATFS_LinkDriver>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	461a      	mov	r2, r3
 8006d20:	4b03      	ldr	r3, [pc, #12]	@ (8006d30 <MX_FATFS_Init+0x20>)
 8006d22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006d24:	bf00      	nop
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	200003c8 	.word	0x200003c8
 8006d2c:	0800c4f0 	.word	0x0800c4f0
 8006d30:	200003c4 	.word	0x200003c4

08006d34 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006d38:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006d4e:	f000 f896 	bl	8006e7e <BSP_SD_IsDetected>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d001      	beq.n	8006d5c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e012      	b.n	8006d82 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8006d5c:	480b      	ldr	r0, [pc, #44]	@ (8006d8c <BSP_SD_Init+0x48>)
 8006d5e:	f7fd fa39 	bl	80041d4 <HAL_SD_Init>
 8006d62:	4603      	mov	r3, r0
 8006d64:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d109      	bne.n	8006d80 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8006d6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006d70:	4806      	ldr	r0, [pc, #24]	@ (8006d8c <BSP_SD_Init+0x48>)
 8006d72:	f7fd fff7 	bl	8004d64 <HAL_SD_ConfigWideBusOperation>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006d80:	79fb      	ldrb	r3, [r7, #7]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	200001f0 	.word	0x200001f0

08006d90 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	68f9      	ldr	r1, [r7, #12]
 8006da6:	4806      	ldr	r0, [pc, #24]	@ (8006dc0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006da8:	f7fd fac4 	bl	8004334 <HAL_SD_ReadBlocks_DMA>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	200001f0 	.word	0x200001f0

08006dc4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	68f9      	ldr	r1, [r7, #12]
 8006dda:	4806      	ldr	r0, [pc, #24]	@ (8006df4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006ddc:	f7fd fb8c 	bl	80044f8 <HAL_SD_WriteBlocks_DMA>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	200001f0 	.word	0x200001f0

08006df8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006dfc:	4805      	ldr	r0, [pc, #20]	@ (8006e14 <BSP_SD_GetCardState+0x1c>)
 8006dfe:	f7fe f84b 	bl	8004e98 <HAL_SD_GetCardState>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	bf14      	ite	ne
 8006e08:	2301      	movne	r3, #1
 8006e0a:	2300      	moveq	r3, #0
 8006e0c:	b2db      	uxtb	r3, r3
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	200001f0 	.word	0x200001f0

08006e18 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4803      	ldr	r0, [pc, #12]	@ (8006e30 <BSP_SD_GetCardInfo+0x18>)
 8006e24:	f7fd ff72 	bl	8004d0c <HAL_SD_GetCardInfo>
}
 8006e28:	bf00      	nop
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	200001f0 	.word	0x200001f0

08006e34 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006e3c:	f000 f818 	bl	8006e70 <BSP_SD_AbortCallback>
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006e50:	f000 f9a8 	bl	80071a4 <BSP_SD_WriteCpltCallback>
}
 8006e54:	bf00      	nop
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006e64:	f000 f9aa 	bl	80071bc <BSP_SD_ReadCpltCallback>
}
 8006e68:	bf00      	nop
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0

}
 8006e74:	bf00      	nop
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006e84:	2301      	movs	r3, #1
 8006e86:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006e88:	f000 f80c 	bl	8006ea4 <BSP_PlatformIsDetected>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006e92:	2300      	movs	r3, #0
 8006e94:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006e96:	79fb      	ldrb	r3, [r7, #7]
 8006e98:	b2db      	uxtb	r3, r3
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006eae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006eb2:	4806      	ldr	r0, [pc, #24]	@ (8006ecc <BSP_PlatformIsDetected+0x28>)
 8006eb4:	f7fc f882 	bl	8002fbc <HAL_GPIO_ReadPin>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	40020800 	.word	0x40020800

08006ed0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006ed8:	f7fb f9dc 	bl	8002294 <HAL_GetTick>
 8006edc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006ede:	e006      	b.n	8006eee <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006ee0:	f7ff ff8a 	bl	8006df8 <BSP_SD_GetCardState>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	e009      	b.n	8006f02 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006eee:	f7fb f9d1 	bl	8002294 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d8f0      	bhi.n	8006ee0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
	...

08006f0c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	4603      	mov	r3, r0
 8006f14:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006f16:	4b0b      	ldr	r3, [pc, #44]	@ (8006f44 <SD_CheckStatus+0x38>)
 8006f18:	2201      	movs	r2, #1
 8006f1a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006f1c:	f7ff ff6c 	bl	8006df8 <BSP_SD_GetCardState>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d107      	bne.n	8006f36 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006f26:	4b07      	ldr	r3, [pc, #28]	@ (8006f44 <SD_CheckStatus+0x38>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	f023 0301 	bic.w	r3, r3, #1
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	4b04      	ldr	r3, [pc, #16]	@ (8006f44 <SD_CheckStatus+0x38>)
 8006f34:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006f36:	4b03      	ldr	r3, [pc, #12]	@ (8006f44 <SD_CheckStatus+0x38>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	b2db      	uxtb	r3, r3
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	20000009 	.word	0x20000009

08006f48 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006f52:	f7ff fef7 	bl	8006d44 <BSP_SD_Init>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d107      	bne.n	8006f6c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7ff ffd4 	bl	8006f0c <SD_CheckStatus>
 8006f64:	4603      	mov	r3, r0
 8006f66:	461a      	mov	r2, r3
 8006f68:	4b04      	ldr	r3, [pc, #16]	@ (8006f7c <SD_initialize+0x34>)
 8006f6a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006f6c:	4b03      	ldr	r3, [pc, #12]	@ (8006f7c <SD_initialize+0x34>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	b2db      	uxtb	r3, r3
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000009 	.word	0x20000009

08006f80 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff ffbd 	bl	8006f0c <SD_CheckStatus>
 8006f92:	4603      	mov	r3, r0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	607a      	str	r2, [r7, #4]
 8006fa6:	603b      	str	r3, [r7, #0]
 8006fa8:	4603      	mov	r3, r0
 8006faa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006fb0:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006fb4:	f7ff ff8c 	bl	8006ed0 <SD_CheckStatusWithTimeout>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	da01      	bge.n	8006fc2 <SD_read+0x26>
  {
    return res;
 8006fbe:	7dfb      	ldrb	r3, [r7, #23]
 8006fc0:	e03b      	b.n	800703a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	6879      	ldr	r1, [r7, #4]
 8006fc6:	68b8      	ldr	r0, [r7, #8]
 8006fc8:	f7ff fee2 	bl	8006d90 <BSP_SD_ReadBlocks_DMA>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d132      	bne.n	8007038 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8007044 <SD_read+0xa8>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006fd8:	f7fb f95c 	bl	8002294 <HAL_GetTick>
 8006fdc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006fde:	bf00      	nop
 8006fe0:	4b18      	ldr	r3, [pc, #96]	@ (8007044 <SD_read+0xa8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d108      	bne.n	8006ffa <SD_read+0x5e>
 8006fe8:	f7fb f954 	bl	8002294 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d9f2      	bls.n	8006fe0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006ffa:	4b12      	ldr	r3, [pc, #72]	@ (8007044 <SD_read+0xa8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d102      	bne.n	8007008 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	75fb      	strb	r3, [r7, #23]
 8007006:	e017      	b.n	8007038 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007008:	4b0e      	ldr	r3, [pc, #56]	@ (8007044 <SD_read+0xa8>)
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800700e:	f7fb f941 	bl	8002294 <HAL_GetTick>
 8007012:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007014:	e007      	b.n	8007026 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007016:	f7ff feef 	bl	8006df8 <BSP_SD_GetCardState>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d102      	bne.n	8007026 <SD_read+0x8a>
          {
            res = RES_OK;
 8007020:	2300      	movs	r3, #0
 8007022:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007024:	e008      	b.n	8007038 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007026:	f7fb f935 	bl	8002294 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007034:	4293      	cmp	r3, r2
 8007036:	d9ee      	bls.n	8007016 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007038:	7dfb      	ldrb	r3, [r7, #23]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000600 	.word	0x20000600

08007048 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	607a      	str	r2, [r7, #4]
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800705c:	4b24      	ldr	r3, [pc, #144]	@ (80070f0 <SD_write+0xa8>)
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007062:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007066:	f7ff ff33 	bl	8006ed0 <SD_CheckStatusWithTimeout>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	da01      	bge.n	8007074 <SD_write+0x2c>
  {
    return res;
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	e038      	b.n	80070e6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	68b8      	ldr	r0, [r7, #8]
 800707a:	f7ff fea3 	bl	8006dc4 <BSP_SD_WriteBlocks_DMA>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d12f      	bne.n	80070e4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007084:	f7fb f906 	bl	8002294 <HAL_GetTick>
 8007088:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800708a:	bf00      	nop
 800708c:	4b18      	ldr	r3, [pc, #96]	@ (80070f0 <SD_write+0xa8>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d108      	bne.n	80070a6 <SD_write+0x5e>
 8007094:	f7fb f8fe 	bl	8002294 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	f247 522f 	movw	r2, #29999	@ 0x752f
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d9f2      	bls.n	800708c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80070a6:	4b12      	ldr	r3, [pc, #72]	@ (80070f0 <SD_write+0xa8>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d102      	bne.n	80070b4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	75fb      	strb	r3, [r7, #23]
 80070b2:	e017      	b.n	80070e4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80070b4:	4b0e      	ldr	r3, [pc, #56]	@ (80070f0 <SD_write+0xa8>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80070ba:	f7fb f8eb 	bl	8002294 <HAL_GetTick>
 80070be:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80070c0:	e007      	b.n	80070d2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80070c2:	f7ff fe99 	bl	8006df8 <BSP_SD_GetCardState>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d102      	bne.n	80070d2 <SD_write+0x8a>
          {
            res = RES_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	75fb      	strb	r3, [r7, #23]
            break;
 80070d0:	e008      	b.n	80070e4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80070d2:	f7fb f8df 	bl	8002294 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	f247 522f 	movw	r2, #29999	@ 0x752f
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d9ee      	bls.n	80070c2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	200005fc 	.word	0x200005fc

080070f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08c      	sub	sp, #48	@ 0x30
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	603a      	str	r2, [r7, #0]
 80070fe:	71fb      	strb	r3, [r7, #7]
 8007100:	460b      	mov	r3, r1
 8007102:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800710a:	4b25      	ldr	r3, [pc, #148]	@ (80071a0 <SD_ioctl+0xac>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b2db      	uxtb	r3, r3
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <SD_ioctl+0x28>
 8007118:	2303      	movs	r3, #3
 800711a:	e03c      	b.n	8007196 <SD_ioctl+0xa2>

  switch (cmd)
 800711c:	79bb      	ldrb	r3, [r7, #6]
 800711e:	2b03      	cmp	r3, #3
 8007120:	d834      	bhi.n	800718c <SD_ioctl+0x98>
 8007122:	a201      	add	r2, pc, #4	@ (adr r2, 8007128 <SD_ioctl+0x34>)
 8007124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007128:	08007139 	.word	0x08007139
 800712c:	08007141 	.word	0x08007141
 8007130:	08007159 	.word	0x08007159
 8007134:	08007173 	.word	0x08007173
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800713e:	e028      	b.n	8007192 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007140:	f107 030c 	add.w	r3, r7, #12
 8007144:	4618      	mov	r0, r3
 8007146:	f7ff fe67 	bl	8006e18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800714a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007156:	e01c      	b.n	8007192 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007158:	f107 030c 	add.w	r3, r7, #12
 800715c:	4618      	mov	r0, r3
 800715e:	f7ff fe5b 	bl	8006e18 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007164:	b29a      	uxth	r2, r3
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007170:	e00f      	b.n	8007192 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007172:	f107 030c 	add.w	r3, r7, #12
 8007176:	4618      	mov	r0, r3
 8007178:	f7ff fe4e 	bl	8006e18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	0a5a      	lsrs	r2, r3, #9
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800718a:	e002      	b.n	8007192 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800718c:	2304      	movs	r3, #4
 800718e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8007192:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007196:	4618      	mov	r0, r3
 8007198:	3730      	adds	r7, #48	@ 0x30
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20000009 	.word	0x20000009

080071a4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80071a8:	4b03      	ldr	r3, [pc, #12]	@ (80071b8 <BSP_SD_WriteCpltCallback+0x14>)
 80071aa:	2201      	movs	r2, #1
 80071ac:	601a      	str	r2, [r3, #0]
}
 80071ae:	bf00      	nop
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	200005fc 	.word	0x200005fc

080071bc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80071c0:	4b03      	ldr	r3, [pc, #12]	@ (80071d0 <BSP_SD_ReadCpltCallback+0x14>)
 80071c2:	2201      	movs	r2, #1
 80071c4:	601a      	str	r2, [r3, #0]
}
 80071c6:	bf00      	nop
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	20000600 	.word	0x20000600

080071d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	4603      	mov	r3, r0
 80071dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80071de:	79fb      	ldrb	r3, [r7, #7]
 80071e0:	4a08      	ldr	r2, [pc, #32]	@ (8007204 <disk_status+0x30>)
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	79fa      	ldrb	r2, [r7, #7]
 80071ec:	4905      	ldr	r1, [pc, #20]	@ (8007204 <disk_status+0x30>)
 80071ee:	440a      	add	r2, r1
 80071f0:	7a12      	ldrb	r2, [r2, #8]
 80071f2:	4610      	mov	r0, r2
 80071f4:	4798      	blx	r3
 80071f6:	4603      	mov	r3, r0
 80071f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	2000062c 	.word	0x2000062c

08007208 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	4603      	mov	r3, r0
 8007210:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	4a0d      	ldr	r2, [pc, #52]	@ (8007250 <disk_initialize+0x48>)
 800721a:	5cd3      	ldrb	r3, [r2, r3]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d111      	bne.n	8007244 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	4a0b      	ldr	r2, [pc, #44]	@ (8007250 <disk_initialize+0x48>)
 8007224:	2101      	movs	r1, #1
 8007226:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	4a09      	ldr	r2, [pc, #36]	@ (8007250 <disk_initialize+0x48>)
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	79fa      	ldrb	r2, [r7, #7]
 8007236:	4906      	ldr	r1, [pc, #24]	@ (8007250 <disk_initialize+0x48>)
 8007238:	440a      	add	r2, r1
 800723a:	7a12      	ldrb	r2, [r2, #8]
 800723c:	4610      	mov	r0, r2
 800723e:	4798      	blx	r3
 8007240:	4603      	mov	r3, r0
 8007242:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007244:	7bfb      	ldrb	r3, [r7, #15]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	2000062c 	.word	0x2000062c

08007254 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007254:	b590      	push	{r4, r7, lr}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
 800725e:	603b      	str	r3, [r7, #0]
 8007260:	4603      	mov	r3, r0
 8007262:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	4a0a      	ldr	r2, [pc, #40]	@ (8007290 <disk_read+0x3c>)
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	689c      	ldr	r4, [r3, #8]
 8007270:	7bfb      	ldrb	r3, [r7, #15]
 8007272:	4a07      	ldr	r2, [pc, #28]	@ (8007290 <disk_read+0x3c>)
 8007274:	4413      	add	r3, r2
 8007276:	7a18      	ldrb	r0, [r3, #8]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	68b9      	ldr	r1, [r7, #8]
 800727e:	47a0      	blx	r4
 8007280:	4603      	mov	r3, r0
 8007282:	75fb      	strb	r3, [r7, #23]
  return res;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
}
 8007286:	4618      	mov	r0, r3
 8007288:	371c      	adds	r7, #28
 800728a:	46bd      	mov	sp, r7
 800728c:	bd90      	pop	{r4, r7, pc}
 800728e:	bf00      	nop
 8007290:	2000062c 	.word	0x2000062c

08007294 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007294:	b590      	push	{r4, r7, lr}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	60b9      	str	r1, [r7, #8]
 800729c:	607a      	str	r2, [r7, #4]
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	4a0a      	ldr	r2, [pc, #40]	@ (80072d0 <disk_write+0x3c>)
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	68dc      	ldr	r4, [r3, #12]
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
 80072b2:	4a07      	ldr	r2, [pc, #28]	@ (80072d0 <disk_write+0x3c>)
 80072b4:	4413      	add	r3, r2
 80072b6:	7a18      	ldrb	r0, [r3, #8]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	68b9      	ldr	r1, [r7, #8]
 80072be:	47a0      	blx	r4
 80072c0:	4603      	mov	r3, r0
 80072c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80072c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	371c      	adds	r7, #28
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd90      	pop	{r4, r7, pc}
 80072ce:	bf00      	nop
 80072d0:	2000062c 	.word	0x2000062c

080072d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	4603      	mov	r3, r0
 80072dc:	603a      	str	r2, [r7, #0]
 80072de:	71fb      	strb	r3, [r7, #7]
 80072e0:	460b      	mov	r3, r1
 80072e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80072e4:	79fb      	ldrb	r3, [r7, #7]
 80072e6:	4a09      	ldr	r2, [pc, #36]	@ (800730c <disk_ioctl+0x38>)
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	79fa      	ldrb	r2, [r7, #7]
 80072f2:	4906      	ldr	r1, [pc, #24]	@ (800730c <disk_ioctl+0x38>)
 80072f4:	440a      	add	r2, r1
 80072f6:	7a10      	ldrb	r0, [r2, #8]
 80072f8:	79b9      	ldrb	r1, [r7, #6]
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	4798      	blx	r3
 80072fe:	4603      	mov	r3, r0
 8007300:	73fb      	strb	r3, [r7, #15]
  return res;
 8007302:	7bfb      	ldrb	r3, [r7, #15]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	2000062c 	.word	0x2000062c

08007310 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3301      	adds	r3, #1
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007320:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007324:	021b      	lsls	r3, r3, #8
 8007326:	b21a      	sxth	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	b21b      	sxth	r3, r3
 800732e:	4313      	orrs	r3, r2
 8007330:	b21b      	sxth	r3, r3
 8007332:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007334:	89fb      	ldrh	r3, [r7, #14]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007342:	b480      	push	{r7}
 8007344:	b085      	sub	sp, #20
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3303      	adds	r3, #3
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	021b      	lsls	r3, r3, #8
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	3202      	adds	r2, #2
 800735a:	7812      	ldrb	r2, [r2, #0]
 800735c:	4313      	orrs	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	021b      	lsls	r3, r3, #8
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	3201      	adds	r2, #1
 8007368:	7812      	ldrb	r2, [r2, #0]
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	021b      	lsls	r3, r3, #8
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	7812      	ldrb	r2, [r2, #0]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]
	return rv;
 800737a:	68fb      	ldr	r3, [r7, #12]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	607a      	str	r2, [r7, #4]
 800739a:	887a      	ldrh	r2, [r7, #2]
 800739c:	b2d2      	uxtb	r2, r2
 800739e:	701a      	strb	r2, [r3, #0]
 80073a0:	887b      	ldrh	r3, [r7, #2]
 80073a2:	0a1b      	lsrs	r3, r3, #8
 80073a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	887a      	ldrh	r2, [r7, #2]
 80073ae:	b2d2      	uxtb	r2, r2
 80073b0:	701a      	strb	r2, [r3, #0]
}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	607a      	str	r2, [r7, #4]
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	701a      	strb	r2, [r3, #0]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	0a1b      	lsrs	r3, r3, #8
 80073d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	b2d2      	uxtb	r2, r2
 80073e4:	701a      	strb	r2, [r3, #0]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	0a1b      	lsrs	r3, r3, #8
 80073ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	1c5a      	adds	r2, r3, #1
 80073f0:	607a      	str	r2, [r7, #4]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	b2d2      	uxtb	r2, r2
 80073f6:	701a      	strb	r2, [r3, #0]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	0a1b      	lsrs	r3, r3, #8
 80073fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	1c5a      	adds	r2, r3, #1
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	b2d2      	uxtb	r2, r2
 8007408:	701a      	strb	r2, [r3, #0]
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007416:	b480      	push	{r7}
 8007418:	b087      	sub	sp, #28
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00d      	beq.n	800744c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	1c53      	adds	r3, r2, #1
 8007434:	613b      	str	r3, [r7, #16]
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	1c59      	adds	r1, r3, #1
 800743a:	6179      	str	r1, [r7, #20]
 800743c:	7812      	ldrb	r2, [r2, #0]
 800743e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3b01      	subs	r3, #1
 8007444:	607b      	str	r3, [r7, #4]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1f1      	bne.n	8007430 <mem_cpy+0x1a>
	}
}
 800744c:	bf00      	nop
 800744e:	371c      	adds	r7, #28
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	1c5a      	adds	r2, r3, #1
 800746c:	617a      	str	r2, [r7, #20]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	b2d2      	uxtb	r2, r2
 8007472:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3b01      	subs	r3, #1
 8007478:	607b      	str	r3, [r7, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1f3      	bne.n	8007468 <mem_set+0x10>
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800748e:	b480      	push	{r7}
 8007490:	b089      	sub	sp, #36	@ 0x24
 8007492:	af00      	add	r7, sp, #0
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	61fb      	str	r3, [r7, #28]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	61fa      	str	r2, [r7, #28]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	4619      	mov	r1, r3
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	61ba      	str	r2, [r7, #24]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	1acb      	subs	r3, r1, r3
 80074ba:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3b01      	subs	r3, #1
 80074c0:	607b      	str	r3, [r7, #4]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <mem_cmp+0x40>
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0eb      	beq.n	80074a6 <mem_cmp+0x18>

	return r;
 80074ce:	697b      	ldr	r3, [r7, #20]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3724      	adds	r7, #36	@ 0x24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80074e6:	e002      	b.n	80074ee <chk_chr+0x12>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3301      	adds	r3, #1
 80074ec:	607b      	str	r3, [r7, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d005      	beq.n	8007502 <chk_chr+0x26>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	4293      	cmp	r3, r2
 8007500:	d1f2      	bne.n	80074e8 <chk_chr+0xc>
	return *str;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	781b      	ldrb	r3, [r3, #0]
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
	...

08007514 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800751e:	2300      	movs	r3, #0
 8007520:	60bb      	str	r3, [r7, #8]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	e029      	b.n	800757c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007528:	4a27      	ldr	r2, [pc, #156]	@ (80075c8 <chk_lock+0xb4>)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	4413      	add	r3, r2
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d01d      	beq.n	8007572 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007536:	4a24      	ldr	r2, [pc, #144]	@ (80075c8 <chk_lock+0xb4>)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	011b      	lsls	r3, r3, #4
 800753c:	4413      	add	r3, r2
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d116      	bne.n	8007576 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007548:	4a1f      	ldr	r2, [pc, #124]	@ (80075c8 <chk_lock+0xb4>)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	4413      	add	r3, r2
 8007550:	3304      	adds	r3, #4
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007558:	429a      	cmp	r2, r3
 800755a:	d10c      	bne.n	8007576 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800755c:	4a1a      	ldr	r2, [pc, #104]	@ (80075c8 <chk_lock+0xb4>)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	011b      	lsls	r3, r3, #4
 8007562:	4413      	add	r3, r2
 8007564:	3308      	adds	r3, #8
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800756c:	429a      	cmp	r2, r3
 800756e:	d102      	bne.n	8007576 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007570:	e007      	b.n	8007582 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007572:	2301      	movs	r3, #1
 8007574:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3301      	adds	r3, #1
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d9d2      	bls.n	8007528 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b02      	cmp	r3, #2
 8007586:	d109      	bne.n	800759c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d102      	bne.n	8007594 <chk_lock+0x80>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b02      	cmp	r3, #2
 8007592:	d101      	bne.n	8007598 <chk_lock+0x84>
 8007594:	2300      	movs	r3, #0
 8007596:	e010      	b.n	80075ba <chk_lock+0xa6>
 8007598:	2312      	movs	r3, #18
 800759a:	e00e      	b.n	80075ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d108      	bne.n	80075b4 <chk_lock+0xa0>
 80075a2:	4a09      	ldr	r2, [pc, #36]	@ (80075c8 <chk_lock+0xb4>)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	011b      	lsls	r3, r3, #4
 80075a8:	4413      	add	r3, r2
 80075aa:	330c      	adds	r3, #12
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075b2:	d101      	bne.n	80075b8 <chk_lock+0xa4>
 80075b4:	2310      	movs	r3, #16
 80075b6:	e000      	b.n	80075ba <chk_lock+0xa6>
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	2000060c 	.word	0x2000060c

080075cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80075d2:	2300      	movs	r3, #0
 80075d4:	607b      	str	r3, [r7, #4]
 80075d6:	e002      	b.n	80075de <enq_lock+0x12>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3301      	adds	r3, #1
 80075dc:	607b      	str	r3, [r7, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d806      	bhi.n	80075f2 <enq_lock+0x26>
 80075e4:	4a09      	ldr	r2, [pc, #36]	@ (800760c <enq_lock+0x40>)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	011b      	lsls	r3, r3, #4
 80075ea:	4413      	add	r3, r2
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1f2      	bne.n	80075d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	bf14      	ite	ne
 80075f8:	2301      	movne	r3, #1
 80075fa:	2300      	moveq	r3, #0
 80075fc:	b2db      	uxtb	r3, r3
}
 80075fe:	4618      	mov	r0, r3
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	2000060c 	.word	0x2000060c

08007610 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]
 800761e:	e01f      	b.n	8007660 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007620:	4a41      	ldr	r2, [pc, #260]	@ (8007728 <inc_lock+0x118>)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	4413      	add	r3, r2
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	429a      	cmp	r2, r3
 8007630:	d113      	bne.n	800765a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007632:	4a3d      	ldr	r2, [pc, #244]	@ (8007728 <inc_lock+0x118>)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	011b      	lsls	r3, r3, #4
 8007638:	4413      	add	r3, r2
 800763a:	3304      	adds	r3, #4
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007642:	429a      	cmp	r2, r3
 8007644:	d109      	bne.n	800765a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007646:	4a38      	ldr	r2, [pc, #224]	@ (8007728 <inc_lock+0x118>)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	4413      	add	r3, r2
 800764e:	3308      	adds	r3, #8
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007656:	429a      	cmp	r2, r3
 8007658:	d006      	beq.n	8007668 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3301      	adds	r3, #1
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d9dc      	bls.n	8007620 <inc_lock+0x10>
 8007666:	e000      	b.n	800766a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007668:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b02      	cmp	r3, #2
 800766e:	d132      	bne.n	80076d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	e002      	b.n	800767c <inc_lock+0x6c>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3301      	adds	r3, #1
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d806      	bhi.n	8007690 <inc_lock+0x80>
 8007682:	4a29      	ldr	r2, [pc, #164]	@ (8007728 <inc_lock+0x118>)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	011b      	lsls	r3, r3, #4
 8007688:	4413      	add	r3, r2
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1f2      	bne.n	8007676 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b02      	cmp	r3, #2
 8007694:	d101      	bne.n	800769a <inc_lock+0x8a>
 8007696:	2300      	movs	r3, #0
 8007698:	e040      	b.n	800771c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	4922      	ldr	r1, [pc, #136]	@ (8007728 <inc_lock+0x118>)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	440b      	add	r3, r1
 80076a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	491e      	ldr	r1, [pc, #120]	@ (8007728 <inc_lock+0x118>)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	011b      	lsls	r3, r3, #4
 80076b2:	440b      	add	r3, r1
 80076b4:	3304      	adds	r3, #4
 80076b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	695a      	ldr	r2, [r3, #20]
 80076bc:	491a      	ldr	r1, [pc, #104]	@ (8007728 <inc_lock+0x118>)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	011b      	lsls	r3, r3, #4
 80076c2:	440b      	add	r3, r1
 80076c4:	3308      	adds	r3, #8
 80076c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80076c8:	4a17      	ldr	r2, [pc, #92]	@ (8007728 <inc_lock+0x118>)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	4413      	add	r3, r2
 80076d0:	330c      	adds	r3, #12
 80076d2:	2200      	movs	r2, #0
 80076d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d009      	beq.n	80076f0 <inc_lock+0xe0>
 80076dc:	4a12      	ldr	r2, [pc, #72]	@ (8007728 <inc_lock+0x118>)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	4413      	add	r3, r2
 80076e4:	330c      	adds	r3, #12
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <inc_lock+0xe0>
 80076ec:	2300      	movs	r3, #0
 80076ee:	e015      	b.n	800771c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d108      	bne.n	8007708 <inc_lock+0xf8>
 80076f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007728 <inc_lock+0x118>)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	4413      	add	r3, r2
 80076fe:	330c      	adds	r3, #12
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	3301      	adds	r3, #1
 8007704:	b29a      	uxth	r2, r3
 8007706:	e001      	b.n	800770c <inc_lock+0xfc>
 8007708:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800770c:	4906      	ldr	r1, [pc, #24]	@ (8007728 <inc_lock+0x118>)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	011b      	lsls	r3, r3, #4
 8007712:	440b      	add	r3, r1
 8007714:	330c      	adds	r3, #12
 8007716:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3301      	adds	r3, #1
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	2000060c 	.word	0x2000060c

0800772c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3b01      	subs	r3, #1
 8007738:	607b      	str	r3, [r7, #4]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d825      	bhi.n	800778c <dec_lock+0x60>
		n = Files[i].ctr;
 8007740:	4a17      	ldr	r2, [pc, #92]	@ (80077a0 <dec_lock+0x74>)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	011b      	lsls	r3, r3, #4
 8007746:	4413      	add	r3, r2
 8007748:	330c      	adds	r3, #12
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800774e:	89fb      	ldrh	r3, [r7, #14]
 8007750:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007754:	d101      	bne.n	800775a <dec_lock+0x2e>
 8007756:	2300      	movs	r3, #0
 8007758:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800775a:	89fb      	ldrh	r3, [r7, #14]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <dec_lock+0x3a>
 8007760:	89fb      	ldrh	r3, [r7, #14]
 8007762:	3b01      	subs	r3, #1
 8007764:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007766:	4a0e      	ldr	r2, [pc, #56]	@ (80077a0 <dec_lock+0x74>)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	4413      	add	r3, r2
 800776e:	330c      	adds	r3, #12
 8007770:	89fa      	ldrh	r2, [r7, #14]
 8007772:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007774:	89fb      	ldrh	r3, [r7, #14]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d105      	bne.n	8007786 <dec_lock+0x5a>
 800777a:	4a09      	ldr	r2, [pc, #36]	@ (80077a0 <dec_lock+0x74>)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	011b      	lsls	r3, r3, #4
 8007780:	4413      	add	r3, r2
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	737b      	strb	r3, [r7, #13]
 800778a:	e001      	b.n	8007790 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800778c:	2302      	movs	r3, #2
 800778e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007790:	7b7b      	ldrb	r3, [r7, #13]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	2000060c 	.word	0x2000060c

080077a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]
 80077b0:	e010      	b.n	80077d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80077b2:	4a0d      	ldr	r2, [pc, #52]	@ (80077e8 <clear_lock+0x44>)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	4413      	add	r3, r2
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d105      	bne.n	80077ce <clear_lock+0x2a>
 80077c2:	4a09      	ldr	r2, [pc, #36]	@ (80077e8 <clear_lock+0x44>)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	011b      	lsls	r3, r3, #4
 80077c8:	4413      	add	r3, r2
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3301      	adds	r3, #1
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d9eb      	bls.n	80077b2 <clear_lock+0xe>
	}
}
 80077da:	bf00      	nop
 80077dc:	bf00      	nop
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	2000060c 	.word	0x2000060c

080077ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80077f4:	2300      	movs	r3, #0
 80077f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	78db      	ldrb	r3, [r3, #3]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d034      	beq.n	800786a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007804:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	7858      	ldrb	r0, [r3, #1]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007810:	2301      	movs	r3, #1
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	f7ff fd3e 	bl	8007294 <disk_write>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <sync_window+0x38>
			res = FR_DISK_ERR;
 800781e:	2301      	movs	r3, #1
 8007820:	73fb      	strb	r3, [r7, #15]
 8007822:	e022      	b.n	800786a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	1ad2      	subs	r2, r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	429a      	cmp	r2, r3
 8007838:	d217      	bcs.n	800786a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	789b      	ldrb	r3, [r3, #2]
 800783e:	613b      	str	r3, [r7, #16]
 8007840:	e010      	b.n	8007864 <sync_window+0x78>
					wsect += fs->fsize;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	4413      	add	r3, r2
 800784a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	7858      	ldrb	r0, [r3, #1]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007856:	2301      	movs	r3, #1
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	f7ff fd1b 	bl	8007294 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	3b01      	subs	r3, #1
 8007862:	613b      	str	r3, [r7, #16]
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d8eb      	bhi.n	8007842 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800786a:	7bfb      	ldrb	r3, [r7, #15]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	429a      	cmp	r2, r3
 800788a:	d01b      	beq.n	80078c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff ffad 	bl	80077ec <sync_window>
 8007892:	4603      	mov	r3, r0
 8007894:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d113      	bne.n	80078c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7858      	ldrb	r0, [r3, #1]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80078a6:	2301      	movs	r3, #1
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	f7ff fcd3 	bl	8007254 <disk_read>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80078b4:	f04f 33ff 	mov.w	r3, #4294967295
 80078b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
	...

080078d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7ff ff87 	bl	80077ec <sync_window>
 80078de:	4603      	mov	r3, r0
 80078e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d158      	bne.n	800799a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d148      	bne.n	8007982 <sync_fs+0xb2>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	791b      	ldrb	r3, [r3, #4]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d144      	bne.n	8007982 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3330      	adds	r3, #48	@ 0x30
 80078fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007900:	2100      	movs	r1, #0
 8007902:	4618      	mov	r0, r3
 8007904:	f7ff fda8 	bl	8007458 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3330      	adds	r3, #48	@ 0x30
 800790c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007910:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007914:	4618      	mov	r0, r3
 8007916:	f7ff fd37 	bl	8007388 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3330      	adds	r3, #48	@ 0x30
 800791e:	4921      	ldr	r1, [pc, #132]	@ (80079a4 <sync_fs+0xd4>)
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff fd4c 	bl	80073be <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	3330      	adds	r3, #48	@ 0x30
 800792a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800792e:	491e      	ldr	r1, [pc, #120]	@ (80079a8 <sync_fs+0xd8>)
 8007930:	4618      	mov	r0, r3
 8007932:	f7ff fd44 	bl	80073be <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3330      	adds	r3, #48	@ 0x30
 800793a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	4619      	mov	r1, r3
 8007944:	4610      	mov	r0, r2
 8007946:	f7ff fd3a 	bl	80073be <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	3330      	adds	r3, #48	@ 0x30
 800794e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	4619      	mov	r1, r3
 8007958:	4610      	mov	r0, r2
 800795a:	f7ff fd30 	bl	80073be <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	7858      	ldrb	r0, [r3, #1]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007976:	2301      	movs	r3, #1
 8007978:	f7ff fc8c 	bl	8007294 <disk_write>
			fs->fsi_flag = 0;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	2200      	movs	r2, #0
 8007988:	2100      	movs	r1, #0
 800798a:	4618      	mov	r0, r3
 800798c:	f7ff fca2 	bl	80072d4 <disk_ioctl>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <sync_fs+0xca>
 8007996:	2301      	movs	r3, #1
 8007998:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	41615252 	.word	0x41615252
 80079a8:	61417272 	.word	0x61417272

080079ac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	3b02      	subs	r3, #2
 80079ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	3b02      	subs	r3, #2
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d301      	bcc.n	80079cc <clust2sect+0x20>
 80079c8:	2300      	movs	r3, #0
 80079ca:	e008      	b.n	80079de <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	895b      	ldrh	r3, [r3, #10]
 80079d0:	461a      	mov	r2, r3
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	fb03 f202 	mul.w	r2, r3, r2
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079dc:	4413      	add	r3, r2
}
 80079de:	4618      	mov	r0, r3
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b086      	sub	sp, #24
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d904      	bls.n	8007a0a <get_fat+0x20>
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d302      	bcc.n	8007a10 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	617b      	str	r3, [r7, #20]
 8007a0e:	e08e      	b.n	8007b2e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007a10:	f04f 33ff 	mov.w	r3, #4294967295
 8007a14:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d061      	beq.n	8007ae2 <get_fat+0xf8>
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	dc7b      	bgt.n	8007b1a <get_fat+0x130>
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d002      	beq.n	8007a2c <get_fat+0x42>
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d041      	beq.n	8007aae <get_fat+0xc4>
 8007a2a:	e076      	b.n	8007b1a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	085b      	lsrs	r3, r3, #1
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	6a1a      	ldr	r2, [r3, #32]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	0a5b      	lsrs	r3, r3, #9
 8007a42:	4413      	add	r3, r2
 8007a44:	4619      	mov	r1, r3
 8007a46:	6938      	ldr	r0, [r7, #16]
 8007a48:	f7ff ff14 	bl	8007874 <move_window>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d166      	bne.n	8007b20 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	60fa      	str	r2, [r7, #12]
 8007a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a64:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	6a1a      	ldr	r2, [r3, #32]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	0a5b      	lsrs	r3, r3, #9
 8007a6e:	4413      	add	r3, r2
 8007a70:	4619      	mov	r1, r3
 8007a72:	6938      	ldr	r0, [r7, #16]
 8007a74:	f7ff fefe 	bl	8007874 <move_window>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d152      	bne.n	8007b24 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	4413      	add	r3, r2
 8007a88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d002      	beq.n	8007aa4 <get_fat+0xba>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	091b      	lsrs	r3, r3, #4
 8007aa2:	e002      	b.n	8007aaa <get_fat+0xc0>
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aaa:	617b      	str	r3, [r7, #20]
			break;
 8007aac:	e03f      	b.n	8007b2e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	6a1a      	ldr	r2, [r3, #32]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	0a1b      	lsrs	r3, r3, #8
 8007ab6:	4413      	add	r3, r2
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6938      	ldr	r0, [r7, #16]
 8007abc:	f7ff feda 	bl	8007874 <move_window>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d130      	bne.n	8007b28 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007ad4:	4413      	add	r3, r2
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff fc1a 	bl	8007310 <ld_word>
 8007adc:	4603      	mov	r3, r0
 8007ade:	617b      	str	r3, [r7, #20]
			break;
 8007ae0:	e025      	b.n	8007b2e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	6a1a      	ldr	r2, [r3, #32]
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	09db      	lsrs	r3, r3, #7
 8007aea:	4413      	add	r3, r2
 8007aec:	4619      	mov	r1, r3
 8007aee:	6938      	ldr	r0, [r7, #16]
 8007af0:	f7ff fec0 	bl	8007874 <move_window>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d118      	bne.n	8007b2c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007b08:	4413      	add	r3, r2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff fc19 	bl	8007342 <ld_dword>
 8007b10:	4603      	mov	r3, r0
 8007b12:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007b16:	617b      	str	r3, [r7, #20]
			break;
 8007b18:	e009      	b.n	8007b2e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	617b      	str	r3, [r7, #20]
 8007b1e:	e006      	b.n	8007b2e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b20:	bf00      	nop
 8007b22:	e004      	b.n	8007b2e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b24:	bf00      	nop
 8007b26:	e002      	b.n	8007b2e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007b28:	bf00      	nop
 8007b2a:	e000      	b.n	8007b2e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b2c:	bf00      	nop
		}
	}

	return val;
 8007b2e:	697b      	ldr	r3, [r7, #20]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007b38:	b590      	push	{r4, r7, lr}
 8007b3a:	b089      	sub	sp, #36	@ 0x24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007b44:	2302      	movs	r3, #2
 8007b46:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	f240 80d9 	bls.w	8007d02 <put_fat+0x1ca>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	f080 80d3 	bcs.w	8007d02 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	2b03      	cmp	r3, #3
 8007b62:	f000 8096 	beq.w	8007c92 <put_fat+0x15a>
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	f300 80cb 	bgt.w	8007d02 <put_fat+0x1ca>
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d002      	beq.n	8007b76 <put_fat+0x3e>
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d06e      	beq.n	8007c52 <put_fat+0x11a>
 8007b74:	e0c5      	b.n	8007d02 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	61bb      	str	r3, [r7, #24]
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	085b      	lsrs	r3, r3, #1
 8007b7e:	69ba      	ldr	r2, [r7, #24]
 8007b80:	4413      	add	r3, r2
 8007b82:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6a1a      	ldr	r2, [r3, #32]
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	0a5b      	lsrs	r3, r3, #9
 8007b8c:	4413      	add	r3, r2
 8007b8e:	4619      	mov	r1, r3
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f7ff fe6f 	bl	8007874 <move_window>
 8007b96:	4603      	mov	r3, r0
 8007b98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b9a:	7ffb      	ldrb	r3, [r7, #31]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f040 80a9 	bne.w	8007cf4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	1c59      	adds	r1, r3, #1
 8007bac:	61b9      	str	r1, [r7, #24]
 8007bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb2:	4413      	add	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00d      	beq.n	8007bdc <put_fat+0xa4>
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	b25b      	sxtb	r3, r3
 8007bc6:	f003 030f 	and.w	r3, r3, #15
 8007bca:	b25a      	sxtb	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	b25b      	sxtb	r3, r3
 8007bd0:	011b      	lsls	r3, r3, #4
 8007bd2:	b25b      	sxtb	r3, r3
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	b25b      	sxtb	r3, r3
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	e001      	b.n	8007be0 <put_fat+0xa8>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2201      	movs	r2, #1
 8007be8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6a1a      	ldr	r2, [r3, #32]
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	0a5b      	lsrs	r3, r3, #9
 8007bf2:	4413      	add	r3, r2
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff fe3c 	bl	8007874 <move_window>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c00:	7ffb      	ldrb	r3, [r7, #31]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d178      	bne.n	8007cf8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c12:	4413      	add	r3, r2
 8007c14:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d003      	beq.n	8007c28 <put_fat+0xf0>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	091b      	lsrs	r3, r3, #4
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	e00e      	b.n	8007c46 <put_fat+0x10e>
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	b25b      	sxtb	r3, r3
 8007c2e:	f023 030f 	bic.w	r3, r3, #15
 8007c32:	b25a      	sxtb	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	0a1b      	lsrs	r3, r3, #8
 8007c38:	b25b      	sxtb	r3, r3
 8007c3a:	f003 030f 	and.w	r3, r3, #15
 8007c3e:	b25b      	sxtb	r3, r3
 8007c40:	4313      	orrs	r3, r2
 8007c42:	b25b      	sxtb	r3, r3
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	70da      	strb	r2, [r3, #3]
			break;
 8007c50:	e057      	b.n	8007d02 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6a1a      	ldr	r2, [r3, #32]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	0a1b      	lsrs	r3, r3, #8
 8007c5a:	4413      	add	r3, r2
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f7ff fe08 	bl	8007874 <move_window>
 8007c64:	4603      	mov	r3, r0
 8007c66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c68:	7ffb      	ldrb	r3, [r7, #31]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d146      	bne.n	8007cfc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007c7c:	4413      	add	r3, r2
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	b292      	uxth	r2, r2
 8007c82:	4611      	mov	r1, r2
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff fb7f 	bl	8007388 <st_word>
			fs->wflag = 1;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	70da      	strb	r2, [r3, #3]
			break;
 8007c90:	e037      	b.n	8007d02 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6a1a      	ldr	r2, [r3, #32]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	09db      	lsrs	r3, r3, #7
 8007c9a:	4413      	add	r3, r2
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f7ff fde8 	bl	8007874 <move_window>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ca8:	7ffb      	ldrb	r3, [r7, #31]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d128      	bne.n	8007d00 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007cc2:	4413      	add	r3, r2
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7ff fb3c 	bl	8007342 <ld_dword>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007cd0:	4323      	orrs	r3, r4
 8007cd2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007ce2:	4413      	add	r3, r2
 8007ce4:	6879      	ldr	r1, [r7, #4]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7ff fb69 	bl	80073be <st_dword>
			fs->wflag = 1;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	70da      	strb	r2, [r3, #3]
			break;
 8007cf2:	e006      	b.n	8007d02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007cf4:	bf00      	nop
 8007cf6:	e004      	b.n	8007d02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007cf8:	bf00      	nop
 8007cfa:	e002      	b.n	8007d02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007cfc:	bf00      	nop
 8007cfe:	e000      	b.n	8007d02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007d00:	bf00      	nop
		}
	}
	return res;
 8007d02:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3724      	adds	r7, #36	@ 0x24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd90      	pop	{r4, r7, pc}

08007d0c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b088      	sub	sp, #32
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d904      	bls.n	8007d32 <remove_chain+0x26>
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d301      	bcc.n	8007d36 <remove_chain+0x2a>
 8007d32:	2302      	movs	r3, #2
 8007d34:	e04b      	b.n	8007dce <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00c      	beq.n	8007d56 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d40:	6879      	ldr	r1, [r7, #4]
 8007d42:	69b8      	ldr	r0, [r7, #24]
 8007d44:	f7ff fef8 	bl	8007b38 <put_fat>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007d4c:	7ffb      	ldrb	r3, [r7, #31]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <remove_chain+0x4a>
 8007d52:	7ffb      	ldrb	r3, [r7, #31]
 8007d54:	e03b      	b.n	8007dce <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f7ff fe46 	bl	80079ea <get_fat>
 8007d5e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d031      	beq.n	8007dca <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d101      	bne.n	8007d70 <remove_chain+0x64>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	e02e      	b.n	8007dce <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d76:	d101      	bne.n	8007d7c <remove_chain+0x70>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e028      	b.n	8007dce <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	68b9      	ldr	r1, [r7, #8]
 8007d80:	69b8      	ldr	r0, [r7, #24]
 8007d82:	f7ff fed9 	bl	8007b38 <put_fat>
 8007d86:	4603      	mov	r3, r0
 8007d88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007d8a:	7ffb      	ldrb	r3, [r7, #31]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <remove_chain+0x88>
 8007d90:	7ffb      	ldrb	r3, [r7, #31]
 8007d92:	e01c      	b.n	8007dce <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	691a      	ldr	r2, [r3, #16]
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	3b02      	subs	r3, #2
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d20b      	bcs.n	8007dba <remove_chain+0xae>
			fs->free_clst++;
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	791b      	ldrb	r3, [r3, #4]
 8007db0:	f043 0301 	orr.w	r3, r3, #1
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d3c6      	bcc.n	8007d56 <remove_chain+0x4a>
 8007dc8:	e000      	b.n	8007dcc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007dca:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3720      	adds	r7, #32
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b088      	sub	sp, #32
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10d      	bne.n	8007e08 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d004      	beq.n	8007e02 <create_chain+0x2c>
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d31b      	bcc.n	8007e3a <create_chain+0x64>
 8007e02:	2301      	movs	r3, #1
 8007e04:	61bb      	str	r3, [r7, #24]
 8007e06:	e018      	b.n	8007e3a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7ff fded 	bl	80079ea <get_fat>
 8007e10:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d801      	bhi.n	8007e1c <create_chain+0x46>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e070      	b.n	8007efe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e22:	d101      	bne.n	8007e28 <create_chain+0x52>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	e06a      	b.n	8007efe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d201      	bcs.n	8007e36 <create_chain+0x60>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	e063      	b.n	8007efe <create_chain+0x128>
		scl = clst;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	3301      	adds	r3, #1
 8007e42:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	69fa      	ldr	r2, [r7, #28]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d307      	bcc.n	8007e5e <create_chain+0x88>
				ncl = 2;
 8007e4e:	2302      	movs	r3, #2
 8007e50:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007e52:	69fa      	ldr	r2, [r7, #28]
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d901      	bls.n	8007e5e <create_chain+0x88>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	e04f      	b.n	8007efe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007e5e:	69f9      	ldr	r1, [r7, #28]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7ff fdc2 	bl	80079ea <get_fat>
 8007e66:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00e      	beq.n	8007e8c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d003      	beq.n	8007e7c <create_chain+0xa6>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7a:	d101      	bne.n	8007e80 <create_chain+0xaa>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	e03e      	b.n	8007efe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d1da      	bne.n	8007e3e <create_chain+0x68>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	e038      	b.n	8007efe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007e8c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e92:	69f9      	ldr	r1, [r7, #28]
 8007e94:	6938      	ldr	r0, [r7, #16]
 8007e96:	f7ff fe4f 	bl	8007b38 <put_fat>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007e9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d109      	bne.n	8007eb8 <create_chain+0xe2>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d006      	beq.n	8007eb8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6938      	ldr	r0, [r7, #16]
 8007eb0:	f7ff fe42 	bl	8007b38 <put_fat>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007eb8:	7dfb      	ldrb	r3, [r7, #23]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d116      	bne.n	8007eec <create_chain+0x116>
		fs->last_clst = ncl;
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	69fa      	ldr	r2, [r7, #28]
 8007ec2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	691a      	ldr	r2, [r3, #16]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	3b02      	subs	r3, #2
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d804      	bhi.n	8007edc <create_chain+0x106>
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	1e5a      	subs	r2, r3, #1
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	791b      	ldrb	r3, [r3, #4]
 8007ee0:	f043 0301 	orr.w	r3, r3, #1
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	711a      	strb	r2, [r3, #4]
 8007eea:	e007      	b.n	8007efc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d102      	bne.n	8007ef8 <create_chain+0x122>
 8007ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef6:	e000      	b.n	8007efa <create_chain+0x124>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007efc:	69fb      	ldr	r3, [r7, #28]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3720      	adds	r7, #32
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b087      	sub	sp, #28
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	0a5b      	lsrs	r3, r3, #9
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	8952      	ldrh	r2, [r2, #10]
 8007f26:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	1d1a      	adds	r2, r3, #4
 8007f30:	613a      	str	r2, [r7, #16]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <clmt_clust+0x3a>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e010      	b.n	8007f62 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d307      	bcc.n	8007f58 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	617b      	str	r3, [r7, #20]
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	3304      	adds	r3, #4
 8007f54:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f56:	e7e9      	b.n	8007f2c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007f58:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	4413      	add	r3, r2
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b086      	sub	sp, #24
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f84:	d204      	bcs.n	8007f90 <dir_sdi+0x22>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	f003 031f 	and.w	r3, r3, #31
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007f90:	2302      	movs	r3, #2
 8007f92:	e063      	b.n	800805c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d106      	bne.n	8007fb4 <dir_sdi+0x46>
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d902      	bls.n	8007fb4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10c      	bne.n	8007fd4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	095b      	lsrs	r3, r3, #5
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	8912      	ldrh	r2, [r2, #8]
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d301      	bcc.n	8007fca <dir_sdi+0x5c>
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e048      	b.n	800805c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	61da      	str	r2, [r3, #28]
 8007fd2:	e029      	b.n	8008028 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	895b      	ldrh	r3, [r3, #10]
 8007fd8:	025b      	lsls	r3, r3, #9
 8007fda:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007fdc:	e019      	b.n	8008012 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6979      	ldr	r1, [r7, #20]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7ff fd01 	bl	80079ea <get_fat>
 8007fe8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff0:	d101      	bne.n	8007ff6 <dir_sdi+0x88>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e032      	b.n	800805c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d904      	bls.n	8008006 <dir_sdi+0x98>
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	429a      	cmp	r2, r3
 8008004:	d301      	bcc.n	800800a <dir_sdi+0x9c>
 8008006:	2302      	movs	r3, #2
 8008008:	e028      	b.n	800805c <dir_sdi+0xee>
			ofs -= csz;
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	429a      	cmp	r2, r3
 8008018:	d2e1      	bcs.n	8007fde <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800801a:	6979      	ldr	r1, [r7, #20]
 800801c:	6938      	ldr	r0, [r7, #16]
 800801e:	f7ff fcc5 	bl	80079ac <clust2sect>
 8008022:	4602      	mov	r2, r0
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <dir_sdi+0xcc>
 8008036:	2302      	movs	r3, #2
 8008038:	e010      	b.n	800805c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	69da      	ldr	r2, [r3, #28]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	0a5b      	lsrs	r3, r3, #9
 8008042:	441a      	add	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008054:	441a      	add	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	3320      	adds	r3, #32
 800807a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	69db      	ldr	r3, [r3, #28]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <dir_next+0x28>
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800808a:	d301      	bcc.n	8008090 <dir_next+0x2c>
 800808c:	2304      	movs	r3, #4
 800808e:	e0aa      	b.n	80081e6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008096:	2b00      	cmp	r3, #0
 8008098:	f040 8098 	bne.w	80081cc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	1c5a      	adds	r2, r3, #1
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10b      	bne.n	80080c6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	095b      	lsrs	r3, r3, #5
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	8912      	ldrh	r2, [r2, #8]
 80080b6:	4293      	cmp	r3, r2
 80080b8:	f0c0 8088 	bcc.w	80081cc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	61da      	str	r2, [r3, #28]
 80080c2:	2304      	movs	r3, #4
 80080c4:	e08f      	b.n	80081e6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	0a5b      	lsrs	r3, r3, #9
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	8952      	ldrh	r2, [r2, #10]
 80080ce:	3a01      	subs	r2, #1
 80080d0:	4013      	ands	r3, r2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d17a      	bne.n	80081cc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	4619      	mov	r1, r3
 80080de:	4610      	mov	r0, r2
 80080e0:	f7ff fc83 	bl	80079ea <get_fat>
 80080e4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d801      	bhi.n	80080f0 <dir_next+0x8c>
 80080ec:	2302      	movs	r3, #2
 80080ee:	e07a      	b.n	80081e6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f6:	d101      	bne.n	80080fc <dir_next+0x98>
 80080f8:	2301      	movs	r3, #1
 80080fa:	e074      	b.n	80081e6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	429a      	cmp	r2, r3
 8008104:	d358      	bcc.n	80081b8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d104      	bne.n	8008116 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	61da      	str	r2, [r3, #28]
 8008112:	2304      	movs	r3, #4
 8008114:	e067      	b.n	80081e6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	4619      	mov	r1, r3
 800811e:	4610      	mov	r0, r2
 8008120:	f7ff fe59 	bl	8007dd6 <create_chain>
 8008124:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <dir_next+0xcc>
 800812c:	2307      	movs	r3, #7
 800812e:	e05a      	b.n	80081e6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <dir_next+0xd6>
 8008136:	2302      	movs	r3, #2
 8008138:	e055      	b.n	80081e6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008140:	d101      	bne.n	8008146 <dir_next+0xe2>
 8008142:	2301      	movs	r3, #1
 8008144:	e04f      	b.n	80081e6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f7ff fb50 	bl	80077ec <sync_window>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <dir_next+0xf2>
 8008152:	2301      	movs	r3, #1
 8008154:	e047      	b.n	80081e6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	3330      	adds	r3, #48	@ 0x30
 800815a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800815e:	2100      	movs	r1, #0
 8008160:	4618      	mov	r0, r3
 8008162:	f7ff f979 	bl	8007458 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008166:	2300      	movs	r3, #0
 8008168:	613b      	str	r3, [r7, #16]
 800816a:	6979      	ldr	r1, [r7, #20]
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f7ff fc1d 	bl	80079ac <clust2sect>
 8008172:	4602      	mov	r2, r0
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008178:	e012      	b.n	80081a0 <dir_next+0x13c>
						fs->wflag = 1;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2201      	movs	r2, #1
 800817e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f7ff fb33 	bl	80077ec <sync_window>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <dir_next+0x12c>
 800818c:	2301      	movs	r3, #1
 800818e:	e02a      	b.n	80081e6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	3301      	adds	r3, #1
 8008194:	613b      	str	r3, [r7, #16]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	895b      	ldrh	r3, [r3, #10]
 80081a4:	461a      	mov	r2, r3
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d3e6      	bcc.n	800817a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	1ad2      	subs	r2, r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80081be:	6979      	ldr	r1, [r7, #20]
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f7ff fbf3 	bl	80079ac <clust2sect>
 80081c6:	4602      	mov	r2, r0
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081de:	441a      	add	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3718      	adds	r7, #24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b086      	sub	sp, #24
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80081fe:	2100      	movs	r1, #0
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff feb4 	bl	8007f6e <dir_sdi>
 8008206:	4603      	mov	r3, r0
 8008208:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800820a:	7dfb      	ldrb	r3, [r7, #23]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d12b      	bne.n	8008268 <dir_alloc+0x7a>
		n = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	4619      	mov	r1, r3
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f7ff fb2a 	bl	8007874 <move_window>
 8008220:	4603      	mov	r3, r0
 8008222:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d11d      	bne.n	8008266 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	2be5      	cmp	r3, #229	@ 0xe5
 8008232:	d004      	beq.n	800823e <dir_alloc+0x50>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d107      	bne.n	800824e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	3301      	adds	r3, #1
 8008242:	613b      	str	r3, [r7, #16]
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	429a      	cmp	r2, r3
 800824a:	d102      	bne.n	8008252 <dir_alloc+0x64>
 800824c:	e00c      	b.n	8008268 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800824e:	2300      	movs	r3, #0
 8008250:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008252:	2101      	movs	r1, #1
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7ff ff05 	bl	8008064 <dir_next>
 800825a:	4603      	mov	r3, r0
 800825c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800825e:	7dfb      	ldrb	r3, [r7, #23]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d0d7      	beq.n	8008214 <dir_alloc+0x26>
 8008264:	e000      	b.n	8008268 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008266:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008268:	7dfb      	ldrb	r3, [r7, #23]
 800826a:	2b04      	cmp	r3, #4
 800826c:	d101      	bne.n	8008272 <dir_alloc+0x84>
 800826e:	2307      	movs	r3, #7
 8008270:	75fb      	strb	r3, [r7, #23]
	return res;
 8008272:	7dfb      	ldrb	r3, [r7, #23]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	331a      	adds	r3, #26
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff f840 	bl	8007310 <ld_word>
 8008290:	4603      	mov	r3, r0
 8008292:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b03      	cmp	r3, #3
 800829a:	d109      	bne.n	80082b0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	3314      	adds	r3, #20
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7ff f835 	bl	8007310 <ld_word>
 80082a6:	4603      	mov	r3, r0
 80082a8:	041b      	lsls	r3, r3, #16
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80082b0:	68fb      	ldr	r3, [r7, #12]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b084      	sub	sp, #16
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	331a      	adds	r3, #26
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	b292      	uxth	r2, r2
 80082ce:	4611      	mov	r1, r2
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7ff f859 	bl	8007388 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d109      	bne.n	80082f2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f103 0214 	add.w	r2, r3, #20
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	0c1b      	lsrs	r3, r3, #16
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	4619      	mov	r1, r3
 80082ec:	4610      	mov	r0, r2
 80082ee:	f7ff f84b 	bl	8007388 <st_word>
	}
}
 80082f2:	bf00      	nop
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b086      	sub	sp, #24
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008308:	2100      	movs	r1, #0
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7ff fe2f 	bl	8007f6e <dir_sdi>
 8008310:	4603      	mov	r3, r0
 8008312:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008314:	7dfb      	ldrb	r3, [r7, #23]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <dir_find+0x24>
 800831a:	7dfb      	ldrb	r3, [r7, #23]
 800831c:	e03e      	b.n	800839c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	4619      	mov	r1, r3
 8008324:	6938      	ldr	r0, [r7, #16]
 8008326:	f7ff faa5 	bl	8007874 <move_window>
 800832a:	4603      	mov	r3, r0
 800832c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800832e:	7dfb      	ldrb	r3, [r7, #23]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d12f      	bne.n	8008394 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800833c:	7bfb      	ldrb	r3, [r7, #15]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d102      	bne.n	8008348 <dir_find+0x4e>
 8008342:	2304      	movs	r3, #4
 8008344:	75fb      	strb	r3, [r7, #23]
 8008346:	e028      	b.n	800839a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a1b      	ldr	r3, [r3, #32]
 800834c:	330b      	adds	r3, #11
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008354:	b2da      	uxtb	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	330b      	adds	r3, #11
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	f003 0308 	and.w	r3, r3, #8
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10a      	bne.n	8008380 <dir_find+0x86>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a18      	ldr	r0, [r3, #32]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	3324      	adds	r3, #36	@ 0x24
 8008372:	220b      	movs	r2, #11
 8008374:	4619      	mov	r1, r3
 8008376:	f7ff f88a 	bl	800748e <mem_cmp>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008380:	2100      	movs	r1, #0
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7ff fe6e 	bl	8008064 <dir_next>
 8008388:	4603      	mov	r3, r0
 800838a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d0c5      	beq.n	800831e <dir_find+0x24>
 8008392:	e002      	b.n	800839a <dir_find+0xa0>
		if (res != FR_OK) break;
 8008394:	bf00      	nop
 8008396:	e000      	b.n	800839a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008398:	bf00      	nop

	return res;
 800839a:	7dfb      	ldrb	r3, [r7, #23]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80083b2:	2101      	movs	r1, #1
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f7ff ff1a 	bl	80081ee <dir_alloc>
 80083ba:	4603      	mov	r3, r0
 80083bc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d11c      	bne.n	80083fe <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	4619      	mov	r1, r3
 80083ca:	68b8      	ldr	r0, [r7, #8]
 80083cc:	f7ff fa52 	bl	8007874 <move_window>
 80083d0:	4603      	mov	r3, r0
 80083d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d111      	bne.n	80083fe <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	2220      	movs	r2, #32
 80083e0:	2100      	movs	r1, #0
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7ff f838 	bl	8007458 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a18      	ldr	r0, [r3, #32]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3324      	adds	r3, #36	@ 0x24
 80083f0:	220b      	movs	r2, #11
 80083f2:	4619      	mov	r1, r3
 80083f4:	f7ff f80f 	bl	8007416 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2201      	movs	r2, #1
 80083fc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b088      	sub	sp, #32
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3324      	adds	r3, #36	@ 0x24
 800841c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800841e:	220b      	movs	r2, #11
 8008420:	2120      	movs	r1, #32
 8008422:	68b8      	ldr	r0, [r7, #8]
 8008424:	f7ff f818 	bl	8007458 <mem_set>
	si = i = 0; ni = 8;
 8008428:	2300      	movs	r3, #0
 800842a:	613b      	str	r3, [r7, #16]
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	61fb      	str	r3, [r7, #28]
 8008430:	2308      	movs	r3, #8
 8008432:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	1c5a      	adds	r2, r3, #1
 8008438:	61fa      	str	r2, [r7, #28]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4413      	add	r3, r2
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008442:	7efb      	ldrb	r3, [r7, #27]
 8008444:	2b20      	cmp	r3, #32
 8008446:	d94e      	bls.n	80084e6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008448:	7efb      	ldrb	r3, [r7, #27]
 800844a:	2b2f      	cmp	r3, #47	@ 0x2f
 800844c:	d006      	beq.n	800845c <create_name+0x54>
 800844e:	7efb      	ldrb	r3, [r7, #27]
 8008450:	2b5c      	cmp	r3, #92	@ 0x5c
 8008452:	d110      	bne.n	8008476 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008454:	e002      	b.n	800845c <create_name+0x54>
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	3301      	adds	r3, #1
 800845a:	61fb      	str	r3, [r7, #28]
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	4413      	add	r3, r2
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b2f      	cmp	r3, #47	@ 0x2f
 8008466:	d0f6      	beq.n	8008456 <create_name+0x4e>
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	4413      	add	r3, r2
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b5c      	cmp	r3, #92	@ 0x5c
 8008472:	d0f0      	beq.n	8008456 <create_name+0x4e>
			break;
 8008474:	e038      	b.n	80084e8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008476:	7efb      	ldrb	r3, [r7, #27]
 8008478:	2b2e      	cmp	r3, #46	@ 0x2e
 800847a:	d003      	beq.n	8008484 <create_name+0x7c>
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	429a      	cmp	r2, r3
 8008482:	d30c      	bcc.n	800849e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	2b0b      	cmp	r3, #11
 8008488:	d002      	beq.n	8008490 <create_name+0x88>
 800848a:	7efb      	ldrb	r3, [r7, #27]
 800848c:	2b2e      	cmp	r3, #46	@ 0x2e
 800848e:	d001      	beq.n	8008494 <create_name+0x8c>
 8008490:	2306      	movs	r3, #6
 8008492:	e044      	b.n	800851e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008494:	2308      	movs	r3, #8
 8008496:	613b      	str	r3, [r7, #16]
 8008498:	230b      	movs	r3, #11
 800849a:	617b      	str	r3, [r7, #20]
			continue;
 800849c:	e022      	b.n	80084e4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800849e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	da04      	bge.n	80084b0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80084a6:	7efb      	ldrb	r3, [r7, #27]
 80084a8:	3b80      	subs	r3, #128	@ 0x80
 80084aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008528 <create_name+0x120>)
 80084ac:	5cd3      	ldrb	r3, [r2, r3]
 80084ae:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80084b0:	7efb      	ldrb	r3, [r7, #27]
 80084b2:	4619      	mov	r1, r3
 80084b4:	481d      	ldr	r0, [pc, #116]	@ (800852c <create_name+0x124>)
 80084b6:	f7ff f811 	bl	80074dc <chk_chr>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <create_name+0xbc>
 80084c0:	2306      	movs	r3, #6
 80084c2:	e02c      	b.n	800851e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80084c4:	7efb      	ldrb	r3, [r7, #27]
 80084c6:	2b60      	cmp	r3, #96	@ 0x60
 80084c8:	d905      	bls.n	80084d6 <create_name+0xce>
 80084ca:	7efb      	ldrb	r3, [r7, #27]
 80084cc:	2b7a      	cmp	r3, #122	@ 0x7a
 80084ce:	d802      	bhi.n	80084d6 <create_name+0xce>
 80084d0:	7efb      	ldrb	r3, [r7, #27]
 80084d2:	3b20      	subs	r3, #32
 80084d4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	1c5a      	adds	r2, r3, #1
 80084da:	613a      	str	r2, [r7, #16]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	4413      	add	r3, r2
 80084e0:	7efa      	ldrb	r2, [r7, #27]
 80084e2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80084e4:	e7a6      	b.n	8008434 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80084e6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	441a      	add	r2, r3
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <create_name+0xf4>
 80084f8:	2306      	movs	r3, #6
 80084fa:	e010      	b.n	800851e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	2be5      	cmp	r3, #229	@ 0xe5
 8008502:	d102      	bne.n	800850a <create_name+0x102>
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	2205      	movs	r2, #5
 8008508:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800850a:	7efb      	ldrb	r3, [r7, #27]
 800850c:	2b20      	cmp	r3, #32
 800850e:	d801      	bhi.n	8008514 <create_name+0x10c>
 8008510:	2204      	movs	r2, #4
 8008512:	e000      	b.n	8008516 <create_name+0x10e>
 8008514:	2200      	movs	r2, #0
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	330b      	adds	r3, #11
 800851a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800851c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800851e:	4618      	mov	r0, r3
 8008520:	3720      	adds	r7, #32
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	0800c504 	.word	0x0800c504
 800852c:	0800c48c 	.word	0x0800c48c

08008530 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008544:	e002      	b.n	800854c <follow_path+0x1c>
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	3301      	adds	r3, #1
 800854a:	603b      	str	r3, [r7, #0]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2b2f      	cmp	r3, #47	@ 0x2f
 8008552:	d0f8      	beq.n	8008546 <follow_path+0x16>
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	2b5c      	cmp	r3, #92	@ 0x5c
 800855a:	d0f4      	beq.n	8008546 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	2200      	movs	r2, #0
 8008560:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	2b1f      	cmp	r3, #31
 8008568:	d80a      	bhi.n	8008580 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2280      	movs	r2, #128	@ 0x80
 800856e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008572:	2100      	movs	r1, #0
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f7ff fcfa 	bl	8007f6e <dir_sdi>
 800857a:	4603      	mov	r3, r0
 800857c:	75fb      	strb	r3, [r7, #23]
 800857e:	e043      	b.n	8008608 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008580:	463b      	mov	r3, r7
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f7ff ff3f 	bl	8008408 <create_name>
 800858a:	4603      	mov	r3, r0
 800858c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800858e:	7dfb      	ldrb	r3, [r7, #23]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d134      	bne.n	80085fe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7ff feb0 	bl	80082fa <dir_find>
 800859a:	4603      	mov	r3, r0
 800859c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80085a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80085a6:	7dfb      	ldrb	r3, [r7, #23]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00a      	beq.n	80085c2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
 80085ae:	2b04      	cmp	r3, #4
 80085b0:	d127      	bne.n	8008602 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80085b2:	7afb      	ldrb	r3, [r7, #11]
 80085b4:	f003 0304 	and.w	r3, r3, #4
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d122      	bne.n	8008602 <follow_path+0xd2>
 80085bc:	2305      	movs	r3, #5
 80085be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80085c0:	e01f      	b.n	8008602 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80085c2:	7afb      	ldrb	r3, [r7, #11]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d11c      	bne.n	8008606 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	799b      	ldrb	r3, [r3, #6]
 80085d0:	f003 0310 	and.w	r3, r3, #16
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d102      	bne.n	80085de <follow_path+0xae>
				res = FR_NO_PATH; break;
 80085d8:	2305      	movs	r3, #5
 80085da:	75fb      	strb	r3, [r7, #23]
 80085dc:	e014      	b.n	8008608 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ec:	4413      	add	r3, r2
 80085ee:	4619      	mov	r1, r3
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f7ff fe43 	bl	800827c <ld_clust>
 80085f6:	4602      	mov	r2, r0
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80085fc:	e7c0      	b.n	8008580 <follow_path+0x50>
			if (res != FR_OK) break;
 80085fe:	bf00      	nop
 8008600:	e002      	b.n	8008608 <follow_path+0xd8>
				break;
 8008602:	bf00      	nop
 8008604:	e000      	b.n	8008608 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008606:	bf00      	nop
			}
		}
	}

	return res;
 8008608:	7dfb      	ldrb	r3, [r7, #23]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008612:	b480      	push	{r7}
 8008614:	b087      	sub	sp, #28
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800861a:	f04f 33ff 	mov.w	r3, #4294967295
 800861e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d031      	beq.n	800868c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	617b      	str	r3, [r7, #20]
 800862e:	e002      	b.n	8008636 <get_ldnumber+0x24>
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	3301      	adds	r3, #1
 8008634:	617b      	str	r3, [r7, #20]
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2b20      	cmp	r3, #32
 800863c:	d903      	bls.n	8008646 <get_ldnumber+0x34>
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b3a      	cmp	r3, #58	@ 0x3a
 8008644:	d1f4      	bne.n	8008630 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	2b3a      	cmp	r3, #58	@ 0x3a
 800864c:	d11c      	bne.n	8008688 <get_ldnumber+0x76>
			tp = *path;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	1c5a      	adds	r2, r3, #1
 8008658:	60fa      	str	r2, [r7, #12]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	3b30      	subs	r3, #48	@ 0x30
 800865e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b09      	cmp	r3, #9
 8008664:	d80e      	bhi.n	8008684 <get_ldnumber+0x72>
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	429a      	cmp	r2, r3
 800866c:	d10a      	bne.n	8008684 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d107      	bne.n	8008684 <get_ldnumber+0x72>
					vol = (int)i;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	3301      	adds	r3, #1
 800867c:	617b      	str	r3, [r7, #20]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	e002      	b.n	800868e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008688:	2300      	movs	r3, #0
 800868a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800868c:	693b      	ldr	r3, [r7, #16]
}
 800868e:	4618      	mov	r0, r3
 8008690:	371c      	adds	r7, #28
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
	...

0800869c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	70da      	strb	r2, [r3, #3]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f04f 32ff 	mov.w	r2, #4294967295
 80086b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff f8dc 	bl	8007874 <move_window>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <check_fs+0x2a>
 80086c2:	2304      	movs	r3, #4
 80086c4:	e038      	b.n	8008738 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	3330      	adds	r3, #48	@ 0x30
 80086ca:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe fe1e 	bl	8007310 <ld_word>
 80086d4:	4603      	mov	r3, r0
 80086d6:	461a      	mov	r2, r3
 80086d8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80086dc:	429a      	cmp	r2, r3
 80086de:	d001      	beq.n	80086e4 <check_fs+0x48>
 80086e0:	2303      	movs	r3, #3
 80086e2:	e029      	b.n	8008738 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80086ea:	2be9      	cmp	r3, #233	@ 0xe9
 80086ec:	d009      	beq.n	8008702 <check_fs+0x66>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80086f4:	2beb      	cmp	r3, #235	@ 0xeb
 80086f6:	d11e      	bne.n	8008736 <check_fs+0x9a>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80086fe:	2b90      	cmp	r3, #144	@ 0x90
 8008700:	d119      	bne.n	8008736 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3330      	adds	r3, #48	@ 0x30
 8008706:	3336      	adds	r3, #54	@ 0x36
 8008708:	4618      	mov	r0, r3
 800870a:	f7fe fe1a 	bl	8007342 <ld_dword>
 800870e:	4603      	mov	r3, r0
 8008710:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008714:	4a0a      	ldr	r2, [pc, #40]	@ (8008740 <check_fs+0xa4>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d101      	bne.n	800871e <check_fs+0x82>
 800871a:	2300      	movs	r3, #0
 800871c:	e00c      	b.n	8008738 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3330      	adds	r3, #48	@ 0x30
 8008722:	3352      	adds	r3, #82	@ 0x52
 8008724:	4618      	mov	r0, r3
 8008726:	f7fe fe0c 	bl	8007342 <ld_dword>
 800872a:	4603      	mov	r3, r0
 800872c:	4a05      	ldr	r2, [pc, #20]	@ (8008744 <check_fs+0xa8>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d101      	bne.n	8008736 <check_fs+0x9a>
 8008732:	2300      	movs	r3, #0
 8008734:	e000      	b.n	8008738 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008736:	2302      	movs	r3, #2
}
 8008738:	4618      	mov	r0, r3
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	00544146 	.word	0x00544146
 8008744:	33544146 	.word	0x33544146

08008748 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b096      	sub	sp, #88	@ 0x58
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	4613      	mov	r3, r2
 8008754:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2200      	movs	r2, #0
 800875a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f7ff ff58 	bl	8008612 <get_ldnumber>
 8008762:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008766:	2b00      	cmp	r3, #0
 8008768:	da01      	bge.n	800876e <find_volume+0x26>
 800876a:	230b      	movs	r3, #11
 800876c:	e22d      	b.n	8008bca <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800876e:	4aa1      	ldr	r2, [pc, #644]	@ (80089f4 <find_volume+0x2ac>)
 8008770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008776:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <find_volume+0x3a>
 800877e:	230c      	movs	r3, #12
 8008780:	e223      	b.n	8008bca <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008786:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008788:	79fb      	ldrb	r3, [r7, #7]
 800878a:	f023 0301 	bic.w	r3, r3, #1
 800878e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d01a      	beq.n	80087ce <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879a:	785b      	ldrb	r3, [r3, #1]
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe fd19 	bl	80071d4 <disk_status>
 80087a2:	4603      	mov	r3, r0
 80087a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80087a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10c      	bne.n	80087ce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80087b4:	79fb      	ldrb	r3, [r7, #7]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d007      	beq.n	80087ca <find_volume+0x82>
 80087ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087be:	f003 0304 	and.w	r3, r3, #4
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80087c6:	230a      	movs	r3, #10
 80087c8:	e1ff      	b.n	8008bca <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80087ca:	2300      	movs	r3, #0
 80087cc:	e1fd      	b.n	8008bca <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80087ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d0:	2200      	movs	r2, #0
 80087d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80087d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80087dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087de:	785b      	ldrb	r3, [r3, #1]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fe fd11 	bl	8007208 <disk_initialize>
 80087e6:	4603      	mov	r3, r0
 80087e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80087ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80087f8:	2303      	movs	r3, #3
 80087fa:	e1e6      	b.n	8008bca <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d007      	beq.n	8008812 <find_volume+0xca>
 8008802:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008806:	f003 0304 	and.w	r3, r3, #4
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800880e:	230a      	movs	r3, #10
 8008810:	e1db      	b.n	8008bca <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008816:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008818:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800881a:	f7ff ff3f 	bl	800869c <check_fs>
 800881e:	4603      	mov	r3, r0
 8008820:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008824:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008828:	2b02      	cmp	r3, #2
 800882a:	d149      	bne.n	80088c0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800882c:	2300      	movs	r3, #0
 800882e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008830:	e01e      	b.n	8008870 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008834:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800883a:	011b      	lsls	r3, r3, #4
 800883c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008840:	4413      	add	r3, r2
 8008842:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008846:	3304      	adds	r3, #4
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d006      	beq.n	800885c <find_volume+0x114>
 800884e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008850:	3308      	adds	r3, #8
 8008852:	4618      	mov	r0, r3
 8008854:	f7fe fd75 	bl	8007342 <ld_dword>
 8008858:	4602      	mov	r2, r0
 800885a:	e000      	b.n	800885e <find_volume+0x116>
 800885c:	2200      	movs	r2, #0
 800885e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	3358      	adds	r3, #88	@ 0x58
 8008864:	443b      	add	r3, r7
 8008866:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800886a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800886c:	3301      	adds	r3, #1
 800886e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008872:	2b03      	cmp	r3, #3
 8008874:	d9dd      	bls.n	8008832 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008876:	2300      	movs	r3, #0
 8008878:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800887a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800887c:	2b00      	cmp	r3, #0
 800887e:	d002      	beq.n	8008886 <find_volume+0x13e>
 8008880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008882:	3b01      	subs	r3, #1
 8008884:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008886:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	3358      	adds	r3, #88	@ 0x58
 800888c:	443b      	add	r3, r7
 800888e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008892:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008896:	2b00      	cmp	r3, #0
 8008898:	d005      	beq.n	80088a6 <find_volume+0x15e>
 800889a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800889c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800889e:	f7ff fefd 	bl	800869c <check_fs>
 80088a2:	4603      	mov	r3, r0
 80088a4:	e000      	b.n	80088a8 <find_volume+0x160>
 80088a6:	2303      	movs	r3, #3
 80088a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80088ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d905      	bls.n	80088c0 <find_volume+0x178>
 80088b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088b6:	3301      	adds	r3, #1
 80088b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80088ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d9e2      	bls.n	8008886 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80088c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80088c4:	2b04      	cmp	r3, #4
 80088c6:	d101      	bne.n	80088cc <find_volume+0x184>
 80088c8:	2301      	movs	r3, #1
 80088ca:	e17e      	b.n	8008bca <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80088cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d901      	bls.n	80088d8 <find_volume+0x190>
 80088d4:	230d      	movs	r3, #13
 80088d6:	e178      	b.n	8008bca <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80088d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088da:	3330      	adds	r3, #48	@ 0x30
 80088dc:	330b      	adds	r3, #11
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fe fd16 	bl	8007310 <ld_word>
 80088e4:	4603      	mov	r3, r0
 80088e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ea:	d001      	beq.n	80088f0 <find_volume+0x1a8>
 80088ec:	230d      	movs	r3, #13
 80088ee:	e16c      	b.n	8008bca <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80088f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f2:	3330      	adds	r3, #48	@ 0x30
 80088f4:	3316      	adds	r3, #22
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fe fd0a 	bl	8007310 <ld_word>
 80088fc:	4603      	mov	r3, r0
 80088fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008902:	2b00      	cmp	r3, #0
 8008904:	d106      	bne.n	8008914 <find_volume+0x1cc>
 8008906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008908:	3330      	adds	r3, #48	@ 0x30
 800890a:	3324      	adds	r3, #36	@ 0x24
 800890c:	4618      	mov	r0, r3
 800890e:	f7fe fd18 	bl	8007342 <ld_dword>
 8008912:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008916:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008918:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800891a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8008920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008922:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008926:	789b      	ldrb	r3, [r3, #2]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d005      	beq.n	8008938 <find_volume+0x1f0>
 800892c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800892e:	789b      	ldrb	r3, [r3, #2]
 8008930:	2b02      	cmp	r3, #2
 8008932:	d001      	beq.n	8008938 <find_volume+0x1f0>
 8008934:	230d      	movs	r3, #13
 8008936:	e148      	b.n	8008bca <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893a:	789b      	ldrb	r3, [r3, #2]
 800893c:	461a      	mov	r2, r3
 800893e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008940:	fb02 f303 	mul.w	r3, r2, r3
 8008944:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800894c:	461a      	mov	r2, r3
 800894e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008950:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008954:	895b      	ldrh	r3, [r3, #10]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d008      	beq.n	800896c <find_volume+0x224>
 800895a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895c:	895b      	ldrh	r3, [r3, #10]
 800895e:	461a      	mov	r2, r3
 8008960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008962:	895b      	ldrh	r3, [r3, #10]
 8008964:	3b01      	subs	r3, #1
 8008966:	4013      	ands	r3, r2
 8008968:	2b00      	cmp	r3, #0
 800896a:	d001      	beq.n	8008970 <find_volume+0x228>
 800896c:	230d      	movs	r3, #13
 800896e:	e12c      	b.n	8008bca <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008972:	3330      	adds	r3, #48	@ 0x30
 8008974:	3311      	adds	r3, #17
 8008976:	4618      	mov	r0, r3
 8008978:	f7fe fcca 	bl	8007310 <ld_word>
 800897c:	4603      	mov	r3, r0
 800897e:	461a      	mov	r2, r3
 8008980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008982:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008986:	891b      	ldrh	r3, [r3, #8]
 8008988:	f003 030f 	and.w	r3, r3, #15
 800898c:	b29b      	uxth	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <find_volume+0x24e>
 8008992:	230d      	movs	r3, #13
 8008994:	e119      	b.n	8008bca <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008998:	3330      	adds	r3, #48	@ 0x30
 800899a:	3313      	adds	r3, #19
 800899c:	4618      	mov	r0, r3
 800899e:	f7fe fcb7 	bl	8007310 <ld_word>
 80089a2:	4603      	mov	r3, r0
 80089a4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80089a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d106      	bne.n	80089ba <find_volume+0x272>
 80089ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ae:	3330      	adds	r3, #48	@ 0x30
 80089b0:	3320      	adds	r3, #32
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fcc5 	bl	8007342 <ld_dword>
 80089b8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80089ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089bc:	3330      	adds	r3, #48	@ 0x30
 80089be:	330e      	adds	r3, #14
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fca5 	bl	8007310 <ld_word>
 80089c6:	4603      	mov	r3, r0
 80089c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80089ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <find_volume+0x28c>
 80089d0:	230d      	movs	r3, #13
 80089d2:	e0fa      	b.n	8008bca <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80089d4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80089d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089d8:	4413      	add	r3, r2
 80089da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089dc:	8912      	ldrh	r2, [r2, #8]
 80089de:	0912      	lsrs	r2, r2, #4
 80089e0:	b292      	uxth	r2, r2
 80089e2:	4413      	add	r3, r2
 80089e4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80089e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d204      	bcs.n	80089f8 <find_volume+0x2b0>
 80089ee:	230d      	movs	r3, #13
 80089f0:	e0eb      	b.n	8008bca <find_volume+0x482>
 80089f2:	bf00      	nop
 80089f4:	20000604 	.word	0x20000604
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80089f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a00:	8952      	ldrh	r2, [r2, #10]
 8008a02:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a06:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <find_volume+0x2ca>
 8008a0e:	230d      	movs	r3, #13
 8008a10:	e0db      	b.n	8008bca <find_volume+0x482>
		fmt = FS_FAT32;
 8008a12:	2303      	movs	r3, #3
 8008a14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d802      	bhi.n	8008a28 <find_volume+0x2e0>
 8008a22:	2302      	movs	r3, #2
 8008a24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d802      	bhi.n	8008a38 <find_volume+0x2f0>
 8008a32:	2301      	movs	r3, #1
 8008a34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3a:	1c9a      	adds	r2, r3, #2
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a42:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a44:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008a46:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008a48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a4a:	441a      	add	r2, r3
 8008a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008a50:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a54:	441a      	add	r2, r3
 8008a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a58:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8008a5a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d11e      	bne.n	8008aa0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a64:	3330      	adds	r3, #48	@ 0x30
 8008a66:	332a      	adds	r3, #42	@ 0x2a
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fe fc51 	bl	8007310 <ld_word>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <find_volume+0x330>
 8008a74:	230d      	movs	r3, #13
 8008a76:	e0a8      	b.n	8008bca <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7a:	891b      	ldrh	r3, [r3, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d001      	beq.n	8008a84 <find_volume+0x33c>
 8008a80:	230d      	movs	r3, #13
 8008a82:	e0a2      	b.n	8008bca <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a86:	3330      	adds	r3, #48	@ 0x30
 8008a88:	332c      	adds	r3, #44	@ 0x2c
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fc59 	bl	8007342 <ld_dword>
 8008a90:	4602      	mov	r2, r0
 8008a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a94:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a9e:	e01f      	b.n	8008ae0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa2:	891b      	ldrh	r3, [r3, #8]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <find_volume+0x364>
 8008aa8:	230d      	movs	r3, #13
 8008aaa:	e08e      	b.n	8008bca <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aae:	6a1a      	ldr	r2, [r3, #32]
 8008ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ab2:	441a      	add	r2, r3
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008ab8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d103      	bne.n	8008ac8 <find_volume+0x380>
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	005b      	lsls	r3, r3, #1
 8008ac6:	e00a      	b.n	8008ade <find_volume+0x396>
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aca:	695a      	ldr	r2, [r3, #20]
 8008acc:	4613      	mov	r3, r2
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	4413      	add	r3, r2
 8008ad2:	085a      	lsrs	r2, r3, #1
 8008ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008ade:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae2:	699a      	ldr	r2, [r3, #24]
 8008ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ae6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008aea:	0a5b      	lsrs	r3, r3, #9
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d201      	bcs.n	8008af4 <find_volume+0x3ac>
 8008af0:	230d      	movs	r3, #13
 8008af2:	e06a      	b.n	8008bca <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af6:	f04f 32ff 	mov.w	r2, #4294967295
 8008afa:	611a      	str	r2, [r3, #16]
 8008afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afe:	691a      	ldr	r2, [r3, #16]
 8008b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b02:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b06:	2280      	movs	r2, #128	@ 0x80
 8008b08:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008b0a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	d149      	bne.n	8008ba6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b14:	3330      	adds	r3, #48	@ 0x30
 8008b16:	3330      	adds	r3, #48	@ 0x30
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fe fbf9 	bl	8007310 <ld_word>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d140      	bne.n	8008ba6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008b24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b26:	3301      	adds	r3, #1
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b2c:	f7fe fea2 	bl	8007874 <move_window>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d137      	bne.n	8008ba6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b38:	2200      	movs	r2, #0
 8008b3a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3e:	3330      	adds	r3, #48	@ 0x30
 8008b40:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe fbe3 	bl	8007310 <ld_word>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d127      	bne.n	8008ba6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b58:	3330      	adds	r3, #48	@ 0x30
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe fbf1 	bl	8007342 <ld_dword>
 8008b60:	4603      	mov	r3, r0
 8008b62:	4a1c      	ldr	r2, [pc, #112]	@ (8008bd4 <find_volume+0x48c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d11e      	bne.n	8008ba6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6a:	3330      	adds	r3, #48	@ 0x30
 8008b6c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fe fbe6 	bl	8007342 <ld_dword>
 8008b76:	4603      	mov	r3, r0
 8008b78:	4a17      	ldr	r2, [pc, #92]	@ (8008bd8 <find_volume+0x490>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d113      	bne.n	8008ba6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b80:	3330      	adds	r3, #48	@ 0x30
 8008b82:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe fbdb 	bl	8007342 <ld_dword>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b90:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b94:	3330      	adds	r3, #48	@ 0x30
 8008b96:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fbd1 	bl	8007342 <ld_dword>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008bac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008bae:	4b0b      	ldr	r3, [pc, #44]	@ (8008bdc <find_volume+0x494>)
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	4b09      	ldr	r3, [pc, #36]	@ (8008bdc <find_volume+0x494>)
 8008bb8:	801a      	strh	r2, [r3, #0]
 8008bba:	4b08      	ldr	r3, [pc, #32]	@ (8008bdc <find_volume+0x494>)
 8008bbc:	881a      	ldrh	r2, [r3, #0]
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008bc2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008bc4:	f7fe fdee 	bl	80077a4 <clear_lock>
#endif
	return FR_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3758      	adds	r7, #88	@ 0x58
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	41615252 	.word	0x41615252
 8008bd8:	61417272 	.word	0x61417272
 8008bdc:	20000608 	.word	0x20000608

08008be0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008bea:	2309      	movs	r3, #9
 8008bec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d01c      	beq.n	8008c2e <validate+0x4e>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d018      	beq.n	8008c2e <validate+0x4e>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d013      	beq.n	8008c2e <validate+0x4e>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	889a      	ldrh	r2, [r3, #4]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	88db      	ldrh	r3, [r3, #6]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d10c      	bne.n	8008c2e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	785b      	ldrb	r3, [r3, #1]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fe fada 	bl	80071d4 <disk_status>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <validate+0x4e>
			res = FR_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d102      	bne.n	8008c3a <validate+0x5a>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	e000      	b.n	8008c3c <validate+0x5c>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	6013      	str	r3, [r2, #0]
	return res;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
	...

08008c4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b088      	sub	sp, #32
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	4613      	mov	r3, r2
 8008c58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008c5e:	f107 0310 	add.w	r3, r7, #16
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff fcd5 	bl	8008612 <get_ldnumber>
 8008c68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	da01      	bge.n	8008c74 <f_mount+0x28>
 8008c70:	230b      	movs	r3, #11
 8008c72:	e02b      	b.n	8008ccc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008c74:	4a17      	ldr	r2, [pc, #92]	@ (8008cd4 <f_mount+0x88>)
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d005      	beq.n	8008c90 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008c84:	69b8      	ldr	r0, [r7, #24]
 8008c86:	f7fe fd8d 	bl	80077a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	490d      	ldr	r1, [pc, #52]	@ (8008cd4 <f_mount+0x88>)
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <f_mount+0x66>
 8008cac:	79fb      	ldrb	r3, [r7, #7]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d001      	beq.n	8008cb6 <f_mount+0x6a>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	e00a      	b.n	8008ccc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008cb6:	f107 010c 	add.w	r1, r7, #12
 8008cba:	f107 0308 	add.w	r3, r7, #8
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7ff fd41 	bl	8008748 <find_volume>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3720      	adds	r7, #32
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	20000604 	.word	0x20000604

08008cd8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b098      	sub	sp, #96	@ 0x60
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <f_open+0x18>
 8008cec:	2309      	movs	r3, #9
 8008cee:	e1a9      	b.n	8009044 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008cf0:	79fb      	ldrb	r3, [r7, #7]
 8008cf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cf6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008cf8:	79fa      	ldrb	r2, [r7, #7]
 8008cfa:	f107 0110 	add.w	r1, r7, #16
 8008cfe:	f107 0308 	add.w	r3, r7, #8
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7ff fd20 	bl	8008748 <find_volume>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008d0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f040 818d 	bne.w	8009032 <f_open+0x35a>
		dj.obj.fs = fs;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	f107 0314 	add.w	r3, r7, #20
 8008d22:	4611      	mov	r1, r2
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7ff fc03 	bl	8008530 <follow_path>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008d30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d118      	bne.n	8008d6a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008d38:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d3c:	b25b      	sxtb	r3, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	da03      	bge.n	8008d4a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008d42:	2306      	movs	r3, #6
 8008d44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008d48:	e00f      	b.n	8008d6a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008d4a:	79fb      	ldrb	r3, [r7, #7]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	bf8c      	ite	hi
 8008d50:	2301      	movhi	r3, #1
 8008d52:	2300      	movls	r3, #0
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	461a      	mov	r2, r3
 8008d58:	f107 0314 	add.w	r3, r7, #20
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe fbd8 	bl	8007514 <chk_lock>
 8008d64:	4603      	mov	r3, r0
 8008d66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	f003 031c 	and.w	r3, r3, #28
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d07f      	beq.n	8008e74 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008d74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d017      	beq.n	8008dac <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008d7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008d80:	2b04      	cmp	r3, #4
 8008d82:	d10e      	bne.n	8008da2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008d84:	f7fe fc22 	bl	80075cc <enq_lock>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d006      	beq.n	8008d9c <f_open+0xc4>
 8008d8e:	f107 0314 	add.w	r3, r7, #20
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7ff fb06 	bl	80083a4 <dir_register>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	e000      	b.n	8008d9e <f_open+0xc6>
 8008d9c:	2312      	movs	r3, #18
 8008d9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008da2:	79fb      	ldrb	r3, [r7, #7]
 8008da4:	f043 0308 	orr.w	r3, r3, #8
 8008da8:	71fb      	strb	r3, [r7, #7]
 8008daa:	e010      	b.n	8008dce <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008dac:	7ebb      	ldrb	r3, [r7, #26]
 8008dae:	f003 0311 	and.w	r3, r3, #17
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <f_open+0xe6>
					res = FR_DENIED;
 8008db6:	2307      	movs	r3, #7
 8008db8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008dbc:	e007      	b.n	8008dce <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008dbe:	79fb      	ldrb	r3, [r7, #7]
 8008dc0:	f003 0304 	and.w	r3, r3, #4
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <f_open+0xf6>
 8008dc8:	2308      	movs	r3, #8
 8008dca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008dce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d168      	bne.n	8008ea8 <f_open+0x1d0>
 8008dd6:	79fb      	ldrb	r3, [r7, #7]
 8008dd8:	f003 0308 	and.w	r3, r3, #8
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d063      	beq.n	8008ea8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008de0:	f7fd ffa8 	bl	8006d34 <get_fattime>
 8008de4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de8:	330e      	adds	r3, #14
 8008dea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fe fae6 	bl	80073be <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df4:	3316      	adds	r3, #22
 8008df6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fe fae0 	bl	80073be <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e00:	330b      	adds	r3, #11
 8008e02:	2220      	movs	r2, #32
 8008e04:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff fa35 	bl	800827c <ld_clust>
 8008e12:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008e18:	2200      	movs	r2, #0
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7ff fa4d 	bl	80082ba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e22:	331c      	adds	r3, #28
 8008e24:	2100      	movs	r1, #0
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe fac9 	bl	80073be <st_dword>
					fs->wflag = 1;
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d037      	beq.n	8008ea8 <f_open+0x1d0>
						dw = fs->winsect;
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e3c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008e3e:	f107 0314 	add.w	r3, r7, #20
 8008e42:	2200      	movs	r2, #0
 8008e44:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fe ff60 	bl	8007d0c <remove_chain>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008e52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d126      	bne.n	8008ea8 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe fd08 	bl	8007874 <move_window>
 8008e64:	4603      	mov	r3, r0
 8008e66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e6e:	3a01      	subs	r2, #1
 8008e70:	60da      	str	r2, [r3, #12]
 8008e72:	e019      	b.n	8008ea8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008e74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d115      	bne.n	8008ea8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008e7c:	7ebb      	ldrb	r3, [r7, #26]
 8008e7e:	f003 0310 	and.w	r3, r3, #16
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <f_open+0x1b6>
					res = FR_NO_FILE;
 8008e86:	2304      	movs	r3, #4
 8008e88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008e8c:	e00c      	b.n	8008ea8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008e8e:	79fb      	ldrb	r3, [r7, #7]
 8008e90:	f003 0302 	and.w	r3, r3, #2
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d007      	beq.n	8008ea8 <f_open+0x1d0>
 8008e98:	7ebb      	ldrb	r3, [r7, #26]
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <f_open+0x1d0>
						res = FR_DENIED;
 8008ea2:	2307      	movs	r3, #7
 8008ea4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008ea8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d126      	bne.n	8008efe <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	f003 0308 	and.w	r3, r3, #8
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8008eba:	79fb      	ldrb	r3, [r7, #7]
 8008ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ec0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008eca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	bf8c      	ite	hi
 8008ed6:	2301      	movhi	r3, #1
 8008ed8:	2300      	movls	r3, #0
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	461a      	mov	r2, r3
 8008ede:	f107 0314 	add.w	r3, r7, #20
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fe fb93 	bl	8007610 <inc_lock>
 8008eea:	4602      	mov	r2, r0
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <f_open+0x226>
 8008ef8:	2302      	movs	r3, #2
 8008efa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008efe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f040 8095 	bne.w	8009032 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff f9b4 	bl	800827c <ld_clust>
 8008f14:	4602      	mov	r2, r0
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f1c:	331c      	adds	r3, #28
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe fa0f 	bl	8007342 <ld_dword>
 8008f24:	4602      	mov	r2, r0
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	88da      	ldrh	r2, [r3, #6]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	79fa      	ldrb	r2, [r7, #7]
 8008f42:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3330      	adds	r3, #48	@ 0x30
 8008f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f5e:	2100      	movs	r1, #0
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe fa79 	bl	8007458 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008f66:	79fb      	ldrb	r3, [r7, #7]
 8008f68:	f003 0320 	and.w	r3, r3, #32
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d060      	beq.n	8009032 <f_open+0x35a>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d05c      	beq.n	8009032 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	68da      	ldr	r2, [r3, #12]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	895b      	ldrh	r3, [r3, #10]
 8008f84:	025b      	lsls	r3, r3, #9
 8008f86:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f94:	e016      	b.n	8008fc4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe fd25 	bl	80079ea <get_fat>
 8008fa0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008fa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d802      	bhi.n	8008fae <f_open+0x2d6>
 8008fa8:	2302      	movs	r3, #2
 8008faa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008fae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb4:	d102      	bne.n	8008fbc <f_open+0x2e4>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008fbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fc4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d103      	bne.n	8008fd4 <f_open+0x2fc>
 8008fcc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d8e0      	bhi.n	8008f96 <f_open+0x2be>
				}
				fp->clust = clst;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fd8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008fda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d127      	bne.n	8009032 <f_open+0x35a>
 8008fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d022      	beq.n	8009032 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fe fcdb 	bl	80079ac <clust2sect>
 8008ff6:	6478      	str	r0, [r7, #68]	@ 0x44
 8008ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d103      	bne.n	8009006 <f_open+0x32e>
						res = FR_INT_ERR;
 8008ffe:	2302      	movs	r3, #2
 8009000:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009004:	e015      	b.n	8009032 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009008:	0a5a      	lsrs	r2, r3, #9
 800900a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800900c:	441a      	add	r2, r3
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	7858      	ldrb	r0, [r3, #1]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6a1a      	ldr	r2, [r3, #32]
 8009020:	2301      	movs	r3, #1
 8009022:	f7fe f917 	bl	8007254 <disk_read>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d002      	beq.n	8009032 <f_open+0x35a>
 800902c:	2301      	movs	r3, #1
 800902e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009032:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009036:	2b00      	cmp	r3, #0
 8009038:	d002      	beq.n	8009040 <f_open+0x368>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009040:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009044:	4618      	mov	r0, r3
 8009046:	3760      	adds	r7, #96	@ 0x60
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b08e      	sub	sp, #56	@ 0x38
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2200      	movs	r2, #0
 8009062:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f107 0214 	add.w	r2, r7, #20
 800906a:	4611      	mov	r1, r2
 800906c:	4618      	mov	r0, r3
 800906e:	f7ff fdb7 	bl	8008be0 <validate>
 8009072:	4603      	mov	r3, r0
 8009074:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009078:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800907c:	2b00      	cmp	r3, #0
 800907e:	d107      	bne.n	8009090 <f_read+0x44>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	7d5b      	ldrb	r3, [r3, #21]
 8009084:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009088:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <f_read+0x4a>
 8009090:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009094:	e115      	b.n	80092c2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	7d1b      	ldrb	r3, [r3, #20]
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <f_read+0x5a>
 80090a2:	2307      	movs	r3, #7
 80090a4:	e10d      	b.n	80092c2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	6a3b      	ldr	r3, [r7, #32]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	f240 80fe 	bls.w	80092b8 <f_read+0x26c>
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80090c0:	e0fa      	b.n	80092b8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f040 80c6 	bne.w	800925c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	0a5b      	lsrs	r3, r3, #9
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	8952      	ldrh	r2, [r2, #10]
 80090da:	3a01      	subs	r2, #1
 80090dc:	4013      	ands	r3, r2
 80090de:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d12f      	bne.n	8009146 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d103      	bne.n	80090f6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80090f4:	e013      	b.n	800911e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d007      	beq.n	800910e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	4619      	mov	r1, r3
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f7fe fefe 	bl	8007f06 <clmt_clust>
 800910a:	6338      	str	r0, [r7, #48]	@ 0x30
 800910c:	e007      	b.n	800911e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	4619      	mov	r1, r3
 8009116:	4610      	mov	r0, r2
 8009118:	f7fe fc67 	bl	80079ea <get_fat>
 800911c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800911e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009120:	2b01      	cmp	r3, #1
 8009122:	d804      	bhi.n	800912e <f_read+0xe2>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2202      	movs	r2, #2
 8009128:	755a      	strb	r2, [r3, #21]
 800912a:	2302      	movs	r3, #2
 800912c:	e0c9      	b.n	80092c2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800912e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009134:	d104      	bne.n	8009140 <f_read+0xf4>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2201      	movs	r2, #1
 800913a:	755a      	strb	r2, [r3, #21]
 800913c:	2301      	movs	r3, #1
 800913e:	e0c0      	b.n	80092c2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009144:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	4619      	mov	r1, r3
 800914e:	4610      	mov	r0, r2
 8009150:	f7fe fc2c 	bl	80079ac <clust2sect>
 8009154:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d104      	bne.n	8009166 <f_read+0x11a>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2202      	movs	r2, #2
 8009160:	755a      	strb	r2, [r3, #21]
 8009162:	2302      	movs	r3, #2
 8009164:	e0ad      	b.n	80092c2 <f_read+0x276>
			sect += csect;
 8009166:	69ba      	ldr	r2, [r7, #24]
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	4413      	add	r3, r2
 800916c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	0a5b      	lsrs	r3, r3, #9
 8009172:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009176:	2b00      	cmp	r3, #0
 8009178:	d039      	beq.n	80091ee <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800917a:	69fa      	ldr	r2, [r7, #28]
 800917c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917e:	4413      	add	r3, r2
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	8952      	ldrh	r2, [r2, #10]
 8009184:	4293      	cmp	r3, r2
 8009186:	d905      	bls.n	8009194 <f_read+0x148>
					cc = fs->csize - csect;
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	895b      	ldrh	r3, [r3, #10]
 800918c:	461a      	mov	r2, r3
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	7858      	ldrb	r0, [r3, #1]
 8009198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919a:	69ba      	ldr	r2, [r7, #24]
 800919c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800919e:	f7fe f859 	bl	8007254 <disk_read>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d004      	beq.n	80091b2 <f_read+0x166>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2201      	movs	r2, #1
 80091ac:	755a      	strb	r2, [r3, #21]
 80091ae:	2301      	movs	r3, #1
 80091b0:	e087      	b.n	80092c2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	7d1b      	ldrb	r3, [r3, #20]
 80091b6:	b25b      	sxtb	r3, r3
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	da14      	bge.n	80091e6 <f_read+0x19a>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6a1a      	ldr	r2, [r3, #32]
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d90d      	bls.n	80091e6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6a1a      	ldr	r2, [r3, #32]
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	025b      	lsls	r3, r3, #9
 80091d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091d6:	18d0      	adds	r0, r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	3330      	adds	r3, #48	@ 0x30
 80091dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091e0:	4619      	mov	r1, r3
 80091e2:	f7fe f918 	bl	8007416 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80091e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e8:	025b      	lsls	r3, r3, #9
 80091ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80091ec:	e050      	b.n	8009290 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d02e      	beq.n	8009256 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	7d1b      	ldrb	r3, [r3, #20]
 80091fc:	b25b      	sxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	da18      	bge.n	8009234 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	7858      	ldrb	r0, [r3, #1]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6a1a      	ldr	r2, [r3, #32]
 8009210:	2301      	movs	r3, #1
 8009212:	f7fe f83f 	bl	8007294 <disk_write>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d004      	beq.n	8009226 <f_read+0x1da>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2201      	movs	r2, #1
 8009220:	755a      	strb	r2, [r3, #21]
 8009222:	2301      	movs	r3, #1
 8009224:	e04d      	b.n	80092c2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	7d1b      	ldrb	r3, [r3, #20]
 800922a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800922e:	b2da      	uxtb	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	7858      	ldrb	r0, [r3, #1]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800923e:	2301      	movs	r3, #1
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	f7fe f807 	bl	8007254 <disk_read>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d004      	beq.n	8009256 <f_read+0x20a>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2201      	movs	r2, #1
 8009250:	755a      	strb	r2, [r3, #21]
 8009252:	2301      	movs	r3, #1
 8009254:	e035      	b.n	80092c2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009264:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009268:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800926a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	429a      	cmp	r2, r3
 8009270:	d901      	bls.n	8009276 <f_read+0x22a>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	699b      	ldr	r3, [r3, #24]
 8009280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009284:	4413      	add	r3, r2
 8009286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009288:	4619      	mov	r1, r3
 800928a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800928c:	f7fe f8c3 	bl	8007416 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009294:	4413      	add	r3, r2
 8009296:	627b      	str	r3, [r7, #36]	@ 0x24
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	699a      	ldr	r2, [r3, #24]
 800929c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800929e:	441a      	add	r2, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	619a      	str	r2, [r3, #24]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092aa:	441a      	add	r2, r3
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	601a      	str	r2, [r3, #0]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f47f af01 	bne.w	80090c2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3738      	adds	r7, #56	@ 0x38
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b08c      	sub	sp, #48	@ 0x30
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	60b9      	str	r1, [r7, #8]
 80092d4:	607a      	str	r2, [r7, #4]
 80092d6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2200      	movs	r2, #0
 80092e0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f107 0210 	add.w	r2, r7, #16
 80092e8:	4611      	mov	r1, r2
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7ff fc78 	bl	8008be0 <validate>
 80092f0:	4603      	mov	r3, r0
 80092f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80092f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d107      	bne.n	800930e <f_write+0x44>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	7d5b      	ldrb	r3, [r3, #21]
 8009302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009306:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800930a:	2b00      	cmp	r3, #0
 800930c:	d002      	beq.n	8009314 <f_write+0x4a>
 800930e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009312:	e14b      	b.n	80095ac <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	7d1b      	ldrb	r3, [r3, #20]
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <f_write+0x5a>
 8009320:	2307      	movs	r3, #7
 8009322:	e143      	b.n	80095ac <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	699a      	ldr	r2, [r3, #24]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	441a      	add	r2, r3
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	429a      	cmp	r2, r3
 8009332:	f080 812d 	bcs.w	8009590 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	699b      	ldr	r3, [r3, #24]
 800933a:	43db      	mvns	r3, r3
 800933c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800933e:	e127      	b.n	8009590 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009348:	2b00      	cmp	r3, #0
 800934a:	f040 80e3 	bne.w	8009514 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	0a5b      	lsrs	r3, r3, #9
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	8952      	ldrh	r2, [r2, #10]
 8009358:	3a01      	subs	r2, #1
 800935a:	4013      	ands	r3, r2
 800935c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d143      	bne.n	80093ec <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10c      	bne.n	8009386 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009374:	2b00      	cmp	r3, #0
 8009376:	d11a      	bne.n	80093ae <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2100      	movs	r1, #0
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe fd2a 	bl	8007dd6 <create_chain>
 8009382:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009384:	e013      	b.n	80093ae <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800938a:	2b00      	cmp	r3, #0
 800938c:	d007      	beq.n	800939e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	699b      	ldr	r3, [r3, #24]
 8009392:	4619      	mov	r1, r3
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f7fe fdb6 	bl	8007f06 <clmt_clust>
 800939a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800939c:	e007      	b.n	80093ae <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	69db      	ldr	r3, [r3, #28]
 80093a4:	4619      	mov	r1, r3
 80093a6:	4610      	mov	r0, r2
 80093a8:	f7fe fd15 	bl	8007dd6 <create_chain>
 80093ac:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80093ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 80f2 	beq.w	800959a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80093b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d104      	bne.n	80093c6 <f_write+0xfc>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2202      	movs	r2, #2
 80093c0:	755a      	strb	r2, [r3, #21]
 80093c2:	2302      	movs	r3, #2
 80093c4:	e0f2      	b.n	80095ac <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80093c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093cc:	d104      	bne.n	80093d8 <f_write+0x10e>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2201      	movs	r2, #1
 80093d2:	755a      	strb	r2, [r3, #21]
 80093d4:	2301      	movs	r3, #1
 80093d6:	e0e9      	b.n	80095ac <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093dc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d102      	bne.n	80093ec <f_write+0x122>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093ea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	7d1b      	ldrb	r3, [r3, #20]
 80093f0:	b25b      	sxtb	r3, r3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	da18      	bge.n	8009428 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	7858      	ldrb	r0, [r3, #1]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6a1a      	ldr	r2, [r3, #32]
 8009404:	2301      	movs	r3, #1
 8009406:	f7fd ff45 	bl	8007294 <disk_write>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d004      	beq.n	800941a <f_write+0x150>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2201      	movs	r2, #1
 8009414:	755a      	strb	r2, [r3, #21]
 8009416:	2301      	movs	r3, #1
 8009418:	e0c8      	b.n	80095ac <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	7d1b      	ldrb	r3, [r3, #20]
 800941e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009422:	b2da      	uxtb	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	4619      	mov	r1, r3
 8009430:	4610      	mov	r0, r2
 8009432:	f7fe fabb 	bl	80079ac <clust2sect>
 8009436:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d104      	bne.n	8009448 <f_write+0x17e>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2202      	movs	r2, #2
 8009442:	755a      	strb	r2, [r3, #21]
 8009444:	2302      	movs	r3, #2
 8009446:	e0b1      	b.n	80095ac <f_write+0x2e2>
			sect += csect;
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	4413      	add	r3, r2
 800944e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	0a5b      	lsrs	r3, r3, #9
 8009454:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009456:	6a3b      	ldr	r3, [r7, #32]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d03c      	beq.n	80094d6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800945c:	69ba      	ldr	r2, [r7, #24]
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	4413      	add	r3, r2
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	8952      	ldrh	r2, [r2, #10]
 8009466:	4293      	cmp	r3, r2
 8009468:	d905      	bls.n	8009476 <f_write+0x1ac>
					cc = fs->csize - csect;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	895b      	ldrh	r3, [r3, #10]
 800946e:	461a      	mov	r2, r3
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	7858      	ldrb	r0, [r3, #1]
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	69f9      	ldr	r1, [r7, #28]
 8009480:	f7fd ff08 	bl	8007294 <disk_write>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d004      	beq.n	8009494 <f_write+0x1ca>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2201      	movs	r2, #1
 800948e:	755a      	strb	r2, [r3, #21]
 8009490:	2301      	movs	r3, #1
 8009492:	e08b      	b.n	80095ac <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6a1a      	ldr	r2, [r3, #32]
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	6a3a      	ldr	r2, [r7, #32]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d915      	bls.n	80094ce <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6a1a      	ldr	r2, [r3, #32]
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	025b      	lsls	r3, r3, #9
 80094b2:	69fa      	ldr	r2, [r7, #28]
 80094b4:	4413      	add	r3, r2
 80094b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094ba:	4619      	mov	r1, r3
 80094bc:	f7fd ffab 	bl	8007416 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	7d1b      	ldrb	r3, [r3, #20]
 80094c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094c8:	b2da      	uxtb	r2, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	025b      	lsls	r3, r3, #9
 80094d2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80094d4:	e03f      	b.n	8009556 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d016      	beq.n	800950e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	699a      	ldr	r2, [r3, #24]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d210      	bcs.n	800950e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	7858      	ldrb	r0, [r3, #1]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80094f6:	2301      	movs	r3, #1
 80094f8:	697a      	ldr	r2, [r7, #20]
 80094fa:	f7fd feab 	bl	8007254 <disk_read>
 80094fe:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009500:	2b00      	cmp	r3, #0
 8009502:	d004      	beq.n	800950e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2201      	movs	r2, #1
 8009508:	755a      	strb	r2, [r3, #21]
 800950a:	2301      	movs	r3, #1
 800950c:	e04e      	b.n	80095ac <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800951c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009520:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	429a      	cmp	r2, r3
 8009528:	d901      	bls.n	800952e <f_write+0x264>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953c:	4413      	add	r3, r2
 800953e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009540:	69f9      	ldr	r1, [r7, #28]
 8009542:	4618      	mov	r0, r3
 8009544:	f7fd ff67 	bl	8007416 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	7d1b      	ldrb	r3, [r3, #20]
 800954c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009550:	b2da      	uxtb	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009556:	69fa      	ldr	r2, [r7, #28]
 8009558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955a:	4413      	add	r3, r2
 800955c:	61fb      	str	r3, [r7, #28]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	699a      	ldr	r2, [r3, #24]
 8009562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009564:	441a      	add	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	619a      	str	r2, [r3, #24]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	68da      	ldr	r2, [r3, #12]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	429a      	cmp	r2, r3
 8009574:	bf38      	it	cc
 8009576:	461a      	movcc	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	60da      	str	r2, [r3, #12]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009582:	441a      	add	r2, r3
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	f47f aed4 	bne.w	8009340 <f_write+0x76>
 8009598:	e000      	b.n	800959c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800959a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	7d1b      	ldrb	r3, [r3, #20]
 80095a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3730      	adds	r7, #48	@ 0x30
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f107 0208 	add.w	r2, r7, #8
 80095c2:	4611      	mov	r1, r2
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7ff fb0b 	bl	8008be0 <validate>
 80095ca:	4603      	mov	r3, r0
 80095cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d168      	bne.n	80096a6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	7d1b      	ldrb	r3, [r3, #20]
 80095d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d062      	beq.n	80096a6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	7d1b      	ldrb	r3, [r3, #20]
 80095e4:	b25b      	sxtb	r3, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	da15      	bge.n	8009616 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	7858      	ldrb	r0, [r3, #1]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a1a      	ldr	r2, [r3, #32]
 80095f8:	2301      	movs	r3, #1
 80095fa:	f7fd fe4b 	bl	8007294 <disk_write>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <f_sync+0x54>
 8009604:	2301      	movs	r3, #1
 8009606:	e04f      	b.n	80096a8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	7d1b      	ldrb	r3, [r3, #20]
 800960c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009610:	b2da      	uxtb	r2, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009616:	f7fd fb8d 	bl	8006d34 <get_fattime>
 800961a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009622:	4619      	mov	r1, r3
 8009624:	4610      	mov	r0, r2
 8009626:	f7fe f925 	bl	8007874 <move_window>
 800962a:	4603      	mov	r3, r0
 800962c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800962e:	7dfb      	ldrb	r3, [r7, #23]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d138      	bne.n	80096a6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009638:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	330b      	adds	r3, #11
 800963e:	781a      	ldrb	r2, [r3, #0]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	330b      	adds	r3, #11
 8009644:	f042 0220 	orr.w	r2, r2, #32
 8009648:	b2d2      	uxtb	r2, r2
 800964a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6818      	ldr	r0, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	461a      	mov	r2, r3
 8009656:	68f9      	ldr	r1, [r7, #12]
 8009658:	f7fe fe2f 	bl	80082ba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f103 021c 	add.w	r2, r3, #28
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	4619      	mov	r1, r3
 8009668:	4610      	mov	r0, r2
 800966a:	f7fd fea8 	bl	80073be <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	3316      	adds	r3, #22
 8009672:	6939      	ldr	r1, [r7, #16]
 8009674:	4618      	mov	r0, r3
 8009676:	f7fd fea2 	bl	80073be <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3312      	adds	r3, #18
 800967e:	2100      	movs	r1, #0
 8009680:	4618      	mov	r0, r3
 8009682:	f7fd fe81 	bl	8007388 <st_word>
					fs->wflag = 1;
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	2201      	movs	r2, #1
 800968a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe f91e 	bl	80078d0 <sync_fs>
 8009694:	4603      	mov	r3, r0
 8009696:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	7d1b      	ldrb	r3, [r3, #20]
 800969c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80096a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7ff ff7b 	bl	80095b4 <f_sync>
 80096be:	4603      	mov	r3, r0
 80096c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d118      	bne.n	80096fa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f107 0208 	add.w	r2, r7, #8
 80096ce:	4611      	mov	r1, r2
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7ff fa85 	bl	8008be0 <validate>
 80096d6:	4603      	mov	r3, r0
 80096d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80096da:	7bfb      	ldrb	r3, [r7, #15]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10c      	bne.n	80096fa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fe f821 	bl	800772c <dec_lock>
 80096ea:	4603      	mov	r3, r0
 80096ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d102      	bne.n	80096fa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009704:	b480      	push	{r7}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	4613      	mov	r3, r2
 8009710:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009712:	2301      	movs	r3, #1
 8009714:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800971a:	4b1f      	ldr	r3, [pc, #124]	@ (8009798 <FATFS_LinkDriverEx+0x94>)
 800971c:	7a5b      	ldrb	r3, [r3, #9]
 800971e:	b2db      	uxtb	r3, r3
 8009720:	2b00      	cmp	r3, #0
 8009722:	d131      	bne.n	8009788 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009724:	4b1c      	ldr	r3, [pc, #112]	@ (8009798 <FATFS_LinkDriverEx+0x94>)
 8009726:	7a5b      	ldrb	r3, [r3, #9]
 8009728:	b2db      	uxtb	r3, r3
 800972a:	461a      	mov	r2, r3
 800972c:	4b1a      	ldr	r3, [pc, #104]	@ (8009798 <FATFS_LinkDriverEx+0x94>)
 800972e:	2100      	movs	r1, #0
 8009730:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009732:	4b19      	ldr	r3, [pc, #100]	@ (8009798 <FATFS_LinkDriverEx+0x94>)
 8009734:	7a5b      	ldrb	r3, [r3, #9]
 8009736:	b2db      	uxtb	r3, r3
 8009738:	4a17      	ldr	r2, [pc, #92]	@ (8009798 <FATFS_LinkDriverEx+0x94>)
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	4413      	add	r3, r2
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009742:	4b15      	ldr	r3, [pc, #84]	@ (8009798 <FATFS_LinkDriverEx+0x94>)
 8009744:	7a5b      	ldrb	r3, [r3, #9]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	461a      	mov	r2, r3
 800974a:	4b13      	ldr	r3, [pc, #76]	@ (8009798 <FATFS_LinkDriverEx+0x94>)
 800974c:	4413      	add	r3, r2
 800974e:	79fa      	ldrb	r2, [r7, #7]
 8009750:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009752:	4b11      	ldr	r3, [pc, #68]	@ (8009798 <FATFS_LinkDriverEx+0x94>)
 8009754:	7a5b      	ldrb	r3, [r3, #9]
 8009756:	b2db      	uxtb	r3, r3
 8009758:	1c5a      	adds	r2, r3, #1
 800975a:	b2d1      	uxtb	r1, r2
 800975c:	4a0e      	ldr	r2, [pc, #56]	@ (8009798 <FATFS_LinkDriverEx+0x94>)
 800975e:	7251      	strb	r1, [r2, #9]
 8009760:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009762:	7dbb      	ldrb	r3, [r7, #22]
 8009764:	3330      	adds	r3, #48	@ 0x30
 8009766:	b2da      	uxtb	r2, r3
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	3301      	adds	r3, #1
 8009770:	223a      	movs	r2, #58	@ 0x3a
 8009772:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	3302      	adds	r3, #2
 8009778:	222f      	movs	r2, #47	@ 0x2f
 800977a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	3303      	adds	r3, #3
 8009780:	2200      	movs	r2, #0
 8009782:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009784:	2300      	movs	r3, #0
 8009786:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009788:	7dfb      	ldrb	r3, [r7, #23]
}
 800978a:	4618      	mov	r0, r3
 800978c:	371c      	adds	r7, #28
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	2000062c 	.word	0x2000062c

0800979c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80097a6:	2200      	movs	r2, #0
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff ffaa 	bl	8009704 <FATFS_LinkDriverEx>
 80097b0:	4603      	mov	r3, r0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
	...

080097bc <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	460b      	mov	r3, r1
 80097c6:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 80097cc:	2301      	movs	r3, #1
 80097ce:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 80097d0:	4b15      	ldr	r3, [pc, #84]	@ (8009828 <FATFS_UnLinkDriverEx+0x6c>)
 80097d2:	7a5b      	ldrb	r3, [r3, #9]
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d01e      	beq.n	8009818 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	3b30      	subs	r3, #48	@ 0x30
 80097e0:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 80097e2:	7bbb      	ldrb	r3, [r7, #14]
 80097e4:	4a10      	ldr	r2, [pc, #64]	@ (8009828 <FATFS_UnLinkDriverEx+0x6c>)
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d013      	beq.n	8009818 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
 80097f2:	4a0d      	ldr	r2, [pc, #52]	@ (8009828 <FATFS_UnLinkDriverEx+0x6c>)
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	2200      	movs	r2, #0
 80097fa:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	4a0a      	ldr	r2, [pc, #40]	@ (8009828 <FATFS_UnLinkDriverEx+0x6c>)
 8009800:	4413      	add	r3, r2
 8009802:	2200      	movs	r2, #0
 8009804:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8009806:	4b08      	ldr	r3, [pc, #32]	@ (8009828 <FATFS_UnLinkDriverEx+0x6c>)
 8009808:	7a5b      	ldrb	r3, [r3, #9]
 800980a:	b2db      	uxtb	r3, r3
 800980c:	3b01      	subs	r3, #1
 800980e:	b2da      	uxtb	r2, r3
 8009810:	4b05      	ldr	r3, [pc, #20]	@ (8009828 <FATFS_UnLinkDriverEx+0x6c>)
 8009812:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009818:	7bfb      	ldrb	r3, [r7, #15]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop
 8009828:	2000062c 	.word	0x2000062c

0800982c <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8009834:	2100      	movs	r1, #0
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7ff ffc0 	bl	80097bc <FATFS_UnLinkDriverEx>
 800983c:	4603      	mov	r3, r0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3708      	adds	r7, #8
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <__cvt>:
 8009846:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800984a:	ec57 6b10 	vmov	r6, r7, d0
 800984e:	2f00      	cmp	r7, #0
 8009850:	460c      	mov	r4, r1
 8009852:	4619      	mov	r1, r3
 8009854:	463b      	mov	r3, r7
 8009856:	bfbb      	ittet	lt
 8009858:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800985c:	461f      	movlt	r7, r3
 800985e:	2300      	movge	r3, #0
 8009860:	232d      	movlt	r3, #45	@ 0x2d
 8009862:	700b      	strb	r3, [r1, #0]
 8009864:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009866:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800986a:	4691      	mov	r9, r2
 800986c:	f023 0820 	bic.w	r8, r3, #32
 8009870:	bfbc      	itt	lt
 8009872:	4632      	movlt	r2, r6
 8009874:	4616      	movlt	r6, r2
 8009876:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800987a:	d005      	beq.n	8009888 <__cvt+0x42>
 800987c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009880:	d100      	bne.n	8009884 <__cvt+0x3e>
 8009882:	3401      	adds	r4, #1
 8009884:	2102      	movs	r1, #2
 8009886:	e000      	b.n	800988a <__cvt+0x44>
 8009888:	2103      	movs	r1, #3
 800988a:	ab03      	add	r3, sp, #12
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	ab02      	add	r3, sp, #8
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	ec47 6b10 	vmov	d0, r6, r7
 8009896:	4653      	mov	r3, sl
 8009898:	4622      	mov	r2, r4
 800989a:	f000 ff3d 	bl	800a718 <_dtoa_r>
 800989e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80098a2:	4605      	mov	r5, r0
 80098a4:	d119      	bne.n	80098da <__cvt+0x94>
 80098a6:	f019 0f01 	tst.w	r9, #1
 80098aa:	d00e      	beq.n	80098ca <__cvt+0x84>
 80098ac:	eb00 0904 	add.w	r9, r0, r4
 80098b0:	2200      	movs	r2, #0
 80098b2:	2300      	movs	r3, #0
 80098b4:	4630      	mov	r0, r6
 80098b6:	4639      	mov	r1, r7
 80098b8:	f7f7 f926 	bl	8000b08 <__aeabi_dcmpeq>
 80098bc:	b108      	cbz	r0, 80098c2 <__cvt+0x7c>
 80098be:	f8cd 900c 	str.w	r9, [sp, #12]
 80098c2:	2230      	movs	r2, #48	@ 0x30
 80098c4:	9b03      	ldr	r3, [sp, #12]
 80098c6:	454b      	cmp	r3, r9
 80098c8:	d31e      	bcc.n	8009908 <__cvt+0xc2>
 80098ca:	9b03      	ldr	r3, [sp, #12]
 80098cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098ce:	1b5b      	subs	r3, r3, r5
 80098d0:	4628      	mov	r0, r5
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	b004      	add	sp, #16
 80098d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098da:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80098de:	eb00 0904 	add.w	r9, r0, r4
 80098e2:	d1e5      	bne.n	80098b0 <__cvt+0x6a>
 80098e4:	7803      	ldrb	r3, [r0, #0]
 80098e6:	2b30      	cmp	r3, #48	@ 0x30
 80098e8:	d10a      	bne.n	8009900 <__cvt+0xba>
 80098ea:	2200      	movs	r2, #0
 80098ec:	2300      	movs	r3, #0
 80098ee:	4630      	mov	r0, r6
 80098f0:	4639      	mov	r1, r7
 80098f2:	f7f7 f909 	bl	8000b08 <__aeabi_dcmpeq>
 80098f6:	b918      	cbnz	r0, 8009900 <__cvt+0xba>
 80098f8:	f1c4 0401 	rsb	r4, r4, #1
 80098fc:	f8ca 4000 	str.w	r4, [sl]
 8009900:	f8da 3000 	ldr.w	r3, [sl]
 8009904:	4499      	add	r9, r3
 8009906:	e7d3      	b.n	80098b0 <__cvt+0x6a>
 8009908:	1c59      	adds	r1, r3, #1
 800990a:	9103      	str	r1, [sp, #12]
 800990c:	701a      	strb	r2, [r3, #0]
 800990e:	e7d9      	b.n	80098c4 <__cvt+0x7e>

08009910 <__exponent>:
 8009910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009912:	2900      	cmp	r1, #0
 8009914:	bfba      	itte	lt
 8009916:	4249      	neglt	r1, r1
 8009918:	232d      	movlt	r3, #45	@ 0x2d
 800991a:	232b      	movge	r3, #43	@ 0x2b
 800991c:	2909      	cmp	r1, #9
 800991e:	7002      	strb	r2, [r0, #0]
 8009920:	7043      	strb	r3, [r0, #1]
 8009922:	dd29      	ble.n	8009978 <__exponent+0x68>
 8009924:	f10d 0307 	add.w	r3, sp, #7
 8009928:	461d      	mov	r5, r3
 800992a:	270a      	movs	r7, #10
 800992c:	461a      	mov	r2, r3
 800992e:	fbb1 f6f7 	udiv	r6, r1, r7
 8009932:	fb07 1416 	mls	r4, r7, r6, r1
 8009936:	3430      	adds	r4, #48	@ 0x30
 8009938:	f802 4c01 	strb.w	r4, [r2, #-1]
 800993c:	460c      	mov	r4, r1
 800993e:	2c63      	cmp	r4, #99	@ 0x63
 8009940:	f103 33ff 	add.w	r3, r3, #4294967295
 8009944:	4631      	mov	r1, r6
 8009946:	dcf1      	bgt.n	800992c <__exponent+0x1c>
 8009948:	3130      	adds	r1, #48	@ 0x30
 800994a:	1e94      	subs	r4, r2, #2
 800994c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009950:	1c41      	adds	r1, r0, #1
 8009952:	4623      	mov	r3, r4
 8009954:	42ab      	cmp	r3, r5
 8009956:	d30a      	bcc.n	800996e <__exponent+0x5e>
 8009958:	f10d 0309 	add.w	r3, sp, #9
 800995c:	1a9b      	subs	r3, r3, r2
 800995e:	42ac      	cmp	r4, r5
 8009960:	bf88      	it	hi
 8009962:	2300      	movhi	r3, #0
 8009964:	3302      	adds	r3, #2
 8009966:	4403      	add	r3, r0
 8009968:	1a18      	subs	r0, r3, r0
 800996a:	b003      	add	sp, #12
 800996c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800996e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009972:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009976:	e7ed      	b.n	8009954 <__exponent+0x44>
 8009978:	2330      	movs	r3, #48	@ 0x30
 800997a:	3130      	adds	r1, #48	@ 0x30
 800997c:	7083      	strb	r3, [r0, #2]
 800997e:	70c1      	strb	r1, [r0, #3]
 8009980:	1d03      	adds	r3, r0, #4
 8009982:	e7f1      	b.n	8009968 <__exponent+0x58>

08009984 <_printf_float>:
 8009984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009988:	b08d      	sub	sp, #52	@ 0x34
 800998a:	460c      	mov	r4, r1
 800998c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009990:	4616      	mov	r6, r2
 8009992:	461f      	mov	r7, r3
 8009994:	4605      	mov	r5, r0
 8009996:	f000 fdbd 	bl	800a514 <_localeconv_r>
 800999a:	6803      	ldr	r3, [r0, #0]
 800999c:	9304      	str	r3, [sp, #16]
 800999e:	4618      	mov	r0, r3
 80099a0:	f7f6 fc86 	bl	80002b0 <strlen>
 80099a4:	2300      	movs	r3, #0
 80099a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80099a8:	f8d8 3000 	ldr.w	r3, [r8]
 80099ac:	9005      	str	r0, [sp, #20]
 80099ae:	3307      	adds	r3, #7
 80099b0:	f023 0307 	bic.w	r3, r3, #7
 80099b4:	f103 0208 	add.w	r2, r3, #8
 80099b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80099bc:	f8d4 b000 	ldr.w	fp, [r4]
 80099c0:	f8c8 2000 	str.w	r2, [r8]
 80099c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80099cc:	9307      	str	r3, [sp, #28]
 80099ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80099d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80099d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099da:	4b9c      	ldr	r3, [pc, #624]	@ (8009c4c <_printf_float+0x2c8>)
 80099dc:	f04f 32ff 	mov.w	r2, #4294967295
 80099e0:	f7f7 f8c4 	bl	8000b6c <__aeabi_dcmpun>
 80099e4:	bb70      	cbnz	r0, 8009a44 <_printf_float+0xc0>
 80099e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099ea:	4b98      	ldr	r3, [pc, #608]	@ (8009c4c <_printf_float+0x2c8>)
 80099ec:	f04f 32ff 	mov.w	r2, #4294967295
 80099f0:	f7f7 f89e 	bl	8000b30 <__aeabi_dcmple>
 80099f4:	bb30      	cbnz	r0, 8009a44 <_printf_float+0xc0>
 80099f6:	2200      	movs	r2, #0
 80099f8:	2300      	movs	r3, #0
 80099fa:	4640      	mov	r0, r8
 80099fc:	4649      	mov	r1, r9
 80099fe:	f7f7 f88d 	bl	8000b1c <__aeabi_dcmplt>
 8009a02:	b110      	cbz	r0, 8009a0a <_printf_float+0x86>
 8009a04:	232d      	movs	r3, #45	@ 0x2d
 8009a06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a0a:	4a91      	ldr	r2, [pc, #580]	@ (8009c50 <_printf_float+0x2cc>)
 8009a0c:	4b91      	ldr	r3, [pc, #580]	@ (8009c54 <_printf_float+0x2d0>)
 8009a0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009a12:	bf8c      	ite	hi
 8009a14:	4690      	movhi	r8, r2
 8009a16:	4698      	movls	r8, r3
 8009a18:	2303      	movs	r3, #3
 8009a1a:	6123      	str	r3, [r4, #16]
 8009a1c:	f02b 0304 	bic.w	r3, fp, #4
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	f04f 0900 	mov.w	r9, #0
 8009a26:	9700      	str	r7, [sp, #0]
 8009a28:	4633      	mov	r3, r6
 8009a2a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009a2c:	4621      	mov	r1, r4
 8009a2e:	4628      	mov	r0, r5
 8009a30:	f000 f9d2 	bl	8009dd8 <_printf_common>
 8009a34:	3001      	adds	r0, #1
 8009a36:	f040 808d 	bne.w	8009b54 <_printf_float+0x1d0>
 8009a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3e:	b00d      	add	sp, #52	@ 0x34
 8009a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a44:	4642      	mov	r2, r8
 8009a46:	464b      	mov	r3, r9
 8009a48:	4640      	mov	r0, r8
 8009a4a:	4649      	mov	r1, r9
 8009a4c:	f7f7 f88e 	bl	8000b6c <__aeabi_dcmpun>
 8009a50:	b140      	cbz	r0, 8009a64 <_printf_float+0xe0>
 8009a52:	464b      	mov	r3, r9
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	bfbc      	itt	lt
 8009a58:	232d      	movlt	r3, #45	@ 0x2d
 8009a5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8009c58 <_printf_float+0x2d4>)
 8009a60:	4b7e      	ldr	r3, [pc, #504]	@ (8009c5c <_printf_float+0x2d8>)
 8009a62:	e7d4      	b.n	8009a0e <_printf_float+0x8a>
 8009a64:	6863      	ldr	r3, [r4, #4]
 8009a66:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009a6a:	9206      	str	r2, [sp, #24]
 8009a6c:	1c5a      	adds	r2, r3, #1
 8009a6e:	d13b      	bne.n	8009ae8 <_printf_float+0x164>
 8009a70:	2306      	movs	r3, #6
 8009a72:	6063      	str	r3, [r4, #4]
 8009a74:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009a78:	2300      	movs	r3, #0
 8009a7a:	6022      	str	r2, [r4, #0]
 8009a7c:	9303      	str	r3, [sp, #12]
 8009a7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009a80:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009a84:	ab09      	add	r3, sp, #36	@ 0x24
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	6861      	ldr	r1, [r4, #4]
 8009a8a:	ec49 8b10 	vmov	d0, r8, r9
 8009a8e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009a92:	4628      	mov	r0, r5
 8009a94:	f7ff fed7 	bl	8009846 <__cvt>
 8009a98:	9b06      	ldr	r3, [sp, #24]
 8009a9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a9c:	2b47      	cmp	r3, #71	@ 0x47
 8009a9e:	4680      	mov	r8, r0
 8009aa0:	d129      	bne.n	8009af6 <_printf_float+0x172>
 8009aa2:	1cc8      	adds	r0, r1, #3
 8009aa4:	db02      	blt.n	8009aac <_printf_float+0x128>
 8009aa6:	6863      	ldr	r3, [r4, #4]
 8009aa8:	4299      	cmp	r1, r3
 8009aaa:	dd41      	ble.n	8009b30 <_printf_float+0x1ac>
 8009aac:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ab0:	fa5f fa8a 	uxtb.w	sl, sl
 8009ab4:	3901      	subs	r1, #1
 8009ab6:	4652      	mov	r2, sl
 8009ab8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009abc:	9109      	str	r1, [sp, #36]	@ 0x24
 8009abe:	f7ff ff27 	bl	8009910 <__exponent>
 8009ac2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ac4:	1813      	adds	r3, r2, r0
 8009ac6:	2a01      	cmp	r2, #1
 8009ac8:	4681      	mov	r9, r0
 8009aca:	6123      	str	r3, [r4, #16]
 8009acc:	dc02      	bgt.n	8009ad4 <_printf_float+0x150>
 8009ace:	6822      	ldr	r2, [r4, #0]
 8009ad0:	07d2      	lsls	r2, r2, #31
 8009ad2:	d501      	bpl.n	8009ad8 <_printf_float+0x154>
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	6123      	str	r3, [r4, #16]
 8009ad8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d0a2      	beq.n	8009a26 <_printf_float+0xa2>
 8009ae0:	232d      	movs	r3, #45	@ 0x2d
 8009ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ae6:	e79e      	b.n	8009a26 <_printf_float+0xa2>
 8009ae8:	9a06      	ldr	r2, [sp, #24]
 8009aea:	2a47      	cmp	r2, #71	@ 0x47
 8009aec:	d1c2      	bne.n	8009a74 <_printf_float+0xf0>
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1c0      	bne.n	8009a74 <_printf_float+0xf0>
 8009af2:	2301      	movs	r3, #1
 8009af4:	e7bd      	b.n	8009a72 <_printf_float+0xee>
 8009af6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009afa:	d9db      	bls.n	8009ab4 <_printf_float+0x130>
 8009afc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009b00:	d118      	bne.n	8009b34 <_printf_float+0x1b0>
 8009b02:	2900      	cmp	r1, #0
 8009b04:	6863      	ldr	r3, [r4, #4]
 8009b06:	dd0b      	ble.n	8009b20 <_printf_float+0x19c>
 8009b08:	6121      	str	r1, [r4, #16]
 8009b0a:	b913      	cbnz	r3, 8009b12 <_printf_float+0x18e>
 8009b0c:	6822      	ldr	r2, [r4, #0]
 8009b0e:	07d0      	lsls	r0, r2, #31
 8009b10:	d502      	bpl.n	8009b18 <_printf_float+0x194>
 8009b12:	3301      	adds	r3, #1
 8009b14:	440b      	add	r3, r1
 8009b16:	6123      	str	r3, [r4, #16]
 8009b18:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009b1a:	f04f 0900 	mov.w	r9, #0
 8009b1e:	e7db      	b.n	8009ad8 <_printf_float+0x154>
 8009b20:	b913      	cbnz	r3, 8009b28 <_printf_float+0x1a4>
 8009b22:	6822      	ldr	r2, [r4, #0]
 8009b24:	07d2      	lsls	r2, r2, #31
 8009b26:	d501      	bpl.n	8009b2c <_printf_float+0x1a8>
 8009b28:	3302      	adds	r3, #2
 8009b2a:	e7f4      	b.n	8009b16 <_printf_float+0x192>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e7f2      	b.n	8009b16 <_printf_float+0x192>
 8009b30:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b36:	4299      	cmp	r1, r3
 8009b38:	db05      	blt.n	8009b46 <_printf_float+0x1c2>
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	6121      	str	r1, [r4, #16]
 8009b3e:	07d8      	lsls	r0, r3, #31
 8009b40:	d5ea      	bpl.n	8009b18 <_printf_float+0x194>
 8009b42:	1c4b      	adds	r3, r1, #1
 8009b44:	e7e7      	b.n	8009b16 <_printf_float+0x192>
 8009b46:	2900      	cmp	r1, #0
 8009b48:	bfd4      	ite	le
 8009b4a:	f1c1 0202 	rsble	r2, r1, #2
 8009b4e:	2201      	movgt	r2, #1
 8009b50:	4413      	add	r3, r2
 8009b52:	e7e0      	b.n	8009b16 <_printf_float+0x192>
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	055a      	lsls	r2, r3, #21
 8009b58:	d407      	bmi.n	8009b6a <_printf_float+0x1e6>
 8009b5a:	6923      	ldr	r3, [r4, #16]
 8009b5c:	4642      	mov	r2, r8
 8009b5e:	4631      	mov	r1, r6
 8009b60:	4628      	mov	r0, r5
 8009b62:	47b8      	blx	r7
 8009b64:	3001      	adds	r0, #1
 8009b66:	d12b      	bne.n	8009bc0 <_printf_float+0x23c>
 8009b68:	e767      	b.n	8009a3a <_printf_float+0xb6>
 8009b6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b6e:	f240 80dd 	bls.w	8009d2c <_printf_float+0x3a8>
 8009b72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009b76:	2200      	movs	r2, #0
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f7f6 ffc5 	bl	8000b08 <__aeabi_dcmpeq>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d033      	beq.n	8009bea <_printf_float+0x266>
 8009b82:	4a37      	ldr	r2, [pc, #220]	@ (8009c60 <_printf_float+0x2dc>)
 8009b84:	2301      	movs	r3, #1
 8009b86:	4631      	mov	r1, r6
 8009b88:	4628      	mov	r0, r5
 8009b8a:	47b8      	blx	r7
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	f43f af54 	beq.w	8009a3a <_printf_float+0xb6>
 8009b92:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009b96:	4543      	cmp	r3, r8
 8009b98:	db02      	blt.n	8009ba0 <_printf_float+0x21c>
 8009b9a:	6823      	ldr	r3, [r4, #0]
 8009b9c:	07d8      	lsls	r0, r3, #31
 8009b9e:	d50f      	bpl.n	8009bc0 <_printf_float+0x23c>
 8009ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ba4:	4631      	mov	r1, r6
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	47b8      	blx	r7
 8009baa:	3001      	adds	r0, #1
 8009bac:	f43f af45 	beq.w	8009a3a <_printf_float+0xb6>
 8009bb0:	f04f 0900 	mov.w	r9, #0
 8009bb4:	f108 38ff 	add.w	r8, r8, #4294967295
 8009bb8:	f104 0a1a 	add.w	sl, r4, #26
 8009bbc:	45c8      	cmp	r8, r9
 8009bbe:	dc09      	bgt.n	8009bd4 <_printf_float+0x250>
 8009bc0:	6823      	ldr	r3, [r4, #0]
 8009bc2:	079b      	lsls	r3, r3, #30
 8009bc4:	f100 8103 	bmi.w	8009dce <_printf_float+0x44a>
 8009bc8:	68e0      	ldr	r0, [r4, #12]
 8009bca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bcc:	4298      	cmp	r0, r3
 8009bce:	bfb8      	it	lt
 8009bd0:	4618      	movlt	r0, r3
 8009bd2:	e734      	b.n	8009a3e <_printf_float+0xba>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	4652      	mov	r2, sl
 8009bd8:	4631      	mov	r1, r6
 8009bda:	4628      	mov	r0, r5
 8009bdc:	47b8      	blx	r7
 8009bde:	3001      	adds	r0, #1
 8009be0:	f43f af2b 	beq.w	8009a3a <_printf_float+0xb6>
 8009be4:	f109 0901 	add.w	r9, r9, #1
 8009be8:	e7e8      	b.n	8009bbc <_printf_float+0x238>
 8009bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	dc39      	bgt.n	8009c64 <_printf_float+0x2e0>
 8009bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8009c60 <_printf_float+0x2dc>)
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	47b8      	blx	r7
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	f43f af1d 	beq.w	8009a3a <_printf_float+0xb6>
 8009c00:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009c04:	ea59 0303 	orrs.w	r3, r9, r3
 8009c08:	d102      	bne.n	8009c10 <_printf_float+0x28c>
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	07d9      	lsls	r1, r3, #31
 8009c0e:	d5d7      	bpl.n	8009bc0 <_printf_float+0x23c>
 8009c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c14:	4631      	mov	r1, r6
 8009c16:	4628      	mov	r0, r5
 8009c18:	47b8      	blx	r7
 8009c1a:	3001      	adds	r0, #1
 8009c1c:	f43f af0d 	beq.w	8009a3a <_printf_float+0xb6>
 8009c20:	f04f 0a00 	mov.w	sl, #0
 8009c24:	f104 0b1a 	add.w	fp, r4, #26
 8009c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c2a:	425b      	negs	r3, r3
 8009c2c:	4553      	cmp	r3, sl
 8009c2e:	dc01      	bgt.n	8009c34 <_printf_float+0x2b0>
 8009c30:	464b      	mov	r3, r9
 8009c32:	e793      	b.n	8009b5c <_printf_float+0x1d8>
 8009c34:	2301      	movs	r3, #1
 8009c36:	465a      	mov	r2, fp
 8009c38:	4631      	mov	r1, r6
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	47b8      	blx	r7
 8009c3e:	3001      	adds	r0, #1
 8009c40:	f43f aefb 	beq.w	8009a3a <_printf_float+0xb6>
 8009c44:	f10a 0a01 	add.w	sl, sl, #1
 8009c48:	e7ee      	b.n	8009c28 <_printf_float+0x2a4>
 8009c4a:	bf00      	nop
 8009c4c:	7fefffff 	.word	0x7fefffff
 8009c50:	0800c588 	.word	0x0800c588
 8009c54:	0800c584 	.word	0x0800c584
 8009c58:	0800c590 	.word	0x0800c590
 8009c5c:	0800c58c 	.word	0x0800c58c
 8009c60:	0800c594 	.word	0x0800c594
 8009c64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c6a:	4553      	cmp	r3, sl
 8009c6c:	bfa8      	it	ge
 8009c6e:	4653      	movge	r3, sl
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	4699      	mov	r9, r3
 8009c74:	dc36      	bgt.n	8009ce4 <_printf_float+0x360>
 8009c76:	f04f 0b00 	mov.w	fp, #0
 8009c7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c7e:	f104 021a 	add.w	r2, r4, #26
 8009c82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c84:	9306      	str	r3, [sp, #24]
 8009c86:	eba3 0309 	sub.w	r3, r3, r9
 8009c8a:	455b      	cmp	r3, fp
 8009c8c:	dc31      	bgt.n	8009cf2 <_printf_float+0x36e>
 8009c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c90:	459a      	cmp	sl, r3
 8009c92:	dc3a      	bgt.n	8009d0a <_printf_float+0x386>
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	07da      	lsls	r2, r3, #31
 8009c98:	d437      	bmi.n	8009d0a <_printf_float+0x386>
 8009c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c9c:	ebaa 0903 	sub.w	r9, sl, r3
 8009ca0:	9b06      	ldr	r3, [sp, #24]
 8009ca2:	ebaa 0303 	sub.w	r3, sl, r3
 8009ca6:	4599      	cmp	r9, r3
 8009ca8:	bfa8      	it	ge
 8009caa:	4699      	movge	r9, r3
 8009cac:	f1b9 0f00 	cmp.w	r9, #0
 8009cb0:	dc33      	bgt.n	8009d1a <_printf_float+0x396>
 8009cb2:	f04f 0800 	mov.w	r8, #0
 8009cb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cba:	f104 0b1a 	add.w	fp, r4, #26
 8009cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc0:	ebaa 0303 	sub.w	r3, sl, r3
 8009cc4:	eba3 0309 	sub.w	r3, r3, r9
 8009cc8:	4543      	cmp	r3, r8
 8009cca:	f77f af79 	ble.w	8009bc0 <_printf_float+0x23c>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	465a      	mov	r2, fp
 8009cd2:	4631      	mov	r1, r6
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	47b8      	blx	r7
 8009cd8:	3001      	adds	r0, #1
 8009cda:	f43f aeae 	beq.w	8009a3a <_printf_float+0xb6>
 8009cde:	f108 0801 	add.w	r8, r8, #1
 8009ce2:	e7ec      	b.n	8009cbe <_printf_float+0x33a>
 8009ce4:	4642      	mov	r2, r8
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	47b8      	blx	r7
 8009cec:	3001      	adds	r0, #1
 8009cee:	d1c2      	bne.n	8009c76 <_printf_float+0x2f2>
 8009cf0:	e6a3      	b.n	8009a3a <_printf_float+0xb6>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	9206      	str	r2, [sp, #24]
 8009cfa:	47b8      	blx	r7
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	f43f ae9c 	beq.w	8009a3a <_printf_float+0xb6>
 8009d02:	9a06      	ldr	r2, [sp, #24]
 8009d04:	f10b 0b01 	add.w	fp, fp, #1
 8009d08:	e7bb      	b.n	8009c82 <_printf_float+0x2fe>
 8009d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d0e:	4631      	mov	r1, r6
 8009d10:	4628      	mov	r0, r5
 8009d12:	47b8      	blx	r7
 8009d14:	3001      	adds	r0, #1
 8009d16:	d1c0      	bne.n	8009c9a <_printf_float+0x316>
 8009d18:	e68f      	b.n	8009a3a <_printf_float+0xb6>
 8009d1a:	9a06      	ldr	r2, [sp, #24]
 8009d1c:	464b      	mov	r3, r9
 8009d1e:	4442      	add	r2, r8
 8009d20:	4631      	mov	r1, r6
 8009d22:	4628      	mov	r0, r5
 8009d24:	47b8      	blx	r7
 8009d26:	3001      	adds	r0, #1
 8009d28:	d1c3      	bne.n	8009cb2 <_printf_float+0x32e>
 8009d2a:	e686      	b.n	8009a3a <_printf_float+0xb6>
 8009d2c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d30:	f1ba 0f01 	cmp.w	sl, #1
 8009d34:	dc01      	bgt.n	8009d3a <_printf_float+0x3b6>
 8009d36:	07db      	lsls	r3, r3, #31
 8009d38:	d536      	bpl.n	8009da8 <_printf_float+0x424>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	4642      	mov	r2, r8
 8009d3e:	4631      	mov	r1, r6
 8009d40:	4628      	mov	r0, r5
 8009d42:	47b8      	blx	r7
 8009d44:	3001      	adds	r0, #1
 8009d46:	f43f ae78 	beq.w	8009a3a <_printf_float+0xb6>
 8009d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d4e:	4631      	mov	r1, r6
 8009d50:	4628      	mov	r0, r5
 8009d52:	47b8      	blx	r7
 8009d54:	3001      	adds	r0, #1
 8009d56:	f43f ae70 	beq.w	8009a3a <_printf_float+0xb6>
 8009d5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d5e:	2200      	movs	r2, #0
 8009d60:	2300      	movs	r3, #0
 8009d62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d66:	f7f6 fecf 	bl	8000b08 <__aeabi_dcmpeq>
 8009d6a:	b9c0      	cbnz	r0, 8009d9e <_printf_float+0x41a>
 8009d6c:	4653      	mov	r3, sl
 8009d6e:	f108 0201 	add.w	r2, r8, #1
 8009d72:	4631      	mov	r1, r6
 8009d74:	4628      	mov	r0, r5
 8009d76:	47b8      	blx	r7
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d10c      	bne.n	8009d96 <_printf_float+0x412>
 8009d7c:	e65d      	b.n	8009a3a <_printf_float+0xb6>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	465a      	mov	r2, fp
 8009d82:	4631      	mov	r1, r6
 8009d84:	4628      	mov	r0, r5
 8009d86:	47b8      	blx	r7
 8009d88:	3001      	adds	r0, #1
 8009d8a:	f43f ae56 	beq.w	8009a3a <_printf_float+0xb6>
 8009d8e:	f108 0801 	add.w	r8, r8, #1
 8009d92:	45d0      	cmp	r8, sl
 8009d94:	dbf3      	blt.n	8009d7e <_printf_float+0x3fa>
 8009d96:	464b      	mov	r3, r9
 8009d98:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009d9c:	e6df      	b.n	8009b5e <_printf_float+0x1da>
 8009d9e:	f04f 0800 	mov.w	r8, #0
 8009da2:	f104 0b1a 	add.w	fp, r4, #26
 8009da6:	e7f4      	b.n	8009d92 <_printf_float+0x40e>
 8009da8:	2301      	movs	r3, #1
 8009daa:	4642      	mov	r2, r8
 8009dac:	e7e1      	b.n	8009d72 <_printf_float+0x3ee>
 8009dae:	2301      	movs	r3, #1
 8009db0:	464a      	mov	r2, r9
 8009db2:	4631      	mov	r1, r6
 8009db4:	4628      	mov	r0, r5
 8009db6:	47b8      	blx	r7
 8009db8:	3001      	adds	r0, #1
 8009dba:	f43f ae3e 	beq.w	8009a3a <_printf_float+0xb6>
 8009dbe:	f108 0801 	add.w	r8, r8, #1
 8009dc2:	68e3      	ldr	r3, [r4, #12]
 8009dc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009dc6:	1a5b      	subs	r3, r3, r1
 8009dc8:	4543      	cmp	r3, r8
 8009dca:	dcf0      	bgt.n	8009dae <_printf_float+0x42a>
 8009dcc:	e6fc      	b.n	8009bc8 <_printf_float+0x244>
 8009dce:	f04f 0800 	mov.w	r8, #0
 8009dd2:	f104 0919 	add.w	r9, r4, #25
 8009dd6:	e7f4      	b.n	8009dc2 <_printf_float+0x43e>

08009dd8 <_printf_common>:
 8009dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ddc:	4616      	mov	r6, r2
 8009dde:	4698      	mov	r8, r3
 8009de0:	688a      	ldr	r2, [r1, #8]
 8009de2:	690b      	ldr	r3, [r1, #16]
 8009de4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009de8:	4293      	cmp	r3, r2
 8009dea:	bfb8      	it	lt
 8009dec:	4613      	movlt	r3, r2
 8009dee:	6033      	str	r3, [r6, #0]
 8009df0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009df4:	4607      	mov	r7, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	b10a      	cbz	r2, 8009dfe <_printf_common+0x26>
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	6033      	str	r3, [r6, #0]
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	0699      	lsls	r1, r3, #26
 8009e02:	bf42      	ittt	mi
 8009e04:	6833      	ldrmi	r3, [r6, #0]
 8009e06:	3302      	addmi	r3, #2
 8009e08:	6033      	strmi	r3, [r6, #0]
 8009e0a:	6825      	ldr	r5, [r4, #0]
 8009e0c:	f015 0506 	ands.w	r5, r5, #6
 8009e10:	d106      	bne.n	8009e20 <_printf_common+0x48>
 8009e12:	f104 0a19 	add.w	sl, r4, #25
 8009e16:	68e3      	ldr	r3, [r4, #12]
 8009e18:	6832      	ldr	r2, [r6, #0]
 8009e1a:	1a9b      	subs	r3, r3, r2
 8009e1c:	42ab      	cmp	r3, r5
 8009e1e:	dc26      	bgt.n	8009e6e <_printf_common+0x96>
 8009e20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e24:	6822      	ldr	r2, [r4, #0]
 8009e26:	3b00      	subs	r3, #0
 8009e28:	bf18      	it	ne
 8009e2a:	2301      	movne	r3, #1
 8009e2c:	0692      	lsls	r2, r2, #26
 8009e2e:	d42b      	bmi.n	8009e88 <_printf_common+0xb0>
 8009e30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e34:	4641      	mov	r1, r8
 8009e36:	4638      	mov	r0, r7
 8009e38:	47c8      	blx	r9
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	d01e      	beq.n	8009e7c <_printf_common+0xa4>
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	6922      	ldr	r2, [r4, #16]
 8009e42:	f003 0306 	and.w	r3, r3, #6
 8009e46:	2b04      	cmp	r3, #4
 8009e48:	bf02      	ittt	eq
 8009e4a:	68e5      	ldreq	r5, [r4, #12]
 8009e4c:	6833      	ldreq	r3, [r6, #0]
 8009e4e:	1aed      	subeq	r5, r5, r3
 8009e50:	68a3      	ldr	r3, [r4, #8]
 8009e52:	bf0c      	ite	eq
 8009e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e58:	2500      	movne	r5, #0
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	bfc4      	itt	gt
 8009e5e:	1a9b      	subgt	r3, r3, r2
 8009e60:	18ed      	addgt	r5, r5, r3
 8009e62:	2600      	movs	r6, #0
 8009e64:	341a      	adds	r4, #26
 8009e66:	42b5      	cmp	r5, r6
 8009e68:	d11a      	bne.n	8009ea0 <_printf_common+0xc8>
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	e008      	b.n	8009e80 <_printf_common+0xa8>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	4652      	mov	r2, sl
 8009e72:	4641      	mov	r1, r8
 8009e74:	4638      	mov	r0, r7
 8009e76:	47c8      	blx	r9
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d103      	bne.n	8009e84 <_printf_common+0xac>
 8009e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e84:	3501      	adds	r5, #1
 8009e86:	e7c6      	b.n	8009e16 <_printf_common+0x3e>
 8009e88:	18e1      	adds	r1, r4, r3
 8009e8a:	1c5a      	adds	r2, r3, #1
 8009e8c:	2030      	movs	r0, #48	@ 0x30
 8009e8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e92:	4422      	add	r2, r4
 8009e94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e9c:	3302      	adds	r3, #2
 8009e9e:	e7c7      	b.n	8009e30 <_printf_common+0x58>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	4641      	mov	r1, r8
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	47c8      	blx	r9
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d0e6      	beq.n	8009e7c <_printf_common+0xa4>
 8009eae:	3601      	adds	r6, #1
 8009eb0:	e7d9      	b.n	8009e66 <_printf_common+0x8e>
	...

08009eb4 <_printf_i>:
 8009eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb8:	7e0f      	ldrb	r7, [r1, #24]
 8009eba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ebc:	2f78      	cmp	r7, #120	@ 0x78
 8009ebe:	4691      	mov	r9, r2
 8009ec0:	4680      	mov	r8, r0
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	469a      	mov	sl, r3
 8009ec6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009eca:	d807      	bhi.n	8009edc <_printf_i+0x28>
 8009ecc:	2f62      	cmp	r7, #98	@ 0x62
 8009ece:	d80a      	bhi.n	8009ee6 <_printf_i+0x32>
 8009ed0:	2f00      	cmp	r7, #0
 8009ed2:	f000 80d1 	beq.w	800a078 <_printf_i+0x1c4>
 8009ed6:	2f58      	cmp	r7, #88	@ 0x58
 8009ed8:	f000 80b8 	beq.w	800a04c <_printf_i+0x198>
 8009edc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ee0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ee4:	e03a      	b.n	8009f5c <_printf_i+0xa8>
 8009ee6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009eea:	2b15      	cmp	r3, #21
 8009eec:	d8f6      	bhi.n	8009edc <_printf_i+0x28>
 8009eee:	a101      	add	r1, pc, #4	@ (adr r1, 8009ef4 <_printf_i+0x40>)
 8009ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ef4:	08009f4d 	.word	0x08009f4d
 8009ef8:	08009f61 	.word	0x08009f61
 8009efc:	08009edd 	.word	0x08009edd
 8009f00:	08009edd 	.word	0x08009edd
 8009f04:	08009edd 	.word	0x08009edd
 8009f08:	08009edd 	.word	0x08009edd
 8009f0c:	08009f61 	.word	0x08009f61
 8009f10:	08009edd 	.word	0x08009edd
 8009f14:	08009edd 	.word	0x08009edd
 8009f18:	08009edd 	.word	0x08009edd
 8009f1c:	08009edd 	.word	0x08009edd
 8009f20:	0800a05f 	.word	0x0800a05f
 8009f24:	08009f8b 	.word	0x08009f8b
 8009f28:	0800a019 	.word	0x0800a019
 8009f2c:	08009edd 	.word	0x08009edd
 8009f30:	08009edd 	.word	0x08009edd
 8009f34:	0800a081 	.word	0x0800a081
 8009f38:	08009edd 	.word	0x08009edd
 8009f3c:	08009f8b 	.word	0x08009f8b
 8009f40:	08009edd 	.word	0x08009edd
 8009f44:	08009edd 	.word	0x08009edd
 8009f48:	0800a021 	.word	0x0800a021
 8009f4c:	6833      	ldr	r3, [r6, #0]
 8009f4e:	1d1a      	adds	r2, r3, #4
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6032      	str	r2, [r6, #0]
 8009f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e09c      	b.n	800a09a <_printf_i+0x1e6>
 8009f60:	6833      	ldr	r3, [r6, #0]
 8009f62:	6820      	ldr	r0, [r4, #0]
 8009f64:	1d19      	adds	r1, r3, #4
 8009f66:	6031      	str	r1, [r6, #0]
 8009f68:	0606      	lsls	r6, r0, #24
 8009f6a:	d501      	bpl.n	8009f70 <_printf_i+0xbc>
 8009f6c:	681d      	ldr	r5, [r3, #0]
 8009f6e:	e003      	b.n	8009f78 <_printf_i+0xc4>
 8009f70:	0645      	lsls	r5, r0, #25
 8009f72:	d5fb      	bpl.n	8009f6c <_printf_i+0xb8>
 8009f74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f78:	2d00      	cmp	r5, #0
 8009f7a:	da03      	bge.n	8009f84 <_printf_i+0xd0>
 8009f7c:	232d      	movs	r3, #45	@ 0x2d
 8009f7e:	426d      	negs	r5, r5
 8009f80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f84:	4858      	ldr	r0, [pc, #352]	@ (800a0e8 <_printf_i+0x234>)
 8009f86:	230a      	movs	r3, #10
 8009f88:	e011      	b.n	8009fae <_printf_i+0xfa>
 8009f8a:	6821      	ldr	r1, [r4, #0]
 8009f8c:	6833      	ldr	r3, [r6, #0]
 8009f8e:	0608      	lsls	r0, r1, #24
 8009f90:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f94:	d402      	bmi.n	8009f9c <_printf_i+0xe8>
 8009f96:	0649      	lsls	r1, r1, #25
 8009f98:	bf48      	it	mi
 8009f9a:	b2ad      	uxthmi	r5, r5
 8009f9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f9e:	4852      	ldr	r0, [pc, #328]	@ (800a0e8 <_printf_i+0x234>)
 8009fa0:	6033      	str	r3, [r6, #0]
 8009fa2:	bf14      	ite	ne
 8009fa4:	230a      	movne	r3, #10
 8009fa6:	2308      	moveq	r3, #8
 8009fa8:	2100      	movs	r1, #0
 8009faa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009fae:	6866      	ldr	r6, [r4, #4]
 8009fb0:	60a6      	str	r6, [r4, #8]
 8009fb2:	2e00      	cmp	r6, #0
 8009fb4:	db05      	blt.n	8009fc2 <_printf_i+0x10e>
 8009fb6:	6821      	ldr	r1, [r4, #0]
 8009fb8:	432e      	orrs	r6, r5
 8009fba:	f021 0104 	bic.w	r1, r1, #4
 8009fbe:	6021      	str	r1, [r4, #0]
 8009fc0:	d04b      	beq.n	800a05a <_printf_i+0x1a6>
 8009fc2:	4616      	mov	r6, r2
 8009fc4:	fbb5 f1f3 	udiv	r1, r5, r3
 8009fc8:	fb03 5711 	mls	r7, r3, r1, r5
 8009fcc:	5dc7      	ldrb	r7, [r0, r7]
 8009fce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009fd2:	462f      	mov	r7, r5
 8009fd4:	42bb      	cmp	r3, r7
 8009fd6:	460d      	mov	r5, r1
 8009fd8:	d9f4      	bls.n	8009fc4 <_printf_i+0x110>
 8009fda:	2b08      	cmp	r3, #8
 8009fdc:	d10b      	bne.n	8009ff6 <_printf_i+0x142>
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	07df      	lsls	r7, r3, #31
 8009fe2:	d508      	bpl.n	8009ff6 <_printf_i+0x142>
 8009fe4:	6923      	ldr	r3, [r4, #16]
 8009fe6:	6861      	ldr	r1, [r4, #4]
 8009fe8:	4299      	cmp	r1, r3
 8009fea:	bfde      	ittt	le
 8009fec:	2330      	movle	r3, #48	@ 0x30
 8009fee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ff2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ff6:	1b92      	subs	r2, r2, r6
 8009ff8:	6122      	str	r2, [r4, #16]
 8009ffa:	f8cd a000 	str.w	sl, [sp]
 8009ffe:	464b      	mov	r3, r9
 800a000:	aa03      	add	r2, sp, #12
 800a002:	4621      	mov	r1, r4
 800a004:	4640      	mov	r0, r8
 800a006:	f7ff fee7 	bl	8009dd8 <_printf_common>
 800a00a:	3001      	adds	r0, #1
 800a00c:	d14a      	bne.n	800a0a4 <_printf_i+0x1f0>
 800a00e:	f04f 30ff 	mov.w	r0, #4294967295
 800a012:	b004      	add	sp, #16
 800a014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a018:	6823      	ldr	r3, [r4, #0]
 800a01a:	f043 0320 	orr.w	r3, r3, #32
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	4832      	ldr	r0, [pc, #200]	@ (800a0ec <_printf_i+0x238>)
 800a022:	2778      	movs	r7, #120	@ 0x78
 800a024:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	6831      	ldr	r1, [r6, #0]
 800a02c:	061f      	lsls	r7, r3, #24
 800a02e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a032:	d402      	bmi.n	800a03a <_printf_i+0x186>
 800a034:	065f      	lsls	r7, r3, #25
 800a036:	bf48      	it	mi
 800a038:	b2ad      	uxthmi	r5, r5
 800a03a:	6031      	str	r1, [r6, #0]
 800a03c:	07d9      	lsls	r1, r3, #31
 800a03e:	bf44      	itt	mi
 800a040:	f043 0320 	orrmi.w	r3, r3, #32
 800a044:	6023      	strmi	r3, [r4, #0]
 800a046:	b11d      	cbz	r5, 800a050 <_printf_i+0x19c>
 800a048:	2310      	movs	r3, #16
 800a04a:	e7ad      	b.n	8009fa8 <_printf_i+0xf4>
 800a04c:	4826      	ldr	r0, [pc, #152]	@ (800a0e8 <_printf_i+0x234>)
 800a04e:	e7e9      	b.n	800a024 <_printf_i+0x170>
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	f023 0320 	bic.w	r3, r3, #32
 800a056:	6023      	str	r3, [r4, #0]
 800a058:	e7f6      	b.n	800a048 <_printf_i+0x194>
 800a05a:	4616      	mov	r6, r2
 800a05c:	e7bd      	b.n	8009fda <_printf_i+0x126>
 800a05e:	6833      	ldr	r3, [r6, #0]
 800a060:	6825      	ldr	r5, [r4, #0]
 800a062:	6961      	ldr	r1, [r4, #20]
 800a064:	1d18      	adds	r0, r3, #4
 800a066:	6030      	str	r0, [r6, #0]
 800a068:	062e      	lsls	r6, r5, #24
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	d501      	bpl.n	800a072 <_printf_i+0x1be>
 800a06e:	6019      	str	r1, [r3, #0]
 800a070:	e002      	b.n	800a078 <_printf_i+0x1c4>
 800a072:	0668      	lsls	r0, r5, #25
 800a074:	d5fb      	bpl.n	800a06e <_printf_i+0x1ba>
 800a076:	8019      	strh	r1, [r3, #0]
 800a078:	2300      	movs	r3, #0
 800a07a:	6123      	str	r3, [r4, #16]
 800a07c:	4616      	mov	r6, r2
 800a07e:	e7bc      	b.n	8009ffa <_printf_i+0x146>
 800a080:	6833      	ldr	r3, [r6, #0]
 800a082:	1d1a      	adds	r2, r3, #4
 800a084:	6032      	str	r2, [r6, #0]
 800a086:	681e      	ldr	r6, [r3, #0]
 800a088:	6862      	ldr	r2, [r4, #4]
 800a08a:	2100      	movs	r1, #0
 800a08c:	4630      	mov	r0, r6
 800a08e:	f7f6 f8bf 	bl	8000210 <memchr>
 800a092:	b108      	cbz	r0, 800a098 <_printf_i+0x1e4>
 800a094:	1b80      	subs	r0, r0, r6
 800a096:	6060      	str	r0, [r4, #4]
 800a098:	6863      	ldr	r3, [r4, #4]
 800a09a:	6123      	str	r3, [r4, #16]
 800a09c:	2300      	movs	r3, #0
 800a09e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0a2:	e7aa      	b.n	8009ffa <_printf_i+0x146>
 800a0a4:	6923      	ldr	r3, [r4, #16]
 800a0a6:	4632      	mov	r2, r6
 800a0a8:	4649      	mov	r1, r9
 800a0aa:	4640      	mov	r0, r8
 800a0ac:	47d0      	blx	sl
 800a0ae:	3001      	adds	r0, #1
 800a0b0:	d0ad      	beq.n	800a00e <_printf_i+0x15a>
 800a0b2:	6823      	ldr	r3, [r4, #0]
 800a0b4:	079b      	lsls	r3, r3, #30
 800a0b6:	d413      	bmi.n	800a0e0 <_printf_i+0x22c>
 800a0b8:	68e0      	ldr	r0, [r4, #12]
 800a0ba:	9b03      	ldr	r3, [sp, #12]
 800a0bc:	4298      	cmp	r0, r3
 800a0be:	bfb8      	it	lt
 800a0c0:	4618      	movlt	r0, r3
 800a0c2:	e7a6      	b.n	800a012 <_printf_i+0x15e>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	4632      	mov	r2, r6
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	47d0      	blx	sl
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	d09d      	beq.n	800a00e <_printf_i+0x15a>
 800a0d2:	3501      	adds	r5, #1
 800a0d4:	68e3      	ldr	r3, [r4, #12]
 800a0d6:	9903      	ldr	r1, [sp, #12]
 800a0d8:	1a5b      	subs	r3, r3, r1
 800a0da:	42ab      	cmp	r3, r5
 800a0dc:	dcf2      	bgt.n	800a0c4 <_printf_i+0x210>
 800a0de:	e7eb      	b.n	800a0b8 <_printf_i+0x204>
 800a0e0:	2500      	movs	r5, #0
 800a0e2:	f104 0619 	add.w	r6, r4, #25
 800a0e6:	e7f5      	b.n	800a0d4 <_printf_i+0x220>
 800a0e8:	0800c596 	.word	0x0800c596
 800a0ec:	0800c5a7 	.word	0x0800c5a7

0800a0f0 <std>:
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	b510      	push	{r4, lr}
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	e9c0 3300 	strd	r3, r3, [r0]
 800a0fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0fe:	6083      	str	r3, [r0, #8]
 800a100:	8181      	strh	r1, [r0, #12]
 800a102:	6643      	str	r3, [r0, #100]	@ 0x64
 800a104:	81c2      	strh	r2, [r0, #14]
 800a106:	6183      	str	r3, [r0, #24]
 800a108:	4619      	mov	r1, r3
 800a10a:	2208      	movs	r2, #8
 800a10c:	305c      	adds	r0, #92	@ 0x5c
 800a10e:	f000 f9f9 	bl	800a504 <memset>
 800a112:	4b0d      	ldr	r3, [pc, #52]	@ (800a148 <std+0x58>)
 800a114:	6263      	str	r3, [r4, #36]	@ 0x24
 800a116:	4b0d      	ldr	r3, [pc, #52]	@ (800a14c <std+0x5c>)
 800a118:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a11a:	4b0d      	ldr	r3, [pc, #52]	@ (800a150 <std+0x60>)
 800a11c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a11e:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <std+0x64>)
 800a120:	6323      	str	r3, [r4, #48]	@ 0x30
 800a122:	4b0d      	ldr	r3, [pc, #52]	@ (800a158 <std+0x68>)
 800a124:	6224      	str	r4, [r4, #32]
 800a126:	429c      	cmp	r4, r3
 800a128:	d006      	beq.n	800a138 <std+0x48>
 800a12a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a12e:	4294      	cmp	r4, r2
 800a130:	d002      	beq.n	800a138 <std+0x48>
 800a132:	33d0      	adds	r3, #208	@ 0xd0
 800a134:	429c      	cmp	r4, r3
 800a136:	d105      	bne.n	800a144 <std+0x54>
 800a138:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a140:	f000 ba5c 	b.w	800a5fc <__retarget_lock_init_recursive>
 800a144:	bd10      	pop	{r4, pc}
 800a146:	bf00      	nop
 800a148:	0800a355 	.word	0x0800a355
 800a14c:	0800a377 	.word	0x0800a377
 800a150:	0800a3af 	.word	0x0800a3af
 800a154:	0800a3d3 	.word	0x0800a3d3
 800a158:	20000638 	.word	0x20000638

0800a15c <stdio_exit_handler>:
 800a15c:	4a02      	ldr	r2, [pc, #8]	@ (800a168 <stdio_exit_handler+0xc>)
 800a15e:	4903      	ldr	r1, [pc, #12]	@ (800a16c <stdio_exit_handler+0x10>)
 800a160:	4803      	ldr	r0, [pc, #12]	@ (800a170 <stdio_exit_handler+0x14>)
 800a162:	f000 b869 	b.w	800a238 <_fwalk_sglue>
 800a166:	bf00      	nop
 800a168:	2000000c 	.word	0x2000000c
 800a16c:	0800bf39 	.word	0x0800bf39
 800a170:	2000001c 	.word	0x2000001c

0800a174 <cleanup_stdio>:
 800a174:	6841      	ldr	r1, [r0, #4]
 800a176:	4b0c      	ldr	r3, [pc, #48]	@ (800a1a8 <cleanup_stdio+0x34>)
 800a178:	4299      	cmp	r1, r3
 800a17a:	b510      	push	{r4, lr}
 800a17c:	4604      	mov	r4, r0
 800a17e:	d001      	beq.n	800a184 <cleanup_stdio+0x10>
 800a180:	f001 feda 	bl	800bf38 <_fflush_r>
 800a184:	68a1      	ldr	r1, [r4, #8]
 800a186:	4b09      	ldr	r3, [pc, #36]	@ (800a1ac <cleanup_stdio+0x38>)
 800a188:	4299      	cmp	r1, r3
 800a18a:	d002      	beq.n	800a192 <cleanup_stdio+0x1e>
 800a18c:	4620      	mov	r0, r4
 800a18e:	f001 fed3 	bl	800bf38 <_fflush_r>
 800a192:	68e1      	ldr	r1, [r4, #12]
 800a194:	4b06      	ldr	r3, [pc, #24]	@ (800a1b0 <cleanup_stdio+0x3c>)
 800a196:	4299      	cmp	r1, r3
 800a198:	d004      	beq.n	800a1a4 <cleanup_stdio+0x30>
 800a19a:	4620      	mov	r0, r4
 800a19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1a0:	f001 beca 	b.w	800bf38 <_fflush_r>
 800a1a4:	bd10      	pop	{r4, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20000638 	.word	0x20000638
 800a1ac:	200006a0 	.word	0x200006a0
 800a1b0:	20000708 	.word	0x20000708

0800a1b4 <global_stdio_init.part.0>:
 800a1b4:	b510      	push	{r4, lr}
 800a1b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a1e4 <global_stdio_init.part.0+0x30>)
 800a1b8:	4c0b      	ldr	r4, [pc, #44]	@ (800a1e8 <global_stdio_init.part.0+0x34>)
 800a1ba:	4a0c      	ldr	r2, [pc, #48]	@ (800a1ec <global_stdio_init.part.0+0x38>)
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	4620      	mov	r0, r4
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	2104      	movs	r1, #4
 800a1c4:	f7ff ff94 	bl	800a0f0 <std>
 800a1c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	2109      	movs	r1, #9
 800a1d0:	f7ff ff8e 	bl	800a0f0 <std>
 800a1d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a1d8:	2202      	movs	r2, #2
 800a1da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1de:	2112      	movs	r1, #18
 800a1e0:	f7ff bf86 	b.w	800a0f0 <std>
 800a1e4:	20000770 	.word	0x20000770
 800a1e8:	20000638 	.word	0x20000638
 800a1ec:	0800a15d 	.word	0x0800a15d

0800a1f0 <__sfp_lock_acquire>:
 800a1f0:	4801      	ldr	r0, [pc, #4]	@ (800a1f8 <__sfp_lock_acquire+0x8>)
 800a1f2:	f000 ba04 	b.w	800a5fe <__retarget_lock_acquire_recursive>
 800a1f6:	bf00      	nop
 800a1f8:	20000779 	.word	0x20000779

0800a1fc <__sfp_lock_release>:
 800a1fc:	4801      	ldr	r0, [pc, #4]	@ (800a204 <__sfp_lock_release+0x8>)
 800a1fe:	f000 b9ff 	b.w	800a600 <__retarget_lock_release_recursive>
 800a202:	bf00      	nop
 800a204:	20000779 	.word	0x20000779

0800a208 <__sinit>:
 800a208:	b510      	push	{r4, lr}
 800a20a:	4604      	mov	r4, r0
 800a20c:	f7ff fff0 	bl	800a1f0 <__sfp_lock_acquire>
 800a210:	6a23      	ldr	r3, [r4, #32]
 800a212:	b11b      	cbz	r3, 800a21c <__sinit+0x14>
 800a214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a218:	f7ff bff0 	b.w	800a1fc <__sfp_lock_release>
 800a21c:	4b04      	ldr	r3, [pc, #16]	@ (800a230 <__sinit+0x28>)
 800a21e:	6223      	str	r3, [r4, #32]
 800a220:	4b04      	ldr	r3, [pc, #16]	@ (800a234 <__sinit+0x2c>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1f5      	bne.n	800a214 <__sinit+0xc>
 800a228:	f7ff ffc4 	bl	800a1b4 <global_stdio_init.part.0>
 800a22c:	e7f2      	b.n	800a214 <__sinit+0xc>
 800a22e:	bf00      	nop
 800a230:	0800a175 	.word	0x0800a175
 800a234:	20000770 	.word	0x20000770

0800a238 <_fwalk_sglue>:
 800a238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a23c:	4607      	mov	r7, r0
 800a23e:	4688      	mov	r8, r1
 800a240:	4614      	mov	r4, r2
 800a242:	2600      	movs	r6, #0
 800a244:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a248:	f1b9 0901 	subs.w	r9, r9, #1
 800a24c:	d505      	bpl.n	800a25a <_fwalk_sglue+0x22>
 800a24e:	6824      	ldr	r4, [r4, #0]
 800a250:	2c00      	cmp	r4, #0
 800a252:	d1f7      	bne.n	800a244 <_fwalk_sglue+0xc>
 800a254:	4630      	mov	r0, r6
 800a256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a25a:	89ab      	ldrh	r3, [r5, #12]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d907      	bls.n	800a270 <_fwalk_sglue+0x38>
 800a260:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a264:	3301      	adds	r3, #1
 800a266:	d003      	beq.n	800a270 <_fwalk_sglue+0x38>
 800a268:	4629      	mov	r1, r5
 800a26a:	4638      	mov	r0, r7
 800a26c:	47c0      	blx	r8
 800a26e:	4306      	orrs	r6, r0
 800a270:	3568      	adds	r5, #104	@ 0x68
 800a272:	e7e9      	b.n	800a248 <_fwalk_sglue+0x10>

0800a274 <iprintf>:
 800a274:	b40f      	push	{r0, r1, r2, r3}
 800a276:	b507      	push	{r0, r1, r2, lr}
 800a278:	4906      	ldr	r1, [pc, #24]	@ (800a294 <iprintf+0x20>)
 800a27a:	ab04      	add	r3, sp, #16
 800a27c:	6808      	ldr	r0, [r1, #0]
 800a27e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a282:	6881      	ldr	r1, [r0, #8]
 800a284:	9301      	str	r3, [sp, #4]
 800a286:	f001 fcbb 	bl	800bc00 <_vfiprintf_r>
 800a28a:	b003      	add	sp, #12
 800a28c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a290:	b004      	add	sp, #16
 800a292:	4770      	bx	lr
 800a294:	20000018 	.word	0x20000018

0800a298 <_puts_r>:
 800a298:	6a03      	ldr	r3, [r0, #32]
 800a29a:	b570      	push	{r4, r5, r6, lr}
 800a29c:	6884      	ldr	r4, [r0, #8]
 800a29e:	4605      	mov	r5, r0
 800a2a0:	460e      	mov	r6, r1
 800a2a2:	b90b      	cbnz	r3, 800a2a8 <_puts_r+0x10>
 800a2a4:	f7ff ffb0 	bl	800a208 <__sinit>
 800a2a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2aa:	07db      	lsls	r3, r3, #31
 800a2ac:	d405      	bmi.n	800a2ba <_puts_r+0x22>
 800a2ae:	89a3      	ldrh	r3, [r4, #12]
 800a2b0:	0598      	lsls	r0, r3, #22
 800a2b2:	d402      	bmi.n	800a2ba <_puts_r+0x22>
 800a2b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2b6:	f000 f9a2 	bl	800a5fe <__retarget_lock_acquire_recursive>
 800a2ba:	89a3      	ldrh	r3, [r4, #12]
 800a2bc:	0719      	lsls	r1, r3, #28
 800a2be:	d502      	bpl.n	800a2c6 <_puts_r+0x2e>
 800a2c0:	6923      	ldr	r3, [r4, #16]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d135      	bne.n	800a332 <_puts_r+0x9a>
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	f000 f8c5 	bl	800a458 <__swsetup_r>
 800a2ce:	b380      	cbz	r0, 800a332 <_puts_r+0x9a>
 800a2d0:	f04f 35ff 	mov.w	r5, #4294967295
 800a2d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2d6:	07da      	lsls	r2, r3, #31
 800a2d8:	d405      	bmi.n	800a2e6 <_puts_r+0x4e>
 800a2da:	89a3      	ldrh	r3, [r4, #12]
 800a2dc:	059b      	lsls	r3, r3, #22
 800a2de:	d402      	bmi.n	800a2e6 <_puts_r+0x4e>
 800a2e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2e2:	f000 f98d 	bl	800a600 <__retarget_lock_release_recursive>
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	bd70      	pop	{r4, r5, r6, pc}
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	da04      	bge.n	800a2f8 <_puts_r+0x60>
 800a2ee:	69a2      	ldr	r2, [r4, #24]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	dc17      	bgt.n	800a324 <_puts_r+0x8c>
 800a2f4:	290a      	cmp	r1, #10
 800a2f6:	d015      	beq.n	800a324 <_puts_r+0x8c>
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	6022      	str	r2, [r4, #0]
 800a2fe:	7019      	strb	r1, [r3, #0]
 800a300:	68a3      	ldr	r3, [r4, #8]
 800a302:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a306:	3b01      	subs	r3, #1
 800a308:	60a3      	str	r3, [r4, #8]
 800a30a:	2900      	cmp	r1, #0
 800a30c:	d1ed      	bne.n	800a2ea <_puts_r+0x52>
 800a30e:	2b00      	cmp	r3, #0
 800a310:	da11      	bge.n	800a336 <_puts_r+0x9e>
 800a312:	4622      	mov	r2, r4
 800a314:	210a      	movs	r1, #10
 800a316:	4628      	mov	r0, r5
 800a318:	f000 f85f 	bl	800a3da <__swbuf_r>
 800a31c:	3001      	adds	r0, #1
 800a31e:	d0d7      	beq.n	800a2d0 <_puts_r+0x38>
 800a320:	250a      	movs	r5, #10
 800a322:	e7d7      	b.n	800a2d4 <_puts_r+0x3c>
 800a324:	4622      	mov	r2, r4
 800a326:	4628      	mov	r0, r5
 800a328:	f000 f857 	bl	800a3da <__swbuf_r>
 800a32c:	3001      	adds	r0, #1
 800a32e:	d1e7      	bne.n	800a300 <_puts_r+0x68>
 800a330:	e7ce      	b.n	800a2d0 <_puts_r+0x38>
 800a332:	3e01      	subs	r6, #1
 800a334:	e7e4      	b.n	800a300 <_puts_r+0x68>
 800a336:	6823      	ldr	r3, [r4, #0]
 800a338:	1c5a      	adds	r2, r3, #1
 800a33a:	6022      	str	r2, [r4, #0]
 800a33c:	220a      	movs	r2, #10
 800a33e:	701a      	strb	r2, [r3, #0]
 800a340:	e7ee      	b.n	800a320 <_puts_r+0x88>
	...

0800a344 <puts>:
 800a344:	4b02      	ldr	r3, [pc, #8]	@ (800a350 <puts+0xc>)
 800a346:	4601      	mov	r1, r0
 800a348:	6818      	ldr	r0, [r3, #0]
 800a34a:	f7ff bfa5 	b.w	800a298 <_puts_r>
 800a34e:	bf00      	nop
 800a350:	20000018 	.word	0x20000018

0800a354 <__sread>:
 800a354:	b510      	push	{r4, lr}
 800a356:	460c      	mov	r4, r1
 800a358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a35c:	f000 f900 	bl	800a560 <_read_r>
 800a360:	2800      	cmp	r0, #0
 800a362:	bfab      	itete	ge
 800a364:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a366:	89a3      	ldrhlt	r3, [r4, #12]
 800a368:	181b      	addge	r3, r3, r0
 800a36a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a36e:	bfac      	ite	ge
 800a370:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a372:	81a3      	strhlt	r3, [r4, #12]
 800a374:	bd10      	pop	{r4, pc}

0800a376 <__swrite>:
 800a376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a37a:	461f      	mov	r7, r3
 800a37c:	898b      	ldrh	r3, [r1, #12]
 800a37e:	05db      	lsls	r3, r3, #23
 800a380:	4605      	mov	r5, r0
 800a382:	460c      	mov	r4, r1
 800a384:	4616      	mov	r6, r2
 800a386:	d505      	bpl.n	800a394 <__swrite+0x1e>
 800a388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a38c:	2302      	movs	r3, #2
 800a38e:	2200      	movs	r2, #0
 800a390:	f000 f8d4 	bl	800a53c <_lseek_r>
 800a394:	89a3      	ldrh	r3, [r4, #12]
 800a396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a39a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a39e:	81a3      	strh	r3, [r4, #12]
 800a3a0:	4632      	mov	r2, r6
 800a3a2:	463b      	mov	r3, r7
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3aa:	f000 b8eb 	b.w	800a584 <_write_r>

0800a3ae <__sseek>:
 800a3ae:	b510      	push	{r4, lr}
 800a3b0:	460c      	mov	r4, r1
 800a3b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b6:	f000 f8c1 	bl	800a53c <_lseek_r>
 800a3ba:	1c43      	adds	r3, r0, #1
 800a3bc:	89a3      	ldrh	r3, [r4, #12]
 800a3be:	bf15      	itete	ne
 800a3c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a3c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a3c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a3ca:	81a3      	strheq	r3, [r4, #12]
 800a3cc:	bf18      	it	ne
 800a3ce:	81a3      	strhne	r3, [r4, #12]
 800a3d0:	bd10      	pop	{r4, pc}

0800a3d2 <__sclose>:
 800a3d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3d6:	f000 b8a1 	b.w	800a51c <_close_r>

0800a3da <__swbuf_r>:
 800a3da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3dc:	460e      	mov	r6, r1
 800a3de:	4614      	mov	r4, r2
 800a3e0:	4605      	mov	r5, r0
 800a3e2:	b118      	cbz	r0, 800a3ec <__swbuf_r+0x12>
 800a3e4:	6a03      	ldr	r3, [r0, #32]
 800a3e6:	b90b      	cbnz	r3, 800a3ec <__swbuf_r+0x12>
 800a3e8:	f7ff ff0e 	bl	800a208 <__sinit>
 800a3ec:	69a3      	ldr	r3, [r4, #24]
 800a3ee:	60a3      	str	r3, [r4, #8]
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	071a      	lsls	r2, r3, #28
 800a3f4:	d501      	bpl.n	800a3fa <__swbuf_r+0x20>
 800a3f6:	6923      	ldr	r3, [r4, #16]
 800a3f8:	b943      	cbnz	r3, 800a40c <__swbuf_r+0x32>
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	f000 f82b 	bl	800a458 <__swsetup_r>
 800a402:	b118      	cbz	r0, 800a40c <__swbuf_r+0x32>
 800a404:	f04f 37ff 	mov.w	r7, #4294967295
 800a408:	4638      	mov	r0, r7
 800a40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	6922      	ldr	r2, [r4, #16]
 800a410:	1a98      	subs	r0, r3, r2
 800a412:	6963      	ldr	r3, [r4, #20]
 800a414:	b2f6      	uxtb	r6, r6
 800a416:	4283      	cmp	r3, r0
 800a418:	4637      	mov	r7, r6
 800a41a:	dc05      	bgt.n	800a428 <__swbuf_r+0x4e>
 800a41c:	4621      	mov	r1, r4
 800a41e:	4628      	mov	r0, r5
 800a420:	f001 fd8a 	bl	800bf38 <_fflush_r>
 800a424:	2800      	cmp	r0, #0
 800a426:	d1ed      	bne.n	800a404 <__swbuf_r+0x2a>
 800a428:	68a3      	ldr	r3, [r4, #8]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	60a3      	str	r3, [r4, #8]
 800a42e:	6823      	ldr	r3, [r4, #0]
 800a430:	1c5a      	adds	r2, r3, #1
 800a432:	6022      	str	r2, [r4, #0]
 800a434:	701e      	strb	r6, [r3, #0]
 800a436:	6962      	ldr	r2, [r4, #20]
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d004      	beq.n	800a448 <__swbuf_r+0x6e>
 800a43e:	89a3      	ldrh	r3, [r4, #12]
 800a440:	07db      	lsls	r3, r3, #31
 800a442:	d5e1      	bpl.n	800a408 <__swbuf_r+0x2e>
 800a444:	2e0a      	cmp	r6, #10
 800a446:	d1df      	bne.n	800a408 <__swbuf_r+0x2e>
 800a448:	4621      	mov	r1, r4
 800a44a:	4628      	mov	r0, r5
 800a44c:	f001 fd74 	bl	800bf38 <_fflush_r>
 800a450:	2800      	cmp	r0, #0
 800a452:	d0d9      	beq.n	800a408 <__swbuf_r+0x2e>
 800a454:	e7d6      	b.n	800a404 <__swbuf_r+0x2a>
	...

0800a458 <__swsetup_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	4b29      	ldr	r3, [pc, #164]	@ (800a500 <__swsetup_r+0xa8>)
 800a45c:	4605      	mov	r5, r0
 800a45e:	6818      	ldr	r0, [r3, #0]
 800a460:	460c      	mov	r4, r1
 800a462:	b118      	cbz	r0, 800a46c <__swsetup_r+0x14>
 800a464:	6a03      	ldr	r3, [r0, #32]
 800a466:	b90b      	cbnz	r3, 800a46c <__swsetup_r+0x14>
 800a468:	f7ff fece 	bl	800a208 <__sinit>
 800a46c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a470:	0719      	lsls	r1, r3, #28
 800a472:	d422      	bmi.n	800a4ba <__swsetup_r+0x62>
 800a474:	06da      	lsls	r2, r3, #27
 800a476:	d407      	bmi.n	800a488 <__swsetup_r+0x30>
 800a478:	2209      	movs	r2, #9
 800a47a:	602a      	str	r2, [r5, #0]
 800a47c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a480:	81a3      	strh	r3, [r4, #12]
 800a482:	f04f 30ff 	mov.w	r0, #4294967295
 800a486:	e033      	b.n	800a4f0 <__swsetup_r+0x98>
 800a488:	0758      	lsls	r0, r3, #29
 800a48a:	d512      	bpl.n	800a4b2 <__swsetup_r+0x5a>
 800a48c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a48e:	b141      	cbz	r1, 800a4a2 <__swsetup_r+0x4a>
 800a490:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a494:	4299      	cmp	r1, r3
 800a496:	d002      	beq.n	800a49e <__swsetup_r+0x46>
 800a498:	4628      	mov	r0, r5
 800a49a:	f000 ff0d 	bl	800b2b8 <_free_r>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a4a8:	81a3      	strh	r3, [r4, #12]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	6063      	str	r3, [r4, #4]
 800a4ae:	6923      	ldr	r3, [r4, #16]
 800a4b0:	6023      	str	r3, [r4, #0]
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	f043 0308 	orr.w	r3, r3, #8
 800a4b8:	81a3      	strh	r3, [r4, #12]
 800a4ba:	6923      	ldr	r3, [r4, #16]
 800a4bc:	b94b      	cbnz	r3, 800a4d2 <__swsetup_r+0x7a>
 800a4be:	89a3      	ldrh	r3, [r4, #12]
 800a4c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a4c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4c8:	d003      	beq.n	800a4d2 <__swsetup_r+0x7a>
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	f001 fd81 	bl	800bfd4 <__smakebuf_r>
 800a4d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4d6:	f013 0201 	ands.w	r2, r3, #1
 800a4da:	d00a      	beq.n	800a4f2 <__swsetup_r+0x9a>
 800a4dc:	2200      	movs	r2, #0
 800a4de:	60a2      	str	r2, [r4, #8]
 800a4e0:	6962      	ldr	r2, [r4, #20]
 800a4e2:	4252      	negs	r2, r2
 800a4e4:	61a2      	str	r2, [r4, #24]
 800a4e6:	6922      	ldr	r2, [r4, #16]
 800a4e8:	b942      	cbnz	r2, 800a4fc <__swsetup_r+0xa4>
 800a4ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a4ee:	d1c5      	bne.n	800a47c <__swsetup_r+0x24>
 800a4f0:	bd38      	pop	{r3, r4, r5, pc}
 800a4f2:	0799      	lsls	r1, r3, #30
 800a4f4:	bf58      	it	pl
 800a4f6:	6962      	ldrpl	r2, [r4, #20]
 800a4f8:	60a2      	str	r2, [r4, #8]
 800a4fa:	e7f4      	b.n	800a4e6 <__swsetup_r+0x8e>
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	e7f7      	b.n	800a4f0 <__swsetup_r+0x98>
 800a500:	20000018 	.word	0x20000018

0800a504 <memset>:
 800a504:	4402      	add	r2, r0
 800a506:	4603      	mov	r3, r0
 800a508:	4293      	cmp	r3, r2
 800a50a:	d100      	bne.n	800a50e <memset+0xa>
 800a50c:	4770      	bx	lr
 800a50e:	f803 1b01 	strb.w	r1, [r3], #1
 800a512:	e7f9      	b.n	800a508 <memset+0x4>

0800a514 <_localeconv_r>:
 800a514:	4800      	ldr	r0, [pc, #0]	@ (800a518 <_localeconv_r+0x4>)
 800a516:	4770      	bx	lr
 800a518:	20000158 	.word	0x20000158

0800a51c <_close_r>:
 800a51c:	b538      	push	{r3, r4, r5, lr}
 800a51e:	4d06      	ldr	r5, [pc, #24]	@ (800a538 <_close_r+0x1c>)
 800a520:	2300      	movs	r3, #0
 800a522:	4604      	mov	r4, r0
 800a524:	4608      	mov	r0, r1
 800a526:	602b      	str	r3, [r5, #0]
 800a528:	f7f7 fdbe 	bl	80020a8 <_close>
 800a52c:	1c43      	adds	r3, r0, #1
 800a52e:	d102      	bne.n	800a536 <_close_r+0x1a>
 800a530:	682b      	ldr	r3, [r5, #0]
 800a532:	b103      	cbz	r3, 800a536 <_close_r+0x1a>
 800a534:	6023      	str	r3, [r4, #0]
 800a536:	bd38      	pop	{r3, r4, r5, pc}
 800a538:	20000774 	.word	0x20000774

0800a53c <_lseek_r>:
 800a53c:	b538      	push	{r3, r4, r5, lr}
 800a53e:	4d07      	ldr	r5, [pc, #28]	@ (800a55c <_lseek_r+0x20>)
 800a540:	4604      	mov	r4, r0
 800a542:	4608      	mov	r0, r1
 800a544:	4611      	mov	r1, r2
 800a546:	2200      	movs	r2, #0
 800a548:	602a      	str	r2, [r5, #0]
 800a54a:	461a      	mov	r2, r3
 800a54c:	f7f7 fdd3 	bl	80020f6 <_lseek>
 800a550:	1c43      	adds	r3, r0, #1
 800a552:	d102      	bne.n	800a55a <_lseek_r+0x1e>
 800a554:	682b      	ldr	r3, [r5, #0]
 800a556:	b103      	cbz	r3, 800a55a <_lseek_r+0x1e>
 800a558:	6023      	str	r3, [r4, #0]
 800a55a:	bd38      	pop	{r3, r4, r5, pc}
 800a55c:	20000774 	.word	0x20000774

0800a560 <_read_r>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	4d07      	ldr	r5, [pc, #28]	@ (800a580 <_read_r+0x20>)
 800a564:	4604      	mov	r4, r0
 800a566:	4608      	mov	r0, r1
 800a568:	4611      	mov	r1, r2
 800a56a:	2200      	movs	r2, #0
 800a56c:	602a      	str	r2, [r5, #0]
 800a56e:	461a      	mov	r2, r3
 800a570:	f7f7 fd61 	bl	8002036 <_read>
 800a574:	1c43      	adds	r3, r0, #1
 800a576:	d102      	bne.n	800a57e <_read_r+0x1e>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	b103      	cbz	r3, 800a57e <_read_r+0x1e>
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	20000774 	.word	0x20000774

0800a584 <_write_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4d07      	ldr	r5, [pc, #28]	@ (800a5a4 <_write_r+0x20>)
 800a588:	4604      	mov	r4, r0
 800a58a:	4608      	mov	r0, r1
 800a58c:	4611      	mov	r1, r2
 800a58e:	2200      	movs	r2, #0
 800a590:	602a      	str	r2, [r5, #0]
 800a592:	461a      	mov	r2, r3
 800a594:	f7f7 fd6c 	bl	8002070 <_write>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	d102      	bne.n	800a5a2 <_write_r+0x1e>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	b103      	cbz	r3, 800a5a2 <_write_r+0x1e>
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	20000774 	.word	0x20000774

0800a5a8 <__errno>:
 800a5a8:	4b01      	ldr	r3, [pc, #4]	@ (800a5b0 <__errno+0x8>)
 800a5aa:	6818      	ldr	r0, [r3, #0]
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	20000018 	.word	0x20000018

0800a5b4 <__libc_init_array>:
 800a5b4:	b570      	push	{r4, r5, r6, lr}
 800a5b6:	4d0d      	ldr	r5, [pc, #52]	@ (800a5ec <__libc_init_array+0x38>)
 800a5b8:	4c0d      	ldr	r4, [pc, #52]	@ (800a5f0 <__libc_init_array+0x3c>)
 800a5ba:	1b64      	subs	r4, r4, r5
 800a5bc:	10a4      	asrs	r4, r4, #2
 800a5be:	2600      	movs	r6, #0
 800a5c0:	42a6      	cmp	r6, r4
 800a5c2:	d109      	bne.n	800a5d8 <__libc_init_array+0x24>
 800a5c4:	4d0b      	ldr	r5, [pc, #44]	@ (800a5f4 <__libc_init_array+0x40>)
 800a5c6:	4c0c      	ldr	r4, [pc, #48]	@ (800a5f8 <__libc_init_array+0x44>)
 800a5c8:	f001 fe30 	bl	800c22c <_init>
 800a5cc:	1b64      	subs	r4, r4, r5
 800a5ce:	10a4      	asrs	r4, r4, #2
 800a5d0:	2600      	movs	r6, #0
 800a5d2:	42a6      	cmp	r6, r4
 800a5d4:	d105      	bne.n	800a5e2 <__libc_init_array+0x2e>
 800a5d6:	bd70      	pop	{r4, r5, r6, pc}
 800a5d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5dc:	4798      	blx	r3
 800a5de:	3601      	adds	r6, #1
 800a5e0:	e7ee      	b.n	800a5c0 <__libc_init_array+0xc>
 800a5e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5e6:	4798      	blx	r3
 800a5e8:	3601      	adds	r6, #1
 800a5ea:	e7f2      	b.n	800a5d2 <__libc_init_array+0x1e>
 800a5ec:	0800c904 	.word	0x0800c904
 800a5f0:	0800c904 	.word	0x0800c904
 800a5f4:	0800c904 	.word	0x0800c904
 800a5f8:	0800c908 	.word	0x0800c908

0800a5fc <__retarget_lock_init_recursive>:
 800a5fc:	4770      	bx	lr

0800a5fe <__retarget_lock_acquire_recursive>:
 800a5fe:	4770      	bx	lr

0800a600 <__retarget_lock_release_recursive>:
 800a600:	4770      	bx	lr

0800a602 <quorem>:
 800a602:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a606:	6903      	ldr	r3, [r0, #16]
 800a608:	690c      	ldr	r4, [r1, #16]
 800a60a:	42a3      	cmp	r3, r4
 800a60c:	4607      	mov	r7, r0
 800a60e:	db7e      	blt.n	800a70e <quorem+0x10c>
 800a610:	3c01      	subs	r4, #1
 800a612:	f101 0814 	add.w	r8, r1, #20
 800a616:	00a3      	lsls	r3, r4, #2
 800a618:	f100 0514 	add.w	r5, r0, #20
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a622:	9301      	str	r3, [sp, #4]
 800a624:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a628:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a62c:	3301      	adds	r3, #1
 800a62e:	429a      	cmp	r2, r3
 800a630:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a634:	fbb2 f6f3 	udiv	r6, r2, r3
 800a638:	d32e      	bcc.n	800a698 <quorem+0x96>
 800a63a:	f04f 0a00 	mov.w	sl, #0
 800a63e:	46c4      	mov	ip, r8
 800a640:	46ae      	mov	lr, r5
 800a642:	46d3      	mov	fp, sl
 800a644:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a648:	b298      	uxth	r0, r3
 800a64a:	fb06 a000 	mla	r0, r6, r0, sl
 800a64e:	0c02      	lsrs	r2, r0, #16
 800a650:	0c1b      	lsrs	r3, r3, #16
 800a652:	fb06 2303 	mla	r3, r6, r3, r2
 800a656:	f8de 2000 	ldr.w	r2, [lr]
 800a65a:	b280      	uxth	r0, r0
 800a65c:	b292      	uxth	r2, r2
 800a65e:	1a12      	subs	r2, r2, r0
 800a660:	445a      	add	r2, fp
 800a662:	f8de 0000 	ldr.w	r0, [lr]
 800a666:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a670:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a674:	b292      	uxth	r2, r2
 800a676:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a67a:	45e1      	cmp	r9, ip
 800a67c:	f84e 2b04 	str.w	r2, [lr], #4
 800a680:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a684:	d2de      	bcs.n	800a644 <quorem+0x42>
 800a686:	9b00      	ldr	r3, [sp, #0]
 800a688:	58eb      	ldr	r3, [r5, r3]
 800a68a:	b92b      	cbnz	r3, 800a698 <quorem+0x96>
 800a68c:	9b01      	ldr	r3, [sp, #4]
 800a68e:	3b04      	subs	r3, #4
 800a690:	429d      	cmp	r5, r3
 800a692:	461a      	mov	r2, r3
 800a694:	d32f      	bcc.n	800a6f6 <quorem+0xf4>
 800a696:	613c      	str	r4, [r7, #16]
 800a698:	4638      	mov	r0, r7
 800a69a:	f001 f97f 	bl	800b99c <__mcmp>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	db25      	blt.n	800a6ee <quorem+0xec>
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6aa:	f8d1 c000 	ldr.w	ip, [r1]
 800a6ae:	fa1f fe82 	uxth.w	lr, r2
 800a6b2:	fa1f f38c 	uxth.w	r3, ip
 800a6b6:	eba3 030e 	sub.w	r3, r3, lr
 800a6ba:	4403      	add	r3, r0
 800a6bc:	0c12      	lsrs	r2, r2, #16
 800a6be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a6c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6cc:	45c1      	cmp	r9, r8
 800a6ce:	f841 3b04 	str.w	r3, [r1], #4
 800a6d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a6d6:	d2e6      	bcs.n	800a6a6 <quorem+0xa4>
 800a6d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6e0:	b922      	cbnz	r2, 800a6ec <quorem+0xea>
 800a6e2:	3b04      	subs	r3, #4
 800a6e4:	429d      	cmp	r5, r3
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	d30b      	bcc.n	800a702 <quorem+0x100>
 800a6ea:	613c      	str	r4, [r7, #16]
 800a6ec:	3601      	adds	r6, #1
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	b003      	add	sp, #12
 800a6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f6:	6812      	ldr	r2, [r2, #0]
 800a6f8:	3b04      	subs	r3, #4
 800a6fa:	2a00      	cmp	r2, #0
 800a6fc:	d1cb      	bne.n	800a696 <quorem+0x94>
 800a6fe:	3c01      	subs	r4, #1
 800a700:	e7c6      	b.n	800a690 <quorem+0x8e>
 800a702:	6812      	ldr	r2, [r2, #0]
 800a704:	3b04      	subs	r3, #4
 800a706:	2a00      	cmp	r2, #0
 800a708:	d1ef      	bne.n	800a6ea <quorem+0xe8>
 800a70a:	3c01      	subs	r4, #1
 800a70c:	e7ea      	b.n	800a6e4 <quorem+0xe2>
 800a70e:	2000      	movs	r0, #0
 800a710:	e7ee      	b.n	800a6f0 <quorem+0xee>
 800a712:	0000      	movs	r0, r0
 800a714:	0000      	movs	r0, r0
	...

0800a718 <_dtoa_r>:
 800a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	69c7      	ldr	r7, [r0, #28]
 800a71e:	b097      	sub	sp, #92	@ 0x5c
 800a720:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a724:	ec55 4b10 	vmov	r4, r5, d0
 800a728:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a72a:	9107      	str	r1, [sp, #28]
 800a72c:	4681      	mov	r9, r0
 800a72e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a730:	9311      	str	r3, [sp, #68]	@ 0x44
 800a732:	b97f      	cbnz	r7, 800a754 <_dtoa_r+0x3c>
 800a734:	2010      	movs	r0, #16
 800a736:	f000 fe09 	bl	800b34c <malloc>
 800a73a:	4602      	mov	r2, r0
 800a73c:	f8c9 001c 	str.w	r0, [r9, #28]
 800a740:	b920      	cbnz	r0, 800a74c <_dtoa_r+0x34>
 800a742:	4ba9      	ldr	r3, [pc, #676]	@ (800a9e8 <_dtoa_r+0x2d0>)
 800a744:	21ef      	movs	r1, #239	@ 0xef
 800a746:	48a9      	ldr	r0, [pc, #676]	@ (800a9ec <_dtoa_r+0x2d4>)
 800a748:	f001 fcc0 	bl	800c0cc <__assert_func>
 800a74c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a750:	6007      	str	r7, [r0, #0]
 800a752:	60c7      	str	r7, [r0, #12]
 800a754:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a758:	6819      	ldr	r1, [r3, #0]
 800a75a:	b159      	cbz	r1, 800a774 <_dtoa_r+0x5c>
 800a75c:	685a      	ldr	r2, [r3, #4]
 800a75e:	604a      	str	r2, [r1, #4]
 800a760:	2301      	movs	r3, #1
 800a762:	4093      	lsls	r3, r2
 800a764:	608b      	str	r3, [r1, #8]
 800a766:	4648      	mov	r0, r9
 800a768:	f000 fee6 	bl	800b538 <_Bfree>
 800a76c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a770:	2200      	movs	r2, #0
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	1e2b      	subs	r3, r5, #0
 800a776:	bfb9      	ittee	lt
 800a778:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a77c:	9305      	strlt	r3, [sp, #20]
 800a77e:	2300      	movge	r3, #0
 800a780:	6033      	strge	r3, [r6, #0]
 800a782:	9f05      	ldr	r7, [sp, #20]
 800a784:	4b9a      	ldr	r3, [pc, #616]	@ (800a9f0 <_dtoa_r+0x2d8>)
 800a786:	bfbc      	itt	lt
 800a788:	2201      	movlt	r2, #1
 800a78a:	6032      	strlt	r2, [r6, #0]
 800a78c:	43bb      	bics	r3, r7
 800a78e:	d112      	bne.n	800a7b6 <_dtoa_r+0x9e>
 800a790:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a792:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a79c:	4323      	orrs	r3, r4
 800a79e:	f000 855a 	beq.w	800b256 <_dtoa_r+0xb3e>
 800a7a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a7a4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800aa04 <_dtoa_r+0x2ec>
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 855c 	beq.w	800b266 <_dtoa_r+0xb4e>
 800a7ae:	f10a 0303 	add.w	r3, sl, #3
 800a7b2:	f000 bd56 	b.w	800b262 <_dtoa_r+0xb4a>
 800a7b6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	ec51 0b17 	vmov	r0, r1, d7
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a7c6:	f7f6 f99f 	bl	8000b08 <__aeabi_dcmpeq>
 800a7ca:	4680      	mov	r8, r0
 800a7cc:	b158      	cbz	r0, 800a7e6 <_dtoa_r+0xce>
 800a7ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	6013      	str	r3, [r2, #0]
 800a7d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a7d6:	b113      	cbz	r3, 800a7de <_dtoa_r+0xc6>
 800a7d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a7da:	4b86      	ldr	r3, [pc, #536]	@ (800a9f4 <_dtoa_r+0x2dc>)
 800a7dc:	6013      	str	r3, [r2, #0]
 800a7de:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800aa08 <_dtoa_r+0x2f0>
 800a7e2:	f000 bd40 	b.w	800b266 <_dtoa_r+0xb4e>
 800a7e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a7ea:	aa14      	add	r2, sp, #80	@ 0x50
 800a7ec:	a915      	add	r1, sp, #84	@ 0x54
 800a7ee:	4648      	mov	r0, r9
 800a7f0:	f001 f984 	bl	800bafc <__d2b>
 800a7f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a7f8:	9002      	str	r0, [sp, #8]
 800a7fa:	2e00      	cmp	r6, #0
 800a7fc:	d078      	beq.n	800a8f0 <_dtoa_r+0x1d8>
 800a7fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a800:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a808:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a80c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a810:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a814:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a818:	4619      	mov	r1, r3
 800a81a:	2200      	movs	r2, #0
 800a81c:	4b76      	ldr	r3, [pc, #472]	@ (800a9f8 <_dtoa_r+0x2e0>)
 800a81e:	f7f5 fd53 	bl	80002c8 <__aeabi_dsub>
 800a822:	a36b      	add	r3, pc, #428	@ (adr r3, 800a9d0 <_dtoa_r+0x2b8>)
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	f7f5 ff06 	bl	8000638 <__aeabi_dmul>
 800a82c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a9d8 <_dtoa_r+0x2c0>)
 800a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a832:	f7f5 fd4b 	bl	80002cc <__adddf3>
 800a836:	4604      	mov	r4, r0
 800a838:	4630      	mov	r0, r6
 800a83a:	460d      	mov	r5, r1
 800a83c:	f7f5 fe92 	bl	8000564 <__aeabi_i2d>
 800a840:	a367      	add	r3, pc, #412	@ (adr r3, 800a9e0 <_dtoa_r+0x2c8>)
 800a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a846:	f7f5 fef7 	bl	8000638 <__aeabi_dmul>
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	4620      	mov	r0, r4
 800a850:	4629      	mov	r1, r5
 800a852:	f7f5 fd3b 	bl	80002cc <__adddf3>
 800a856:	4604      	mov	r4, r0
 800a858:	460d      	mov	r5, r1
 800a85a:	f7f6 f99d 	bl	8000b98 <__aeabi_d2iz>
 800a85e:	2200      	movs	r2, #0
 800a860:	4607      	mov	r7, r0
 800a862:	2300      	movs	r3, #0
 800a864:	4620      	mov	r0, r4
 800a866:	4629      	mov	r1, r5
 800a868:	f7f6 f958 	bl	8000b1c <__aeabi_dcmplt>
 800a86c:	b140      	cbz	r0, 800a880 <_dtoa_r+0x168>
 800a86e:	4638      	mov	r0, r7
 800a870:	f7f5 fe78 	bl	8000564 <__aeabi_i2d>
 800a874:	4622      	mov	r2, r4
 800a876:	462b      	mov	r3, r5
 800a878:	f7f6 f946 	bl	8000b08 <__aeabi_dcmpeq>
 800a87c:	b900      	cbnz	r0, 800a880 <_dtoa_r+0x168>
 800a87e:	3f01      	subs	r7, #1
 800a880:	2f16      	cmp	r7, #22
 800a882:	d852      	bhi.n	800a92a <_dtoa_r+0x212>
 800a884:	4b5d      	ldr	r3, [pc, #372]	@ (800a9fc <_dtoa_r+0x2e4>)
 800a886:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a892:	f7f6 f943 	bl	8000b1c <__aeabi_dcmplt>
 800a896:	2800      	cmp	r0, #0
 800a898:	d049      	beq.n	800a92e <_dtoa_r+0x216>
 800a89a:	3f01      	subs	r7, #1
 800a89c:	2300      	movs	r3, #0
 800a89e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a8a2:	1b9b      	subs	r3, r3, r6
 800a8a4:	1e5a      	subs	r2, r3, #1
 800a8a6:	bf45      	ittet	mi
 800a8a8:	f1c3 0301 	rsbmi	r3, r3, #1
 800a8ac:	9300      	strmi	r3, [sp, #0]
 800a8ae:	2300      	movpl	r3, #0
 800a8b0:	2300      	movmi	r3, #0
 800a8b2:	9206      	str	r2, [sp, #24]
 800a8b4:	bf54      	ite	pl
 800a8b6:	9300      	strpl	r3, [sp, #0]
 800a8b8:	9306      	strmi	r3, [sp, #24]
 800a8ba:	2f00      	cmp	r7, #0
 800a8bc:	db39      	blt.n	800a932 <_dtoa_r+0x21a>
 800a8be:	9b06      	ldr	r3, [sp, #24]
 800a8c0:	970d      	str	r7, [sp, #52]	@ 0x34
 800a8c2:	443b      	add	r3, r7
 800a8c4:	9306      	str	r3, [sp, #24]
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	9308      	str	r3, [sp, #32]
 800a8ca:	9b07      	ldr	r3, [sp, #28]
 800a8cc:	2b09      	cmp	r3, #9
 800a8ce:	d863      	bhi.n	800a998 <_dtoa_r+0x280>
 800a8d0:	2b05      	cmp	r3, #5
 800a8d2:	bfc4      	itt	gt
 800a8d4:	3b04      	subgt	r3, #4
 800a8d6:	9307      	strgt	r3, [sp, #28]
 800a8d8:	9b07      	ldr	r3, [sp, #28]
 800a8da:	f1a3 0302 	sub.w	r3, r3, #2
 800a8de:	bfcc      	ite	gt
 800a8e0:	2400      	movgt	r4, #0
 800a8e2:	2401      	movle	r4, #1
 800a8e4:	2b03      	cmp	r3, #3
 800a8e6:	d863      	bhi.n	800a9b0 <_dtoa_r+0x298>
 800a8e8:	e8df f003 	tbb	[pc, r3]
 800a8ec:	2b375452 	.word	0x2b375452
 800a8f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a8f4:	441e      	add	r6, r3
 800a8f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a8fa:	2b20      	cmp	r3, #32
 800a8fc:	bfc1      	itttt	gt
 800a8fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a902:	409f      	lslgt	r7, r3
 800a904:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a908:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a90c:	bfd6      	itet	le
 800a90e:	f1c3 0320 	rsble	r3, r3, #32
 800a912:	ea47 0003 	orrgt.w	r0, r7, r3
 800a916:	fa04 f003 	lslle.w	r0, r4, r3
 800a91a:	f7f5 fe13 	bl	8000544 <__aeabi_ui2d>
 800a91e:	2201      	movs	r2, #1
 800a920:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a924:	3e01      	subs	r6, #1
 800a926:	9212      	str	r2, [sp, #72]	@ 0x48
 800a928:	e776      	b.n	800a818 <_dtoa_r+0x100>
 800a92a:	2301      	movs	r3, #1
 800a92c:	e7b7      	b.n	800a89e <_dtoa_r+0x186>
 800a92e:	9010      	str	r0, [sp, #64]	@ 0x40
 800a930:	e7b6      	b.n	800a8a0 <_dtoa_r+0x188>
 800a932:	9b00      	ldr	r3, [sp, #0]
 800a934:	1bdb      	subs	r3, r3, r7
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	427b      	negs	r3, r7
 800a93a:	9308      	str	r3, [sp, #32]
 800a93c:	2300      	movs	r3, #0
 800a93e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a940:	e7c3      	b.n	800a8ca <_dtoa_r+0x1b2>
 800a942:	2301      	movs	r3, #1
 800a944:	9309      	str	r3, [sp, #36]	@ 0x24
 800a946:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a948:	eb07 0b03 	add.w	fp, r7, r3
 800a94c:	f10b 0301 	add.w	r3, fp, #1
 800a950:	2b01      	cmp	r3, #1
 800a952:	9303      	str	r3, [sp, #12]
 800a954:	bfb8      	it	lt
 800a956:	2301      	movlt	r3, #1
 800a958:	e006      	b.n	800a968 <_dtoa_r+0x250>
 800a95a:	2301      	movs	r3, #1
 800a95c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a95e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a960:	2b00      	cmp	r3, #0
 800a962:	dd28      	ble.n	800a9b6 <_dtoa_r+0x29e>
 800a964:	469b      	mov	fp, r3
 800a966:	9303      	str	r3, [sp, #12]
 800a968:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a96c:	2100      	movs	r1, #0
 800a96e:	2204      	movs	r2, #4
 800a970:	f102 0514 	add.w	r5, r2, #20
 800a974:	429d      	cmp	r5, r3
 800a976:	d926      	bls.n	800a9c6 <_dtoa_r+0x2ae>
 800a978:	6041      	str	r1, [r0, #4]
 800a97a:	4648      	mov	r0, r9
 800a97c:	f000 fd9c 	bl	800b4b8 <_Balloc>
 800a980:	4682      	mov	sl, r0
 800a982:	2800      	cmp	r0, #0
 800a984:	d142      	bne.n	800aa0c <_dtoa_r+0x2f4>
 800a986:	4b1e      	ldr	r3, [pc, #120]	@ (800aa00 <_dtoa_r+0x2e8>)
 800a988:	4602      	mov	r2, r0
 800a98a:	f240 11af 	movw	r1, #431	@ 0x1af
 800a98e:	e6da      	b.n	800a746 <_dtoa_r+0x2e>
 800a990:	2300      	movs	r3, #0
 800a992:	e7e3      	b.n	800a95c <_dtoa_r+0x244>
 800a994:	2300      	movs	r3, #0
 800a996:	e7d5      	b.n	800a944 <_dtoa_r+0x22c>
 800a998:	2401      	movs	r4, #1
 800a99a:	2300      	movs	r3, #0
 800a99c:	9307      	str	r3, [sp, #28]
 800a99e:	9409      	str	r4, [sp, #36]	@ 0x24
 800a9a0:	f04f 3bff 	mov.w	fp, #4294967295
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f8cd b00c 	str.w	fp, [sp, #12]
 800a9aa:	2312      	movs	r3, #18
 800a9ac:	920c      	str	r2, [sp, #48]	@ 0x30
 800a9ae:	e7db      	b.n	800a968 <_dtoa_r+0x250>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9b4:	e7f4      	b.n	800a9a0 <_dtoa_r+0x288>
 800a9b6:	f04f 0b01 	mov.w	fp, #1
 800a9ba:	f8cd b00c 	str.w	fp, [sp, #12]
 800a9be:	465b      	mov	r3, fp
 800a9c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a9c4:	e7d0      	b.n	800a968 <_dtoa_r+0x250>
 800a9c6:	3101      	adds	r1, #1
 800a9c8:	0052      	lsls	r2, r2, #1
 800a9ca:	e7d1      	b.n	800a970 <_dtoa_r+0x258>
 800a9cc:	f3af 8000 	nop.w
 800a9d0:	636f4361 	.word	0x636f4361
 800a9d4:	3fd287a7 	.word	0x3fd287a7
 800a9d8:	8b60c8b3 	.word	0x8b60c8b3
 800a9dc:	3fc68a28 	.word	0x3fc68a28
 800a9e0:	509f79fb 	.word	0x509f79fb
 800a9e4:	3fd34413 	.word	0x3fd34413
 800a9e8:	0800c5c5 	.word	0x0800c5c5
 800a9ec:	0800c5dc 	.word	0x0800c5dc
 800a9f0:	7ff00000 	.word	0x7ff00000
 800a9f4:	0800c595 	.word	0x0800c595
 800a9f8:	3ff80000 	.word	0x3ff80000
 800a9fc:	0800c730 	.word	0x0800c730
 800aa00:	0800c634 	.word	0x0800c634
 800aa04:	0800c5c1 	.word	0x0800c5c1
 800aa08:	0800c594 	.word	0x0800c594
 800aa0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa10:	6018      	str	r0, [r3, #0]
 800aa12:	9b03      	ldr	r3, [sp, #12]
 800aa14:	2b0e      	cmp	r3, #14
 800aa16:	f200 80a1 	bhi.w	800ab5c <_dtoa_r+0x444>
 800aa1a:	2c00      	cmp	r4, #0
 800aa1c:	f000 809e 	beq.w	800ab5c <_dtoa_r+0x444>
 800aa20:	2f00      	cmp	r7, #0
 800aa22:	dd33      	ble.n	800aa8c <_dtoa_r+0x374>
 800aa24:	4b9c      	ldr	r3, [pc, #624]	@ (800ac98 <_dtoa_r+0x580>)
 800aa26:	f007 020f 	and.w	r2, r7, #15
 800aa2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa2e:	ed93 7b00 	vldr	d7, [r3]
 800aa32:	05f8      	lsls	r0, r7, #23
 800aa34:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800aa38:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aa3c:	d516      	bpl.n	800aa6c <_dtoa_r+0x354>
 800aa3e:	4b97      	ldr	r3, [pc, #604]	@ (800ac9c <_dtoa_r+0x584>)
 800aa40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aa44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa48:	f7f5 ff20 	bl	800088c <__aeabi_ddiv>
 800aa4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa50:	f004 040f 	and.w	r4, r4, #15
 800aa54:	2603      	movs	r6, #3
 800aa56:	4d91      	ldr	r5, [pc, #580]	@ (800ac9c <_dtoa_r+0x584>)
 800aa58:	b954      	cbnz	r4, 800aa70 <_dtoa_r+0x358>
 800aa5a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aa5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa62:	f7f5 ff13 	bl	800088c <__aeabi_ddiv>
 800aa66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa6a:	e028      	b.n	800aabe <_dtoa_r+0x3a6>
 800aa6c:	2602      	movs	r6, #2
 800aa6e:	e7f2      	b.n	800aa56 <_dtoa_r+0x33e>
 800aa70:	07e1      	lsls	r1, r4, #31
 800aa72:	d508      	bpl.n	800aa86 <_dtoa_r+0x36e>
 800aa74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aa78:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa7c:	f7f5 fddc 	bl	8000638 <__aeabi_dmul>
 800aa80:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aa84:	3601      	adds	r6, #1
 800aa86:	1064      	asrs	r4, r4, #1
 800aa88:	3508      	adds	r5, #8
 800aa8a:	e7e5      	b.n	800aa58 <_dtoa_r+0x340>
 800aa8c:	f000 80af 	beq.w	800abee <_dtoa_r+0x4d6>
 800aa90:	427c      	negs	r4, r7
 800aa92:	4b81      	ldr	r3, [pc, #516]	@ (800ac98 <_dtoa_r+0x580>)
 800aa94:	4d81      	ldr	r5, [pc, #516]	@ (800ac9c <_dtoa_r+0x584>)
 800aa96:	f004 020f 	and.w	r2, r4, #15
 800aa9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aaa6:	f7f5 fdc7 	bl	8000638 <__aeabi_dmul>
 800aaaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aaae:	1124      	asrs	r4, r4, #4
 800aab0:	2300      	movs	r3, #0
 800aab2:	2602      	movs	r6, #2
 800aab4:	2c00      	cmp	r4, #0
 800aab6:	f040 808f 	bne.w	800abd8 <_dtoa_r+0x4c0>
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1d3      	bne.n	800aa66 <_dtoa_r+0x34e>
 800aabe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aac0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f000 8094 	beq.w	800abf2 <_dtoa_r+0x4da>
 800aaca:	4b75      	ldr	r3, [pc, #468]	@ (800aca0 <_dtoa_r+0x588>)
 800aacc:	2200      	movs	r2, #0
 800aace:	4620      	mov	r0, r4
 800aad0:	4629      	mov	r1, r5
 800aad2:	f7f6 f823 	bl	8000b1c <__aeabi_dcmplt>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	f000 808b 	beq.w	800abf2 <_dtoa_r+0x4da>
 800aadc:	9b03      	ldr	r3, [sp, #12]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f000 8087 	beq.w	800abf2 <_dtoa_r+0x4da>
 800aae4:	f1bb 0f00 	cmp.w	fp, #0
 800aae8:	dd34      	ble.n	800ab54 <_dtoa_r+0x43c>
 800aaea:	4620      	mov	r0, r4
 800aaec:	4b6d      	ldr	r3, [pc, #436]	@ (800aca4 <_dtoa_r+0x58c>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	f7f5 fda1 	bl	8000638 <__aeabi_dmul>
 800aaf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aafa:	f107 38ff 	add.w	r8, r7, #4294967295
 800aafe:	3601      	adds	r6, #1
 800ab00:	465c      	mov	r4, fp
 800ab02:	4630      	mov	r0, r6
 800ab04:	f7f5 fd2e 	bl	8000564 <__aeabi_i2d>
 800ab08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab0c:	f7f5 fd94 	bl	8000638 <__aeabi_dmul>
 800ab10:	4b65      	ldr	r3, [pc, #404]	@ (800aca8 <_dtoa_r+0x590>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	f7f5 fbda 	bl	80002cc <__adddf3>
 800ab18:	4605      	mov	r5, r0
 800ab1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ab1e:	2c00      	cmp	r4, #0
 800ab20:	d16a      	bne.n	800abf8 <_dtoa_r+0x4e0>
 800ab22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab26:	4b61      	ldr	r3, [pc, #388]	@ (800acac <_dtoa_r+0x594>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f7f5 fbcd 	bl	80002c8 <__aeabi_dsub>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	460b      	mov	r3, r1
 800ab32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab36:	462a      	mov	r2, r5
 800ab38:	4633      	mov	r3, r6
 800ab3a:	f7f6 f80d 	bl	8000b58 <__aeabi_dcmpgt>
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	f040 8298 	bne.w	800b074 <_dtoa_r+0x95c>
 800ab44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab48:	462a      	mov	r2, r5
 800ab4a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ab4e:	f7f5 ffe5 	bl	8000b1c <__aeabi_dcmplt>
 800ab52:	bb38      	cbnz	r0, 800aba4 <_dtoa_r+0x48c>
 800ab54:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ab58:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f2c0 8157 	blt.w	800ae12 <_dtoa_r+0x6fa>
 800ab64:	2f0e      	cmp	r7, #14
 800ab66:	f300 8154 	bgt.w	800ae12 <_dtoa_r+0x6fa>
 800ab6a:	4b4b      	ldr	r3, [pc, #300]	@ (800ac98 <_dtoa_r+0x580>)
 800ab6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab70:	ed93 7b00 	vldr	d7, [r3]
 800ab74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	ed8d 7b00 	vstr	d7, [sp]
 800ab7c:	f280 80e5 	bge.w	800ad4a <_dtoa_r+0x632>
 800ab80:	9b03      	ldr	r3, [sp, #12]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f300 80e1 	bgt.w	800ad4a <_dtoa_r+0x632>
 800ab88:	d10c      	bne.n	800aba4 <_dtoa_r+0x48c>
 800ab8a:	4b48      	ldr	r3, [pc, #288]	@ (800acac <_dtoa_r+0x594>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	ec51 0b17 	vmov	r0, r1, d7
 800ab92:	f7f5 fd51 	bl	8000638 <__aeabi_dmul>
 800ab96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab9a:	f7f5 ffd3 	bl	8000b44 <__aeabi_dcmpge>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	f000 8266 	beq.w	800b070 <_dtoa_r+0x958>
 800aba4:	2400      	movs	r4, #0
 800aba6:	4625      	mov	r5, r4
 800aba8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800abaa:	4656      	mov	r6, sl
 800abac:	ea6f 0803 	mvn.w	r8, r3
 800abb0:	2700      	movs	r7, #0
 800abb2:	4621      	mov	r1, r4
 800abb4:	4648      	mov	r0, r9
 800abb6:	f000 fcbf 	bl	800b538 <_Bfree>
 800abba:	2d00      	cmp	r5, #0
 800abbc:	f000 80bd 	beq.w	800ad3a <_dtoa_r+0x622>
 800abc0:	b12f      	cbz	r7, 800abce <_dtoa_r+0x4b6>
 800abc2:	42af      	cmp	r7, r5
 800abc4:	d003      	beq.n	800abce <_dtoa_r+0x4b6>
 800abc6:	4639      	mov	r1, r7
 800abc8:	4648      	mov	r0, r9
 800abca:	f000 fcb5 	bl	800b538 <_Bfree>
 800abce:	4629      	mov	r1, r5
 800abd0:	4648      	mov	r0, r9
 800abd2:	f000 fcb1 	bl	800b538 <_Bfree>
 800abd6:	e0b0      	b.n	800ad3a <_dtoa_r+0x622>
 800abd8:	07e2      	lsls	r2, r4, #31
 800abda:	d505      	bpl.n	800abe8 <_dtoa_r+0x4d0>
 800abdc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abe0:	f7f5 fd2a 	bl	8000638 <__aeabi_dmul>
 800abe4:	3601      	adds	r6, #1
 800abe6:	2301      	movs	r3, #1
 800abe8:	1064      	asrs	r4, r4, #1
 800abea:	3508      	adds	r5, #8
 800abec:	e762      	b.n	800aab4 <_dtoa_r+0x39c>
 800abee:	2602      	movs	r6, #2
 800abf0:	e765      	b.n	800aabe <_dtoa_r+0x3a6>
 800abf2:	9c03      	ldr	r4, [sp, #12]
 800abf4:	46b8      	mov	r8, r7
 800abf6:	e784      	b.n	800ab02 <_dtoa_r+0x3ea>
 800abf8:	4b27      	ldr	r3, [pc, #156]	@ (800ac98 <_dtoa_r+0x580>)
 800abfa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800abfc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac04:	4454      	add	r4, sl
 800ac06:	2900      	cmp	r1, #0
 800ac08:	d054      	beq.n	800acb4 <_dtoa_r+0x59c>
 800ac0a:	4929      	ldr	r1, [pc, #164]	@ (800acb0 <_dtoa_r+0x598>)
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	f7f5 fe3d 	bl	800088c <__aeabi_ddiv>
 800ac12:	4633      	mov	r3, r6
 800ac14:	462a      	mov	r2, r5
 800ac16:	f7f5 fb57 	bl	80002c8 <__aeabi_dsub>
 800ac1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ac1e:	4656      	mov	r6, sl
 800ac20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac24:	f7f5 ffb8 	bl	8000b98 <__aeabi_d2iz>
 800ac28:	4605      	mov	r5, r0
 800ac2a:	f7f5 fc9b 	bl	8000564 <__aeabi_i2d>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	460b      	mov	r3, r1
 800ac32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac36:	f7f5 fb47 	bl	80002c8 <__aeabi_dsub>
 800ac3a:	3530      	adds	r5, #48	@ 0x30
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac44:	f806 5b01 	strb.w	r5, [r6], #1
 800ac48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac4c:	f7f5 ff66 	bl	8000b1c <__aeabi_dcmplt>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d172      	bne.n	800ad3a <_dtoa_r+0x622>
 800ac54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac58:	4911      	ldr	r1, [pc, #68]	@ (800aca0 <_dtoa_r+0x588>)
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	f7f5 fb34 	bl	80002c8 <__aeabi_dsub>
 800ac60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac64:	f7f5 ff5a 	bl	8000b1c <__aeabi_dcmplt>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	f040 80b4 	bne.w	800add6 <_dtoa_r+0x6be>
 800ac6e:	42a6      	cmp	r6, r4
 800ac70:	f43f af70 	beq.w	800ab54 <_dtoa_r+0x43c>
 800ac74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ac78:	4b0a      	ldr	r3, [pc, #40]	@ (800aca4 <_dtoa_r+0x58c>)
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f7f5 fcdc 	bl	8000638 <__aeabi_dmul>
 800ac80:	4b08      	ldr	r3, [pc, #32]	@ (800aca4 <_dtoa_r+0x58c>)
 800ac82:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ac86:	2200      	movs	r2, #0
 800ac88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac8c:	f7f5 fcd4 	bl	8000638 <__aeabi_dmul>
 800ac90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac94:	e7c4      	b.n	800ac20 <_dtoa_r+0x508>
 800ac96:	bf00      	nop
 800ac98:	0800c730 	.word	0x0800c730
 800ac9c:	0800c708 	.word	0x0800c708
 800aca0:	3ff00000 	.word	0x3ff00000
 800aca4:	40240000 	.word	0x40240000
 800aca8:	401c0000 	.word	0x401c0000
 800acac:	40140000 	.word	0x40140000
 800acb0:	3fe00000 	.word	0x3fe00000
 800acb4:	4631      	mov	r1, r6
 800acb6:	4628      	mov	r0, r5
 800acb8:	f7f5 fcbe 	bl	8000638 <__aeabi_dmul>
 800acbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800acc0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800acc2:	4656      	mov	r6, sl
 800acc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acc8:	f7f5 ff66 	bl	8000b98 <__aeabi_d2iz>
 800accc:	4605      	mov	r5, r0
 800acce:	f7f5 fc49 	bl	8000564 <__aeabi_i2d>
 800acd2:	4602      	mov	r2, r0
 800acd4:	460b      	mov	r3, r1
 800acd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acda:	f7f5 faf5 	bl	80002c8 <__aeabi_dsub>
 800acde:	3530      	adds	r5, #48	@ 0x30
 800ace0:	f806 5b01 	strb.w	r5, [r6], #1
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	42a6      	cmp	r6, r4
 800acea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800acee:	f04f 0200 	mov.w	r2, #0
 800acf2:	d124      	bne.n	800ad3e <_dtoa_r+0x626>
 800acf4:	4baf      	ldr	r3, [pc, #700]	@ (800afb4 <_dtoa_r+0x89c>)
 800acf6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800acfa:	f7f5 fae7 	bl	80002cc <__adddf3>
 800acfe:	4602      	mov	r2, r0
 800ad00:	460b      	mov	r3, r1
 800ad02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad06:	f7f5 ff27 	bl	8000b58 <__aeabi_dcmpgt>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	d163      	bne.n	800add6 <_dtoa_r+0x6be>
 800ad0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad12:	49a8      	ldr	r1, [pc, #672]	@ (800afb4 <_dtoa_r+0x89c>)
 800ad14:	2000      	movs	r0, #0
 800ad16:	f7f5 fad7 	bl	80002c8 <__aeabi_dsub>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad22:	f7f5 fefb 	bl	8000b1c <__aeabi_dcmplt>
 800ad26:	2800      	cmp	r0, #0
 800ad28:	f43f af14 	beq.w	800ab54 <_dtoa_r+0x43c>
 800ad2c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ad2e:	1e73      	subs	r3, r6, #1
 800ad30:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad36:	2b30      	cmp	r3, #48	@ 0x30
 800ad38:	d0f8      	beq.n	800ad2c <_dtoa_r+0x614>
 800ad3a:	4647      	mov	r7, r8
 800ad3c:	e03b      	b.n	800adb6 <_dtoa_r+0x69e>
 800ad3e:	4b9e      	ldr	r3, [pc, #632]	@ (800afb8 <_dtoa_r+0x8a0>)
 800ad40:	f7f5 fc7a 	bl	8000638 <__aeabi_dmul>
 800ad44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad48:	e7bc      	b.n	800acc4 <_dtoa_r+0x5ac>
 800ad4a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ad4e:	4656      	mov	r6, sl
 800ad50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad54:	4620      	mov	r0, r4
 800ad56:	4629      	mov	r1, r5
 800ad58:	f7f5 fd98 	bl	800088c <__aeabi_ddiv>
 800ad5c:	f7f5 ff1c 	bl	8000b98 <__aeabi_d2iz>
 800ad60:	4680      	mov	r8, r0
 800ad62:	f7f5 fbff 	bl	8000564 <__aeabi_i2d>
 800ad66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad6a:	f7f5 fc65 	bl	8000638 <__aeabi_dmul>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	4620      	mov	r0, r4
 800ad74:	4629      	mov	r1, r5
 800ad76:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ad7a:	f7f5 faa5 	bl	80002c8 <__aeabi_dsub>
 800ad7e:	f806 4b01 	strb.w	r4, [r6], #1
 800ad82:	9d03      	ldr	r5, [sp, #12]
 800ad84:	eba6 040a 	sub.w	r4, r6, sl
 800ad88:	42a5      	cmp	r5, r4
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	d133      	bne.n	800adf8 <_dtoa_r+0x6e0>
 800ad90:	f7f5 fa9c 	bl	80002cc <__adddf3>
 800ad94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad98:	4604      	mov	r4, r0
 800ad9a:	460d      	mov	r5, r1
 800ad9c:	f7f5 fedc 	bl	8000b58 <__aeabi_dcmpgt>
 800ada0:	b9c0      	cbnz	r0, 800add4 <_dtoa_r+0x6bc>
 800ada2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ada6:	4620      	mov	r0, r4
 800ada8:	4629      	mov	r1, r5
 800adaa:	f7f5 fead 	bl	8000b08 <__aeabi_dcmpeq>
 800adae:	b110      	cbz	r0, 800adb6 <_dtoa_r+0x69e>
 800adb0:	f018 0f01 	tst.w	r8, #1
 800adb4:	d10e      	bne.n	800add4 <_dtoa_r+0x6bc>
 800adb6:	9902      	ldr	r1, [sp, #8]
 800adb8:	4648      	mov	r0, r9
 800adba:	f000 fbbd 	bl	800b538 <_Bfree>
 800adbe:	2300      	movs	r3, #0
 800adc0:	7033      	strb	r3, [r6, #0]
 800adc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800adc4:	3701      	adds	r7, #1
 800adc6:	601f      	str	r7, [r3, #0]
 800adc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f000 824b 	beq.w	800b266 <_dtoa_r+0xb4e>
 800add0:	601e      	str	r6, [r3, #0]
 800add2:	e248      	b.n	800b266 <_dtoa_r+0xb4e>
 800add4:	46b8      	mov	r8, r7
 800add6:	4633      	mov	r3, r6
 800add8:	461e      	mov	r6, r3
 800adda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adde:	2a39      	cmp	r2, #57	@ 0x39
 800ade0:	d106      	bne.n	800adf0 <_dtoa_r+0x6d8>
 800ade2:	459a      	cmp	sl, r3
 800ade4:	d1f8      	bne.n	800add8 <_dtoa_r+0x6c0>
 800ade6:	2230      	movs	r2, #48	@ 0x30
 800ade8:	f108 0801 	add.w	r8, r8, #1
 800adec:	f88a 2000 	strb.w	r2, [sl]
 800adf0:	781a      	ldrb	r2, [r3, #0]
 800adf2:	3201      	adds	r2, #1
 800adf4:	701a      	strb	r2, [r3, #0]
 800adf6:	e7a0      	b.n	800ad3a <_dtoa_r+0x622>
 800adf8:	4b6f      	ldr	r3, [pc, #444]	@ (800afb8 <_dtoa_r+0x8a0>)
 800adfa:	2200      	movs	r2, #0
 800adfc:	f7f5 fc1c 	bl	8000638 <__aeabi_dmul>
 800ae00:	2200      	movs	r2, #0
 800ae02:	2300      	movs	r3, #0
 800ae04:	4604      	mov	r4, r0
 800ae06:	460d      	mov	r5, r1
 800ae08:	f7f5 fe7e 	bl	8000b08 <__aeabi_dcmpeq>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d09f      	beq.n	800ad50 <_dtoa_r+0x638>
 800ae10:	e7d1      	b.n	800adb6 <_dtoa_r+0x69e>
 800ae12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae14:	2a00      	cmp	r2, #0
 800ae16:	f000 80ea 	beq.w	800afee <_dtoa_r+0x8d6>
 800ae1a:	9a07      	ldr	r2, [sp, #28]
 800ae1c:	2a01      	cmp	r2, #1
 800ae1e:	f300 80cd 	bgt.w	800afbc <_dtoa_r+0x8a4>
 800ae22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ae24:	2a00      	cmp	r2, #0
 800ae26:	f000 80c1 	beq.w	800afac <_dtoa_r+0x894>
 800ae2a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ae2e:	9c08      	ldr	r4, [sp, #32]
 800ae30:	9e00      	ldr	r6, [sp, #0]
 800ae32:	9a00      	ldr	r2, [sp, #0]
 800ae34:	441a      	add	r2, r3
 800ae36:	9200      	str	r2, [sp, #0]
 800ae38:	9a06      	ldr	r2, [sp, #24]
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	441a      	add	r2, r3
 800ae3e:	4648      	mov	r0, r9
 800ae40:	9206      	str	r2, [sp, #24]
 800ae42:	f000 fc2d 	bl	800b6a0 <__i2b>
 800ae46:	4605      	mov	r5, r0
 800ae48:	b166      	cbz	r6, 800ae64 <_dtoa_r+0x74c>
 800ae4a:	9b06      	ldr	r3, [sp, #24]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	dd09      	ble.n	800ae64 <_dtoa_r+0x74c>
 800ae50:	42b3      	cmp	r3, r6
 800ae52:	9a00      	ldr	r2, [sp, #0]
 800ae54:	bfa8      	it	ge
 800ae56:	4633      	movge	r3, r6
 800ae58:	1ad2      	subs	r2, r2, r3
 800ae5a:	9200      	str	r2, [sp, #0]
 800ae5c:	9a06      	ldr	r2, [sp, #24]
 800ae5e:	1af6      	subs	r6, r6, r3
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	9306      	str	r3, [sp, #24]
 800ae64:	9b08      	ldr	r3, [sp, #32]
 800ae66:	b30b      	cbz	r3, 800aeac <_dtoa_r+0x794>
 800ae68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f000 80c6 	beq.w	800affc <_dtoa_r+0x8e4>
 800ae70:	2c00      	cmp	r4, #0
 800ae72:	f000 80c0 	beq.w	800aff6 <_dtoa_r+0x8de>
 800ae76:	4629      	mov	r1, r5
 800ae78:	4622      	mov	r2, r4
 800ae7a:	4648      	mov	r0, r9
 800ae7c:	f000 fcc8 	bl	800b810 <__pow5mult>
 800ae80:	9a02      	ldr	r2, [sp, #8]
 800ae82:	4601      	mov	r1, r0
 800ae84:	4605      	mov	r5, r0
 800ae86:	4648      	mov	r0, r9
 800ae88:	f000 fc20 	bl	800b6cc <__multiply>
 800ae8c:	9902      	ldr	r1, [sp, #8]
 800ae8e:	4680      	mov	r8, r0
 800ae90:	4648      	mov	r0, r9
 800ae92:	f000 fb51 	bl	800b538 <_Bfree>
 800ae96:	9b08      	ldr	r3, [sp, #32]
 800ae98:	1b1b      	subs	r3, r3, r4
 800ae9a:	9308      	str	r3, [sp, #32]
 800ae9c:	f000 80b1 	beq.w	800b002 <_dtoa_r+0x8ea>
 800aea0:	9a08      	ldr	r2, [sp, #32]
 800aea2:	4641      	mov	r1, r8
 800aea4:	4648      	mov	r0, r9
 800aea6:	f000 fcb3 	bl	800b810 <__pow5mult>
 800aeaa:	9002      	str	r0, [sp, #8]
 800aeac:	2101      	movs	r1, #1
 800aeae:	4648      	mov	r0, r9
 800aeb0:	f000 fbf6 	bl	800b6a0 <__i2b>
 800aeb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f000 81d8 	beq.w	800b26e <_dtoa_r+0xb56>
 800aebe:	461a      	mov	r2, r3
 800aec0:	4601      	mov	r1, r0
 800aec2:	4648      	mov	r0, r9
 800aec4:	f000 fca4 	bl	800b810 <__pow5mult>
 800aec8:	9b07      	ldr	r3, [sp, #28]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	4604      	mov	r4, r0
 800aece:	f300 809f 	bgt.w	800b010 <_dtoa_r+0x8f8>
 800aed2:	9b04      	ldr	r3, [sp, #16]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f040 8097 	bne.w	800b008 <_dtoa_r+0x8f0>
 800aeda:	9b05      	ldr	r3, [sp, #20]
 800aedc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f040 8093 	bne.w	800b00c <_dtoa_r+0x8f4>
 800aee6:	9b05      	ldr	r3, [sp, #20]
 800aee8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aeec:	0d1b      	lsrs	r3, r3, #20
 800aeee:	051b      	lsls	r3, r3, #20
 800aef0:	b133      	cbz	r3, 800af00 <_dtoa_r+0x7e8>
 800aef2:	9b00      	ldr	r3, [sp, #0]
 800aef4:	3301      	adds	r3, #1
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	9b06      	ldr	r3, [sp, #24]
 800aefa:	3301      	adds	r3, #1
 800aefc:	9306      	str	r3, [sp, #24]
 800aefe:	2301      	movs	r3, #1
 800af00:	9308      	str	r3, [sp, #32]
 800af02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af04:	2b00      	cmp	r3, #0
 800af06:	f000 81b8 	beq.w	800b27a <_dtoa_r+0xb62>
 800af0a:	6923      	ldr	r3, [r4, #16]
 800af0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af10:	6918      	ldr	r0, [r3, #16]
 800af12:	f000 fb79 	bl	800b608 <__hi0bits>
 800af16:	f1c0 0020 	rsb	r0, r0, #32
 800af1a:	9b06      	ldr	r3, [sp, #24]
 800af1c:	4418      	add	r0, r3
 800af1e:	f010 001f 	ands.w	r0, r0, #31
 800af22:	f000 8082 	beq.w	800b02a <_dtoa_r+0x912>
 800af26:	f1c0 0320 	rsb	r3, r0, #32
 800af2a:	2b04      	cmp	r3, #4
 800af2c:	dd73      	ble.n	800b016 <_dtoa_r+0x8fe>
 800af2e:	9b00      	ldr	r3, [sp, #0]
 800af30:	f1c0 001c 	rsb	r0, r0, #28
 800af34:	4403      	add	r3, r0
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	9b06      	ldr	r3, [sp, #24]
 800af3a:	4403      	add	r3, r0
 800af3c:	4406      	add	r6, r0
 800af3e:	9306      	str	r3, [sp, #24]
 800af40:	9b00      	ldr	r3, [sp, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	dd05      	ble.n	800af52 <_dtoa_r+0x83a>
 800af46:	9902      	ldr	r1, [sp, #8]
 800af48:	461a      	mov	r2, r3
 800af4a:	4648      	mov	r0, r9
 800af4c:	f000 fcba 	bl	800b8c4 <__lshift>
 800af50:	9002      	str	r0, [sp, #8]
 800af52:	9b06      	ldr	r3, [sp, #24]
 800af54:	2b00      	cmp	r3, #0
 800af56:	dd05      	ble.n	800af64 <_dtoa_r+0x84c>
 800af58:	4621      	mov	r1, r4
 800af5a:	461a      	mov	r2, r3
 800af5c:	4648      	mov	r0, r9
 800af5e:	f000 fcb1 	bl	800b8c4 <__lshift>
 800af62:	4604      	mov	r4, r0
 800af64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af66:	2b00      	cmp	r3, #0
 800af68:	d061      	beq.n	800b02e <_dtoa_r+0x916>
 800af6a:	9802      	ldr	r0, [sp, #8]
 800af6c:	4621      	mov	r1, r4
 800af6e:	f000 fd15 	bl	800b99c <__mcmp>
 800af72:	2800      	cmp	r0, #0
 800af74:	da5b      	bge.n	800b02e <_dtoa_r+0x916>
 800af76:	2300      	movs	r3, #0
 800af78:	9902      	ldr	r1, [sp, #8]
 800af7a:	220a      	movs	r2, #10
 800af7c:	4648      	mov	r0, r9
 800af7e:	f000 fafd 	bl	800b57c <__multadd>
 800af82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af84:	9002      	str	r0, [sp, #8]
 800af86:	f107 38ff 	add.w	r8, r7, #4294967295
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f000 8177 	beq.w	800b27e <_dtoa_r+0xb66>
 800af90:	4629      	mov	r1, r5
 800af92:	2300      	movs	r3, #0
 800af94:	220a      	movs	r2, #10
 800af96:	4648      	mov	r0, r9
 800af98:	f000 faf0 	bl	800b57c <__multadd>
 800af9c:	f1bb 0f00 	cmp.w	fp, #0
 800afa0:	4605      	mov	r5, r0
 800afa2:	dc6f      	bgt.n	800b084 <_dtoa_r+0x96c>
 800afa4:	9b07      	ldr	r3, [sp, #28]
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	dc49      	bgt.n	800b03e <_dtoa_r+0x926>
 800afaa:	e06b      	b.n	800b084 <_dtoa_r+0x96c>
 800afac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800afae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800afb2:	e73c      	b.n	800ae2e <_dtoa_r+0x716>
 800afb4:	3fe00000 	.word	0x3fe00000
 800afb8:	40240000 	.word	0x40240000
 800afbc:	9b03      	ldr	r3, [sp, #12]
 800afbe:	1e5c      	subs	r4, r3, #1
 800afc0:	9b08      	ldr	r3, [sp, #32]
 800afc2:	42a3      	cmp	r3, r4
 800afc4:	db09      	blt.n	800afda <_dtoa_r+0x8c2>
 800afc6:	1b1c      	subs	r4, r3, r4
 800afc8:	9b03      	ldr	r3, [sp, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f6bf af30 	bge.w	800ae30 <_dtoa_r+0x718>
 800afd0:	9b00      	ldr	r3, [sp, #0]
 800afd2:	9a03      	ldr	r2, [sp, #12]
 800afd4:	1a9e      	subs	r6, r3, r2
 800afd6:	2300      	movs	r3, #0
 800afd8:	e72b      	b.n	800ae32 <_dtoa_r+0x71a>
 800afda:	9b08      	ldr	r3, [sp, #32]
 800afdc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800afde:	9408      	str	r4, [sp, #32]
 800afe0:	1ae3      	subs	r3, r4, r3
 800afe2:	441a      	add	r2, r3
 800afe4:	9e00      	ldr	r6, [sp, #0]
 800afe6:	9b03      	ldr	r3, [sp, #12]
 800afe8:	920d      	str	r2, [sp, #52]	@ 0x34
 800afea:	2400      	movs	r4, #0
 800afec:	e721      	b.n	800ae32 <_dtoa_r+0x71a>
 800afee:	9c08      	ldr	r4, [sp, #32]
 800aff0:	9e00      	ldr	r6, [sp, #0]
 800aff2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800aff4:	e728      	b.n	800ae48 <_dtoa_r+0x730>
 800aff6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800affa:	e751      	b.n	800aea0 <_dtoa_r+0x788>
 800affc:	9a08      	ldr	r2, [sp, #32]
 800affe:	9902      	ldr	r1, [sp, #8]
 800b000:	e750      	b.n	800aea4 <_dtoa_r+0x78c>
 800b002:	f8cd 8008 	str.w	r8, [sp, #8]
 800b006:	e751      	b.n	800aeac <_dtoa_r+0x794>
 800b008:	2300      	movs	r3, #0
 800b00a:	e779      	b.n	800af00 <_dtoa_r+0x7e8>
 800b00c:	9b04      	ldr	r3, [sp, #16]
 800b00e:	e777      	b.n	800af00 <_dtoa_r+0x7e8>
 800b010:	2300      	movs	r3, #0
 800b012:	9308      	str	r3, [sp, #32]
 800b014:	e779      	b.n	800af0a <_dtoa_r+0x7f2>
 800b016:	d093      	beq.n	800af40 <_dtoa_r+0x828>
 800b018:	9a00      	ldr	r2, [sp, #0]
 800b01a:	331c      	adds	r3, #28
 800b01c:	441a      	add	r2, r3
 800b01e:	9200      	str	r2, [sp, #0]
 800b020:	9a06      	ldr	r2, [sp, #24]
 800b022:	441a      	add	r2, r3
 800b024:	441e      	add	r6, r3
 800b026:	9206      	str	r2, [sp, #24]
 800b028:	e78a      	b.n	800af40 <_dtoa_r+0x828>
 800b02a:	4603      	mov	r3, r0
 800b02c:	e7f4      	b.n	800b018 <_dtoa_r+0x900>
 800b02e:	9b03      	ldr	r3, [sp, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	46b8      	mov	r8, r7
 800b034:	dc20      	bgt.n	800b078 <_dtoa_r+0x960>
 800b036:	469b      	mov	fp, r3
 800b038:	9b07      	ldr	r3, [sp, #28]
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	dd1e      	ble.n	800b07c <_dtoa_r+0x964>
 800b03e:	f1bb 0f00 	cmp.w	fp, #0
 800b042:	f47f adb1 	bne.w	800aba8 <_dtoa_r+0x490>
 800b046:	4621      	mov	r1, r4
 800b048:	465b      	mov	r3, fp
 800b04a:	2205      	movs	r2, #5
 800b04c:	4648      	mov	r0, r9
 800b04e:	f000 fa95 	bl	800b57c <__multadd>
 800b052:	4601      	mov	r1, r0
 800b054:	4604      	mov	r4, r0
 800b056:	9802      	ldr	r0, [sp, #8]
 800b058:	f000 fca0 	bl	800b99c <__mcmp>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	f77f ada3 	ble.w	800aba8 <_dtoa_r+0x490>
 800b062:	4656      	mov	r6, sl
 800b064:	2331      	movs	r3, #49	@ 0x31
 800b066:	f806 3b01 	strb.w	r3, [r6], #1
 800b06a:	f108 0801 	add.w	r8, r8, #1
 800b06e:	e59f      	b.n	800abb0 <_dtoa_r+0x498>
 800b070:	9c03      	ldr	r4, [sp, #12]
 800b072:	46b8      	mov	r8, r7
 800b074:	4625      	mov	r5, r4
 800b076:	e7f4      	b.n	800b062 <_dtoa_r+0x94a>
 800b078:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f000 8101 	beq.w	800b286 <_dtoa_r+0xb6e>
 800b084:	2e00      	cmp	r6, #0
 800b086:	dd05      	ble.n	800b094 <_dtoa_r+0x97c>
 800b088:	4629      	mov	r1, r5
 800b08a:	4632      	mov	r2, r6
 800b08c:	4648      	mov	r0, r9
 800b08e:	f000 fc19 	bl	800b8c4 <__lshift>
 800b092:	4605      	mov	r5, r0
 800b094:	9b08      	ldr	r3, [sp, #32]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d05c      	beq.n	800b154 <_dtoa_r+0xa3c>
 800b09a:	6869      	ldr	r1, [r5, #4]
 800b09c:	4648      	mov	r0, r9
 800b09e:	f000 fa0b 	bl	800b4b8 <_Balloc>
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	b928      	cbnz	r0, 800b0b2 <_dtoa_r+0x99a>
 800b0a6:	4b82      	ldr	r3, [pc, #520]	@ (800b2b0 <_dtoa_r+0xb98>)
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b0ae:	f7ff bb4a 	b.w	800a746 <_dtoa_r+0x2e>
 800b0b2:	692a      	ldr	r2, [r5, #16]
 800b0b4:	3202      	adds	r2, #2
 800b0b6:	0092      	lsls	r2, r2, #2
 800b0b8:	f105 010c 	add.w	r1, r5, #12
 800b0bc:	300c      	adds	r0, #12
 800b0be:	f000 fff7 	bl	800c0b0 <memcpy>
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	4631      	mov	r1, r6
 800b0c6:	4648      	mov	r0, r9
 800b0c8:	f000 fbfc 	bl	800b8c4 <__lshift>
 800b0cc:	f10a 0301 	add.w	r3, sl, #1
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	eb0a 030b 	add.w	r3, sl, fp
 800b0d6:	9308      	str	r3, [sp, #32]
 800b0d8:	9b04      	ldr	r3, [sp, #16]
 800b0da:	f003 0301 	and.w	r3, r3, #1
 800b0de:	462f      	mov	r7, r5
 800b0e0:	9306      	str	r3, [sp, #24]
 800b0e2:	4605      	mov	r5, r0
 800b0e4:	9b00      	ldr	r3, [sp, #0]
 800b0e6:	9802      	ldr	r0, [sp, #8]
 800b0e8:	4621      	mov	r1, r4
 800b0ea:	f103 3bff 	add.w	fp, r3, #4294967295
 800b0ee:	f7ff fa88 	bl	800a602 <quorem>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	3330      	adds	r3, #48	@ 0x30
 800b0f6:	9003      	str	r0, [sp, #12]
 800b0f8:	4639      	mov	r1, r7
 800b0fa:	9802      	ldr	r0, [sp, #8]
 800b0fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0fe:	f000 fc4d 	bl	800b99c <__mcmp>
 800b102:	462a      	mov	r2, r5
 800b104:	9004      	str	r0, [sp, #16]
 800b106:	4621      	mov	r1, r4
 800b108:	4648      	mov	r0, r9
 800b10a:	f000 fc63 	bl	800b9d4 <__mdiff>
 800b10e:	68c2      	ldr	r2, [r0, #12]
 800b110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b112:	4606      	mov	r6, r0
 800b114:	bb02      	cbnz	r2, 800b158 <_dtoa_r+0xa40>
 800b116:	4601      	mov	r1, r0
 800b118:	9802      	ldr	r0, [sp, #8]
 800b11a:	f000 fc3f 	bl	800b99c <__mcmp>
 800b11e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b120:	4602      	mov	r2, r0
 800b122:	4631      	mov	r1, r6
 800b124:	4648      	mov	r0, r9
 800b126:	920c      	str	r2, [sp, #48]	@ 0x30
 800b128:	9309      	str	r3, [sp, #36]	@ 0x24
 800b12a:	f000 fa05 	bl	800b538 <_Bfree>
 800b12e:	9b07      	ldr	r3, [sp, #28]
 800b130:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b132:	9e00      	ldr	r6, [sp, #0]
 800b134:	ea42 0103 	orr.w	r1, r2, r3
 800b138:	9b06      	ldr	r3, [sp, #24]
 800b13a:	4319      	orrs	r1, r3
 800b13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b13e:	d10d      	bne.n	800b15c <_dtoa_r+0xa44>
 800b140:	2b39      	cmp	r3, #57	@ 0x39
 800b142:	d027      	beq.n	800b194 <_dtoa_r+0xa7c>
 800b144:	9a04      	ldr	r2, [sp, #16]
 800b146:	2a00      	cmp	r2, #0
 800b148:	dd01      	ble.n	800b14e <_dtoa_r+0xa36>
 800b14a:	9b03      	ldr	r3, [sp, #12]
 800b14c:	3331      	adds	r3, #49	@ 0x31
 800b14e:	f88b 3000 	strb.w	r3, [fp]
 800b152:	e52e      	b.n	800abb2 <_dtoa_r+0x49a>
 800b154:	4628      	mov	r0, r5
 800b156:	e7b9      	b.n	800b0cc <_dtoa_r+0x9b4>
 800b158:	2201      	movs	r2, #1
 800b15a:	e7e2      	b.n	800b122 <_dtoa_r+0xa0a>
 800b15c:	9904      	ldr	r1, [sp, #16]
 800b15e:	2900      	cmp	r1, #0
 800b160:	db04      	blt.n	800b16c <_dtoa_r+0xa54>
 800b162:	9807      	ldr	r0, [sp, #28]
 800b164:	4301      	orrs	r1, r0
 800b166:	9806      	ldr	r0, [sp, #24]
 800b168:	4301      	orrs	r1, r0
 800b16a:	d120      	bne.n	800b1ae <_dtoa_r+0xa96>
 800b16c:	2a00      	cmp	r2, #0
 800b16e:	ddee      	ble.n	800b14e <_dtoa_r+0xa36>
 800b170:	9902      	ldr	r1, [sp, #8]
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	2201      	movs	r2, #1
 800b176:	4648      	mov	r0, r9
 800b178:	f000 fba4 	bl	800b8c4 <__lshift>
 800b17c:	4621      	mov	r1, r4
 800b17e:	9002      	str	r0, [sp, #8]
 800b180:	f000 fc0c 	bl	800b99c <__mcmp>
 800b184:	2800      	cmp	r0, #0
 800b186:	9b00      	ldr	r3, [sp, #0]
 800b188:	dc02      	bgt.n	800b190 <_dtoa_r+0xa78>
 800b18a:	d1e0      	bne.n	800b14e <_dtoa_r+0xa36>
 800b18c:	07da      	lsls	r2, r3, #31
 800b18e:	d5de      	bpl.n	800b14e <_dtoa_r+0xa36>
 800b190:	2b39      	cmp	r3, #57	@ 0x39
 800b192:	d1da      	bne.n	800b14a <_dtoa_r+0xa32>
 800b194:	2339      	movs	r3, #57	@ 0x39
 800b196:	f88b 3000 	strb.w	r3, [fp]
 800b19a:	4633      	mov	r3, r6
 800b19c:	461e      	mov	r6, r3
 800b19e:	3b01      	subs	r3, #1
 800b1a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b1a4:	2a39      	cmp	r2, #57	@ 0x39
 800b1a6:	d04e      	beq.n	800b246 <_dtoa_r+0xb2e>
 800b1a8:	3201      	adds	r2, #1
 800b1aa:	701a      	strb	r2, [r3, #0]
 800b1ac:	e501      	b.n	800abb2 <_dtoa_r+0x49a>
 800b1ae:	2a00      	cmp	r2, #0
 800b1b0:	dd03      	ble.n	800b1ba <_dtoa_r+0xaa2>
 800b1b2:	2b39      	cmp	r3, #57	@ 0x39
 800b1b4:	d0ee      	beq.n	800b194 <_dtoa_r+0xa7c>
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	e7c9      	b.n	800b14e <_dtoa_r+0xa36>
 800b1ba:	9a00      	ldr	r2, [sp, #0]
 800b1bc:	9908      	ldr	r1, [sp, #32]
 800b1be:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b1c2:	428a      	cmp	r2, r1
 800b1c4:	d028      	beq.n	800b218 <_dtoa_r+0xb00>
 800b1c6:	9902      	ldr	r1, [sp, #8]
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	220a      	movs	r2, #10
 800b1cc:	4648      	mov	r0, r9
 800b1ce:	f000 f9d5 	bl	800b57c <__multadd>
 800b1d2:	42af      	cmp	r7, r5
 800b1d4:	9002      	str	r0, [sp, #8]
 800b1d6:	f04f 0300 	mov.w	r3, #0
 800b1da:	f04f 020a 	mov.w	r2, #10
 800b1de:	4639      	mov	r1, r7
 800b1e0:	4648      	mov	r0, r9
 800b1e2:	d107      	bne.n	800b1f4 <_dtoa_r+0xadc>
 800b1e4:	f000 f9ca 	bl	800b57c <__multadd>
 800b1e8:	4607      	mov	r7, r0
 800b1ea:	4605      	mov	r5, r0
 800b1ec:	9b00      	ldr	r3, [sp, #0]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	e777      	b.n	800b0e4 <_dtoa_r+0x9cc>
 800b1f4:	f000 f9c2 	bl	800b57c <__multadd>
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	4607      	mov	r7, r0
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	220a      	movs	r2, #10
 800b200:	4648      	mov	r0, r9
 800b202:	f000 f9bb 	bl	800b57c <__multadd>
 800b206:	4605      	mov	r5, r0
 800b208:	e7f0      	b.n	800b1ec <_dtoa_r+0xad4>
 800b20a:	f1bb 0f00 	cmp.w	fp, #0
 800b20e:	bfcc      	ite	gt
 800b210:	465e      	movgt	r6, fp
 800b212:	2601      	movle	r6, #1
 800b214:	4456      	add	r6, sl
 800b216:	2700      	movs	r7, #0
 800b218:	9902      	ldr	r1, [sp, #8]
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	2201      	movs	r2, #1
 800b21e:	4648      	mov	r0, r9
 800b220:	f000 fb50 	bl	800b8c4 <__lshift>
 800b224:	4621      	mov	r1, r4
 800b226:	9002      	str	r0, [sp, #8]
 800b228:	f000 fbb8 	bl	800b99c <__mcmp>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	dcb4      	bgt.n	800b19a <_dtoa_r+0xa82>
 800b230:	d102      	bne.n	800b238 <_dtoa_r+0xb20>
 800b232:	9b00      	ldr	r3, [sp, #0]
 800b234:	07db      	lsls	r3, r3, #31
 800b236:	d4b0      	bmi.n	800b19a <_dtoa_r+0xa82>
 800b238:	4633      	mov	r3, r6
 800b23a:	461e      	mov	r6, r3
 800b23c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b240:	2a30      	cmp	r2, #48	@ 0x30
 800b242:	d0fa      	beq.n	800b23a <_dtoa_r+0xb22>
 800b244:	e4b5      	b.n	800abb2 <_dtoa_r+0x49a>
 800b246:	459a      	cmp	sl, r3
 800b248:	d1a8      	bne.n	800b19c <_dtoa_r+0xa84>
 800b24a:	2331      	movs	r3, #49	@ 0x31
 800b24c:	f108 0801 	add.w	r8, r8, #1
 800b250:	f88a 3000 	strb.w	r3, [sl]
 800b254:	e4ad      	b.n	800abb2 <_dtoa_r+0x49a>
 800b256:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b258:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b2b4 <_dtoa_r+0xb9c>
 800b25c:	b11b      	cbz	r3, 800b266 <_dtoa_r+0xb4e>
 800b25e:	f10a 0308 	add.w	r3, sl, #8
 800b262:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b264:	6013      	str	r3, [r2, #0]
 800b266:	4650      	mov	r0, sl
 800b268:	b017      	add	sp, #92	@ 0x5c
 800b26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b26e:	9b07      	ldr	r3, [sp, #28]
 800b270:	2b01      	cmp	r3, #1
 800b272:	f77f ae2e 	ble.w	800aed2 <_dtoa_r+0x7ba>
 800b276:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b278:	9308      	str	r3, [sp, #32]
 800b27a:	2001      	movs	r0, #1
 800b27c:	e64d      	b.n	800af1a <_dtoa_r+0x802>
 800b27e:	f1bb 0f00 	cmp.w	fp, #0
 800b282:	f77f aed9 	ble.w	800b038 <_dtoa_r+0x920>
 800b286:	4656      	mov	r6, sl
 800b288:	9802      	ldr	r0, [sp, #8]
 800b28a:	4621      	mov	r1, r4
 800b28c:	f7ff f9b9 	bl	800a602 <quorem>
 800b290:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b294:	f806 3b01 	strb.w	r3, [r6], #1
 800b298:	eba6 020a 	sub.w	r2, r6, sl
 800b29c:	4593      	cmp	fp, r2
 800b29e:	ddb4      	ble.n	800b20a <_dtoa_r+0xaf2>
 800b2a0:	9902      	ldr	r1, [sp, #8]
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	220a      	movs	r2, #10
 800b2a6:	4648      	mov	r0, r9
 800b2a8:	f000 f968 	bl	800b57c <__multadd>
 800b2ac:	9002      	str	r0, [sp, #8]
 800b2ae:	e7eb      	b.n	800b288 <_dtoa_r+0xb70>
 800b2b0:	0800c634 	.word	0x0800c634
 800b2b4:	0800c5b8 	.word	0x0800c5b8

0800b2b8 <_free_r>:
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	4605      	mov	r5, r0
 800b2bc:	2900      	cmp	r1, #0
 800b2be:	d041      	beq.n	800b344 <_free_r+0x8c>
 800b2c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2c4:	1f0c      	subs	r4, r1, #4
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	bfb8      	it	lt
 800b2ca:	18e4      	addlt	r4, r4, r3
 800b2cc:	f000 f8e8 	bl	800b4a0 <__malloc_lock>
 800b2d0:	4a1d      	ldr	r2, [pc, #116]	@ (800b348 <_free_r+0x90>)
 800b2d2:	6813      	ldr	r3, [r2, #0]
 800b2d4:	b933      	cbnz	r3, 800b2e4 <_free_r+0x2c>
 800b2d6:	6063      	str	r3, [r4, #4]
 800b2d8:	6014      	str	r4, [r2, #0]
 800b2da:	4628      	mov	r0, r5
 800b2dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2e0:	f000 b8e4 	b.w	800b4ac <__malloc_unlock>
 800b2e4:	42a3      	cmp	r3, r4
 800b2e6:	d908      	bls.n	800b2fa <_free_r+0x42>
 800b2e8:	6820      	ldr	r0, [r4, #0]
 800b2ea:	1821      	adds	r1, r4, r0
 800b2ec:	428b      	cmp	r3, r1
 800b2ee:	bf01      	itttt	eq
 800b2f0:	6819      	ldreq	r1, [r3, #0]
 800b2f2:	685b      	ldreq	r3, [r3, #4]
 800b2f4:	1809      	addeq	r1, r1, r0
 800b2f6:	6021      	streq	r1, [r4, #0]
 800b2f8:	e7ed      	b.n	800b2d6 <_free_r+0x1e>
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	b10b      	cbz	r3, 800b304 <_free_r+0x4c>
 800b300:	42a3      	cmp	r3, r4
 800b302:	d9fa      	bls.n	800b2fa <_free_r+0x42>
 800b304:	6811      	ldr	r1, [r2, #0]
 800b306:	1850      	adds	r0, r2, r1
 800b308:	42a0      	cmp	r0, r4
 800b30a:	d10b      	bne.n	800b324 <_free_r+0x6c>
 800b30c:	6820      	ldr	r0, [r4, #0]
 800b30e:	4401      	add	r1, r0
 800b310:	1850      	adds	r0, r2, r1
 800b312:	4283      	cmp	r3, r0
 800b314:	6011      	str	r1, [r2, #0]
 800b316:	d1e0      	bne.n	800b2da <_free_r+0x22>
 800b318:	6818      	ldr	r0, [r3, #0]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	6053      	str	r3, [r2, #4]
 800b31e:	4408      	add	r0, r1
 800b320:	6010      	str	r0, [r2, #0]
 800b322:	e7da      	b.n	800b2da <_free_r+0x22>
 800b324:	d902      	bls.n	800b32c <_free_r+0x74>
 800b326:	230c      	movs	r3, #12
 800b328:	602b      	str	r3, [r5, #0]
 800b32a:	e7d6      	b.n	800b2da <_free_r+0x22>
 800b32c:	6820      	ldr	r0, [r4, #0]
 800b32e:	1821      	adds	r1, r4, r0
 800b330:	428b      	cmp	r3, r1
 800b332:	bf04      	itt	eq
 800b334:	6819      	ldreq	r1, [r3, #0]
 800b336:	685b      	ldreq	r3, [r3, #4]
 800b338:	6063      	str	r3, [r4, #4]
 800b33a:	bf04      	itt	eq
 800b33c:	1809      	addeq	r1, r1, r0
 800b33e:	6021      	streq	r1, [r4, #0]
 800b340:	6054      	str	r4, [r2, #4]
 800b342:	e7ca      	b.n	800b2da <_free_r+0x22>
 800b344:	bd38      	pop	{r3, r4, r5, pc}
 800b346:	bf00      	nop
 800b348:	20000780 	.word	0x20000780

0800b34c <malloc>:
 800b34c:	4b02      	ldr	r3, [pc, #8]	@ (800b358 <malloc+0xc>)
 800b34e:	4601      	mov	r1, r0
 800b350:	6818      	ldr	r0, [r3, #0]
 800b352:	f000 b825 	b.w	800b3a0 <_malloc_r>
 800b356:	bf00      	nop
 800b358:	20000018 	.word	0x20000018

0800b35c <sbrk_aligned>:
 800b35c:	b570      	push	{r4, r5, r6, lr}
 800b35e:	4e0f      	ldr	r6, [pc, #60]	@ (800b39c <sbrk_aligned+0x40>)
 800b360:	460c      	mov	r4, r1
 800b362:	6831      	ldr	r1, [r6, #0]
 800b364:	4605      	mov	r5, r0
 800b366:	b911      	cbnz	r1, 800b36e <sbrk_aligned+0x12>
 800b368:	f000 fe92 	bl	800c090 <_sbrk_r>
 800b36c:	6030      	str	r0, [r6, #0]
 800b36e:	4621      	mov	r1, r4
 800b370:	4628      	mov	r0, r5
 800b372:	f000 fe8d 	bl	800c090 <_sbrk_r>
 800b376:	1c43      	adds	r3, r0, #1
 800b378:	d103      	bne.n	800b382 <sbrk_aligned+0x26>
 800b37a:	f04f 34ff 	mov.w	r4, #4294967295
 800b37e:	4620      	mov	r0, r4
 800b380:	bd70      	pop	{r4, r5, r6, pc}
 800b382:	1cc4      	adds	r4, r0, #3
 800b384:	f024 0403 	bic.w	r4, r4, #3
 800b388:	42a0      	cmp	r0, r4
 800b38a:	d0f8      	beq.n	800b37e <sbrk_aligned+0x22>
 800b38c:	1a21      	subs	r1, r4, r0
 800b38e:	4628      	mov	r0, r5
 800b390:	f000 fe7e 	bl	800c090 <_sbrk_r>
 800b394:	3001      	adds	r0, #1
 800b396:	d1f2      	bne.n	800b37e <sbrk_aligned+0x22>
 800b398:	e7ef      	b.n	800b37a <sbrk_aligned+0x1e>
 800b39a:	bf00      	nop
 800b39c:	2000077c 	.word	0x2000077c

0800b3a0 <_malloc_r>:
 800b3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3a4:	1ccd      	adds	r5, r1, #3
 800b3a6:	f025 0503 	bic.w	r5, r5, #3
 800b3aa:	3508      	adds	r5, #8
 800b3ac:	2d0c      	cmp	r5, #12
 800b3ae:	bf38      	it	cc
 800b3b0:	250c      	movcc	r5, #12
 800b3b2:	2d00      	cmp	r5, #0
 800b3b4:	4606      	mov	r6, r0
 800b3b6:	db01      	blt.n	800b3bc <_malloc_r+0x1c>
 800b3b8:	42a9      	cmp	r1, r5
 800b3ba:	d904      	bls.n	800b3c6 <_malloc_r+0x26>
 800b3bc:	230c      	movs	r3, #12
 800b3be:	6033      	str	r3, [r6, #0]
 800b3c0:	2000      	movs	r0, #0
 800b3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b49c <_malloc_r+0xfc>
 800b3ca:	f000 f869 	bl	800b4a0 <__malloc_lock>
 800b3ce:	f8d8 3000 	ldr.w	r3, [r8]
 800b3d2:	461c      	mov	r4, r3
 800b3d4:	bb44      	cbnz	r4, 800b428 <_malloc_r+0x88>
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f7ff ffbf 	bl	800b35c <sbrk_aligned>
 800b3de:	1c43      	adds	r3, r0, #1
 800b3e0:	4604      	mov	r4, r0
 800b3e2:	d158      	bne.n	800b496 <_malloc_r+0xf6>
 800b3e4:	f8d8 4000 	ldr.w	r4, [r8]
 800b3e8:	4627      	mov	r7, r4
 800b3ea:	2f00      	cmp	r7, #0
 800b3ec:	d143      	bne.n	800b476 <_malloc_r+0xd6>
 800b3ee:	2c00      	cmp	r4, #0
 800b3f0:	d04b      	beq.n	800b48a <_malloc_r+0xea>
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	eb04 0903 	add.w	r9, r4, r3
 800b3fc:	f000 fe48 	bl	800c090 <_sbrk_r>
 800b400:	4581      	cmp	r9, r0
 800b402:	d142      	bne.n	800b48a <_malloc_r+0xea>
 800b404:	6821      	ldr	r1, [r4, #0]
 800b406:	1a6d      	subs	r5, r5, r1
 800b408:	4629      	mov	r1, r5
 800b40a:	4630      	mov	r0, r6
 800b40c:	f7ff ffa6 	bl	800b35c <sbrk_aligned>
 800b410:	3001      	adds	r0, #1
 800b412:	d03a      	beq.n	800b48a <_malloc_r+0xea>
 800b414:	6823      	ldr	r3, [r4, #0]
 800b416:	442b      	add	r3, r5
 800b418:	6023      	str	r3, [r4, #0]
 800b41a:	f8d8 3000 	ldr.w	r3, [r8]
 800b41e:	685a      	ldr	r2, [r3, #4]
 800b420:	bb62      	cbnz	r2, 800b47c <_malloc_r+0xdc>
 800b422:	f8c8 7000 	str.w	r7, [r8]
 800b426:	e00f      	b.n	800b448 <_malloc_r+0xa8>
 800b428:	6822      	ldr	r2, [r4, #0]
 800b42a:	1b52      	subs	r2, r2, r5
 800b42c:	d420      	bmi.n	800b470 <_malloc_r+0xd0>
 800b42e:	2a0b      	cmp	r2, #11
 800b430:	d917      	bls.n	800b462 <_malloc_r+0xc2>
 800b432:	1961      	adds	r1, r4, r5
 800b434:	42a3      	cmp	r3, r4
 800b436:	6025      	str	r5, [r4, #0]
 800b438:	bf18      	it	ne
 800b43a:	6059      	strne	r1, [r3, #4]
 800b43c:	6863      	ldr	r3, [r4, #4]
 800b43e:	bf08      	it	eq
 800b440:	f8c8 1000 	streq.w	r1, [r8]
 800b444:	5162      	str	r2, [r4, r5]
 800b446:	604b      	str	r3, [r1, #4]
 800b448:	4630      	mov	r0, r6
 800b44a:	f000 f82f 	bl	800b4ac <__malloc_unlock>
 800b44e:	f104 000b 	add.w	r0, r4, #11
 800b452:	1d23      	adds	r3, r4, #4
 800b454:	f020 0007 	bic.w	r0, r0, #7
 800b458:	1ac2      	subs	r2, r0, r3
 800b45a:	bf1c      	itt	ne
 800b45c:	1a1b      	subne	r3, r3, r0
 800b45e:	50a3      	strne	r3, [r4, r2]
 800b460:	e7af      	b.n	800b3c2 <_malloc_r+0x22>
 800b462:	6862      	ldr	r2, [r4, #4]
 800b464:	42a3      	cmp	r3, r4
 800b466:	bf0c      	ite	eq
 800b468:	f8c8 2000 	streq.w	r2, [r8]
 800b46c:	605a      	strne	r2, [r3, #4]
 800b46e:	e7eb      	b.n	800b448 <_malloc_r+0xa8>
 800b470:	4623      	mov	r3, r4
 800b472:	6864      	ldr	r4, [r4, #4]
 800b474:	e7ae      	b.n	800b3d4 <_malloc_r+0x34>
 800b476:	463c      	mov	r4, r7
 800b478:	687f      	ldr	r7, [r7, #4]
 800b47a:	e7b6      	b.n	800b3ea <_malloc_r+0x4a>
 800b47c:	461a      	mov	r2, r3
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	42a3      	cmp	r3, r4
 800b482:	d1fb      	bne.n	800b47c <_malloc_r+0xdc>
 800b484:	2300      	movs	r3, #0
 800b486:	6053      	str	r3, [r2, #4]
 800b488:	e7de      	b.n	800b448 <_malloc_r+0xa8>
 800b48a:	230c      	movs	r3, #12
 800b48c:	6033      	str	r3, [r6, #0]
 800b48e:	4630      	mov	r0, r6
 800b490:	f000 f80c 	bl	800b4ac <__malloc_unlock>
 800b494:	e794      	b.n	800b3c0 <_malloc_r+0x20>
 800b496:	6005      	str	r5, [r0, #0]
 800b498:	e7d6      	b.n	800b448 <_malloc_r+0xa8>
 800b49a:	bf00      	nop
 800b49c:	20000780 	.word	0x20000780

0800b4a0 <__malloc_lock>:
 800b4a0:	4801      	ldr	r0, [pc, #4]	@ (800b4a8 <__malloc_lock+0x8>)
 800b4a2:	f7ff b8ac 	b.w	800a5fe <__retarget_lock_acquire_recursive>
 800b4a6:	bf00      	nop
 800b4a8:	20000778 	.word	0x20000778

0800b4ac <__malloc_unlock>:
 800b4ac:	4801      	ldr	r0, [pc, #4]	@ (800b4b4 <__malloc_unlock+0x8>)
 800b4ae:	f7ff b8a7 	b.w	800a600 <__retarget_lock_release_recursive>
 800b4b2:	bf00      	nop
 800b4b4:	20000778 	.word	0x20000778

0800b4b8 <_Balloc>:
 800b4b8:	b570      	push	{r4, r5, r6, lr}
 800b4ba:	69c6      	ldr	r6, [r0, #28]
 800b4bc:	4604      	mov	r4, r0
 800b4be:	460d      	mov	r5, r1
 800b4c0:	b976      	cbnz	r6, 800b4e0 <_Balloc+0x28>
 800b4c2:	2010      	movs	r0, #16
 800b4c4:	f7ff ff42 	bl	800b34c <malloc>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	61e0      	str	r0, [r4, #28]
 800b4cc:	b920      	cbnz	r0, 800b4d8 <_Balloc+0x20>
 800b4ce:	4b18      	ldr	r3, [pc, #96]	@ (800b530 <_Balloc+0x78>)
 800b4d0:	4818      	ldr	r0, [pc, #96]	@ (800b534 <_Balloc+0x7c>)
 800b4d2:	216b      	movs	r1, #107	@ 0x6b
 800b4d4:	f000 fdfa 	bl	800c0cc <__assert_func>
 800b4d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4dc:	6006      	str	r6, [r0, #0]
 800b4de:	60c6      	str	r6, [r0, #12]
 800b4e0:	69e6      	ldr	r6, [r4, #28]
 800b4e2:	68f3      	ldr	r3, [r6, #12]
 800b4e4:	b183      	cbz	r3, 800b508 <_Balloc+0x50>
 800b4e6:	69e3      	ldr	r3, [r4, #28]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4ee:	b9b8      	cbnz	r0, 800b520 <_Balloc+0x68>
 800b4f0:	2101      	movs	r1, #1
 800b4f2:	fa01 f605 	lsl.w	r6, r1, r5
 800b4f6:	1d72      	adds	r2, r6, #5
 800b4f8:	0092      	lsls	r2, r2, #2
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f000 fe04 	bl	800c108 <_calloc_r>
 800b500:	b160      	cbz	r0, 800b51c <_Balloc+0x64>
 800b502:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b506:	e00e      	b.n	800b526 <_Balloc+0x6e>
 800b508:	2221      	movs	r2, #33	@ 0x21
 800b50a:	2104      	movs	r1, #4
 800b50c:	4620      	mov	r0, r4
 800b50e:	f000 fdfb 	bl	800c108 <_calloc_r>
 800b512:	69e3      	ldr	r3, [r4, #28]
 800b514:	60f0      	str	r0, [r6, #12]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1e4      	bne.n	800b4e6 <_Balloc+0x2e>
 800b51c:	2000      	movs	r0, #0
 800b51e:	bd70      	pop	{r4, r5, r6, pc}
 800b520:	6802      	ldr	r2, [r0, #0]
 800b522:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b526:	2300      	movs	r3, #0
 800b528:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b52c:	e7f7      	b.n	800b51e <_Balloc+0x66>
 800b52e:	bf00      	nop
 800b530:	0800c5c5 	.word	0x0800c5c5
 800b534:	0800c645 	.word	0x0800c645

0800b538 <_Bfree>:
 800b538:	b570      	push	{r4, r5, r6, lr}
 800b53a:	69c6      	ldr	r6, [r0, #28]
 800b53c:	4605      	mov	r5, r0
 800b53e:	460c      	mov	r4, r1
 800b540:	b976      	cbnz	r6, 800b560 <_Bfree+0x28>
 800b542:	2010      	movs	r0, #16
 800b544:	f7ff ff02 	bl	800b34c <malloc>
 800b548:	4602      	mov	r2, r0
 800b54a:	61e8      	str	r0, [r5, #28]
 800b54c:	b920      	cbnz	r0, 800b558 <_Bfree+0x20>
 800b54e:	4b09      	ldr	r3, [pc, #36]	@ (800b574 <_Bfree+0x3c>)
 800b550:	4809      	ldr	r0, [pc, #36]	@ (800b578 <_Bfree+0x40>)
 800b552:	218f      	movs	r1, #143	@ 0x8f
 800b554:	f000 fdba 	bl	800c0cc <__assert_func>
 800b558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b55c:	6006      	str	r6, [r0, #0]
 800b55e:	60c6      	str	r6, [r0, #12]
 800b560:	b13c      	cbz	r4, 800b572 <_Bfree+0x3a>
 800b562:	69eb      	ldr	r3, [r5, #28]
 800b564:	6862      	ldr	r2, [r4, #4]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b56c:	6021      	str	r1, [r4, #0]
 800b56e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b572:	bd70      	pop	{r4, r5, r6, pc}
 800b574:	0800c5c5 	.word	0x0800c5c5
 800b578:	0800c645 	.word	0x0800c645

0800b57c <__multadd>:
 800b57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b580:	690d      	ldr	r5, [r1, #16]
 800b582:	4607      	mov	r7, r0
 800b584:	460c      	mov	r4, r1
 800b586:	461e      	mov	r6, r3
 800b588:	f101 0c14 	add.w	ip, r1, #20
 800b58c:	2000      	movs	r0, #0
 800b58e:	f8dc 3000 	ldr.w	r3, [ip]
 800b592:	b299      	uxth	r1, r3
 800b594:	fb02 6101 	mla	r1, r2, r1, r6
 800b598:	0c1e      	lsrs	r6, r3, #16
 800b59a:	0c0b      	lsrs	r3, r1, #16
 800b59c:	fb02 3306 	mla	r3, r2, r6, r3
 800b5a0:	b289      	uxth	r1, r1
 800b5a2:	3001      	adds	r0, #1
 800b5a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b5a8:	4285      	cmp	r5, r0
 800b5aa:	f84c 1b04 	str.w	r1, [ip], #4
 800b5ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b5b2:	dcec      	bgt.n	800b58e <__multadd+0x12>
 800b5b4:	b30e      	cbz	r6, 800b5fa <__multadd+0x7e>
 800b5b6:	68a3      	ldr	r3, [r4, #8]
 800b5b8:	42ab      	cmp	r3, r5
 800b5ba:	dc19      	bgt.n	800b5f0 <__multadd+0x74>
 800b5bc:	6861      	ldr	r1, [r4, #4]
 800b5be:	4638      	mov	r0, r7
 800b5c0:	3101      	adds	r1, #1
 800b5c2:	f7ff ff79 	bl	800b4b8 <_Balloc>
 800b5c6:	4680      	mov	r8, r0
 800b5c8:	b928      	cbnz	r0, 800b5d6 <__multadd+0x5a>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	4b0c      	ldr	r3, [pc, #48]	@ (800b600 <__multadd+0x84>)
 800b5ce:	480d      	ldr	r0, [pc, #52]	@ (800b604 <__multadd+0x88>)
 800b5d0:	21ba      	movs	r1, #186	@ 0xba
 800b5d2:	f000 fd7b 	bl	800c0cc <__assert_func>
 800b5d6:	6922      	ldr	r2, [r4, #16]
 800b5d8:	3202      	adds	r2, #2
 800b5da:	f104 010c 	add.w	r1, r4, #12
 800b5de:	0092      	lsls	r2, r2, #2
 800b5e0:	300c      	adds	r0, #12
 800b5e2:	f000 fd65 	bl	800c0b0 <memcpy>
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	4638      	mov	r0, r7
 800b5ea:	f7ff ffa5 	bl	800b538 <_Bfree>
 800b5ee:	4644      	mov	r4, r8
 800b5f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5f4:	3501      	adds	r5, #1
 800b5f6:	615e      	str	r6, [r3, #20]
 800b5f8:	6125      	str	r5, [r4, #16]
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b600:	0800c634 	.word	0x0800c634
 800b604:	0800c645 	.word	0x0800c645

0800b608 <__hi0bits>:
 800b608:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b60c:	4603      	mov	r3, r0
 800b60e:	bf36      	itet	cc
 800b610:	0403      	lslcc	r3, r0, #16
 800b612:	2000      	movcs	r0, #0
 800b614:	2010      	movcc	r0, #16
 800b616:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b61a:	bf3c      	itt	cc
 800b61c:	021b      	lslcc	r3, r3, #8
 800b61e:	3008      	addcc	r0, #8
 800b620:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b624:	bf3c      	itt	cc
 800b626:	011b      	lslcc	r3, r3, #4
 800b628:	3004      	addcc	r0, #4
 800b62a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b62e:	bf3c      	itt	cc
 800b630:	009b      	lslcc	r3, r3, #2
 800b632:	3002      	addcc	r0, #2
 800b634:	2b00      	cmp	r3, #0
 800b636:	db05      	blt.n	800b644 <__hi0bits+0x3c>
 800b638:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b63c:	f100 0001 	add.w	r0, r0, #1
 800b640:	bf08      	it	eq
 800b642:	2020      	moveq	r0, #32
 800b644:	4770      	bx	lr

0800b646 <__lo0bits>:
 800b646:	6803      	ldr	r3, [r0, #0]
 800b648:	4602      	mov	r2, r0
 800b64a:	f013 0007 	ands.w	r0, r3, #7
 800b64e:	d00b      	beq.n	800b668 <__lo0bits+0x22>
 800b650:	07d9      	lsls	r1, r3, #31
 800b652:	d421      	bmi.n	800b698 <__lo0bits+0x52>
 800b654:	0798      	lsls	r0, r3, #30
 800b656:	bf49      	itett	mi
 800b658:	085b      	lsrmi	r3, r3, #1
 800b65a:	089b      	lsrpl	r3, r3, #2
 800b65c:	2001      	movmi	r0, #1
 800b65e:	6013      	strmi	r3, [r2, #0]
 800b660:	bf5c      	itt	pl
 800b662:	6013      	strpl	r3, [r2, #0]
 800b664:	2002      	movpl	r0, #2
 800b666:	4770      	bx	lr
 800b668:	b299      	uxth	r1, r3
 800b66a:	b909      	cbnz	r1, 800b670 <__lo0bits+0x2a>
 800b66c:	0c1b      	lsrs	r3, r3, #16
 800b66e:	2010      	movs	r0, #16
 800b670:	b2d9      	uxtb	r1, r3
 800b672:	b909      	cbnz	r1, 800b678 <__lo0bits+0x32>
 800b674:	3008      	adds	r0, #8
 800b676:	0a1b      	lsrs	r3, r3, #8
 800b678:	0719      	lsls	r1, r3, #28
 800b67a:	bf04      	itt	eq
 800b67c:	091b      	lsreq	r3, r3, #4
 800b67e:	3004      	addeq	r0, #4
 800b680:	0799      	lsls	r1, r3, #30
 800b682:	bf04      	itt	eq
 800b684:	089b      	lsreq	r3, r3, #2
 800b686:	3002      	addeq	r0, #2
 800b688:	07d9      	lsls	r1, r3, #31
 800b68a:	d403      	bmi.n	800b694 <__lo0bits+0x4e>
 800b68c:	085b      	lsrs	r3, r3, #1
 800b68e:	f100 0001 	add.w	r0, r0, #1
 800b692:	d003      	beq.n	800b69c <__lo0bits+0x56>
 800b694:	6013      	str	r3, [r2, #0]
 800b696:	4770      	bx	lr
 800b698:	2000      	movs	r0, #0
 800b69a:	4770      	bx	lr
 800b69c:	2020      	movs	r0, #32
 800b69e:	4770      	bx	lr

0800b6a0 <__i2b>:
 800b6a0:	b510      	push	{r4, lr}
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	2101      	movs	r1, #1
 800b6a6:	f7ff ff07 	bl	800b4b8 <_Balloc>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	b928      	cbnz	r0, 800b6ba <__i2b+0x1a>
 800b6ae:	4b05      	ldr	r3, [pc, #20]	@ (800b6c4 <__i2b+0x24>)
 800b6b0:	4805      	ldr	r0, [pc, #20]	@ (800b6c8 <__i2b+0x28>)
 800b6b2:	f240 1145 	movw	r1, #325	@ 0x145
 800b6b6:	f000 fd09 	bl	800c0cc <__assert_func>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	6144      	str	r4, [r0, #20]
 800b6be:	6103      	str	r3, [r0, #16]
 800b6c0:	bd10      	pop	{r4, pc}
 800b6c2:	bf00      	nop
 800b6c4:	0800c634 	.word	0x0800c634
 800b6c8:	0800c645 	.word	0x0800c645

0800b6cc <__multiply>:
 800b6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d0:	4617      	mov	r7, r2
 800b6d2:	690a      	ldr	r2, [r1, #16]
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	bfa8      	it	ge
 800b6da:	463b      	movge	r3, r7
 800b6dc:	4689      	mov	r9, r1
 800b6de:	bfa4      	itt	ge
 800b6e0:	460f      	movge	r7, r1
 800b6e2:	4699      	movge	r9, r3
 800b6e4:	693d      	ldr	r5, [r7, #16]
 800b6e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	6879      	ldr	r1, [r7, #4]
 800b6ee:	eb05 060a 	add.w	r6, r5, sl
 800b6f2:	42b3      	cmp	r3, r6
 800b6f4:	b085      	sub	sp, #20
 800b6f6:	bfb8      	it	lt
 800b6f8:	3101      	addlt	r1, #1
 800b6fa:	f7ff fedd 	bl	800b4b8 <_Balloc>
 800b6fe:	b930      	cbnz	r0, 800b70e <__multiply+0x42>
 800b700:	4602      	mov	r2, r0
 800b702:	4b41      	ldr	r3, [pc, #260]	@ (800b808 <__multiply+0x13c>)
 800b704:	4841      	ldr	r0, [pc, #260]	@ (800b80c <__multiply+0x140>)
 800b706:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b70a:	f000 fcdf 	bl	800c0cc <__assert_func>
 800b70e:	f100 0414 	add.w	r4, r0, #20
 800b712:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b716:	4623      	mov	r3, r4
 800b718:	2200      	movs	r2, #0
 800b71a:	4573      	cmp	r3, lr
 800b71c:	d320      	bcc.n	800b760 <__multiply+0x94>
 800b71e:	f107 0814 	add.w	r8, r7, #20
 800b722:	f109 0114 	add.w	r1, r9, #20
 800b726:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b72a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b72e:	9302      	str	r3, [sp, #8]
 800b730:	1beb      	subs	r3, r5, r7
 800b732:	3b15      	subs	r3, #21
 800b734:	f023 0303 	bic.w	r3, r3, #3
 800b738:	3304      	adds	r3, #4
 800b73a:	3715      	adds	r7, #21
 800b73c:	42bd      	cmp	r5, r7
 800b73e:	bf38      	it	cc
 800b740:	2304      	movcc	r3, #4
 800b742:	9301      	str	r3, [sp, #4]
 800b744:	9b02      	ldr	r3, [sp, #8]
 800b746:	9103      	str	r1, [sp, #12]
 800b748:	428b      	cmp	r3, r1
 800b74a:	d80c      	bhi.n	800b766 <__multiply+0x9a>
 800b74c:	2e00      	cmp	r6, #0
 800b74e:	dd03      	ble.n	800b758 <__multiply+0x8c>
 800b750:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b754:	2b00      	cmp	r3, #0
 800b756:	d055      	beq.n	800b804 <__multiply+0x138>
 800b758:	6106      	str	r6, [r0, #16]
 800b75a:	b005      	add	sp, #20
 800b75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b760:	f843 2b04 	str.w	r2, [r3], #4
 800b764:	e7d9      	b.n	800b71a <__multiply+0x4e>
 800b766:	f8b1 a000 	ldrh.w	sl, [r1]
 800b76a:	f1ba 0f00 	cmp.w	sl, #0
 800b76e:	d01f      	beq.n	800b7b0 <__multiply+0xe4>
 800b770:	46c4      	mov	ip, r8
 800b772:	46a1      	mov	r9, r4
 800b774:	2700      	movs	r7, #0
 800b776:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b77a:	f8d9 3000 	ldr.w	r3, [r9]
 800b77e:	fa1f fb82 	uxth.w	fp, r2
 800b782:	b29b      	uxth	r3, r3
 800b784:	fb0a 330b 	mla	r3, sl, fp, r3
 800b788:	443b      	add	r3, r7
 800b78a:	f8d9 7000 	ldr.w	r7, [r9]
 800b78e:	0c12      	lsrs	r2, r2, #16
 800b790:	0c3f      	lsrs	r7, r7, #16
 800b792:	fb0a 7202 	mla	r2, sl, r2, r7
 800b796:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7a0:	4565      	cmp	r5, ip
 800b7a2:	f849 3b04 	str.w	r3, [r9], #4
 800b7a6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b7aa:	d8e4      	bhi.n	800b776 <__multiply+0xaa>
 800b7ac:	9b01      	ldr	r3, [sp, #4]
 800b7ae:	50e7      	str	r7, [r4, r3]
 800b7b0:	9b03      	ldr	r3, [sp, #12]
 800b7b2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b7b6:	3104      	adds	r1, #4
 800b7b8:	f1b9 0f00 	cmp.w	r9, #0
 800b7bc:	d020      	beq.n	800b800 <__multiply+0x134>
 800b7be:	6823      	ldr	r3, [r4, #0]
 800b7c0:	4647      	mov	r7, r8
 800b7c2:	46a4      	mov	ip, r4
 800b7c4:	f04f 0a00 	mov.w	sl, #0
 800b7c8:	f8b7 b000 	ldrh.w	fp, [r7]
 800b7cc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b7d0:	fb09 220b 	mla	r2, r9, fp, r2
 800b7d4:	4452      	add	r2, sl
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7dc:	f84c 3b04 	str.w	r3, [ip], #4
 800b7e0:	f857 3b04 	ldr.w	r3, [r7], #4
 800b7e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7e8:	f8bc 3000 	ldrh.w	r3, [ip]
 800b7ec:	fb09 330a 	mla	r3, r9, sl, r3
 800b7f0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b7f4:	42bd      	cmp	r5, r7
 800b7f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7fa:	d8e5      	bhi.n	800b7c8 <__multiply+0xfc>
 800b7fc:	9a01      	ldr	r2, [sp, #4]
 800b7fe:	50a3      	str	r3, [r4, r2]
 800b800:	3404      	adds	r4, #4
 800b802:	e79f      	b.n	800b744 <__multiply+0x78>
 800b804:	3e01      	subs	r6, #1
 800b806:	e7a1      	b.n	800b74c <__multiply+0x80>
 800b808:	0800c634 	.word	0x0800c634
 800b80c:	0800c645 	.word	0x0800c645

0800b810 <__pow5mult>:
 800b810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b814:	4615      	mov	r5, r2
 800b816:	f012 0203 	ands.w	r2, r2, #3
 800b81a:	4607      	mov	r7, r0
 800b81c:	460e      	mov	r6, r1
 800b81e:	d007      	beq.n	800b830 <__pow5mult+0x20>
 800b820:	4c25      	ldr	r4, [pc, #148]	@ (800b8b8 <__pow5mult+0xa8>)
 800b822:	3a01      	subs	r2, #1
 800b824:	2300      	movs	r3, #0
 800b826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b82a:	f7ff fea7 	bl	800b57c <__multadd>
 800b82e:	4606      	mov	r6, r0
 800b830:	10ad      	asrs	r5, r5, #2
 800b832:	d03d      	beq.n	800b8b0 <__pow5mult+0xa0>
 800b834:	69fc      	ldr	r4, [r7, #28]
 800b836:	b97c      	cbnz	r4, 800b858 <__pow5mult+0x48>
 800b838:	2010      	movs	r0, #16
 800b83a:	f7ff fd87 	bl	800b34c <malloc>
 800b83e:	4602      	mov	r2, r0
 800b840:	61f8      	str	r0, [r7, #28]
 800b842:	b928      	cbnz	r0, 800b850 <__pow5mult+0x40>
 800b844:	4b1d      	ldr	r3, [pc, #116]	@ (800b8bc <__pow5mult+0xac>)
 800b846:	481e      	ldr	r0, [pc, #120]	@ (800b8c0 <__pow5mult+0xb0>)
 800b848:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b84c:	f000 fc3e 	bl	800c0cc <__assert_func>
 800b850:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b854:	6004      	str	r4, [r0, #0]
 800b856:	60c4      	str	r4, [r0, #12]
 800b858:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b85c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b860:	b94c      	cbnz	r4, 800b876 <__pow5mult+0x66>
 800b862:	f240 2171 	movw	r1, #625	@ 0x271
 800b866:	4638      	mov	r0, r7
 800b868:	f7ff ff1a 	bl	800b6a0 <__i2b>
 800b86c:	2300      	movs	r3, #0
 800b86e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b872:	4604      	mov	r4, r0
 800b874:	6003      	str	r3, [r0, #0]
 800b876:	f04f 0900 	mov.w	r9, #0
 800b87a:	07eb      	lsls	r3, r5, #31
 800b87c:	d50a      	bpl.n	800b894 <__pow5mult+0x84>
 800b87e:	4631      	mov	r1, r6
 800b880:	4622      	mov	r2, r4
 800b882:	4638      	mov	r0, r7
 800b884:	f7ff ff22 	bl	800b6cc <__multiply>
 800b888:	4631      	mov	r1, r6
 800b88a:	4680      	mov	r8, r0
 800b88c:	4638      	mov	r0, r7
 800b88e:	f7ff fe53 	bl	800b538 <_Bfree>
 800b892:	4646      	mov	r6, r8
 800b894:	106d      	asrs	r5, r5, #1
 800b896:	d00b      	beq.n	800b8b0 <__pow5mult+0xa0>
 800b898:	6820      	ldr	r0, [r4, #0]
 800b89a:	b938      	cbnz	r0, 800b8ac <__pow5mult+0x9c>
 800b89c:	4622      	mov	r2, r4
 800b89e:	4621      	mov	r1, r4
 800b8a0:	4638      	mov	r0, r7
 800b8a2:	f7ff ff13 	bl	800b6cc <__multiply>
 800b8a6:	6020      	str	r0, [r4, #0]
 800b8a8:	f8c0 9000 	str.w	r9, [r0]
 800b8ac:	4604      	mov	r4, r0
 800b8ae:	e7e4      	b.n	800b87a <__pow5mult+0x6a>
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8b6:	bf00      	nop
 800b8b8:	0800c6f8 	.word	0x0800c6f8
 800b8bc:	0800c5c5 	.word	0x0800c5c5
 800b8c0:	0800c645 	.word	0x0800c645

0800b8c4 <__lshift>:
 800b8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8c8:	460c      	mov	r4, r1
 800b8ca:	6849      	ldr	r1, [r1, #4]
 800b8cc:	6923      	ldr	r3, [r4, #16]
 800b8ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b8d2:	68a3      	ldr	r3, [r4, #8]
 800b8d4:	4607      	mov	r7, r0
 800b8d6:	4691      	mov	r9, r2
 800b8d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8dc:	f108 0601 	add.w	r6, r8, #1
 800b8e0:	42b3      	cmp	r3, r6
 800b8e2:	db0b      	blt.n	800b8fc <__lshift+0x38>
 800b8e4:	4638      	mov	r0, r7
 800b8e6:	f7ff fde7 	bl	800b4b8 <_Balloc>
 800b8ea:	4605      	mov	r5, r0
 800b8ec:	b948      	cbnz	r0, 800b902 <__lshift+0x3e>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	4b28      	ldr	r3, [pc, #160]	@ (800b994 <__lshift+0xd0>)
 800b8f2:	4829      	ldr	r0, [pc, #164]	@ (800b998 <__lshift+0xd4>)
 800b8f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b8f8:	f000 fbe8 	bl	800c0cc <__assert_func>
 800b8fc:	3101      	adds	r1, #1
 800b8fe:	005b      	lsls	r3, r3, #1
 800b900:	e7ee      	b.n	800b8e0 <__lshift+0x1c>
 800b902:	2300      	movs	r3, #0
 800b904:	f100 0114 	add.w	r1, r0, #20
 800b908:	f100 0210 	add.w	r2, r0, #16
 800b90c:	4618      	mov	r0, r3
 800b90e:	4553      	cmp	r3, sl
 800b910:	db33      	blt.n	800b97a <__lshift+0xb6>
 800b912:	6920      	ldr	r0, [r4, #16]
 800b914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b918:	f104 0314 	add.w	r3, r4, #20
 800b91c:	f019 091f 	ands.w	r9, r9, #31
 800b920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b924:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b928:	d02b      	beq.n	800b982 <__lshift+0xbe>
 800b92a:	f1c9 0e20 	rsb	lr, r9, #32
 800b92e:	468a      	mov	sl, r1
 800b930:	2200      	movs	r2, #0
 800b932:	6818      	ldr	r0, [r3, #0]
 800b934:	fa00 f009 	lsl.w	r0, r0, r9
 800b938:	4310      	orrs	r0, r2
 800b93a:	f84a 0b04 	str.w	r0, [sl], #4
 800b93e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b942:	459c      	cmp	ip, r3
 800b944:	fa22 f20e 	lsr.w	r2, r2, lr
 800b948:	d8f3      	bhi.n	800b932 <__lshift+0x6e>
 800b94a:	ebac 0304 	sub.w	r3, ip, r4
 800b94e:	3b15      	subs	r3, #21
 800b950:	f023 0303 	bic.w	r3, r3, #3
 800b954:	3304      	adds	r3, #4
 800b956:	f104 0015 	add.w	r0, r4, #21
 800b95a:	4560      	cmp	r0, ip
 800b95c:	bf88      	it	hi
 800b95e:	2304      	movhi	r3, #4
 800b960:	50ca      	str	r2, [r1, r3]
 800b962:	b10a      	cbz	r2, 800b968 <__lshift+0xa4>
 800b964:	f108 0602 	add.w	r6, r8, #2
 800b968:	3e01      	subs	r6, #1
 800b96a:	4638      	mov	r0, r7
 800b96c:	612e      	str	r6, [r5, #16]
 800b96e:	4621      	mov	r1, r4
 800b970:	f7ff fde2 	bl	800b538 <_Bfree>
 800b974:	4628      	mov	r0, r5
 800b976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b97a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b97e:	3301      	adds	r3, #1
 800b980:	e7c5      	b.n	800b90e <__lshift+0x4a>
 800b982:	3904      	subs	r1, #4
 800b984:	f853 2b04 	ldr.w	r2, [r3], #4
 800b988:	f841 2f04 	str.w	r2, [r1, #4]!
 800b98c:	459c      	cmp	ip, r3
 800b98e:	d8f9      	bhi.n	800b984 <__lshift+0xc0>
 800b990:	e7ea      	b.n	800b968 <__lshift+0xa4>
 800b992:	bf00      	nop
 800b994:	0800c634 	.word	0x0800c634
 800b998:	0800c645 	.word	0x0800c645

0800b99c <__mcmp>:
 800b99c:	690a      	ldr	r2, [r1, #16]
 800b99e:	4603      	mov	r3, r0
 800b9a0:	6900      	ldr	r0, [r0, #16]
 800b9a2:	1a80      	subs	r0, r0, r2
 800b9a4:	b530      	push	{r4, r5, lr}
 800b9a6:	d10e      	bne.n	800b9c6 <__mcmp+0x2a>
 800b9a8:	3314      	adds	r3, #20
 800b9aa:	3114      	adds	r1, #20
 800b9ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b9b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b9b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b9b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b9bc:	4295      	cmp	r5, r2
 800b9be:	d003      	beq.n	800b9c8 <__mcmp+0x2c>
 800b9c0:	d205      	bcs.n	800b9ce <__mcmp+0x32>
 800b9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c6:	bd30      	pop	{r4, r5, pc}
 800b9c8:	42a3      	cmp	r3, r4
 800b9ca:	d3f3      	bcc.n	800b9b4 <__mcmp+0x18>
 800b9cc:	e7fb      	b.n	800b9c6 <__mcmp+0x2a>
 800b9ce:	2001      	movs	r0, #1
 800b9d0:	e7f9      	b.n	800b9c6 <__mcmp+0x2a>
	...

0800b9d4 <__mdiff>:
 800b9d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d8:	4689      	mov	r9, r1
 800b9da:	4606      	mov	r6, r0
 800b9dc:	4611      	mov	r1, r2
 800b9de:	4648      	mov	r0, r9
 800b9e0:	4614      	mov	r4, r2
 800b9e2:	f7ff ffdb 	bl	800b99c <__mcmp>
 800b9e6:	1e05      	subs	r5, r0, #0
 800b9e8:	d112      	bne.n	800ba10 <__mdiff+0x3c>
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	f7ff fd63 	bl	800b4b8 <_Balloc>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	b928      	cbnz	r0, 800ba02 <__mdiff+0x2e>
 800b9f6:	4b3f      	ldr	r3, [pc, #252]	@ (800baf4 <__mdiff+0x120>)
 800b9f8:	f240 2137 	movw	r1, #567	@ 0x237
 800b9fc:	483e      	ldr	r0, [pc, #248]	@ (800baf8 <__mdiff+0x124>)
 800b9fe:	f000 fb65 	bl	800c0cc <__assert_func>
 800ba02:	2301      	movs	r3, #1
 800ba04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba08:	4610      	mov	r0, r2
 800ba0a:	b003      	add	sp, #12
 800ba0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba10:	bfbc      	itt	lt
 800ba12:	464b      	movlt	r3, r9
 800ba14:	46a1      	movlt	r9, r4
 800ba16:	4630      	mov	r0, r6
 800ba18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ba1c:	bfba      	itte	lt
 800ba1e:	461c      	movlt	r4, r3
 800ba20:	2501      	movlt	r5, #1
 800ba22:	2500      	movge	r5, #0
 800ba24:	f7ff fd48 	bl	800b4b8 <_Balloc>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	b918      	cbnz	r0, 800ba34 <__mdiff+0x60>
 800ba2c:	4b31      	ldr	r3, [pc, #196]	@ (800baf4 <__mdiff+0x120>)
 800ba2e:	f240 2145 	movw	r1, #581	@ 0x245
 800ba32:	e7e3      	b.n	800b9fc <__mdiff+0x28>
 800ba34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ba38:	6926      	ldr	r6, [r4, #16]
 800ba3a:	60c5      	str	r5, [r0, #12]
 800ba3c:	f109 0310 	add.w	r3, r9, #16
 800ba40:	f109 0514 	add.w	r5, r9, #20
 800ba44:	f104 0e14 	add.w	lr, r4, #20
 800ba48:	f100 0b14 	add.w	fp, r0, #20
 800ba4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ba50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ba54:	9301      	str	r3, [sp, #4]
 800ba56:	46d9      	mov	r9, fp
 800ba58:	f04f 0c00 	mov.w	ip, #0
 800ba5c:	9b01      	ldr	r3, [sp, #4]
 800ba5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ba62:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba66:	9301      	str	r3, [sp, #4]
 800ba68:	fa1f f38a 	uxth.w	r3, sl
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	b283      	uxth	r3, r0
 800ba70:	1acb      	subs	r3, r1, r3
 800ba72:	0c00      	lsrs	r0, r0, #16
 800ba74:	4463      	add	r3, ip
 800ba76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba84:	4576      	cmp	r6, lr
 800ba86:	f849 3b04 	str.w	r3, [r9], #4
 800ba8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba8e:	d8e5      	bhi.n	800ba5c <__mdiff+0x88>
 800ba90:	1b33      	subs	r3, r6, r4
 800ba92:	3b15      	subs	r3, #21
 800ba94:	f023 0303 	bic.w	r3, r3, #3
 800ba98:	3415      	adds	r4, #21
 800ba9a:	3304      	adds	r3, #4
 800ba9c:	42a6      	cmp	r6, r4
 800ba9e:	bf38      	it	cc
 800baa0:	2304      	movcc	r3, #4
 800baa2:	441d      	add	r5, r3
 800baa4:	445b      	add	r3, fp
 800baa6:	461e      	mov	r6, r3
 800baa8:	462c      	mov	r4, r5
 800baaa:	4544      	cmp	r4, r8
 800baac:	d30e      	bcc.n	800bacc <__mdiff+0xf8>
 800baae:	f108 0103 	add.w	r1, r8, #3
 800bab2:	1b49      	subs	r1, r1, r5
 800bab4:	f021 0103 	bic.w	r1, r1, #3
 800bab8:	3d03      	subs	r5, #3
 800baba:	45a8      	cmp	r8, r5
 800babc:	bf38      	it	cc
 800babe:	2100      	movcc	r1, #0
 800bac0:	440b      	add	r3, r1
 800bac2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bac6:	b191      	cbz	r1, 800baee <__mdiff+0x11a>
 800bac8:	6117      	str	r7, [r2, #16]
 800baca:	e79d      	b.n	800ba08 <__mdiff+0x34>
 800bacc:	f854 1b04 	ldr.w	r1, [r4], #4
 800bad0:	46e6      	mov	lr, ip
 800bad2:	0c08      	lsrs	r0, r1, #16
 800bad4:	fa1c fc81 	uxtah	ip, ip, r1
 800bad8:	4471      	add	r1, lr
 800bada:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bade:	b289      	uxth	r1, r1
 800bae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bae4:	f846 1b04 	str.w	r1, [r6], #4
 800bae8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800baec:	e7dd      	b.n	800baaa <__mdiff+0xd6>
 800baee:	3f01      	subs	r7, #1
 800baf0:	e7e7      	b.n	800bac2 <__mdiff+0xee>
 800baf2:	bf00      	nop
 800baf4:	0800c634 	.word	0x0800c634
 800baf8:	0800c645 	.word	0x0800c645

0800bafc <__d2b>:
 800bafc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb00:	460f      	mov	r7, r1
 800bb02:	2101      	movs	r1, #1
 800bb04:	ec59 8b10 	vmov	r8, r9, d0
 800bb08:	4616      	mov	r6, r2
 800bb0a:	f7ff fcd5 	bl	800b4b8 <_Balloc>
 800bb0e:	4604      	mov	r4, r0
 800bb10:	b930      	cbnz	r0, 800bb20 <__d2b+0x24>
 800bb12:	4602      	mov	r2, r0
 800bb14:	4b23      	ldr	r3, [pc, #140]	@ (800bba4 <__d2b+0xa8>)
 800bb16:	4824      	ldr	r0, [pc, #144]	@ (800bba8 <__d2b+0xac>)
 800bb18:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb1c:	f000 fad6 	bl	800c0cc <__assert_func>
 800bb20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb28:	b10d      	cbz	r5, 800bb2e <__d2b+0x32>
 800bb2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb2e:	9301      	str	r3, [sp, #4]
 800bb30:	f1b8 0300 	subs.w	r3, r8, #0
 800bb34:	d023      	beq.n	800bb7e <__d2b+0x82>
 800bb36:	4668      	mov	r0, sp
 800bb38:	9300      	str	r3, [sp, #0]
 800bb3a:	f7ff fd84 	bl	800b646 <__lo0bits>
 800bb3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb42:	b1d0      	cbz	r0, 800bb7a <__d2b+0x7e>
 800bb44:	f1c0 0320 	rsb	r3, r0, #32
 800bb48:	fa02 f303 	lsl.w	r3, r2, r3
 800bb4c:	430b      	orrs	r3, r1
 800bb4e:	40c2      	lsrs	r2, r0
 800bb50:	6163      	str	r3, [r4, #20]
 800bb52:	9201      	str	r2, [sp, #4]
 800bb54:	9b01      	ldr	r3, [sp, #4]
 800bb56:	61a3      	str	r3, [r4, #24]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	bf0c      	ite	eq
 800bb5c:	2201      	moveq	r2, #1
 800bb5e:	2202      	movne	r2, #2
 800bb60:	6122      	str	r2, [r4, #16]
 800bb62:	b1a5      	cbz	r5, 800bb8e <__d2b+0x92>
 800bb64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bb68:	4405      	add	r5, r0
 800bb6a:	603d      	str	r5, [r7, #0]
 800bb6c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bb70:	6030      	str	r0, [r6, #0]
 800bb72:	4620      	mov	r0, r4
 800bb74:	b003      	add	sp, #12
 800bb76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb7a:	6161      	str	r1, [r4, #20]
 800bb7c:	e7ea      	b.n	800bb54 <__d2b+0x58>
 800bb7e:	a801      	add	r0, sp, #4
 800bb80:	f7ff fd61 	bl	800b646 <__lo0bits>
 800bb84:	9b01      	ldr	r3, [sp, #4]
 800bb86:	6163      	str	r3, [r4, #20]
 800bb88:	3020      	adds	r0, #32
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	e7e8      	b.n	800bb60 <__d2b+0x64>
 800bb8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bb96:	6038      	str	r0, [r7, #0]
 800bb98:	6918      	ldr	r0, [r3, #16]
 800bb9a:	f7ff fd35 	bl	800b608 <__hi0bits>
 800bb9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bba2:	e7e5      	b.n	800bb70 <__d2b+0x74>
 800bba4:	0800c634 	.word	0x0800c634
 800bba8:	0800c645 	.word	0x0800c645

0800bbac <__sfputc_r>:
 800bbac:	6893      	ldr	r3, [r2, #8]
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	b410      	push	{r4}
 800bbb4:	6093      	str	r3, [r2, #8]
 800bbb6:	da08      	bge.n	800bbca <__sfputc_r+0x1e>
 800bbb8:	6994      	ldr	r4, [r2, #24]
 800bbba:	42a3      	cmp	r3, r4
 800bbbc:	db01      	blt.n	800bbc2 <__sfputc_r+0x16>
 800bbbe:	290a      	cmp	r1, #10
 800bbc0:	d103      	bne.n	800bbca <__sfputc_r+0x1e>
 800bbc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbc6:	f7fe bc08 	b.w	800a3da <__swbuf_r>
 800bbca:	6813      	ldr	r3, [r2, #0]
 800bbcc:	1c58      	adds	r0, r3, #1
 800bbce:	6010      	str	r0, [r2, #0]
 800bbd0:	7019      	strb	r1, [r3, #0]
 800bbd2:	4608      	mov	r0, r1
 800bbd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <__sfputs_r>:
 800bbda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbdc:	4606      	mov	r6, r0
 800bbde:	460f      	mov	r7, r1
 800bbe0:	4614      	mov	r4, r2
 800bbe2:	18d5      	adds	r5, r2, r3
 800bbe4:	42ac      	cmp	r4, r5
 800bbe6:	d101      	bne.n	800bbec <__sfputs_r+0x12>
 800bbe8:	2000      	movs	r0, #0
 800bbea:	e007      	b.n	800bbfc <__sfputs_r+0x22>
 800bbec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf0:	463a      	mov	r2, r7
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f7ff ffda 	bl	800bbac <__sfputc_r>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	d1f3      	bne.n	800bbe4 <__sfputs_r+0xa>
 800bbfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc00 <_vfiprintf_r>:
 800bc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc04:	460d      	mov	r5, r1
 800bc06:	b09d      	sub	sp, #116	@ 0x74
 800bc08:	4614      	mov	r4, r2
 800bc0a:	4698      	mov	r8, r3
 800bc0c:	4606      	mov	r6, r0
 800bc0e:	b118      	cbz	r0, 800bc18 <_vfiprintf_r+0x18>
 800bc10:	6a03      	ldr	r3, [r0, #32]
 800bc12:	b90b      	cbnz	r3, 800bc18 <_vfiprintf_r+0x18>
 800bc14:	f7fe faf8 	bl	800a208 <__sinit>
 800bc18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc1a:	07d9      	lsls	r1, r3, #31
 800bc1c:	d405      	bmi.n	800bc2a <_vfiprintf_r+0x2a>
 800bc1e:	89ab      	ldrh	r3, [r5, #12]
 800bc20:	059a      	lsls	r2, r3, #22
 800bc22:	d402      	bmi.n	800bc2a <_vfiprintf_r+0x2a>
 800bc24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc26:	f7fe fcea 	bl	800a5fe <__retarget_lock_acquire_recursive>
 800bc2a:	89ab      	ldrh	r3, [r5, #12]
 800bc2c:	071b      	lsls	r3, r3, #28
 800bc2e:	d501      	bpl.n	800bc34 <_vfiprintf_r+0x34>
 800bc30:	692b      	ldr	r3, [r5, #16]
 800bc32:	b99b      	cbnz	r3, 800bc5c <_vfiprintf_r+0x5c>
 800bc34:	4629      	mov	r1, r5
 800bc36:	4630      	mov	r0, r6
 800bc38:	f7fe fc0e 	bl	800a458 <__swsetup_r>
 800bc3c:	b170      	cbz	r0, 800bc5c <_vfiprintf_r+0x5c>
 800bc3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc40:	07dc      	lsls	r4, r3, #31
 800bc42:	d504      	bpl.n	800bc4e <_vfiprintf_r+0x4e>
 800bc44:	f04f 30ff 	mov.w	r0, #4294967295
 800bc48:	b01d      	add	sp, #116	@ 0x74
 800bc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4e:	89ab      	ldrh	r3, [r5, #12]
 800bc50:	0598      	lsls	r0, r3, #22
 800bc52:	d4f7      	bmi.n	800bc44 <_vfiprintf_r+0x44>
 800bc54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc56:	f7fe fcd3 	bl	800a600 <__retarget_lock_release_recursive>
 800bc5a:	e7f3      	b.n	800bc44 <_vfiprintf_r+0x44>
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc60:	2320      	movs	r3, #32
 800bc62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc66:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc6a:	2330      	movs	r3, #48	@ 0x30
 800bc6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800be1c <_vfiprintf_r+0x21c>
 800bc70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc74:	f04f 0901 	mov.w	r9, #1
 800bc78:	4623      	mov	r3, r4
 800bc7a:	469a      	mov	sl, r3
 800bc7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc80:	b10a      	cbz	r2, 800bc86 <_vfiprintf_r+0x86>
 800bc82:	2a25      	cmp	r2, #37	@ 0x25
 800bc84:	d1f9      	bne.n	800bc7a <_vfiprintf_r+0x7a>
 800bc86:	ebba 0b04 	subs.w	fp, sl, r4
 800bc8a:	d00b      	beq.n	800bca4 <_vfiprintf_r+0xa4>
 800bc8c:	465b      	mov	r3, fp
 800bc8e:	4622      	mov	r2, r4
 800bc90:	4629      	mov	r1, r5
 800bc92:	4630      	mov	r0, r6
 800bc94:	f7ff ffa1 	bl	800bbda <__sfputs_r>
 800bc98:	3001      	adds	r0, #1
 800bc9a:	f000 80a7 	beq.w	800bdec <_vfiprintf_r+0x1ec>
 800bc9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bca0:	445a      	add	r2, fp
 800bca2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bca4:	f89a 3000 	ldrb.w	r3, [sl]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	f000 809f 	beq.w	800bdec <_vfiprintf_r+0x1ec>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcb8:	f10a 0a01 	add.w	sl, sl, #1
 800bcbc:	9304      	str	r3, [sp, #16]
 800bcbe:	9307      	str	r3, [sp, #28]
 800bcc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcc4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcc6:	4654      	mov	r4, sl
 800bcc8:	2205      	movs	r2, #5
 800bcca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcce:	4853      	ldr	r0, [pc, #332]	@ (800be1c <_vfiprintf_r+0x21c>)
 800bcd0:	f7f4 fa9e 	bl	8000210 <memchr>
 800bcd4:	9a04      	ldr	r2, [sp, #16]
 800bcd6:	b9d8      	cbnz	r0, 800bd10 <_vfiprintf_r+0x110>
 800bcd8:	06d1      	lsls	r1, r2, #27
 800bcda:	bf44      	itt	mi
 800bcdc:	2320      	movmi	r3, #32
 800bcde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bce2:	0713      	lsls	r3, r2, #28
 800bce4:	bf44      	itt	mi
 800bce6:	232b      	movmi	r3, #43	@ 0x2b
 800bce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcec:	f89a 3000 	ldrb.w	r3, [sl]
 800bcf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcf2:	d015      	beq.n	800bd20 <_vfiprintf_r+0x120>
 800bcf4:	9a07      	ldr	r2, [sp, #28]
 800bcf6:	4654      	mov	r4, sl
 800bcf8:	2000      	movs	r0, #0
 800bcfa:	f04f 0c0a 	mov.w	ip, #10
 800bcfe:	4621      	mov	r1, r4
 800bd00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd04:	3b30      	subs	r3, #48	@ 0x30
 800bd06:	2b09      	cmp	r3, #9
 800bd08:	d94b      	bls.n	800bda2 <_vfiprintf_r+0x1a2>
 800bd0a:	b1b0      	cbz	r0, 800bd3a <_vfiprintf_r+0x13a>
 800bd0c:	9207      	str	r2, [sp, #28]
 800bd0e:	e014      	b.n	800bd3a <_vfiprintf_r+0x13a>
 800bd10:	eba0 0308 	sub.w	r3, r0, r8
 800bd14:	fa09 f303 	lsl.w	r3, r9, r3
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	9304      	str	r3, [sp, #16]
 800bd1c:	46a2      	mov	sl, r4
 800bd1e:	e7d2      	b.n	800bcc6 <_vfiprintf_r+0xc6>
 800bd20:	9b03      	ldr	r3, [sp, #12]
 800bd22:	1d19      	adds	r1, r3, #4
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	9103      	str	r1, [sp, #12]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	bfbb      	ittet	lt
 800bd2c:	425b      	neglt	r3, r3
 800bd2e:	f042 0202 	orrlt.w	r2, r2, #2
 800bd32:	9307      	strge	r3, [sp, #28]
 800bd34:	9307      	strlt	r3, [sp, #28]
 800bd36:	bfb8      	it	lt
 800bd38:	9204      	strlt	r2, [sp, #16]
 800bd3a:	7823      	ldrb	r3, [r4, #0]
 800bd3c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd3e:	d10a      	bne.n	800bd56 <_vfiprintf_r+0x156>
 800bd40:	7863      	ldrb	r3, [r4, #1]
 800bd42:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd44:	d132      	bne.n	800bdac <_vfiprintf_r+0x1ac>
 800bd46:	9b03      	ldr	r3, [sp, #12]
 800bd48:	1d1a      	adds	r2, r3, #4
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	9203      	str	r2, [sp, #12]
 800bd4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd52:	3402      	adds	r4, #2
 800bd54:	9305      	str	r3, [sp, #20]
 800bd56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800be2c <_vfiprintf_r+0x22c>
 800bd5a:	7821      	ldrb	r1, [r4, #0]
 800bd5c:	2203      	movs	r2, #3
 800bd5e:	4650      	mov	r0, sl
 800bd60:	f7f4 fa56 	bl	8000210 <memchr>
 800bd64:	b138      	cbz	r0, 800bd76 <_vfiprintf_r+0x176>
 800bd66:	9b04      	ldr	r3, [sp, #16]
 800bd68:	eba0 000a 	sub.w	r0, r0, sl
 800bd6c:	2240      	movs	r2, #64	@ 0x40
 800bd6e:	4082      	lsls	r2, r0
 800bd70:	4313      	orrs	r3, r2
 800bd72:	3401      	adds	r4, #1
 800bd74:	9304      	str	r3, [sp, #16]
 800bd76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd7a:	4829      	ldr	r0, [pc, #164]	@ (800be20 <_vfiprintf_r+0x220>)
 800bd7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd80:	2206      	movs	r2, #6
 800bd82:	f7f4 fa45 	bl	8000210 <memchr>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d03f      	beq.n	800be0a <_vfiprintf_r+0x20a>
 800bd8a:	4b26      	ldr	r3, [pc, #152]	@ (800be24 <_vfiprintf_r+0x224>)
 800bd8c:	bb1b      	cbnz	r3, 800bdd6 <_vfiprintf_r+0x1d6>
 800bd8e:	9b03      	ldr	r3, [sp, #12]
 800bd90:	3307      	adds	r3, #7
 800bd92:	f023 0307 	bic.w	r3, r3, #7
 800bd96:	3308      	adds	r3, #8
 800bd98:	9303      	str	r3, [sp, #12]
 800bd9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd9c:	443b      	add	r3, r7
 800bd9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bda0:	e76a      	b.n	800bc78 <_vfiprintf_r+0x78>
 800bda2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bda6:	460c      	mov	r4, r1
 800bda8:	2001      	movs	r0, #1
 800bdaa:	e7a8      	b.n	800bcfe <_vfiprintf_r+0xfe>
 800bdac:	2300      	movs	r3, #0
 800bdae:	3401      	adds	r4, #1
 800bdb0:	9305      	str	r3, [sp, #20]
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	f04f 0c0a 	mov.w	ip, #10
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdbe:	3a30      	subs	r2, #48	@ 0x30
 800bdc0:	2a09      	cmp	r2, #9
 800bdc2:	d903      	bls.n	800bdcc <_vfiprintf_r+0x1cc>
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d0c6      	beq.n	800bd56 <_vfiprintf_r+0x156>
 800bdc8:	9105      	str	r1, [sp, #20]
 800bdca:	e7c4      	b.n	800bd56 <_vfiprintf_r+0x156>
 800bdcc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e7f0      	b.n	800bdb8 <_vfiprintf_r+0x1b8>
 800bdd6:	ab03      	add	r3, sp, #12
 800bdd8:	9300      	str	r3, [sp, #0]
 800bdda:	462a      	mov	r2, r5
 800bddc:	4b12      	ldr	r3, [pc, #72]	@ (800be28 <_vfiprintf_r+0x228>)
 800bdde:	a904      	add	r1, sp, #16
 800bde0:	4630      	mov	r0, r6
 800bde2:	f7fd fdcf 	bl	8009984 <_printf_float>
 800bde6:	4607      	mov	r7, r0
 800bde8:	1c78      	adds	r0, r7, #1
 800bdea:	d1d6      	bne.n	800bd9a <_vfiprintf_r+0x19a>
 800bdec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdee:	07d9      	lsls	r1, r3, #31
 800bdf0:	d405      	bmi.n	800bdfe <_vfiprintf_r+0x1fe>
 800bdf2:	89ab      	ldrh	r3, [r5, #12]
 800bdf4:	059a      	lsls	r2, r3, #22
 800bdf6:	d402      	bmi.n	800bdfe <_vfiprintf_r+0x1fe>
 800bdf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdfa:	f7fe fc01 	bl	800a600 <__retarget_lock_release_recursive>
 800bdfe:	89ab      	ldrh	r3, [r5, #12]
 800be00:	065b      	lsls	r3, r3, #25
 800be02:	f53f af1f 	bmi.w	800bc44 <_vfiprintf_r+0x44>
 800be06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be08:	e71e      	b.n	800bc48 <_vfiprintf_r+0x48>
 800be0a:	ab03      	add	r3, sp, #12
 800be0c:	9300      	str	r3, [sp, #0]
 800be0e:	462a      	mov	r2, r5
 800be10:	4b05      	ldr	r3, [pc, #20]	@ (800be28 <_vfiprintf_r+0x228>)
 800be12:	a904      	add	r1, sp, #16
 800be14:	4630      	mov	r0, r6
 800be16:	f7fe f84d 	bl	8009eb4 <_printf_i>
 800be1a:	e7e4      	b.n	800bde6 <_vfiprintf_r+0x1e6>
 800be1c:	0800c69e 	.word	0x0800c69e
 800be20:	0800c6a8 	.word	0x0800c6a8
 800be24:	08009985 	.word	0x08009985
 800be28:	0800bbdb 	.word	0x0800bbdb
 800be2c:	0800c6a4 	.word	0x0800c6a4

0800be30 <__sflush_r>:
 800be30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be38:	0716      	lsls	r6, r2, #28
 800be3a:	4605      	mov	r5, r0
 800be3c:	460c      	mov	r4, r1
 800be3e:	d454      	bmi.n	800beea <__sflush_r+0xba>
 800be40:	684b      	ldr	r3, [r1, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	dc02      	bgt.n	800be4c <__sflush_r+0x1c>
 800be46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be48:	2b00      	cmp	r3, #0
 800be4a:	dd48      	ble.n	800bede <__sflush_r+0xae>
 800be4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be4e:	2e00      	cmp	r6, #0
 800be50:	d045      	beq.n	800bede <__sflush_r+0xae>
 800be52:	2300      	movs	r3, #0
 800be54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be58:	682f      	ldr	r7, [r5, #0]
 800be5a:	6a21      	ldr	r1, [r4, #32]
 800be5c:	602b      	str	r3, [r5, #0]
 800be5e:	d030      	beq.n	800bec2 <__sflush_r+0x92>
 800be60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be62:	89a3      	ldrh	r3, [r4, #12]
 800be64:	0759      	lsls	r1, r3, #29
 800be66:	d505      	bpl.n	800be74 <__sflush_r+0x44>
 800be68:	6863      	ldr	r3, [r4, #4]
 800be6a:	1ad2      	subs	r2, r2, r3
 800be6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be6e:	b10b      	cbz	r3, 800be74 <__sflush_r+0x44>
 800be70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be72:	1ad2      	subs	r2, r2, r3
 800be74:	2300      	movs	r3, #0
 800be76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be78:	6a21      	ldr	r1, [r4, #32]
 800be7a:	4628      	mov	r0, r5
 800be7c:	47b0      	blx	r6
 800be7e:	1c43      	adds	r3, r0, #1
 800be80:	89a3      	ldrh	r3, [r4, #12]
 800be82:	d106      	bne.n	800be92 <__sflush_r+0x62>
 800be84:	6829      	ldr	r1, [r5, #0]
 800be86:	291d      	cmp	r1, #29
 800be88:	d82b      	bhi.n	800bee2 <__sflush_r+0xb2>
 800be8a:	4a2a      	ldr	r2, [pc, #168]	@ (800bf34 <__sflush_r+0x104>)
 800be8c:	40ca      	lsrs	r2, r1
 800be8e:	07d6      	lsls	r6, r2, #31
 800be90:	d527      	bpl.n	800bee2 <__sflush_r+0xb2>
 800be92:	2200      	movs	r2, #0
 800be94:	6062      	str	r2, [r4, #4]
 800be96:	04d9      	lsls	r1, r3, #19
 800be98:	6922      	ldr	r2, [r4, #16]
 800be9a:	6022      	str	r2, [r4, #0]
 800be9c:	d504      	bpl.n	800bea8 <__sflush_r+0x78>
 800be9e:	1c42      	adds	r2, r0, #1
 800bea0:	d101      	bne.n	800bea6 <__sflush_r+0x76>
 800bea2:	682b      	ldr	r3, [r5, #0]
 800bea4:	b903      	cbnz	r3, 800bea8 <__sflush_r+0x78>
 800bea6:	6560      	str	r0, [r4, #84]	@ 0x54
 800bea8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800beaa:	602f      	str	r7, [r5, #0]
 800beac:	b1b9      	cbz	r1, 800bede <__sflush_r+0xae>
 800beae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800beb2:	4299      	cmp	r1, r3
 800beb4:	d002      	beq.n	800bebc <__sflush_r+0x8c>
 800beb6:	4628      	mov	r0, r5
 800beb8:	f7ff f9fe 	bl	800b2b8 <_free_r>
 800bebc:	2300      	movs	r3, #0
 800bebe:	6363      	str	r3, [r4, #52]	@ 0x34
 800bec0:	e00d      	b.n	800bede <__sflush_r+0xae>
 800bec2:	2301      	movs	r3, #1
 800bec4:	4628      	mov	r0, r5
 800bec6:	47b0      	blx	r6
 800bec8:	4602      	mov	r2, r0
 800beca:	1c50      	adds	r0, r2, #1
 800becc:	d1c9      	bne.n	800be62 <__sflush_r+0x32>
 800bece:	682b      	ldr	r3, [r5, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d0c6      	beq.n	800be62 <__sflush_r+0x32>
 800bed4:	2b1d      	cmp	r3, #29
 800bed6:	d001      	beq.n	800bedc <__sflush_r+0xac>
 800bed8:	2b16      	cmp	r3, #22
 800beda:	d11e      	bne.n	800bf1a <__sflush_r+0xea>
 800bedc:	602f      	str	r7, [r5, #0]
 800bede:	2000      	movs	r0, #0
 800bee0:	e022      	b.n	800bf28 <__sflush_r+0xf8>
 800bee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bee6:	b21b      	sxth	r3, r3
 800bee8:	e01b      	b.n	800bf22 <__sflush_r+0xf2>
 800beea:	690f      	ldr	r7, [r1, #16]
 800beec:	2f00      	cmp	r7, #0
 800beee:	d0f6      	beq.n	800bede <__sflush_r+0xae>
 800bef0:	0793      	lsls	r3, r2, #30
 800bef2:	680e      	ldr	r6, [r1, #0]
 800bef4:	bf08      	it	eq
 800bef6:	694b      	ldreq	r3, [r1, #20]
 800bef8:	600f      	str	r7, [r1, #0]
 800befa:	bf18      	it	ne
 800befc:	2300      	movne	r3, #0
 800befe:	eba6 0807 	sub.w	r8, r6, r7
 800bf02:	608b      	str	r3, [r1, #8]
 800bf04:	f1b8 0f00 	cmp.w	r8, #0
 800bf08:	dde9      	ble.n	800bede <__sflush_r+0xae>
 800bf0a:	6a21      	ldr	r1, [r4, #32]
 800bf0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf0e:	4643      	mov	r3, r8
 800bf10:	463a      	mov	r2, r7
 800bf12:	4628      	mov	r0, r5
 800bf14:	47b0      	blx	r6
 800bf16:	2800      	cmp	r0, #0
 800bf18:	dc08      	bgt.n	800bf2c <__sflush_r+0xfc>
 800bf1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf22:	81a3      	strh	r3, [r4, #12]
 800bf24:	f04f 30ff 	mov.w	r0, #4294967295
 800bf28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf2c:	4407      	add	r7, r0
 800bf2e:	eba8 0800 	sub.w	r8, r8, r0
 800bf32:	e7e7      	b.n	800bf04 <__sflush_r+0xd4>
 800bf34:	20400001 	.word	0x20400001

0800bf38 <_fflush_r>:
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	690b      	ldr	r3, [r1, #16]
 800bf3c:	4605      	mov	r5, r0
 800bf3e:	460c      	mov	r4, r1
 800bf40:	b913      	cbnz	r3, 800bf48 <_fflush_r+0x10>
 800bf42:	2500      	movs	r5, #0
 800bf44:	4628      	mov	r0, r5
 800bf46:	bd38      	pop	{r3, r4, r5, pc}
 800bf48:	b118      	cbz	r0, 800bf52 <_fflush_r+0x1a>
 800bf4a:	6a03      	ldr	r3, [r0, #32]
 800bf4c:	b90b      	cbnz	r3, 800bf52 <_fflush_r+0x1a>
 800bf4e:	f7fe f95b 	bl	800a208 <__sinit>
 800bf52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d0f3      	beq.n	800bf42 <_fflush_r+0xa>
 800bf5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf5c:	07d0      	lsls	r0, r2, #31
 800bf5e:	d404      	bmi.n	800bf6a <_fflush_r+0x32>
 800bf60:	0599      	lsls	r1, r3, #22
 800bf62:	d402      	bmi.n	800bf6a <_fflush_r+0x32>
 800bf64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf66:	f7fe fb4a 	bl	800a5fe <__retarget_lock_acquire_recursive>
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	4621      	mov	r1, r4
 800bf6e:	f7ff ff5f 	bl	800be30 <__sflush_r>
 800bf72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf74:	07da      	lsls	r2, r3, #31
 800bf76:	4605      	mov	r5, r0
 800bf78:	d4e4      	bmi.n	800bf44 <_fflush_r+0xc>
 800bf7a:	89a3      	ldrh	r3, [r4, #12]
 800bf7c:	059b      	lsls	r3, r3, #22
 800bf7e:	d4e1      	bmi.n	800bf44 <_fflush_r+0xc>
 800bf80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf82:	f7fe fb3d 	bl	800a600 <__retarget_lock_release_recursive>
 800bf86:	e7dd      	b.n	800bf44 <_fflush_r+0xc>

0800bf88 <__swhatbuf_r>:
 800bf88:	b570      	push	{r4, r5, r6, lr}
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf90:	2900      	cmp	r1, #0
 800bf92:	b096      	sub	sp, #88	@ 0x58
 800bf94:	4615      	mov	r5, r2
 800bf96:	461e      	mov	r6, r3
 800bf98:	da0d      	bge.n	800bfb6 <__swhatbuf_r+0x2e>
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bfa0:	f04f 0100 	mov.w	r1, #0
 800bfa4:	bf14      	ite	ne
 800bfa6:	2340      	movne	r3, #64	@ 0x40
 800bfa8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bfac:	2000      	movs	r0, #0
 800bfae:	6031      	str	r1, [r6, #0]
 800bfb0:	602b      	str	r3, [r5, #0]
 800bfb2:	b016      	add	sp, #88	@ 0x58
 800bfb4:	bd70      	pop	{r4, r5, r6, pc}
 800bfb6:	466a      	mov	r2, sp
 800bfb8:	f000 f848 	bl	800c04c <_fstat_r>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	dbec      	blt.n	800bf9a <__swhatbuf_r+0x12>
 800bfc0:	9901      	ldr	r1, [sp, #4]
 800bfc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bfc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bfca:	4259      	negs	r1, r3
 800bfcc:	4159      	adcs	r1, r3
 800bfce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bfd2:	e7eb      	b.n	800bfac <__swhatbuf_r+0x24>

0800bfd4 <__smakebuf_r>:
 800bfd4:	898b      	ldrh	r3, [r1, #12]
 800bfd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfd8:	079d      	lsls	r5, r3, #30
 800bfda:	4606      	mov	r6, r0
 800bfdc:	460c      	mov	r4, r1
 800bfde:	d507      	bpl.n	800bff0 <__smakebuf_r+0x1c>
 800bfe0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bfe4:	6023      	str	r3, [r4, #0]
 800bfe6:	6123      	str	r3, [r4, #16]
 800bfe8:	2301      	movs	r3, #1
 800bfea:	6163      	str	r3, [r4, #20]
 800bfec:	b003      	add	sp, #12
 800bfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bff0:	ab01      	add	r3, sp, #4
 800bff2:	466a      	mov	r2, sp
 800bff4:	f7ff ffc8 	bl	800bf88 <__swhatbuf_r>
 800bff8:	9f00      	ldr	r7, [sp, #0]
 800bffa:	4605      	mov	r5, r0
 800bffc:	4639      	mov	r1, r7
 800bffe:	4630      	mov	r0, r6
 800c000:	f7ff f9ce 	bl	800b3a0 <_malloc_r>
 800c004:	b948      	cbnz	r0, 800c01a <__smakebuf_r+0x46>
 800c006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c00a:	059a      	lsls	r2, r3, #22
 800c00c:	d4ee      	bmi.n	800bfec <__smakebuf_r+0x18>
 800c00e:	f023 0303 	bic.w	r3, r3, #3
 800c012:	f043 0302 	orr.w	r3, r3, #2
 800c016:	81a3      	strh	r3, [r4, #12]
 800c018:	e7e2      	b.n	800bfe0 <__smakebuf_r+0xc>
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	6020      	str	r0, [r4, #0]
 800c01e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c022:	81a3      	strh	r3, [r4, #12]
 800c024:	9b01      	ldr	r3, [sp, #4]
 800c026:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c02a:	b15b      	cbz	r3, 800c044 <__smakebuf_r+0x70>
 800c02c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c030:	4630      	mov	r0, r6
 800c032:	f000 f81d 	bl	800c070 <_isatty_r>
 800c036:	b128      	cbz	r0, 800c044 <__smakebuf_r+0x70>
 800c038:	89a3      	ldrh	r3, [r4, #12]
 800c03a:	f023 0303 	bic.w	r3, r3, #3
 800c03e:	f043 0301 	orr.w	r3, r3, #1
 800c042:	81a3      	strh	r3, [r4, #12]
 800c044:	89a3      	ldrh	r3, [r4, #12]
 800c046:	431d      	orrs	r5, r3
 800c048:	81a5      	strh	r5, [r4, #12]
 800c04a:	e7cf      	b.n	800bfec <__smakebuf_r+0x18>

0800c04c <_fstat_r>:
 800c04c:	b538      	push	{r3, r4, r5, lr}
 800c04e:	4d07      	ldr	r5, [pc, #28]	@ (800c06c <_fstat_r+0x20>)
 800c050:	2300      	movs	r3, #0
 800c052:	4604      	mov	r4, r0
 800c054:	4608      	mov	r0, r1
 800c056:	4611      	mov	r1, r2
 800c058:	602b      	str	r3, [r5, #0]
 800c05a:	f7f6 f831 	bl	80020c0 <_fstat>
 800c05e:	1c43      	adds	r3, r0, #1
 800c060:	d102      	bne.n	800c068 <_fstat_r+0x1c>
 800c062:	682b      	ldr	r3, [r5, #0]
 800c064:	b103      	cbz	r3, 800c068 <_fstat_r+0x1c>
 800c066:	6023      	str	r3, [r4, #0]
 800c068:	bd38      	pop	{r3, r4, r5, pc}
 800c06a:	bf00      	nop
 800c06c:	20000774 	.word	0x20000774

0800c070 <_isatty_r>:
 800c070:	b538      	push	{r3, r4, r5, lr}
 800c072:	4d06      	ldr	r5, [pc, #24]	@ (800c08c <_isatty_r+0x1c>)
 800c074:	2300      	movs	r3, #0
 800c076:	4604      	mov	r4, r0
 800c078:	4608      	mov	r0, r1
 800c07a:	602b      	str	r3, [r5, #0]
 800c07c:	f7f6 f830 	bl	80020e0 <_isatty>
 800c080:	1c43      	adds	r3, r0, #1
 800c082:	d102      	bne.n	800c08a <_isatty_r+0x1a>
 800c084:	682b      	ldr	r3, [r5, #0]
 800c086:	b103      	cbz	r3, 800c08a <_isatty_r+0x1a>
 800c088:	6023      	str	r3, [r4, #0]
 800c08a:	bd38      	pop	{r3, r4, r5, pc}
 800c08c:	20000774 	.word	0x20000774

0800c090 <_sbrk_r>:
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	4d06      	ldr	r5, [pc, #24]	@ (800c0ac <_sbrk_r+0x1c>)
 800c094:	2300      	movs	r3, #0
 800c096:	4604      	mov	r4, r0
 800c098:	4608      	mov	r0, r1
 800c09a:	602b      	str	r3, [r5, #0]
 800c09c:	f7f6 f838 	bl	8002110 <_sbrk>
 800c0a0:	1c43      	adds	r3, r0, #1
 800c0a2:	d102      	bne.n	800c0aa <_sbrk_r+0x1a>
 800c0a4:	682b      	ldr	r3, [r5, #0]
 800c0a6:	b103      	cbz	r3, 800c0aa <_sbrk_r+0x1a>
 800c0a8:	6023      	str	r3, [r4, #0]
 800c0aa:	bd38      	pop	{r3, r4, r5, pc}
 800c0ac:	20000774 	.word	0x20000774

0800c0b0 <memcpy>:
 800c0b0:	440a      	add	r2, r1
 800c0b2:	4291      	cmp	r1, r2
 800c0b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0b8:	d100      	bne.n	800c0bc <memcpy+0xc>
 800c0ba:	4770      	bx	lr
 800c0bc:	b510      	push	{r4, lr}
 800c0be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0c6:	4291      	cmp	r1, r2
 800c0c8:	d1f9      	bne.n	800c0be <memcpy+0xe>
 800c0ca:	bd10      	pop	{r4, pc}

0800c0cc <__assert_func>:
 800c0cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0ce:	4614      	mov	r4, r2
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	4b09      	ldr	r3, [pc, #36]	@ (800c0f8 <__assert_func+0x2c>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	68d8      	ldr	r0, [r3, #12]
 800c0da:	b14c      	cbz	r4, 800c0f0 <__assert_func+0x24>
 800c0dc:	4b07      	ldr	r3, [pc, #28]	@ (800c0fc <__assert_func+0x30>)
 800c0de:	9100      	str	r1, [sp, #0]
 800c0e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0e4:	4906      	ldr	r1, [pc, #24]	@ (800c100 <__assert_func+0x34>)
 800c0e6:	462b      	mov	r3, r5
 800c0e8:	f000 f842 	bl	800c170 <fiprintf>
 800c0ec:	f000 f852 	bl	800c194 <abort>
 800c0f0:	4b04      	ldr	r3, [pc, #16]	@ (800c104 <__assert_func+0x38>)
 800c0f2:	461c      	mov	r4, r3
 800c0f4:	e7f3      	b.n	800c0de <__assert_func+0x12>
 800c0f6:	bf00      	nop
 800c0f8:	20000018 	.word	0x20000018
 800c0fc:	0800c6b9 	.word	0x0800c6b9
 800c100:	0800c6c6 	.word	0x0800c6c6
 800c104:	0800c6f4 	.word	0x0800c6f4

0800c108 <_calloc_r>:
 800c108:	b570      	push	{r4, r5, r6, lr}
 800c10a:	fba1 5402 	umull	r5, r4, r1, r2
 800c10e:	b934      	cbnz	r4, 800c11e <_calloc_r+0x16>
 800c110:	4629      	mov	r1, r5
 800c112:	f7ff f945 	bl	800b3a0 <_malloc_r>
 800c116:	4606      	mov	r6, r0
 800c118:	b928      	cbnz	r0, 800c126 <_calloc_r+0x1e>
 800c11a:	4630      	mov	r0, r6
 800c11c:	bd70      	pop	{r4, r5, r6, pc}
 800c11e:	220c      	movs	r2, #12
 800c120:	6002      	str	r2, [r0, #0]
 800c122:	2600      	movs	r6, #0
 800c124:	e7f9      	b.n	800c11a <_calloc_r+0x12>
 800c126:	462a      	mov	r2, r5
 800c128:	4621      	mov	r1, r4
 800c12a:	f7fe f9eb 	bl	800a504 <memset>
 800c12e:	e7f4      	b.n	800c11a <_calloc_r+0x12>

0800c130 <__ascii_mbtowc>:
 800c130:	b082      	sub	sp, #8
 800c132:	b901      	cbnz	r1, 800c136 <__ascii_mbtowc+0x6>
 800c134:	a901      	add	r1, sp, #4
 800c136:	b142      	cbz	r2, 800c14a <__ascii_mbtowc+0x1a>
 800c138:	b14b      	cbz	r3, 800c14e <__ascii_mbtowc+0x1e>
 800c13a:	7813      	ldrb	r3, [r2, #0]
 800c13c:	600b      	str	r3, [r1, #0]
 800c13e:	7812      	ldrb	r2, [r2, #0]
 800c140:	1e10      	subs	r0, r2, #0
 800c142:	bf18      	it	ne
 800c144:	2001      	movne	r0, #1
 800c146:	b002      	add	sp, #8
 800c148:	4770      	bx	lr
 800c14a:	4610      	mov	r0, r2
 800c14c:	e7fb      	b.n	800c146 <__ascii_mbtowc+0x16>
 800c14e:	f06f 0001 	mvn.w	r0, #1
 800c152:	e7f8      	b.n	800c146 <__ascii_mbtowc+0x16>

0800c154 <__ascii_wctomb>:
 800c154:	4603      	mov	r3, r0
 800c156:	4608      	mov	r0, r1
 800c158:	b141      	cbz	r1, 800c16c <__ascii_wctomb+0x18>
 800c15a:	2aff      	cmp	r2, #255	@ 0xff
 800c15c:	d904      	bls.n	800c168 <__ascii_wctomb+0x14>
 800c15e:	228a      	movs	r2, #138	@ 0x8a
 800c160:	601a      	str	r2, [r3, #0]
 800c162:	f04f 30ff 	mov.w	r0, #4294967295
 800c166:	4770      	bx	lr
 800c168:	700a      	strb	r2, [r1, #0]
 800c16a:	2001      	movs	r0, #1
 800c16c:	4770      	bx	lr
	...

0800c170 <fiprintf>:
 800c170:	b40e      	push	{r1, r2, r3}
 800c172:	b503      	push	{r0, r1, lr}
 800c174:	4601      	mov	r1, r0
 800c176:	ab03      	add	r3, sp, #12
 800c178:	4805      	ldr	r0, [pc, #20]	@ (800c190 <fiprintf+0x20>)
 800c17a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c17e:	6800      	ldr	r0, [r0, #0]
 800c180:	9301      	str	r3, [sp, #4]
 800c182:	f7ff fd3d 	bl	800bc00 <_vfiprintf_r>
 800c186:	b002      	add	sp, #8
 800c188:	f85d eb04 	ldr.w	lr, [sp], #4
 800c18c:	b003      	add	sp, #12
 800c18e:	4770      	bx	lr
 800c190:	20000018 	.word	0x20000018

0800c194 <abort>:
 800c194:	b508      	push	{r3, lr}
 800c196:	2006      	movs	r0, #6
 800c198:	f000 f82c 	bl	800c1f4 <raise>
 800c19c:	2001      	movs	r0, #1
 800c19e:	f7f5 ff3f 	bl	8002020 <_exit>

0800c1a2 <_raise_r>:
 800c1a2:	291f      	cmp	r1, #31
 800c1a4:	b538      	push	{r3, r4, r5, lr}
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	460c      	mov	r4, r1
 800c1aa:	d904      	bls.n	800c1b6 <_raise_r+0x14>
 800c1ac:	2316      	movs	r3, #22
 800c1ae:	6003      	str	r3, [r0, #0]
 800c1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b4:	bd38      	pop	{r3, r4, r5, pc}
 800c1b6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c1b8:	b112      	cbz	r2, 800c1c0 <_raise_r+0x1e>
 800c1ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1be:	b94b      	cbnz	r3, 800c1d4 <_raise_r+0x32>
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	f000 f831 	bl	800c228 <_getpid_r>
 800c1c6:	4622      	mov	r2, r4
 800c1c8:	4601      	mov	r1, r0
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1d0:	f000 b818 	b.w	800c204 <_kill_r>
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d00a      	beq.n	800c1ee <_raise_r+0x4c>
 800c1d8:	1c59      	adds	r1, r3, #1
 800c1da:	d103      	bne.n	800c1e4 <_raise_r+0x42>
 800c1dc:	2316      	movs	r3, #22
 800c1de:	6003      	str	r3, [r0, #0]
 800c1e0:	2001      	movs	r0, #1
 800c1e2:	e7e7      	b.n	800c1b4 <_raise_r+0x12>
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	4798      	blx	r3
 800c1ee:	2000      	movs	r0, #0
 800c1f0:	e7e0      	b.n	800c1b4 <_raise_r+0x12>
	...

0800c1f4 <raise>:
 800c1f4:	4b02      	ldr	r3, [pc, #8]	@ (800c200 <raise+0xc>)
 800c1f6:	4601      	mov	r1, r0
 800c1f8:	6818      	ldr	r0, [r3, #0]
 800c1fa:	f7ff bfd2 	b.w	800c1a2 <_raise_r>
 800c1fe:	bf00      	nop
 800c200:	20000018 	.word	0x20000018

0800c204 <_kill_r>:
 800c204:	b538      	push	{r3, r4, r5, lr}
 800c206:	4d07      	ldr	r5, [pc, #28]	@ (800c224 <_kill_r+0x20>)
 800c208:	2300      	movs	r3, #0
 800c20a:	4604      	mov	r4, r0
 800c20c:	4608      	mov	r0, r1
 800c20e:	4611      	mov	r1, r2
 800c210:	602b      	str	r3, [r5, #0]
 800c212:	f7f5 fef5 	bl	8002000 <_kill>
 800c216:	1c43      	adds	r3, r0, #1
 800c218:	d102      	bne.n	800c220 <_kill_r+0x1c>
 800c21a:	682b      	ldr	r3, [r5, #0]
 800c21c:	b103      	cbz	r3, 800c220 <_kill_r+0x1c>
 800c21e:	6023      	str	r3, [r4, #0]
 800c220:	bd38      	pop	{r3, r4, r5, pc}
 800c222:	bf00      	nop
 800c224:	20000774 	.word	0x20000774

0800c228 <_getpid_r>:
 800c228:	f7f5 bee2 	b.w	8001ff0 <_getpid>

0800c22c <_init>:
 800c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22e:	bf00      	nop
 800c230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c232:	bc08      	pop	{r3}
 800c234:	469e      	mov	lr, r3
 800c236:	4770      	bx	lr

0800c238 <_fini>:
 800c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23a:	bf00      	nop
 800c23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c23e:	bc08      	pop	{r3}
 800c240:	469e      	mov	lr, r3
 800c242:	4770      	bx	lr
