
LoRa_SX1278_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071a4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08007374  08007374  00008374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007488  08007488  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007488  08007488  00008488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007490  08007490  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007490  08007490  00008490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007494  08007494  00008494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007498  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000068  08007500  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08007500  0000948c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eec4  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002498  00000000  00000000  00017f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0001a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090b  00000000  00000000  0001afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002730f  00000000  00000000  0001b8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010551  00000000  00000000  00042bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec9af  00000000  00000000  0005313b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013faea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038bc  00000000  00000000  0013fb30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001433ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800735c 	.word	0x0800735c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	0800735c 	.word	0x0800735c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <CS_LOW>:

/* temporary buffer for DMA transmit (addr + payload) */
static uint8_t lora_tx_buf[256 + 1]; /* support up to 256 payload (SX1278 max 255) */

/* helper: set NSS low/high */
static inline void CS_LOW(void)  { HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); }
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	2200      	movs	r2, #0
 80005f2:	2101      	movs	r1, #1
 80005f4:	4802      	ldr	r0, [pc, #8]	@ (8000600 <CS_LOW+0x14>)
 80005f6:	f002 faef 	bl	8002bd8 <HAL_GPIO_WritePin>
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40022000 	.word	0x40022000

08000604 <CS_HIGH>:
static inline void CS_HIGH(void) { HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);   }
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
 8000608:	2201      	movs	r2, #1
 800060a:	2101      	movs	r1, #1
 800060c:	4802      	ldr	r0, [pc, #8]	@ (8000618 <CS_HIGH+0x14>)
 800060e:	f002 fae3 	bl	8002bd8 <HAL_GPIO_WritePin>
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40022000 	.word	0x40022000

0800061c <LoRa_singleWrite>:

/* low-level read/write SPI (blocking) */
static int LoRa_singleWrite(uint8_t addr, uint8_t value)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	460a      	mov	r2, r1
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	4613      	mov	r3, r2
 800062a:	71bb      	strb	r3, [r7, #6]
    uint8_t tx[2];
    tx[0] = addr | 0x80; /* write: MSB=1 */
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000632:	b2db      	uxtb	r3, r3
 8000634:	733b      	strb	r3, [r7, #12]
    tx[1] = value;
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	737b      	strb	r3, [r7, #13]
    CS_LOW();
 800063a:	f7ff ffd7 	bl	80005ec <CS_LOW>
    if (HAL_SPI_Transmit(&hspi2, tx, 2, 100) != HAL_OK) { CS_HIGH(); return -1; }
 800063e:	f107 010c 	add.w	r1, r7, #12
 8000642:	2364      	movs	r3, #100	@ 0x64
 8000644:	2202      	movs	r2, #2
 8000646:	4809      	ldr	r0, [pc, #36]	@ (800066c <LoRa_singleWrite+0x50>)
 8000648:	f003 fc7d 	bl	8003f46 <HAL_SPI_Transmit>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d004      	beq.n	800065c <LoRa_singleWrite+0x40>
 8000652:	f7ff ffd7 	bl	8000604 <CS_HIGH>
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	e002      	b.n	8000662 <LoRa_singleWrite+0x46>
    CS_HIGH();
 800065c:	f7ff ffd2 	bl	8000604 <CS_HIGH>
    return 0;
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000018c 	.word	0x2000018c

08000670 <LoRa_singleRead>:

static int LoRa_singleRead(uint8_t addr, uint8_t *value)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F; /* read: MSB=0 */
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000682:	b2db      	uxtb	r3, r3
 8000684:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	73bb      	strb	r3, [r7, #14]
    CS_LOW();
 800068a:	f7ff ffaf 	bl	80005ec <CS_LOW>
    if (HAL_SPI_Transmit(&hspi2, &tx, 1, 100) != HAL_OK) { CS_HIGH(); return -1; }
 800068e:	f107 010f 	add.w	r1, r7, #15
 8000692:	2364      	movs	r3, #100	@ 0x64
 8000694:	2201      	movs	r2, #1
 8000696:	4812      	ldr	r0, [pc, #72]	@ (80006e0 <LoRa_singleRead+0x70>)
 8000698:	f003 fc55 	bl	8003f46 <HAL_SPI_Transmit>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d004      	beq.n	80006ac <LoRa_singleRead+0x3c>
 80006a2:	f7ff ffaf 	bl	8000604 <CS_HIGH>
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	e014      	b.n	80006d6 <LoRa_singleRead+0x66>
    if (HAL_SPI_Receive(&hspi2, &rx, 1, 100) != HAL_OK) { CS_HIGH(); return -1; }
 80006ac:	f107 010e 	add.w	r1, r7, #14
 80006b0:	2364      	movs	r3, #100	@ 0x64
 80006b2:	2201      	movs	r2, #1
 80006b4:	480a      	ldr	r0, [pc, #40]	@ (80006e0 <LoRa_singleRead+0x70>)
 80006b6:	f003 fdbc 	bl	8004232 <HAL_SPI_Receive>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d004      	beq.n	80006ca <LoRa_singleRead+0x5a>
 80006c0:	f7ff ffa0 	bl	8000604 <CS_HIGH>
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	e005      	b.n	80006d6 <LoRa_singleRead+0x66>
    CS_HIGH();
 80006ca:	f7ff ff9b 	bl	8000604 <CS_HIGH>
    *value = rx;
 80006ce:	7bba      	ldrb	r2, [r7, #14]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	701a      	strb	r2, [r3, #0]
    return 0;
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000018c 	.word	0x2000018c

080006e4 <LoRa_readBurst>:

/* block read N bytes from reg (addr is FIFO or reg address) */
static int LoRa_readBurst(uint8_t addr, uint8_t *dst, uint16_t len)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	80bb      	strh	r3, [r7, #4]
    uint8_t a = addr & 0x7F;
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	73fb      	strb	r3, [r7, #15]
    CS_LOW();
 80006fe:	f7ff ff75 	bl	80005ec <CS_LOW>
    if (HAL_SPI_Transmit(&hspi2, &a, 1, 50) != HAL_OK) { CS_HIGH(); return -1; }
 8000702:	f107 010f 	add.w	r1, r7, #15
 8000706:	2332      	movs	r3, #50	@ 0x32
 8000708:	2201      	movs	r2, #1
 800070a:	4810      	ldr	r0, [pc, #64]	@ (800074c <LoRa_readBurst+0x68>)
 800070c:	f003 fc1b 	bl	8003f46 <HAL_SPI_Transmit>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d004      	beq.n	8000720 <LoRa_readBurst+0x3c>
 8000716:	f7ff ff75 	bl	8000604 <CS_HIGH>
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	e010      	b.n	8000742 <LoRa_readBurst+0x5e>
    if (HAL_SPI_Receive(&hspi2, dst, len, 200) != HAL_OK) { CS_HIGH(); return -1; }
 8000720:	88ba      	ldrh	r2, [r7, #4]
 8000722:	23c8      	movs	r3, #200	@ 0xc8
 8000724:	6839      	ldr	r1, [r7, #0]
 8000726:	4809      	ldr	r0, [pc, #36]	@ (800074c <LoRa_readBurst+0x68>)
 8000728:	f003 fd83 	bl	8004232 <HAL_SPI_Receive>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d004      	beq.n	800073c <LoRa_readBurst+0x58>
 8000732:	f7ff ff67 	bl	8000604 <CS_HIGH>
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	e002      	b.n	8000742 <LoRa_readBurst+0x5e>
    CS_HIGH();
 800073c:	f7ff ff62 	bl	8000604 <CS_HIGH>
    return 0;
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000018c 	.word	0x2000018c

08000750 <LoRa_writeBurst_DMA>:

/* block write N bytes to reg (addr is FIFO or reg address) using HAL_SPI_Transmit_DMA */
static int LoRa_writeBurst_DMA(uint8_t addr, const uint8_t *src, uint16_t len)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	4613      	mov	r3, r2
 800075e:	80bb      	strh	r3, [r7, #4]
    if (len + 1 > sizeof(lora_tx_buf)) return -2;
 8000760:	88bb      	ldrh	r3, [r7, #4]
 8000762:	3301      	adds	r3, #1
 8000764:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000768:	d302      	bcc.n	8000770 <LoRa_writeBurst_DMA+0x20>
 800076a:	f06f 0301 	mvn.w	r3, #1
 800076e:	e03a      	b.n	80007e6 <LoRa_writeBurst_DMA+0x96>
    /* prepare buffer: [addr|0x80] [data...] */
    lora_tx_buf[0] = addr | 0x80;
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <LoRa_writeBurst_DMA+0xa0>)
 800077a:	701a      	strb	r2, [r3, #0]
    memcpy(&lora_tx_buf[1], src, len);
 800077c:	88bb      	ldrh	r3, [r7, #4]
 800077e:	461a      	mov	r2, r3
 8000780:	6839      	ldr	r1, [r7, #0]
 8000782:	481c      	ldr	r0, [pc, #112]	@ (80007f4 <LoRa_writeBurst_DMA+0xa4>)
 8000784:	f005 ff2d 	bl	80065e2 <memcpy>

    tx_done = 0;
 8000788:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <LoRa_writeBurst_DMA+0xa8>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
    CS_LOW();
 800078e:	f7ff ff2d 	bl	80005ec <CS_LOW>
    /* transmit (addr + data) via DMA */
    if (HAL_SPI_Transmit_DMA(&hspi2, lora_tx_buf, len + 1) != HAL_OK)
 8000792:	88bb      	ldrh	r3, [r7, #4]
 8000794:	3301      	adds	r3, #1
 8000796:	b29b      	uxth	r3, r3
 8000798:	461a      	mov	r2, r3
 800079a:	4915      	ldr	r1, [pc, #84]	@ (80007f0 <LoRa_writeBurst_DMA+0xa0>)
 800079c:	4817      	ldr	r0, [pc, #92]	@ (80007fc <LoRa_writeBurst_DMA+0xac>)
 800079e:	f004 f89f 	bl	80048e0 <HAL_SPI_Transmit_DMA>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d004      	beq.n	80007b2 <LoRa_writeBurst_DMA+0x62>
    {
        CS_HIGH();
 80007a8:	f7ff ff2c 	bl	8000604 <CS_HIGH>
        return -1;
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295
 80007b0:	e019      	b.n	80007e6 <LoRa_writeBurst_DMA+0x96>
    }
    /* Wait (blocking) for completion or timeout; you can change to non-blocking if using RTOS */
    uint32_t t0 = HAL_GetTick();
 80007b2:	f001 fb19 	bl	8001de8 <HAL_GetTick>
 80007b6:	60f8      	str	r0, [r7, #12]
    while (!tx_done)
 80007b8:	e00f      	b.n	80007da <LoRa_writeBurst_DMA+0x8a>
    {
        if ((HAL_GetTick() - t0) > 2000) /* 2s timeout */
 80007ba:	f001 fb15 	bl	8001de8 <HAL_GetTick>
 80007be:	4602      	mov	r2, r0
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80007c8:	d907      	bls.n	80007da <LoRa_writeBurst_DMA+0x8a>
        {
            /* abort DMA */
            HAL_SPI_Abort(&hspi2);
 80007ca:	480c      	ldr	r0, [pc, #48]	@ (80007fc <LoRa_writeBurst_DMA+0xac>)
 80007cc:	f004 f976 	bl	8004abc <HAL_SPI_Abort>
            CS_HIGH();
 80007d0:	f7ff ff18 	bl	8000604 <CS_HIGH>
            return -2;
 80007d4:	f06f 0301 	mvn.w	r3, #1
 80007d8:	e005      	b.n	80007e6 <LoRa_writeBurst_DMA+0x96>
    while (!tx_done)
 80007da:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <LoRa_writeBurst_DMA+0xa8>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0ea      	beq.n	80007ba <LoRa_writeBurst_DMA+0x6a>
        }
    }
    /* CS_HIGH is set in callback */
    return 0;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000088 	.word	0x20000088
 80007f4:	20000089 	.word	0x20000089
 80007f8:	20000084 	.word	0x20000084
 80007fc:	2000018c 	.word	0x2000018c

08000800 <LoRa_SPI_TxCplt_Callback>:

/* exported callback (to be called from application HAL_SPI_TxCpltCallback) */
void LoRa_SPI_TxCplt_Callback(SPI_HandleTypeDef *hspi)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    /* ensure this is the SPI we used */
    if (hspi == &hspi2)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a06      	ldr	r2, [pc, #24]	@ (8000824 <LoRa_SPI_TxCplt_Callback+0x24>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d104      	bne.n	800081a <LoRa_SPI_TxCplt_Callback+0x1a>
    {
        /* end of DMA transfer -> release CS and mark done */
        CS_HIGH();
 8000810:	f7ff fef8 	bl	8000604 <CS_HIGH>
        tx_done = 1;
 8000814:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <LoRa_SPI_TxCplt_Callback+0x28>)
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]
    }
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000018c 	.word	0x2000018c
 8000828:	20000084 	.word	0x20000084

0800082c <LoRa_DIO0_Callback>:

/* exported callback for DIO0 (to be called from HAL_GPIO_EXTI_Callback) */
void LoRa_DIO0_Callback(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
    /* mark rx or tx - further processing in main or LoRa_read_payload */
    uint8_t irq = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	71fb      	strb	r3, [r7, #7]
    if (LoRa_singleRead(REG_IRQ_FLAGS, &irq) == 0)
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	4619      	mov	r1, r3
 800083a:	2012      	movs	r0, #18
 800083c:	f7ff ff18 	bl	8000670 <LoRa_singleRead>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d11d      	bne.n	8000882 <LoRa_DIO0_Callback+0x56>
    {
        /* clear IRQs */
        LoRa_singleWrite(REG_IRQ_FLAGS, irq);
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	4619      	mov	r1, r3
 800084a:	2012      	movs	r0, #18
 800084c:	f7ff fee6 	bl	800061c <LoRa_singleWrite>
        if (irq & IRQ_TX_DONE_MASK) {
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <LoRa_DIO0_Callback+0x34>
            tx_done = 1;
 800085a:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <LoRa_DIO0_Callback+0x60>)
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
        }
        if (irq & IRQ_RX_DONE_MASK) {
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00b      	beq.n	8000882 <LoRa_DIO0_Callback+0x56>
            if (irq & IRQ_PAYLOAD_CRC_ERROR_MASK) rx_crc_error = 1;
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	f003 0320 	and.w	r3, r3, #32
 8000870:	2b00      	cmp	r3, #0
 8000872:	d003      	beq.n	800087c <LoRa_DIO0_Callback+0x50>
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <LoRa_DIO0_Callback+0x64>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
            else rx_done = 1;
        }
    }
}
 800087a:	e002      	b.n	8000882 <LoRa_DIO0_Callback+0x56>
            else rx_done = 1;
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <LoRa_DIO0_Callback+0x68>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000084 	.word	0x20000084
 8000890:	20000086 	.word	0x20000086
 8000894:	20000085 	.word	0x20000085

08000898 <LoRa_Init>:

/* initialize LoRa radio */
int LoRa_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b092      	sub	sp, #72	@ 0x48
 800089c:	af00      	add	r7, sp, #0
    /* reset chip */
    LoRa_Reset();
 800089e:	f000 f85f 	bl	8000960 <LoRa_Reset>
    HAL_Delay(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f001 faac 	bl	8001e00 <HAL_Delay>

    uint8_t version = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (LoRa_singleRead(REG_VERSION, &version) != 0) return -1;
 80008ae:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 80008b2:	4619      	mov	r1, r3
 80008b4:	2042      	movs	r0, #66	@ 0x42
 80008b6:	f7ff fedb 	bl	8000670 <LoRa_singleRead>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <LoRa_Init+0x2e>
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295
 80008c4:	e044      	b.n	8000950 <LoRa_Init+0xb8>
    if (version != 0x12 && version != 0x22) { /* 0x12 for SX1276/7/8; some variants different */
 80008c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80008ca:	2b12      	cmp	r3, #18
 80008cc:	d019      	beq.n	8000902 <LoRa_Init+0x6a>
 80008ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80008d2:	2b22      	cmp	r3, #34	@ 0x22
 80008d4:	d015      	beq.n	8000902 <LoRa_Init+0x6a>
        char msg[64];
        snprintf(msg, sizeof(msg), "LoRa: wrong version 0x%02X\r\n", version);
 80008d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80008da:	1d38      	adds	r0, r7, #4
 80008dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000958 <LoRa_Init+0xc0>)
 80008de:	2140      	movs	r1, #64	@ 0x40
 80008e0:	f005 fcf6 	bl	80062d0 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fc92 	bl	8000210 <strlen>
 80008ec:	4603      	mov	r3, r0
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	1d39      	adds	r1, r7, #4
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	4819      	ldr	r0, [pc, #100]	@ (800095c <LoRa_Init+0xc4>)
 80008f8:	f004 ff00 	bl	80056fc <HAL_UART_Transmit>
        return -2;
 80008fc:	f06f 0301 	mvn.w	r3, #1
 8000900:	e026      	b.n	8000950 <LoRa_Init+0xb8>
    }

    /* put in sleep to allow configuration */
    LoRa_singleWrite(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000902:	2180      	movs	r1, #128	@ 0x80
 8000904:	2001      	movs	r0, #1
 8000906:	f7ff fe89 	bl	800061c <LoRa_singleWrite>
    HAL_Delay(10);
 800090a:	200a      	movs	r0, #10
 800090c:	f001 fa78 	bl	8001e00 <HAL_Delay>

    /* set FIFO base addresses (defaults OK but set anyway) */
    LoRa_singleWrite(REG_FIFO_TX_BASE_ADDR, 0x00);
 8000910:	2100      	movs	r1, #0
 8000912:	200e      	movs	r0, #14
 8000914:	f7ff fe82 	bl	800061c <LoRa_singleWrite>
    LoRa_singleWrite(REG_FIFO_RX_BASE_ADDR, 0x00);
 8000918:	2100      	movs	r1, #0
 800091a:	200f      	movs	r0, #15
 800091c:	f7ff fe7e 	bl	800061c <LoRa_singleWrite>

    /* Modem config: bandwidth, coding rate, implicit header */
    /* Here set reasonable defaults: BW125k, CR4/5, Explicit header mode */
    LoRa_singleWrite(REG_MODEM_CONFIG1, 0x72); /* BW=125kHz, CR=4/5, Explicit */
 8000920:	2172      	movs	r1, #114	@ 0x72
 8000922:	201d      	movs	r0, #29
 8000924:	f7ff fe7a 	bl	800061c <LoRa_singleWrite>
    LoRa_singleWrite(REG_MODEM_CONFIG2, 0x74); /* SF=7, CRC on (bit2) */
 8000928:	2174      	movs	r1, #116	@ 0x74
 800092a:	201e      	movs	r0, #30
 800092c:	f7ff fe76 	bl	800061c <LoRa_singleWrite>

    /* PA config */
    LoRa_singleWrite(REG_PA_CONFIG, 0x80 | 0x70); /* PA_BOOST, OutputPower=0x7 (max) */
 8000930:	21f0      	movs	r1, #240	@ 0xf0
 8000932:	2009      	movs	r0, #9
 8000934:	f7ff fe72 	bl	800061c <LoRa_singleWrite>

    /* set DIO0 mapped to RxDone/TxDone (DIO0 = 0x00 mapping default) */
    LoRa_singleWrite(REG_DIO_MAPPING1, 0x00);
 8000938:	2100      	movs	r1, #0
 800093a:	2040      	movs	r0, #64	@ 0x40
 800093c:	f7ff fe6e 	bl	800061c <LoRa_singleWrite>

    /* set to standby */
    LoRa_singleWrite(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000940:	2181      	movs	r1, #129	@ 0x81
 8000942:	2001      	movs	r0, #1
 8000944:	f7ff fe6a 	bl	800061c <LoRa_singleWrite>
    HAL_Delay(10);
 8000948:	200a      	movs	r0, #10
 800094a:	f001 fa59 	bl	8001e00 <HAL_Delay>

    return 0;
 800094e:	2300      	movs	r3, #0
}
 8000950:	4618      	mov	r0, r3
 8000952:	3748      	adds	r7, #72	@ 0x48
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	08007374 	.word	0x08007374
 800095c:	200002b0 	.word	0x200002b0

08000960 <LoRa_Reset>:

void LoRa_Reset(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
    /* active low reset: toggle RST pin */
    HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800096a:	4808      	ldr	r0, [pc, #32]	@ (800098c <LoRa_Reset+0x2c>)
 800096c:	f002 f934 	bl	8002bd8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000970:	2005      	movs	r0, #5
 8000972:	f001 fa45 	bl	8001e00 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800097c:	4803      	ldr	r0, [pc, #12]	@ (800098c <LoRa_Reset+0x2c>)
 800097e:	f002 f92b 	bl	8002bd8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000982:	2005      	movs	r0, #5
 8000984:	f001 fa3c 	bl	8001e00 <HAL_Delay>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40020000 	.word	0x40020000

08000990 <LoRa_SetFrequency>:

/* set frequency in Hz (e.g., 433000000) */
int LoRa_SetFrequency(uint32_t freqHz)
{
 8000990:	b5b0      	push	{r4, r5, r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
    /* FRF = freq / (32e6 / 2^19) */
    uint64_t frf = ((uint64_t)freqHz << 19) / 32000000ULL;
 8000998:	6879      	ldr	r1, [r7, #4]
 800099a:	2000      	movs	r0, #0
 800099c:	460a      	mov	r2, r1
 800099e:	4603      	mov	r3, r0
 80009a0:	0b55      	lsrs	r5, r2, #13
 80009a2:	04d4      	lsls	r4, r2, #19
 80009a4:	4a25      	ldr	r2, [pc, #148]	@ (8000a3c <LoRa_SetFrequency+0xac>)
 80009a6:	f04f 0300 	mov.w	r3, #0
 80009aa:	4620      	mov	r0, r4
 80009ac:	4629      	mov	r1, r5
 80009ae:	f7ff fc87 	bl	80002c0 <__aeabi_uldivmod>
 80009b2:	4602      	mov	r2, r0
 80009b4:	460b      	mov	r3, r1
 80009b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    uint8_t frf_bytes[3];
    frf_bytes[0] = (frf >> 16) & 0xFF;
 80009ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80009be:	f04f 0200 	mov.w	r2, #0
 80009c2:	f04f 0300 	mov.w	r3, #0
 80009c6:	0c02      	lsrs	r2, r0, #16
 80009c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009cc:	0c0b      	lsrs	r3, r1, #16
 80009ce:	b2d3      	uxtb	r3, r2
 80009d0:	733b      	strb	r3, [r7, #12]
    frf_bytes[1] = (frf >> 8) & 0xFF;
 80009d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80009d6:	f04f 0200 	mov.w	r2, #0
 80009da:	f04f 0300 	mov.w	r3, #0
 80009de:	0a02      	lsrs	r2, r0, #8
 80009e0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80009e4:	0a0b      	lsrs	r3, r1, #8
 80009e6:	b2d3      	uxtb	r3, r2
 80009e8:	737b      	strb	r3, [r7, #13]
    frf_bytes[2] = frf & 0xFF;
 80009ea:	7c3b      	ldrb	r3, [r7, #16]
 80009ec:	73bb      	strb	r3, [r7, #14]
    if (LoRa_singleWrite(REG_FRF_MSB, frf_bytes[0]) != 0) return -1;
 80009ee:	7b3b      	ldrb	r3, [r7, #12]
 80009f0:	4619      	mov	r1, r3
 80009f2:	2006      	movs	r0, #6
 80009f4:	f7ff fe12 	bl	800061c <LoRa_singleWrite>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <LoRa_SetFrequency+0x74>
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	e016      	b.n	8000a32 <LoRa_SetFrequency+0xa2>
    if (LoRa_singleWrite(REG_FRF_MID, frf_bytes[1]) != 0) return -2;
 8000a04:	7b7b      	ldrb	r3, [r7, #13]
 8000a06:	4619      	mov	r1, r3
 8000a08:	2007      	movs	r0, #7
 8000a0a:	f7ff fe07 	bl	800061c <LoRa_singleWrite>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <LoRa_SetFrequency+0x8a>
 8000a14:	f06f 0301 	mvn.w	r3, #1
 8000a18:	e00b      	b.n	8000a32 <LoRa_SetFrequency+0xa2>
    if (LoRa_singleWrite(REG_FRF_LSB, frf_bytes[2]) != 0) return -3;
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	2008      	movs	r0, #8
 8000a20:	f7ff fdfc 	bl	800061c <LoRa_singleWrite>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d002      	beq.n	8000a30 <LoRa_SetFrequency+0xa0>
 8000a2a:	f06f 0302 	mvn.w	r3, #2
 8000a2e:	e000      	b.n	8000a32 <LoRa_SetFrequency+0xa2>
    return 0;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bdb0      	pop	{r4, r5, r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	01e84800 	.word	0x01e84800

08000a40 <LoRa_Transmit_DMA>:

/* Transmit payload using DMA (blocking wait with timeout for simplicity) */
/* returns 0 on success, negative on error */
int LoRa_Transmit_DMA(uint8_t *buffer, uint16_t len, uint32_t timeout_ms)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	817b      	strh	r3, [r7, #10]
    if (len == 0 || len > 255) return -1;
 8000a4e:	897b      	ldrh	r3, [r7, #10]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d002      	beq.n	8000a5a <LoRa_Transmit_DMA+0x1a>
 8000a54:	897b      	ldrh	r3, [r7, #10]
 8000a56:	2bff      	cmp	r3, #255	@ 0xff
 8000a58:	d902      	bls.n	8000a60 <LoRa_Transmit_DMA+0x20>
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	e03c      	b.n	8000ada <LoRa_Transmit_DMA+0x9a>

    tx_done = 0;
 8000a60:	4b20      	ldr	r3, [pc, #128]	@ (8000ae4 <LoRa_Transmit_DMA+0xa4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]

    /* set to standby */
    LoRa_singleWrite(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000a66:	2181      	movs	r1, #129	@ 0x81
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f7ff fdd7 	bl	800061c <LoRa_singleWrite>
    HAL_Delay(1);
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f001 f9c6 	bl	8001e00 <HAL_Delay>

    /* set FIFO addr ptr to tx base */
    LoRa_singleWrite(REG_FIFO_ADDR_PTR, 0x00);
 8000a74:	2100      	movs	r1, #0
 8000a76:	200d      	movs	r0, #13
 8000a78:	f7ff fdd0 	bl	800061c <LoRa_singleWrite>
    /* write payload to FIFO via DMA */
    if (LoRa_writeBurst_DMA(REG_FIFO, buffer, len) != 0) return -2;
 8000a7c:	897b      	ldrh	r3, [r7, #10]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	68f9      	ldr	r1, [r7, #12]
 8000a82:	2000      	movs	r0, #0
 8000a84:	f7ff fe64 	bl	8000750 <LoRa_writeBurst_DMA>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <LoRa_Transmit_DMA+0x54>
 8000a8e:	f06f 0301 	mvn.w	r3, #1
 8000a92:	e022      	b.n	8000ada <LoRa_Transmit_DMA+0x9a>

    /* set payload length */
    LoRa_singleWrite(REG_PAYLOAD_LENGTH, (uint8_t)len);
 8000a94:	897b      	ldrh	r3, [r7, #10]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4619      	mov	r1, r3
 8000a9a:	2022      	movs	r0, #34	@ 0x22
 8000a9c:	f7ff fdbe 	bl	800061c <LoRa_singleWrite>

    /* clear IRQ flags */
    LoRa_singleWrite(REG_IRQ_FLAGS, 0xFF);
 8000aa0:	21ff      	movs	r1, #255	@ 0xff
 8000aa2:	2012      	movs	r0, #18
 8000aa4:	f7ff fdba 	bl	800061c <LoRa_singleWrite>

    /* set mode to TX */
    LoRa_singleWrite(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8000aa8:	2183      	movs	r1, #131	@ 0x83
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f7ff fdb6 	bl	800061c <LoRa_singleWrite>

    /* wait for tx_done (set either by DIO0 interrupt or DMA callback) */
    uint32_t start = HAL_GetTick();
 8000ab0:	f001 f99a 	bl	8001de8 <HAL_GetTick>
 8000ab4:	6178      	str	r0, [r7, #20]
    while (!tx_done)
 8000ab6:	e00a      	b.n	8000ace <LoRa_Transmit_DMA+0x8e>
    {
        if ((HAL_GetTick() - start) > timeout_ms) {
 8000ab8:	f001 f996 	bl	8001de8 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d202      	bcs.n	8000ace <LoRa_Transmit_DMA+0x8e>
            /* timeout */
            return -3;
 8000ac8:	f06f 0302 	mvn.w	r3, #2
 8000acc:	e005      	b.n	8000ada <LoRa_Transmit_DMA+0x9a>
    while (!tx_done)
 8000ace:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <LoRa_Transmit_DMA+0xa4>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d0ef      	beq.n	8000ab8 <LoRa_Transmit_DMA+0x78>
        }
    }
    /* tx_done cleared by caller if needed */
    return 0;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000084 	.word	0x20000084

08000ae8 <LoRa_receive_ready>:

/* check if a packet is ready (set by DIO0 callback) */
int LoRa_receive_ready(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
    return rx_done && !rx_crc_error;
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <LoRa_receive_ready+0x28>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d006      	beq.n	8000b04 <LoRa_receive_ready+0x1c>
 8000af6:	4b07      	ldr	r3, [pc, #28]	@ (8000b14 <LoRa_receive_ready+0x2c>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d101      	bne.n	8000b04 <LoRa_receive_ready+0x1c>
 8000b00:	2301      	movs	r3, #1
 8000b02:	e000      	b.n	8000b06 <LoRa_receive_ready+0x1e>
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	20000085 	.word	0x20000085
 8000b14:	20000086 	.word	0x20000086

08000b18 <LoRa_read_payload>:

/* read payload into dst, return num bytes or negative on error */
int LoRa_read_payload(uint8_t *dst, uint8_t maxlen)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	70fb      	strb	r3, [r7, #3]
    if (!rx_done) return -1;
 8000b24:	4b23      	ldr	r3, [pc, #140]	@ (8000bb4 <LoRa_read_payload+0x9c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d102      	bne.n	8000b34 <LoRa_read_payload+0x1c>
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e03a      	b.n	8000baa <LoRa_read_payload+0x92>
    rx_done = 0;
 8000b34:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb4 <LoRa_read_payload+0x9c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]

    uint8_t nb = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	73fb      	strb	r3, [r7, #15]
    if (LoRa_singleRead(REG_RX_NB_BYTES, &nb) != 0) return -2;
 8000b3e:	f107 030f 	add.w	r3, r7, #15
 8000b42:	4619      	mov	r1, r3
 8000b44:	2013      	movs	r0, #19
 8000b46:	f7ff fd93 	bl	8000670 <LoRa_singleRead>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <LoRa_read_payload+0x3e>
 8000b50:	f06f 0301 	mvn.w	r3, #1
 8000b54:	e029      	b.n	8000baa <LoRa_read_payload+0x92>
    if (nb > maxlen) nb = maxlen;
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	78fa      	ldrb	r2, [r7, #3]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d201      	bcs.n	8000b62 <LoRa_read_payload+0x4a>
 8000b5e:	78fb      	ldrb	r3, [r7, #3]
 8000b60:	73fb      	strb	r3, [r7, #15]

    uint8_t cur = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	73bb      	strb	r3, [r7, #14]
    if (LoRa_singleRead(REG_FIFO_RX_CURRENT_ADDR, &cur) != 0) return -3;
 8000b66:	f107 030e 	add.w	r3, r7, #14
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fd7f 	bl	8000670 <LoRa_singleRead>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <LoRa_read_payload+0x66>
 8000b78:	f06f 0302 	mvn.w	r3, #2
 8000b7c:	e015      	b.n	8000baa <LoRa_read_payload+0x92>
    LoRa_singleWrite(REG_FIFO_ADDR_PTR, cur);
 8000b7e:	7bbb      	ldrb	r3, [r7, #14]
 8000b80:	4619      	mov	r1, r3
 8000b82:	200d      	movs	r0, #13
 8000b84:	f7ff fd4a 	bl	800061c <LoRa_singleWrite>

    if (LoRa_readBurst(REG_FIFO, dst, nb) != 0) return -4;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff fda8 	bl	80006e4 <LoRa_readBurst>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d002      	beq.n	8000ba0 <LoRa_read_payload+0x88>
 8000b9a:	f06f 0303 	mvn.w	r3, #3
 8000b9e:	e004      	b.n	8000baa <LoRa_read_payload+0x92>

    /* clear irq flags */
    LoRa_singleWrite(REG_IRQ_FLAGS, 0xFF);
 8000ba0:	21ff      	movs	r1, #255	@ 0xff
 8000ba2:	2012      	movs	r0, #18
 8000ba4:	f7ff fd3a 	bl	800061c <LoRa_singleWrite>

    return (int)nb;
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000085 	.word	0x20000085

08000bb8 <HAL_SPI_TxCpltCallback>:

/* Simple wrapper for application: must be called from HAL_SPI_TxCpltCallback */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
    /* bubble event to library */
    LoRa_SPI_TxCplt_Callback(hspi);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff fe1d 	bl	8000800 <LoRa_SPI_TxCplt_Callback>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_GPIO_EXTI_Callback>:

/* Application should call HAL_GPIO_EXTI_Callback on EXTI line; we provide a small handler */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == LORA_DIO0_Pin) {
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	d101      	bne.n	8000be2 <HAL_GPIO_EXTI_Callback+0x14>
        LoRa_DIO0_Callback();
 8000bde:	f7ff fe25 	bl	800082c <LoRa_DIO0_Callback>
    }
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <__io_putchar>:
DMA_HandleTypeDef hdma_spi2_tx;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
int __io_putchar(int ch){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	uint8_t c = (uint8_t)ch;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, HAL_MAX_DELAY);
 8000bfa:	f107 010f 	add.w	r1, r7, #15
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	2201      	movs	r2, #1
 8000c04:	4803      	ldr	r0, [pc, #12]	@ (8000c14 <__io_putchar+0x28>)
 8000c06:	f004 fd79 	bl	80056fc <HAL_UART_Transmit>
	return ch;
 8000c0a:	687b      	ldr	r3, [r7, #4]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200002b0 	.word	0x200002b0

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0c2      	sub	sp, #264	@ 0x108
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1e:	f001 f892 	bl	8001d46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c22:	f000 f87d 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c26:	f000 f97d 	bl	8000f24 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2a:	f000 f955 	bl	8000ed8 <MX_DMA_Init>
  MX_SPI2_Init();
 8000c2e:	f000 f8e5 	bl	8000dfc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000c32:	f000 f921 	bl	8000e78 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("LoRa DMA test starting...\r\n");
 8000c36:	4830      	ldr	r0, [pc, #192]	@ (8000cf8 <main+0xe0>)
 8000c38:	f005 fb42 	bl	80062c0 <puts>
  /* ensure CS high idle */
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2101      	movs	r1, #1
 8000c40:	482e      	ldr	r0, [pc, #184]	@ (8000cfc <main+0xe4>)
 8000c42:	f001 ffc9 	bl	8002bd8 <HAL_GPIO_WritePin>
  /* ensure RST high */
  HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c4c:	482c      	ldr	r0, [pc, #176]	@ (8000d00 <main+0xe8>)
 8000c4e:	f001 ffc3 	bl	8002bd8 <HAL_GPIO_WritePin>

  if (LoRa_Init() != 0) {
 8000c52:	f7ff fe21 	bl	8000898 <LoRa_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d007      	beq.n	8000c6c <main+0x54>
	  printf("LoRa init failed\r\n");
 8000c5c:	4829      	ldr	r0, [pc, #164]	@ (8000d04 <main+0xec>)
 8000c5e:	f005 fb2f 	bl	80062c0 <puts>
	  while (1) { HAL_Delay(1000); }
 8000c62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c66:	f001 f8cb 	bl	8001e00 <HAL_Delay>
 8000c6a:	e7fa      	b.n	8000c62 <main+0x4a>
  }
  printf("LoRa init OK\r\n");
 8000c6c:	4826      	ldr	r0, [pc, #152]	@ (8000d08 <main+0xf0>)
 8000c6e:	f005 fb27 	bl	80062c0 <puts>

  LoRa_SetFrequency(433000000); /* 433 MHz */
 8000c72:	4826      	ldr	r0, [pc, #152]	@ (8000d0c <main+0xf4>)
 8000c74:	f7ff fe8c 	bl	8000990 <LoRa_SetFrequency>

  /* Prepare demo payload */
  uint8_t payload[] = "G";
 8000c78:	2347      	movs	r3, #71	@ 0x47
 8000c7a:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
  if (LoRa_Transmit_DMA(payload, 1, 3000) == 0) {
 8000c7e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c82:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000c86:	2101      	movs	r1, #1
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fed9 	bl	8000a40 <LoRa_Transmit_DMA>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d103      	bne.n	8000c9c <main+0x84>
	  printf("Transmitted 'G' OK\r\n");
 8000c94:	481e      	ldr	r0, [pc, #120]	@ (8000d10 <main+0xf8>)
 8000c96:	f005 fb13 	bl	80062c0 <puts>
 8000c9a:	e002      	b.n	8000ca2 <main+0x8a>
  } else {
	  printf("Transmission failed\r\n");
 8000c9c:	481d      	ldr	r0, [pc, #116]	@ (8000d14 <main+0xfc>)
 8000c9e:	f005 fb0f 	bl	80062c0 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (LoRa_receive_ready()) {
 8000ca2:	f7ff ff21 	bl	8000ae8 <LoRa_receive_ready>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d020      	beq.n	8000cee <main+0xd6>
		  int r = LoRa_read_payload(rxbuf, (uint8_t)sizeof(rxbuf));
 8000cac:	463b      	mov	r3, r7
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff31 	bl	8000b18 <LoRa_read_payload>
 8000cb6:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
		  if (r > 0) {
 8000cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	dd10      	ble.n	8000ce4 <main+0xcc>
			  rxbuf[r] = 0;
 8000cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000cc6:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8000cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000cce:	4413      	add	r3, r2
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
			  printf("Received %d bytes: '%s'\r\n", r, rxbuf);
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8000cdc:	480e      	ldr	r0, [pc, #56]	@ (8000d18 <main+0x100>)
 8000cde:	f005 fa87 	bl	80061f0 <iprintf>
 8000ce2:	e004      	b.n	8000cee <main+0xd6>
		  } else {
			  printf("Read payload error %d\r\n", r);
 8000ce4:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8000ce8:	480c      	ldr	r0, [pc, #48]	@ (8000d1c <main+0x104>)
 8000cea:	f005 fa81 	bl	80061f0 <iprintf>
		  }
	  }
	  HAL_Delay(50);
 8000cee:	2032      	movs	r0, #50	@ 0x32
 8000cf0:	f001 f886 	bl	8001e00 <HAL_Delay>
	  if (LoRa_receive_ready()) {
 8000cf4:	e7d5      	b.n	8000ca2 <main+0x8a>
 8000cf6:	bf00      	nop
 8000cf8:	08007394 	.word	0x08007394
 8000cfc:	40022000 	.word	0x40022000
 8000d00:	40020000 	.word	0x40020000
 8000d04:	080073b0 	.word	0x080073b0
 8000d08:	080073c4 	.word	0x080073c4
 8000d0c:	19cf0e40 	.word	0x19cf0e40
 8000d10:	080073d4 	.word	0x080073d4
 8000d14:	080073e8 	.word	0x080073e8
 8000d18:	08007400 	.word	0x08007400
 8000d1c:	0800741c 	.word	0x0800741c

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b094      	sub	sp, #80	@ 0x50
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	2230      	movs	r2, #48	@ 0x30
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 fbdc 	bl	80064ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d44:	f001 ff7a 	bl	8002c3c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d48:	4b2a      	ldr	r3, [pc, #168]	@ (8000df4 <SystemClock_Config+0xd4>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4c:	4a29      	ldr	r2, [pc, #164]	@ (8000df4 <SystemClock_Config+0xd4>)
 8000d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d54:	4b27      	ldr	r3, [pc, #156]	@ (8000df4 <SystemClock_Config+0xd4>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d60:	4b25      	ldr	r3, [pc, #148]	@ (8000df8 <SystemClock_Config+0xd8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a24      	ldr	r2, [pc, #144]	@ (8000df8 <SystemClock_Config+0xd8>)
 8000d66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <SystemClock_Config+0xd8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d80:	2310      	movs	r3, #16
 8000d82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d84:	2302      	movs	r3, #2
 8000d86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d90:	23d8      	movs	r3, #216	@ 0xd8
 8000d92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9c:	f107 0320 	add.w	r3, r7, #32
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 ffab 	bl	8002cfc <HAL_RCC_OscConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000dac:	f000 fd1e 	bl	80017ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000db0:	f001 ff54 	bl	8002c5c <HAL_PWREx_EnableOverDrive>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000dba:	f000 fd17 	bl	80017ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000dce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	2107      	movs	r1, #7
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f002 fa31 	bl	8003244 <HAL_RCC_ClockConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000de8:	f000 fd00 	bl	80017ec <Error_Handler>
  }
}
 8000dec:	bf00      	nop
 8000dee:	3750      	adds	r7, #80	@ 0x50
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40007000 	.word	0x40007000

08000dfc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <MX_SPI2_Init+0x74>)
 8000e02:	4a1c      	ldr	r2, [pc, #112]	@ (8000e74 <MX_SPI2_Init+0x78>)
 8000e04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <MX_SPI2_Init+0x74>)
 8000e08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <MX_SPI2_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e14:	4b16      	ldr	r3, [pc, #88]	@ (8000e70 <MX_SPI2_Init+0x74>)
 8000e16:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000e1a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <MX_SPI2_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e22:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <MX_SPI2_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e28:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <MX_SPI2_Init+0x74>)
 8000e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e2e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <MX_SPI2_Init+0x74>)
 8000e32:	2210      	movs	r2, #16
 8000e34:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <MX_SPI2_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <MX_SPI2_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <MX_SPI2_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e48:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <MX_SPI2_Init+0x74>)
 8000e4a:	2207      	movs	r2, #7
 8000e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <MX_SPI2_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <MX_SPI2_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <MX_SPI2_Init+0x74>)
 8000e5c:	f002 ffc8 	bl	8003df0 <HAL_SPI_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e66:	f000 fcc1 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000018c 	.word	0x2000018c
 8000e74:	40003800 	.word	0x40003800

08000e78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e7e:	4a15      	ldr	r2, [pc, #84]	@ (8000ed4 <MX_USART1_UART_Init+0x5c>)
 8000e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e82:	4b13      	ldr	r3, [pc, #76]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000ebc:	f004 fbd0 	bl	8005660 <HAL_UART_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ec6:	f000 fc91 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200002b0 	.word	0x200002b0
 8000ed4:	40011000 	.word	0x40011000

08000ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <MX_DMA_Init+0x48>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f20 <MX_DMA_Init+0x48>)
 8000ee4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <MX_DMA_Init+0x48>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	200e      	movs	r0, #14
 8000efc:	f001 f87f 	bl	8001ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f00:	200e      	movs	r0, #14
 8000f02:	f001 f898 	bl	8002036 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f001 f877 	bl	8001ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f10:	200f      	movs	r0, #15
 8000f12:	f001 f890 	bl	8002036 <HAL_NVIC_EnableIRQ>

}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b090      	sub	sp, #64	@ 0x40
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f3a:	4baf      	ldr	r3, [pc, #700]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4aae      	ldr	r2, [pc, #696]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000f40:	f043 0310 	orr.w	r3, r3, #16
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4bac      	ldr	r3, [pc, #688]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0310 	and.w	r3, r3, #16
 8000f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f52:	4ba9      	ldr	r3, [pc, #676]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4aa8      	ldr	r2, [pc, #672]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4ba6      	ldr	r3, [pc, #664]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4ba3      	ldr	r3, [pc, #652]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4aa2      	ldr	r2, [pc, #648]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4ba0      	ldr	r3, [pc, #640]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	623b      	str	r3, [r7, #32]
 8000f80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f82:	4b9d      	ldr	r3, [pc, #628]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a9c      	ldr	r2, [pc, #624]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b9a      	ldr	r3, [pc, #616]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	61fb      	str	r3, [r7, #28]
 8000f98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b97      	ldr	r3, [pc, #604]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a96      	ldr	r2, [pc, #600]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b94      	ldr	r3, [pc, #592]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	4b91      	ldr	r3, [pc, #580]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a90      	ldr	r2, [pc, #576]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b8e      	ldr	r3, [pc, #568]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fca:	4b8b      	ldr	r3, [pc, #556]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a8a      	ldr	r2, [pc, #552]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000fd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b88      	ldr	r3, [pc, #544]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fe2:	4b85      	ldr	r3, [pc, #532]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a84      	ldr	r2, [pc, #528]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b82      	ldr	r3, [pc, #520]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ffa:	4b7f      	ldr	r3, [pc, #508]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a7e      	ldr	r2, [pc, #504]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8001000:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b7c      	ldr	r3, [pc, #496]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001012:	4b79      	ldr	r3, [pc, #484]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a78      	ldr	r2, [pc, #480]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8001018:	f043 0320 	orr.w	r3, r3, #32
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b76      	ldr	r3, [pc, #472]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0320 	and.w	r3, r3, #32
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	4b73      	ldr	r3, [pc, #460]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a72      	ldr	r2, [pc, #456]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8001030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b70      	ldr	r3, [pc, #448]	@ (80011f8 <MX_GPIO_Init+0x2d4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001048:	486c      	ldr	r0, [pc, #432]	@ (80011fc <MX_GPIO_Init+0x2d8>)
 800104a:	f001 fdc5 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2120      	movs	r1, #32
 8001052:	486b      	ldr	r0, [pc, #428]	@ (8001200 <MX_GPIO_Init+0x2dc>)
 8001054:	f001 fdc0 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f241 0108 	movw	r1, #4104	@ 0x1008
 800105e:	4869      	ldr	r0, [pc, #420]	@ (8001204 <MX_GPIO_Init+0x2e0>)
 8001060:	f001 fdba 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2108      	movs	r1, #8
 8001068:	4867      	ldr	r0, [pc, #412]	@ (8001208 <MX_GPIO_Init+0x2e4>)
 800106a:	f001 fdb5 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001074:	4865      	ldr	r0, [pc, #404]	@ (800120c <MX_GPIO_Init+0x2e8>)
 8001076:	f001 fdaf 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2101      	movs	r1, #1
 800107e:	4861      	ldr	r0, [pc, #388]	@ (8001204 <MX_GPIO_Init+0x2e0>)
 8001080:	f001 fdaa 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	21c8      	movs	r1, #200	@ 0xc8
 8001088:	4861      	ldr	r0, [pc, #388]	@ (8001210 <MX_GPIO_Init+0x2ec>)
 800108a:	f001 fda5 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800108e:	2310      	movs	r3, #16
 8001090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800109e:	230e      	movs	r3, #14
 80010a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a6:	4619      	mov	r1, r3
 80010a8:	485a      	ldr	r0, [pc, #360]	@ (8001214 <MX_GPIO_Init+0x2f0>)
 80010aa:	f001 fbe9 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80010ae:	2308      	movs	r3, #8
 80010b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b2:	2300      	movs	r3, #0
 80010b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010be:	4619      	mov	r1, r3
 80010c0:	4854      	ldr	r0, [pc, #336]	@ (8001214 <MX_GPIO_Init+0x2f0>)
 80010c2:	f001 fbdd 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80010c6:	2304      	movs	r3, #4
 80010c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010d6:	2309      	movs	r3, #9
 80010d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010de:	4619      	mov	r1, r3
 80010e0:	484c      	ldr	r0, [pc, #304]	@ (8001214 <MX_GPIO_Init+0x2f0>)
 80010e2:	f001 fbcd 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80010e6:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010f8:	230b      	movs	r3, #11
 80010fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001100:	4619      	mov	r1, r3
 8001102:	4843      	ldr	r0, [pc, #268]	@ (8001210 <MX_GPIO_Init+0x2ec>)
 8001104:	f001 fbbc 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001108:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800111a:	230c      	movs	r3, #12
 800111c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800111e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001122:	4619      	mov	r1, r3
 8001124:	483b      	ldr	r0, [pc, #236]	@ (8001214 <MX_GPIO_Init+0x2f0>)
 8001126:	f001 fbab 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800112a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001130:	2312      	movs	r3, #18
 8001132:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800113c:	2304      	movs	r3, #4
 800113e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001144:	4619      	mov	r1, r3
 8001146:	4834      	ldr	r0, [pc, #208]	@ (8001218 <MX_GPIO_Init+0x2f4>)
 8001148:	f001 fb9a 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800114c:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800115e:	230a      	movs	r3, #10
 8001160:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001166:	4619      	mov	r1, r3
 8001168:	482b      	ldr	r0, [pc, #172]	@ (8001218 <MX_GPIO_Init+0x2f4>)
 800116a:	f001 fb89 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800116e:	2310      	movs	r3, #16
 8001170:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800117e:	2302      	movs	r3, #2
 8001180:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001186:	4619      	mov	r1, r3
 8001188:	4823      	ldr	r0, [pc, #140]	@ (8001218 <MX_GPIO_Init+0x2f4>)
 800118a:	f001 fb79 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800118e:	2380      	movs	r3, #128	@ 0x80
 8001190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800119e:	2308      	movs	r3, #8
 80011a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a6:	4619      	mov	r1, r3
 80011a8:	4815      	ldr	r0, [pc, #84]	@ (8001200 <MX_GPIO_Init+0x2dc>)
 80011aa:	f001 fb69 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80011ae:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011c0:	230c      	movs	r3, #12
 80011c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c8:	4619      	mov	r1, r3
 80011ca:	4814      	ldr	r0, [pc, #80]	@ (800121c <MX_GPIO_Init+0x2f8>)
 80011cc:	f001 fb58 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80011d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011e6:	4619      	mov	r1, r3
 80011e8:	4804      	ldr	r0, [pc, #16]	@ (80011fc <MX_GPIO_Init+0x2d8>)
 80011ea:	f001 fb49 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80011ee:	2360      	movs	r3, #96	@ 0x60
 80011f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	e014      	b.n	8001220 <MX_GPIO_Init+0x2fc>
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40022000 	.word	0x40022000
 8001208:	40022800 	.word	0x40022800
 800120c:	40021c00 	.word	0x40021c00
 8001210:	40021800 	.word	0x40021800
 8001214:	40021000 	.word	0x40021000
 8001218:	40020400 	.word	0x40020400
 800121c:	40020800 	.word	0x40020800
 8001220:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800122a:	230d      	movs	r3, #13
 800122c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001232:	4619      	mov	r1, r3
 8001234:	48bc      	ldr	r0, [pc, #752]	@ (8001528 <MX_GPIO_Init+0x604>)
 8001236:	f001 fb23 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800123a:	2340      	movs	r3, #64	@ 0x40
 800123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800124a:	230a      	movs	r3, #10
 800124c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001252:	4619      	mov	r1, r3
 8001254:	48b5      	ldr	r0, [pc, #724]	@ (800152c <MX_GPIO_Init+0x608>)
 8001256:	f001 fb13 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800125a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800125e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800126c:	230c      	movs	r3, #12
 800126e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001270:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001274:	4619      	mov	r1, r3
 8001276:	48ae      	ldr	r0, [pc, #696]	@ (8001530 <MX_GPIO_Init+0x60c>)
 8001278:	f001 fb02 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800127c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001280:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800128e:	230e      	movs	r3, #14
 8001290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001292:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001296:	4619      	mov	r1, r3
 8001298:	48a6      	ldr	r0, [pc, #664]	@ (8001534 <MX_GPIO_Init+0x610>)
 800129a:	f001 faf1 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800129e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a4:	2300      	movs	r3, #0
 80012a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012b0:	4619      	mov	r1, r3
 80012b2:	48a0      	ldr	r0, [pc, #640]	@ (8001534 <MX_GPIO_Init+0x610>)
 80012b4:	f001 fae4 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80012b8:	2340      	movs	r3, #64	@ 0x40
 80012ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012bc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ca:	4619      	mov	r1, r3
 80012cc:	489a      	ldr	r0, [pc, #616]	@ (8001538 <MX_GPIO_Init+0x614>)
 80012ce:	f001 fad7 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80012d2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012e4:	230c      	movs	r3, #12
 80012e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ec:	4619      	mov	r1, r3
 80012ee:	4892      	ldr	r0, [pc, #584]	@ (8001538 <MX_GPIO_Init+0x614>)
 80012f0:	f001 fac6 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80012f4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001306:	230a      	movs	r3, #10
 8001308:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800130e:	4619      	mov	r1, r3
 8001310:	488a      	ldr	r0, [pc, #552]	@ (800153c <MX_GPIO_Init+0x618>)
 8001312:	f001 fab5 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001316:	23f0      	movs	r3, #240	@ 0xf0
 8001318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001326:	230a      	movs	r3, #10
 8001328:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800132a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800132e:	4619      	mov	r1, r3
 8001330:	4883      	ldr	r0, [pc, #524]	@ (8001540 <MX_GPIO_Init+0x61c>)
 8001332:	f001 faa5 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001336:	23f7      	movs	r3, #247	@ 0xf7
 8001338:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001346:	230e      	movs	r3, #14
 8001348:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800134a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800134e:	4619      	mov	r1, r3
 8001350:	487c      	ldr	r0, [pc, #496]	@ (8001544 <MX_GPIO_Init+0x620>)
 8001352:	f001 fa95 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001356:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001368:	2309      	movs	r3, #9
 800136a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001370:	4619      	mov	r1, r3
 8001372:	486f      	ldr	r0, [pc, #444]	@ (8001530 <MX_GPIO_Init+0x60c>)
 8001374:	f001 fa84 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001378:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800137c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800138a:	230a      	movs	r3, #10
 800138c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001392:	4619      	mov	r1, r3
 8001394:	4866      	ldr	r0, [pc, #408]	@ (8001530 <MX_GPIO_Init+0x60c>)
 8001396:	f001 fa73 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800139a:	2320      	movs	r3, #32
 800139c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ae:	4619      	mov	r1, r3
 80013b0:	4861      	ldr	r0, [pc, #388]	@ (8001538 <MX_GPIO_Init+0x614>)
 80013b2:	f001 fa65 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80013b6:	2308      	movs	r3, #8
 80013b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013c6:	230d      	movs	r3, #13
 80013c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ce:	4619      	mov	r1, r3
 80013d0:	4859      	ldr	r0, [pc, #356]	@ (8001538 <MX_GPIO_Init+0x614>)
 80013d2:	f001 fa55 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin LCD_DISP_Pin CS_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|LCD_DISP_Pin|CS_Pin;
 80013d6:	f241 0309 	movw	r3, #4105	@ 0x1009
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013dc:	2301      	movs	r3, #1
 80013de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ec:	4619      	mov	r1, r3
 80013ee:	4854      	ldr	r0, [pc, #336]	@ (8001540 <MX_GPIO_Init+0x61c>)
 80013f0:	f001 fa46 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80013f4:	2304      	movs	r3, #4
 80013f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001406:	4619      	mov	r1, r3
 8001408:	484d      	ldr	r0, [pc, #308]	@ (8001540 <MX_GPIO_Init+0x61c>)
 800140a:	f001 fa39 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800140e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001420:	4619      	mov	r1, r3
 8001422:	4849      	ldr	r0, [pc, #292]	@ (8001548 <MX_GPIO_Init+0x624>)
 8001424:	f001 fa2c 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001428:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800142c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800143a:	230c      	movs	r3, #12
 800143c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800143e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001442:	4619      	mov	r1, r3
 8001444:	4841      	ldr	r0, [pc, #260]	@ (800154c <MX_GPIO_Init+0x628>)
 8001446:	f001 fa1b 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800144a:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800145c:	230e      	movs	r3, #14
 800145e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001460:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001464:	4619      	mov	r1, r3
 8001466:	4836      	ldr	r0, [pc, #216]	@ (8001540 <MX_GPIO_Init+0x61c>)
 8001468:	f001 fa0a 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800146c:	2308      	movs	r3, #8
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001480:	4619      	mov	r1, r3
 8001482:	4830      	ldr	r0, [pc, #192]	@ (8001544 <MX_GPIO_Init+0x620>)
 8001484:	f001 f9fc 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001488:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800148c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800149a:	230d      	movs	r3, #13
 800149c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014a2:	4619      	mov	r1, r3
 80014a4:	4822      	ldr	r0, [pc, #136]	@ (8001530 <MX_GPIO_Init+0x60c>)
 80014a6:	f001 f9eb 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014aa:	2310      	movs	r3, #16
 80014ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ae:	2300      	movs	r3, #0
 80014b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ba:	4619      	mov	r1, r3
 80014bc:	481e      	ldr	r0, [pc, #120]	@ (8001538 <MX_GPIO_Init+0x614>)
 80014be:	f001 f9df 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80014c2:	2304      	movs	r3, #4
 80014c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80014d2:	230c      	movs	r3, #12
 80014d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014da:	4619      	mov	r1, r3
 80014dc:	4816      	ldr	r0, [pc, #88]	@ (8001538 <MX_GPIO_Init+0x614>)
 80014de:	f001 f9cf 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80014e2:	f248 0304 	movw	r3, #32772	@ 0x8004
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014f4:	4619      	mov	r1, r3
 80014f6:	4816      	ldr	r0, [pc, #88]	@ (8001550 <MX_GPIO_Init+0x62c>)
 80014f8:	f001 f9c2 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80014fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001500:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	2301      	movs	r3, #1
 8001504:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001512:	4619      	mov	r1, r3
 8001514:	480e      	ldr	r0, [pc, #56]	@ (8001550 <MX_GPIO_Init+0x62c>)
 8001516:	f001 f9b3 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800151a:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800151e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	e015      	b.n	8001554 <MX_GPIO_Init+0x630>
 8001528:	40021000 	.word	0x40021000
 800152c:	40020400 	.word	0x40020400
 8001530:	40021800 	.word	0x40021800
 8001534:	40022400 	.word	0x40022400
 8001538:	40020c00 	.word	0x40020c00
 800153c:	40020000 	.word	0x40020000
 8001540:	40022000 	.word	0x40022000
 8001544:	40022800 	.word	0x40022800
 8001548:	40020800 	.word	0x40020800
 800154c:	40021400 	.word	0x40021400
 8001550:	40021c00 	.word	0x40021c00
 8001554:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800155a:	230d      	movs	r3, #13
 800155c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800155e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001562:	4619      	mov	r1, r3
 8001564:	4899      	ldr	r0, [pc, #612]	@ (80017cc <MX_GPIO_Init+0x8a8>)
 8001566:	f001 f98b 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800156a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800157c:	2301      	movs	r3, #1
 800157e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001584:	4619      	mov	r1, r3
 8001586:	4892      	ldr	r0, [pc, #584]	@ (80017d0 <MX_GPIO_Init+0x8ac>)
 8001588:	f001 f97a 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800158c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001592:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001596:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015a0:	4619      	mov	r1, r3
 80015a2:	488c      	ldr	r0, [pc, #560]	@ (80017d4 <MX_GPIO_Init+0x8b0>)
 80015a4:	f001 f96c 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80015a8:	23c0      	movs	r3, #192	@ 0xc0
 80015aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80015b8:	2308      	movs	r3, #8
 80015ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015c0:	4619      	mov	r1, r3
 80015c2:	4885      	ldr	r0, [pc, #532]	@ (80017d8 <MX_GPIO_Init+0x8b4>)
 80015c4:	f001 f95c 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80015c8:	2310      	movs	r3, #16
 80015ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80015d8:	230a      	movs	r3, #10
 80015da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015e0:	4619      	mov	r1, r3
 80015e2:	487a      	ldr	r0, [pc, #488]	@ (80017cc <MX_GPIO_Init+0x8a8>)
 80015e4:	f001 f94c 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80015e8:	2328      	movs	r3, #40	@ 0x28
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015f8:	230c      	movs	r3, #12
 80015fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001600:	4619      	mov	r1, r3
 8001602:	4872      	ldr	r0, [pc, #456]	@ (80017cc <MX_GPIO_Init+0x8a8>)
 8001604:	f001 f93c 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001608:	23c8      	movs	r3, #200	@ 0xc8
 800160a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001618:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800161c:	4619      	mov	r1, r3
 800161e:	486f      	ldr	r0, [pc, #444]	@ (80017dc <MX_GPIO_Init+0x8b8>)
 8001620:	f001 f92e 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001624:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001628:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162a:	2303      	movs	r3, #3
 800162c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001632:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001636:	4619      	mov	r1, r3
 8001638:	4869      	ldr	r0, [pc, #420]	@ (80017e0 <MX_GPIO_Init+0x8bc>)
 800163a:	f001 f921 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800163e:	2308      	movs	r3, #8
 8001640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800164e:	230c      	movs	r3, #12
 8001650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001652:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001656:	4619      	mov	r1, r3
 8001658:	485f      	ldr	r0, [pc, #380]	@ (80017d8 <MX_GPIO_Init+0x8b4>)
 800165a:	f001 f911 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800165e:	2305      	movs	r3, #5
 8001660:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800166e:	230a      	movs	r3, #10
 8001670:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001672:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001676:	4619      	mov	r1, r3
 8001678:	4857      	ldr	r0, [pc, #348]	@ (80017d8 <MX_GPIO_Init+0x8b4>)
 800167a:	f001 f901 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800167e:	2332      	movs	r3, #50	@ 0x32
 8001680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800168e:	230b      	movs	r3, #11
 8001690:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001696:	4619      	mov	r1, r3
 8001698:	484f      	ldr	r0, [pc, #316]	@ (80017d8 <MX_GPIO_Init+0x8b4>)
 800169a:	f001 f8f1 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800169e:	2304      	movs	r3, #4
 80016a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016ae:	2309      	movs	r3, #9
 80016b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016b6:	4619      	mov	r1, r3
 80016b8:	484a      	ldr	r0, [pc, #296]	@ (80017e4 <MX_GPIO_Init+0x8c0>)
 80016ba:	f001 f8e1 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80016be:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80016c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016d0:	2309      	movs	r3, #9
 80016d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016d8:	4619      	mov	r1, r3
 80016da:	4843      	ldr	r0, [pc, #268]	@ (80017e8 <MX_GPIO_Init+0x8c4>)
 80016dc:	f001 f8d0 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80016e0:	2304      	movs	r3, #4
 80016e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e4:	2300      	movs	r3, #0
 80016e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80016ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016f0:	4619      	mov	r1, r3
 80016f2:	483a      	ldr	r0, [pc, #232]	@ (80017dc <MX_GPIO_Init+0x8b8>)
 80016f4:	f001 f8c4 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80016f8:	2386      	movs	r3, #134	@ 0x86
 80016fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001708:	230b      	movs	r3, #11
 800170a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001710:	4619      	mov	r1, r3
 8001712:	482f      	ldr	r0, [pc, #188]	@ (80017d0 <MX_GPIO_Init+0x8ac>)
 8001714:	f001 f8b4 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001718:	2301      	movs	r3, #1
 800171a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800171c:	2303      	movs	r3, #3
 800171e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001724:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001728:	4619      	mov	r1, r3
 800172a:	4829      	ldr	r0, [pc, #164]	@ (80017d0 <MX_GPIO_Init+0x8ac>)
 800172c:	f001 f8a8 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001730:	2350      	movs	r3, #80	@ 0x50
 8001732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001740:	230d      	movs	r3, #13
 8001742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001748:	4619      	mov	r1, r3
 800174a:	4821      	ldr	r0, [pc, #132]	@ (80017d0 <MX_GPIO_Init+0x8ac>)
 800174c:	f001 f898 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001750:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001756:	2312      	movs	r3, #18
 8001758:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001762:	2304      	movs	r3, #4
 8001764:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001766:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800176a:	4619      	mov	r1, r3
 800176c:	4817      	ldr	r0, [pc, #92]	@ (80017cc <MX_GPIO_Init+0x8a8>)
 800176e:	f001 f887 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001772:	2328      	movs	r3, #40	@ 0x28
 8001774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001782:	230a      	movs	r3, #10
 8001784:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800178a:	4619      	mov	r1, r3
 800178c:	4810      	ldr	r0, [pc, #64]	@ (80017d0 <MX_GPIO_Init+0x8ac>)
 800178e:	f001 f877 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001792:	2340      	movs	r3, #64	@ 0x40
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80017a2:	2309      	movs	r3, #9
 80017a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017aa:	4619      	mov	r1, r3
 80017ac:	4807      	ldr	r0, [pc, #28]	@ (80017cc <MX_GPIO_Init+0x8a8>)
 80017ae:	f001 f867 	bl	8002880 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2008      	movs	r0, #8
 80017b8:	f000 fc21 	bl	8001ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80017bc:	2008      	movs	r0, #8
 80017be:	f000 fc3a 	bl	8002036 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017c2:	bf00      	nop
 80017c4:	3740      	adds	r7, #64	@ 0x40
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40021c00 	.word	0x40021c00
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40022000 	.word	0x40022000
 80017d8:	40020800 	.word	0x40020800
 80017dc:	40021800 	.word	0x40021800
 80017e0:	40021400 	.word	0x40021400
 80017e4:	40020400 	.word	0x40020400
 80017e8:	40020c00 	.word	0x40020c00

080017ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f0:	b672      	cpsid	i
}
 80017f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <Error_Handler+0x8>

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <HAL_MspInit+0x44>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	4a0e      	ldr	r2, [pc, #56]	@ (800183c <HAL_MspInit+0x44>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	@ 0x40
 800180a:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <HAL_MspInit+0x44>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <HAL_MspInit+0x44>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181a:	4a08      	ldr	r2, [pc, #32]	@ (800183c <HAL_MspInit+0x44>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001820:	6453      	str	r3, [r2, #68]	@ 0x44
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_MspInit+0x44>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	@ 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a57      	ldr	r2, [pc, #348]	@ (80019bc <HAL_SPI_MspInit+0x17c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	f040 80a7 	bne.w	80019b2 <HAL_SPI_MspInit+0x172>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001864:	4b56      	ldr	r3, [pc, #344]	@ (80019c0 <HAL_SPI_MspInit+0x180>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	4a55      	ldr	r2, [pc, #340]	@ (80019c0 <HAL_SPI_MspInit+0x180>)
 800186a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800186e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001870:	4b53      	ldr	r3, [pc, #332]	@ (80019c0 <HAL_SPI_MspInit+0x180>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800187c:	4b50      	ldr	r3, [pc, #320]	@ (80019c0 <HAL_SPI_MspInit+0x180>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001880:	4a4f      	ldr	r2, [pc, #316]	@ (80019c0 <HAL_SPI_MspInit+0x180>)
 8001882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001886:	6313      	str	r3, [r2, #48]	@ 0x30
 8001888:	4b4d      	ldr	r3, [pc, #308]	@ (80019c0 <HAL_SPI_MspInit+0x180>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001894:	4b4a      	ldr	r3, [pc, #296]	@ (80019c0 <HAL_SPI_MspInit+0x180>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001898:	4a49      	ldr	r2, [pc, #292]	@ (80019c0 <HAL_SPI_MspInit+0x180>)
 800189a:	f043 0302 	orr.w	r3, r3, #2
 800189e:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a0:	4b47      	ldr	r3, [pc, #284]	@ (80019c0 <HAL_SPI_MspInit+0x180>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80018ac:	2302      	movs	r3, #2
 80018ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018bc:	2305      	movs	r3, #5
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	483f      	ldr	r0, [pc, #252]	@ (80019c4 <HAL_SPI_MspInit+0x184>)
 80018c8:	f000 ffda 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80018cc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80018d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018de:	2305      	movs	r3, #5
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	4837      	ldr	r0, [pc, #220]	@ (80019c8 <HAL_SPI_MspInit+0x188>)
 80018ea:	f000 ffc9 	bl	8002880 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80018ee:	4b37      	ldr	r3, [pc, #220]	@ (80019cc <HAL_SPI_MspInit+0x18c>)
 80018f0:	4a37      	ldr	r2, [pc, #220]	@ (80019d0 <HAL_SPI_MspInit+0x190>)
 80018f2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80018f4:	4b35      	ldr	r3, [pc, #212]	@ (80019cc <HAL_SPI_MspInit+0x18c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018fa:	4b34      	ldr	r3, [pc, #208]	@ (80019cc <HAL_SPI_MspInit+0x18c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001900:	4b32      	ldr	r3, [pc, #200]	@ (80019cc <HAL_SPI_MspInit+0x18c>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001906:	4b31      	ldr	r3, [pc, #196]	@ (80019cc <HAL_SPI_MspInit+0x18c>)
 8001908:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800190c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800190e:	4b2f      	ldr	r3, [pc, #188]	@ (80019cc <HAL_SPI_MspInit+0x18c>)
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001914:	4b2d      	ldr	r3, [pc, #180]	@ (80019cc <HAL_SPI_MspInit+0x18c>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800191a:	4b2c      	ldr	r3, [pc, #176]	@ (80019cc <HAL_SPI_MspInit+0x18c>)
 800191c:	2200      	movs	r2, #0
 800191e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001920:	4b2a      	ldr	r3, [pc, #168]	@ (80019cc <HAL_SPI_MspInit+0x18c>)
 8001922:	2200      	movs	r2, #0
 8001924:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001926:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <HAL_SPI_MspInit+0x18c>)
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800192c:	4827      	ldr	r0, [pc, #156]	@ (80019cc <HAL_SPI_MspInit+0x18c>)
 800192e:	f000 fb9d 	bl	800206c <HAL_DMA_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001938:	f7ff ff58 	bl	80017ec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a23      	ldr	r2, [pc, #140]	@ (80019cc <HAL_SPI_MspInit+0x18c>)
 8001940:	659a      	str	r2, [r3, #88]	@ 0x58
 8001942:	4a22      	ldr	r2, [pc, #136]	@ (80019cc <HAL_SPI_MspInit+0x18c>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001948:	4b22      	ldr	r3, [pc, #136]	@ (80019d4 <HAL_SPI_MspInit+0x194>)
 800194a:	4a23      	ldr	r2, [pc, #140]	@ (80019d8 <HAL_SPI_MspInit+0x198>)
 800194c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800194e:	4b21      	ldr	r3, [pc, #132]	@ (80019d4 <HAL_SPI_MspInit+0x194>)
 8001950:	2200      	movs	r2, #0
 8001952:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001954:	4b1f      	ldr	r3, [pc, #124]	@ (80019d4 <HAL_SPI_MspInit+0x194>)
 8001956:	2240      	movs	r2, #64	@ 0x40
 8001958:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800195a:	4b1e      	ldr	r3, [pc, #120]	@ (80019d4 <HAL_SPI_MspInit+0x194>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001960:	4b1c      	ldr	r3, [pc, #112]	@ (80019d4 <HAL_SPI_MspInit+0x194>)
 8001962:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001966:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001968:	4b1a      	ldr	r3, [pc, #104]	@ (80019d4 <HAL_SPI_MspInit+0x194>)
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800196e:	4b19      	ldr	r3, [pc, #100]	@ (80019d4 <HAL_SPI_MspInit+0x194>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001974:	4b17      	ldr	r3, [pc, #92]	@ (80019d4 <HAL_SPI_MspInit+0x194>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800197a:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <HAL_SPI_MspInit+0x194>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001980:	4b14      	ldr	r3, [pc, #80]	@ (80019d4 <HAL_SPI_MspInit+0x194>)
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001986:	4813      	ldr	r0, [pc, #76]	@ (80019d4 <HAL_SPI_MspInit+0x194>)
 8001988:	f000 fb70 	bl	800206c <HAL_DMA_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_SPI_MspInit+0x156>
    {
      Error_Handler();
 8001992:	f7ff ff2b 	bl	80017ec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a0e      	ldr	r2, [pc, #56]	@ (80019d4 <HAL_SPI_MspInit+0x194>)
 800199a:	655a      	str	r2, [r3, #84]	@ 0x54
 800199c:	4a0d      	ldr	r2, [pc, #52]	@ (80019d4 <HAL_SPI_MspInit+0x194>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	2024      	movs	r0, #36	@ 0x24
 80019a8:	f000 fb29 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80019ac:	2024      	movs	r0, #36	@ 0x24
 80019ae:	f000 fb42 	bl	8002036 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80019b2:	bf00      	nop
 80019b4:	3728      	adds	r7, #40	@ 0x28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40003800 	.word	0x40003800
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40022000 	.word	0x40022000
 80019c8:	40020400 	.word	0x40020400
 80019cc:	200001f0 	.word	0x200001f0
 80019d0:	40026058 	.word	0x40026058
 80019d4:	20000250 	.word	0x20000250
 80019d8:	40026070 	.word	0x40026070

080019dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b0ac      	sub	sp, #176	@ 0xb0
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	2284      	movs	r2, #132	@ 0x84
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f004 fd75 	bl	80064ec <memset>
  if(huart->Instance==USART1)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a32      	ldr	r2, [pc, #200]	@ (8001ad0 <HAL_UART_MspInit+0xf4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d15c      	bne.n	8001ac6 <HAL_UART_MspInit+0xea>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a0c:	2340      	movs	r3, #64	@ 0x40
 8001a0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a10:	2300      	movs	r3, #0
 8001a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a14:	f107 0318 	add.w	r3, r7, #24
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f001 fdf9 	bl	8003610 <HAL_RCCEx_PeriphCLKConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a24:	f7ff fee2 	bl	80017ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a28:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad4 <HAL_UART_MspInit+0xf8>)
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2c:	4a29      	ldr	r2, [pc, #164]	@ (8001ad4 <HAL_UART_MspInit+0xf8>)
 8001a2e:	f043 0310 	orr.w	r3, r3, #16
 8001a32:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a34:	4b27      	ldr	r3, [pc, #156]	@ (8001ad4 <HAL_UART_MspInit+0xf8>)
 8001a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <HAL_UART_MspInit+0xf8>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a44:	4a23      	ldr	r2, [pc, #140]	@ (8001ad4 <HAL_UART_MspInit+0xf8>)
 8001a46:	f043 0302 	orr.w	r3, r3, #2
 8001a4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ad4 <HAL_UART_MspInit+0xf8>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a58:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <HAL_UART_MspInit+0xf8>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad4 <HAL_UART_MspInit+0xf8>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <HAL_UART_MspInit+0xf8>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001a70:	2380      	movs	r3, #128	@ 0x80
 8001a72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a88:	2307      	movs	r3, #7
 8001a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a92:	4619      	mov	r1, r3
 8001a94:	4810      	ldr	r0, [pc, #64]	@ (8001ad8 <HAL_UART_MspInit+0xfc>)
 8001a96:	f000 fef3 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001a9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ab4:	2307      	movs	r3, #7
 8001ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4806      	ldr	r0, [pc, #24]	@ (8001adc <HAL_UART_MspInit+0x100>)
 8001ac2:	f000 fedd 	bl	8002880 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ac6:	bf00      	nop
 8001ac8:	37b0      	adds	r7, #176	@ 0xb0
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40011000 	.word	0x40011000
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	40020000 	.word	0x40020000

08001ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <NMI_Handler+0x4>

08001ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <MemManage_Handler+0x4>

08001af8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <BusFault_Handler+0x4>

08001b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <UsageFault_Handler+0x4>

08001b08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b36:	f000 f943 	bl	8001dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001b42:	2004      	movs	r0, #4
 8001b44:	f001 f862 	bl	8002c0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001b50:	4802      	ldr	r0, [pc, #8]	@ (8001b5c <DMA1_Stream3_IRQHandler+0x10>)
 8001b52:	f000 fc2b 	bl	80023ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200001f0 	.word	0x200001f0

08001b60 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001b64:	4802      	ldr	r0, [pc, #8]	@ (8001b70 <DMA1_Stream4_IRQHandler+0x10>)
 8001b66:	f000 fc21 	bl	80023ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000250 	.word	0x20000250

08001b74 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001b78:	4802      	ldr	r0, [pc, #8]	@ (8001b84 <SPI2_IRQHandler+0x10>)
 8001b7a:	f003 f8bf 	bl	8004cfc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000018c 	.word	0x2000018c

08001b88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e00a      	b.n	8001bb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b9a:	f3af 8000 	nop.w
 8001b9e:	4601      	mov	r1, r0
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	60ba      	str	r2, [r7, #8]
 8001ba6:	b2ca      	uxtb	r2, r1
 8001ba8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3301      	adds	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	dbf0      	blt.n	8001b9a <_read+0x12>
  }

  return len;
 8001bb8:	687b      	ldr	r3, [r7, #4]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	e009      	b.n	8001be8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	60ba      	str	r2, [r7, #8]
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff f805 	bl	8000bec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	dbf1      	blt.n	8001bd4 <_write+0x12>
  }
  return len;
 8001bf0:	687b      	ldr	r3, [r7, #4]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <_close>:

int _close(int file)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c22:	605a      	str	r2, [r3, #4]
  return 0;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <_isatty>:

int _isatty(int file)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c6c:	4a14      	ldr	r2, [pc, #80]	@ (8001cc0 <_sbrk+0x5c>)
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <_sbrk+0x60>)
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <_sbrk+0x64>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	@ (8001ccc <_sbrk+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d207      	bcs.n	8001ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c94:	f004 fc78 	bl	8006588 <__errno>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	e009      	b.n	8001cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001caa:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <_sbrk+0x64>)
 8001cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20050000 	.word	0x20050000
 8001cc4:	00000400 	.word	0x00000400
 8001cc8:	20000338 	.word	0x20000338
 8001ccc:	20000490 	.word	0x20000490

08001cd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <SystemInit+0x20>)
 8001cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cda:	4a05      	ldr	r2, [pc, #20]	@ (8001cf0 <SystemInit+0x20>)
 8001cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cf8:	f7ff ffea 	bl	8001cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cfc:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cfe:	490d      	ldr	r1, [pc, #52]	@ (8001d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d00:	4a0d      	ldr	r2, [pc, #52]	@ (8001d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d14:	4c0a      	ldr	r4, [pc, #40]	@ (8001d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d22:	f004 fc37 	bl	8006594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d26:	f7fe ff77 	bl	8000c18 <main>
  bx  lr    
 8001d2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d2c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d38:	08007498 	.word	0x08007498
  ldr r2, =_sbss
 8001d3c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d40:	2000048c 	.word	0x2000048c

08001d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC_IRQHandler>

08001d46 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4a:	2003      	movs	r0, #3
 8001d4c:	f000 f94c 	bl	8001fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f000 f805 	bl	8001d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d56:	f7ff fd4f 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d68:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <HAL_InitTick+0x54>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <HAL_InitTick+0x58>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f967 	bl	8002052 <HAL_SYSTICK_Config>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00e      	b.n	8001dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d80a      	bhi.n	8001daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d94:	2200      	movs	r2, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f000 f92f 	bl	8001ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da0:	4a06      	ldr	r2, [pc, #24]	@ (8001dbc <HAL_InitTick+0x5c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e000      	b.n	8001dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000000 	.word	0x20000000
 8001db8:	20000008 	.word	0x20000008
 8001dbc:	20000004 	.word	0x20000004

08001dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <HAL_IncTick+0x20>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <HAL_IncTick+0x24>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <HAL_IncTick+0x24>)
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000008 	.word	0x20000008
 8001de4:	2000033c 	.word	0x2000033c

08001de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b03      	ldr	r3, [pc, #12]	@ (8001dfc <HAL_GetTick+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	2000033c 	.word	0x2000033c

08001e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7ff ffee 	bl	8001de8 <HAL_GetTick>
 8001e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d005      	beq.n	8001e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <HAL_Delay+0x44>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e26:	bf00      	nop
 8001e28:	f7ff ffde 	bl	8001de8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d8f7      	bhi.n	8001e28 <HAL_Delay+0x28>
  {
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000008 	.word	0x20000008

08001e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e58:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <__NVIC_SetPriorityGrouping+0x40>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e64:	4013      	ands	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e76:	4a04      	ldr	r2, [pc, #16]	@ (8001e88 <__NVIC_SetPriorityGrouping+0x40>)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	60d3      	str	r3, [r2, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00
 8001e8c:	05fa0000 	.word	0x05fa0000

08001e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e94:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 0307 	and.w	r3, r3, #7
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db0b      	blt.n	8001ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4907      	ldr	r1, [pc, #28]	@ (8001ee4 <__NVIC_EnableIRQ+0x38>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	2001      	movs	r0, #1
 8001ece:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000e100 	.word	0xe000e100

08001ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	@ (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	@ (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	@ 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f1c3 0307 	rsb	r3, r3, #7
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	bf28      	it	cs
 8001f5a:	2304      	movcs	r3, #4
 8001f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d902      	bls.n	8001f6c <NVIC_EncodePriority+0x30>
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3b03      	subs	r3, #3
 8001f6a:	e000      	b.n	8001f6e <NVIC_EncodePriority+0x32>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	4313      	orrs	r3, r2
         );
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	@ 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fb4:	d301      	bcc.n	8001fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00f      	b.n	8001fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fba:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <SysTick_Config+0x40>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc2:	210f      	movs	r1, #15
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	f7ff ff8e 	bl	8001ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fcc:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <SysTick_Config+0x40>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd2:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <SysTick_Config+0x40>)
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	e000e010 	.word	0xe000e010

08001fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ff29 	bl	8001e48 <__NVIC_SetPriorityGrouping>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002010:	f7ff ff3e 	bl	8001e90 <__NVIC_GetPriorityGrouping>
 8002014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	6978      	ldr	r0, [r7, #20]
 800201c:	f7ff ff8e 	bl	8001f3c <NVIC_EncodePriority>
 8002020:	4602      	mov	r2, r0
 8002022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff5d 	bl	8001ee8 <__NVIC_SetPriority>
}
 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff31 	bl	8001eac <__NVIC_EnableIRQ>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ffa2 	bl	8001fa4 <SysTick_Config>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002078:	f7ff feb6 	bl	8001de8 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e099      	b.n	80021bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a8:	e00f      	b.n	80020ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020aa:	f7ff fe9d 	bl	8001de8 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	d908      	bls.n	80020ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2220      	movs	r2, #32
 80020bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2203      	movs	r2, #3
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e078      	b.n	80021bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1e8      	bne.n	80020aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	4b38      	ldr	r3, [pc, #224]	@ (80021c4 <HAL_DMA_Init+0x158>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002102:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800210e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	2b04      	cmp	r3, #4
 8002122:	d107      	bne.n	8002134 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212c:	4313      	orrs	r3, r2
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f023 0307 	bic.w	r3, r3, #7
 800214a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	4313      	orrs	r3, r2
 8002154:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215a:	2b04      	cmp	r3, #4
 800215c:	d117      	bne.n	800218e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4313      	orrs	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00e      	beq.n	800218e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 fb09 	bl	8002788 <DMA_CheckFifoParam>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2240      	movs	r2, #64	@ 0x40
 8002180:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800218a:	2301      	movs	r3, #1
 800218c:	e016      	b.n	80021bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fac0 	bl	800271c <DMA_CalcBaseAndBitshift>
 800219c:	4603      	mov	r3, r0
 800219e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a4:	223f      	movs	r2, #63	@ 0x3f
 80021a6:	409a      	lsls	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	f010803f 	.word	0xf010803f

080021c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_DMA_Start_IT+0x26>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e048      	b.n	8002280 <HAL_DMA_Start_IT+0xb8>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d137      	bne.n	8002272 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2202      	movs	r2, #2
 8002206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 fa52 	bl	80026c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002220:	223f      	movs	r2, #63	@ 0x3f
 8002222:	409a      	lsls	r2, r3
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0216 	orr.w	r2, r2, #22
 8002236:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002246:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	2b00      	cmp	r3, #0
 800224e:	d007      	beq.n	8002260 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0208 	orr.w	r2, r2, #8
 800225e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	e005      	b.n	800227e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800227a:	2302      	movs	r3, #2
 800227c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800227e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002294:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002296:	f7ff fda7 	bl	8001de8 <HAL_GetTick>
 800229a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d008      	beq.n	80022ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2280      	movs	r2, #128	@ 0x80
 80022ac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e052      	b.n	8002360 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0216 	bic.w	r2, r2, #22
 80022c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d103      	bne.n	80022ea <HAL_DMA_Abort+0x62>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d007      	beq.n	80022fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0208 	bic.w	r2, r2, #8
 80022f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800230a:	e013      	b.n	8002334 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800230c:	f7ff fd6c 	bl	8001de8 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b05      	cmp	r3, #5
 8002318:	d90c      	bls.n	8002334 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2220      	movs	r2, #32
 800231e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2203      	movs	r2, #3
 8002324:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e015      	b.n	8002360 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1e4      	bne.n	800230c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002346:	223f      	movs	r2, #63	@ 0x3f
 8002348:	409a      	lsls	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d004      	beq.n	8002386 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2280      	movs	r2, #128	@ 0x80
 8002380:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e00c      	b.n	80023a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2205      	movs	r2, #5
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0201 	bic.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80023b8:	4b8e      	ldr	r3, [pc, #568]	@ (80025f4 <HAL_DMA_IRQHandler+0x248>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a8e      	ldr	r2, [pc, #568]	@ (80025f8 <HAL_DMA_IRQHandler+0x24c>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	0a9b      	lsrs	r3, r3, #10
 80023c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d6:	2208      	movs	r2, #8
 80023d8:	409a      	lsls	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d01a      	beq.n	8002418 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0204 	bic.w	r2, r2, #4
 80023fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002404:	2208      	movs	r2, #8
 8002406:	409a      	lsls	r2, r3
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241c:	2201      	movs	r2, #1
 800241e:	409a      	lsls	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d012      	beq.n	800244e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00b      	beq.n	800244e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243a:	2201      	movs	r2, #1
 800243c:	409a      	lsls	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002446:	f043 0202 	orr.w	r2, r3, #2
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002452:	2204      	movs	r2, #4
 8002454:	409a      	lsls	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4013      	ands	r3, r2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d012      	beq.n	8002484 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00b      	beq.n	8002484 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002470:	2204      	movs	r2, #4
 8002472:	409a      	lsls	r2, r3
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247c:	f043 0204 	orr.w	r2, r3, #4
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002488:	2210      	movs	r2, #16
 800248a:	409a      	lsls	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d043      	beq.n	800251c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d03c      	beq.n	800251c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a6:	2210      	movs	r2, #16
 80024a8:	409a      	lsls	r2, r3
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d018      	beq.n	80024ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d108      	bne.n	80024dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d024      	beq.n	800251c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	4798      	blx	r3
 80024da:	e01f      	b.n	800251c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01b      	beq.n	800251c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4798      	blx	r3
 80024ec:	e016      	b.n	800251c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d107      	bne.n	800250c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0208 	bic.w	r2, r2, #8
 800250a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002520:	2220      	movs	r2, #32
 8002522:	409a      	lsls	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 808f 	beq.w	800264c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 8087 	beq.w	800264c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002542:	2220      	movs	r2, #32
 8002544:	409a      	lsls	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b05      	cmp	r3, #5
 8002554:	d136      	bne.n	80025c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0216 	bic.w	r2, r2, #22
 8002564:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002574:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d103      	bne.n	8002586 <HAL_DMA_IRQHandler+0x1da>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0208 	bic.w	r2, r2, #8
 8002594:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259a:	223f      	movs	r2, #63	@ 0x3f
 800259c:	409a      	lsls	r2, r3
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d07e      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	4798      	blx	r3
        }
        return;
 80025c2:	e079      	b.n	80026b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d01d      	beq.n	800260e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10d      	bne.n	80025fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d031      	beq.n	800264c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	4798      	blx	r3
 80025f0:	e02c      	b.n	800264c <HAL_DMA_IRQHandler+0x2a0>
 80025f2:	bf00      	nop
 80025f4:	20000000 	.word	0x20000000
 80025f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002600:	2b00      	cmp	r3, #0
 8002602:	d023      	beq.n	800264c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	4798      	blx	r3
 800260c:	e01e      	b.n	800264c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10f      	bne.n	800263c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0210 	bic.w	r2, r2, #16
 800262a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002650:	2b00      	cmp	r3, #0
 8002652:	d032      	beq.n	80026ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d022      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2205      	movs	r2, #5
 8002664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0201 	bic.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	3301      	adds	r3, #1
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	429a      	cmp	r2, r3
 8002682:	d307      	bcc.n	8002694 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f2      	bne.n	8002678 <HAL_DMA_IRQHandler+0x2cc>
 8002692:	e000      	b.n	8002696 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002694:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
 80026b6:	e000      	b.n	80026ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80026b8:	bf00      	nop
    }
  }
}
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80026dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b40      	cmp	r3, #64	@ 0x40
 80026ec:	d108      	bne.n	8002700 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026fe:	e007      	b.n	8002710 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	60da      	str	r2, [r3, #12]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	3b10      	subs	r3, #16
 800272c:	4a13      	ldr	r2, [pc, #76]	@ (800277c <DMA_CalcBaseAndBitshift+0x60>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002736:	4a12      	ldr	r2, [pc, #72]	@ (8002780 <DMA_CalcBaseAndBitshift+0x64>)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4413      	add	r3, r2
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d908      	bls.n	800275c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <DMA_CalcBaseAndBitshift+0x68>)
 8002752:	4013      	ands	r3, r2
 8002754:	1d1a      	adds	r2, r3, #4
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	659a      	str	r2, [r3, #88]	@ 0x58
 800275a:	e006      	b.n	800276a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	4b08      	ldr	r3, [pc, #32]	@ (8002784 <DMA_CalcBaseAndBitshift+0x68>)
 8002764:	4013      	ands	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	aaaaaaab 	.word	0xaaaaaaab
 8002780:	0800744c 	.word	0x0800744c
 8002784:	fffffc00 	.word	0xfffffc00

08002788 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002798:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d11f      	bne.n	80027e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d856      	bhi.n	8002856 <DMA_CheckFifoParam+0xce>
 80027a8:	a201      	add	r2, pc, #4	@ (adr r2, 80027b0 <DMA_CheckFifoParam+0x28>)
 80027aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ae:	bf00      	nop
 80027b0:	080027c1 	.word	0x080027c1
 80027b4:	080027d3 	.word	0x080027d3
 80027b8:	080027c1 	.word	0x080027c1
 80027bc:	08002857 	.word	0x08002857
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d046      	beq.n	800285a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d0:	e043      	b.n	800285a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027da:	d140      	bne.n	800285e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e0:	e03d      	b.n	800285e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027ea:	d121      	bne.n	8002830 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d837      	bhi.n	8002862 <DMA_CheckFifoParam+0xda>
 80027f2:	a201      	add	r2, pc, #4	@ (adr r2, 80027f8 <DMA_CheckFifoParam+0x70>)
 80027f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f8:	08002809 	.word	0x08002809
 80027fc:	0800280f 	.word	0x0800280f
 8002800:	08002809 	.word	0x08002809
 8002804:	08002821 	.word	0x08002821
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
      break;
 800280c:	e030      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002812:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d025      	beq.n	8002866 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281e:	e022      	b.n	8002866 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002824:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002828:	d11f      	bne.n	800286a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800282e:	e01c      	b.n	800286a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d903      	bls.n	800283e <DMA_CheckFifoParam+0xb6>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d003      	beq.n	8002844 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800283c:	e018      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
      break;
 8002842:	e015      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002848:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00e      	beq.n	800286e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
      break;
 8002854:	e00b      	b.n	800286e <DMA_CheckFifoParam+0xe6>
      break;
 8002856:	bf00      	nop
 8002858:	e00a      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;
 800285a:	bf00      	nop
 800285c:	e008      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;
 800285e:	bf00      	nop
 8002860:	e006      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;
 8002862:	bf00      	nop
 8002864:	e004      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;
 8002866:	bf00      	nop
 8002868:	e002      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;   
 800286a:	bf00      	nop
 800286c:	e000      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;
 800286e:	bf00      	nop
    }
  } 
  
  return status; 
 8002870:	7bfb      	ldrb	r3, [r7, #15]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop

08002880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	@ 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	e175      	b.n	8002b8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80028a0:	2201      	movs	r2, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	f040 8164 	bne.w	8002b86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d005      	beq.n	80028d6 <HAL_GPIO_Init+0x56>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d130      	bne.n	8002938 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	2203      	movs	r2, #3
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800290c:	2201      	movs	r2, #1
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 0201 	and.w	r2, r3, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b03      	cmp	r3, #3
 8002942:	d017      	beq.n	8002974 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d123      	bne.n	80029c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	08da      	lsrs	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3208      	adds	r2, #8
 8002988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	220f      	movs	r2, #15
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	08da      	lsrs	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3208      	adds	r2, #8
 80029c2:	69b9      	ldr	r1, [r7, #24]
 80029c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0203 	and.w	r2, r3, #3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80be 	beq.w	8002b86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	4b66      	ldr	r3, [pc, #408]	@ (8002ba4 <HAL_GPIO_Init+0x324>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0e:	4a65      	ldr	r2, [pc, #404]	@ (8002ba4 <HAL_GPIO_Init+0x324>)
 8002a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a16:	4b63      	ldr	r3, [pc, #396]	@ (8002ba4 <HAL_GPIO_Init+0x324>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a22:	4a61      	ldr	r2, [pc, #388]	@ (8002ba8 <HAL_GPIO_Init+0x328>)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	089b      	lsrs	r3, r3, #2
 8002a28:	3302      	adds	r3, #2
 8002a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	220f      	movs	r2, #15
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a58      	ldr	r2, [pc, #352]	@ (8002bac <HAL_GPIO_Init+0x32c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d037      	beq.n	8002abe <HAL_GPIO_Init+0x23e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a57      	ldr	r2, [pc, #348]	@ (8002bb0 <HAL_GPIO_Init+0x330>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d031      	beq.n	8002aba <HAL_GPIO_Init+0x23a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a56      	ldr	r2, [pc, #344]	@ (8002bb4 <HAL_GPIO_Init+0x334>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d02b      	beq.n	8002ab6 <HAL_GPIO_Init+0x236>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a55      	ldr	r2, [pc, #340]	@ (8002bb8 <HAL_GPIO_Init+0x338>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d025      	beq.n	8002ab2 <HAL_GPIO_Init+0x232>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a54      	ldr	r2, [pc, #336]	@ (8002bbc <HAL_GPIO_Init+0x33c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01f      	beq.n	8002aae <HAL_GPIO_Init+0x22e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a53      	ldr	r2, [pc, #332]	@ (8002bc0 <HAL_GPIO_Init+0x340>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d019      	beq.n	8002aaa <HAL_GPIO_Init+0x22a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a52      	ldr	r2, [pc, #328]	@ (8002bc4 <HAL_GPIO_Init+0x344>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_GPIO_Init+0x226>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a51      	ldr	r2, [pc, #324]	@ (8002bc8 <HAL_GPIO_Init+0x348>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00d      	beq.n	8002aa2 <HAL_GPIO_Init+0x222>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a50      	ldr	r2, [pc, #320]	@ (8002bcc <HAL_GPIO_Init+0x34c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <HAL_GPIO_Init+0x21e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a4f      	ldr	r2, [pc, #316]	@ (8002bd0 <HAL_GPIO_Init+0x350>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_GPIO_Init+0x21a>
 8002a96:	2309      	movs	r3, #9
 8002a98:	e012      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002a9a:	230a      	movs	r3, #10
 8002a9c:	e010      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002a9e:	2308      	movs	r3, #8
 8002aa0:	e00e      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aa2:	2307      	movs	r3, #7
 8002aa4:	e00c      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aa6:	2306      	movs	r3, #6
 8002aa8:	e00a      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aaa:	2305      	movs	r3, #5
 8002aac:	e008      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aae:	2304      	movs	r3, #4
 8002ab0:	e006      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e004      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e002      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	f002 0203 	and.w	r2, r2, #3
 8002ac6:	0092      	lsls	r2, r2, #2
 8002ac8:	4093      	lsls	r3, r2
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ad0:	4935      	ldr	r1, [pc, #212]	@ (8002ba8 <HAL_GPIO_Init+0x328>)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ade:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd4 <HAL_GPIO_Init+0x354>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b02:	4a34      	ldr	r2, [pc, #208]	@ (8002bd4 <HAL_GPIO_Init+0x354>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b08:	4b32      	ldr	r3, [pc, #200]	@ (8002bd4 <HAL_GPIO_Init+0x354>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b2c:	4a29      	ldr	r2, [pc, #164]	@ (8002bd4 <HAL_GPIO_Init+0x354>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b32:	4b28      	ldr	r3, [pc, #160]	@ (8002bd4 <HAL_GPIO_Init+0x354>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b56:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd4 <HAL_GPIO_Init+0x354>)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd4 <HAL_GPIO_Init+0x354>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b80:	4a14      	ldr	r2, [pc, #80]	@ (8002bd4 <HAL_GPIO_Init+0x354>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b0f      	cmp	r3, #15
 8002b90:	f67f ae86 	bls.w	80028a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	3724      	adds	r7, #36	@ 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40013800 	.word	0x40013800
 8002bac:	40020000 	.word	0x40020000
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	40020800 	.word	0x40020800
 8002bb8:	40020c00 	.word	0x40020c00
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40021400 	.word	0x40021400
 8002bc4:	40021800 	.word	0x40021800
 8002bc8:	40021c00 	.word	0x40021c00
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	40022400 	.word	0x40022400
 8002bd4:	40013c00 	.word	0x40013c00

08002bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
 8002be4:	4613      	mov	r3, r2
 8002be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002be8:	787b      	ldrb	r3, [r7, #1]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002bf4:	e003      	b.n	8002bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002bf6:	887b      	ldrh	r3, [r7, #2]
 8002bf8:	041a      	lsls	r2, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	619a      	str	r2, [r3, #24]
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c16:	4b08      	ldr	r3, [pc, #32]	@ (8002c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d006      	beq.n	8002c30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c22:	4a05      	ldr	r2, [pc, #20]	@ (8002c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fd ffcf 	bl	8000bce <HAL_GPIO_EXTI_Callback>
  }
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40013c00 	.word	0x40013c00

08002c3c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c40:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a04      	ldr	r2, [pc, #16]	@ (8002c58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c4a:	6013      	str	r3, [r2, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40007000 	.word	0x40007000

08002c5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	4b23      	ldr	r3, [pc, #140]	@ (8002cf4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	4a22      	ldr	r2, [pc, #136]	@ (8002cf4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c72:	4b20      	ldr	r3, [pc, #128]	@ (8002cf4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c88:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c8a:	f7ff f8ad 	bl	8001de8 <HAL_GetTick>
 8002c8e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c90:	e009      	b.n	8002ca6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c92:	f7ff f8a9 	bl	8001de8 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ca0:	d901      	bls.n	8002ca6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e022      	b.n	8002cec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ca6:	4b14      	ldr	r3, [pc, #80]	@ (8002cf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb2:	d1ee      	bne.n	8002c92 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cb4:	4b10      	ldr	r3, [pc, #64]	@ (8002cf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0f      	ldr	r2, [pc, #60]	@ (8002cf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cbe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc0:	f7ff f892 	bl	8001de8 <HAL_GetTick>
 8002cc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cc6:	e009      	b.n	8002cdc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cc8:	f7ff f88e 	bl	8001de8 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cd6:	d901      	bls.n	8002cdc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e007      	b.n	8002cec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ce8:	d1ee      	bne.n	8002cc8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40007000 	.word	0x40007000

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d04:	2300      	movs	r3, #0
 8002d06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e291      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8087 	beq.w	8002e2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d20:	4b96      	ldr	r3, [pc, #600]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d00c      	beq.n	8002d46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2c:	4b93      	ldr	r3, [pc, #588]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d112      	bne.n	8002d5e <HAL_RCC_OscConfig+0x62>
 8002d38:	4b90      	ldr	r3, [pc, #576]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d44:	d10b      	bne.n	8002d5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d46:	4b8d      	ldr	r3, [pc, #564]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d06c      	beq.n	8002e2c <HAL_RCC_OscConfig+0x130>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d168      	bne.n	8002e2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e26b      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x7a>
 8002d68:	4b84      	ldr	r3, [pc, #528]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a83      	ldr	r2, [pc, #524]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	e02e      	b.n	8002dd4 <HAL_RCC_OscConfig+0xd8>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x9c>
 8002d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a7e      	ldr	r2, [pc, #504]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a7b      	ldr	r2, [pc, #492]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002d90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e01d      	b.n	8002dd4 <HAL_RCC_OscConfig+0xd8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0xc0>
 8002da2:	4b76      	ldr	r3, [pc, #472]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a75      	ldr	r2, [pc, #468]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002da8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4b73      	ldr	r3, [pc, #460]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a72      	ldr	r2, [pc, #456]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0xd8>
 8002dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b6c      	ldr	r3, [pc, #432]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a6b      	ldr	r2, [pc, #428]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7ff f804 	bl	8001de8 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de4:	f7ff f800 	bl	8001de8 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	@ 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e21f      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b61      	ldr	r3, [pc, #388]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0xe8>
 8002e02:	e014      	b.n	8002e2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe fff0 	bl	8001de8 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fe ffec 	bl	8001de8 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	@ 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e20b      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	4b57      	ldr	r3, [pc, #348]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x110>
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d069      	beq.n	8002f0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e3a:	4b50      	ldr	r3, [pc, #320]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e46:	4b4d      	ldr	r3, [pc, #308]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d11c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x190>
 8002e52:	4b4a      	ldr	r3, [pc, #296]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d116      	bne.n	8002e8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	4b47      	ldr	r3, [pc, #284]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_RCC_OscConfig+0x17a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e1df      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e76:	4b41      	ldr	r3, [pc, #260]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	493d      	ldr	r1, [pc, #244]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	e040      	b.n	8002f0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d023      	beq.n	8002edc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e94:	4b39      	ldr	r3, [pc, #228]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a38      	ldr	r2, [pc, #224]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe ffa2 	bl	8001de8 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fe ff9e 	bl	8001de8 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e1bd      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eba:	4b30      	ldr	r3, [pc, #192]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4929      	ldr	r1, [pc, #164]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
 8002eda:	e018      	b.n	8002f0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002edc:	4b27      	ldr	r3, [pc, #156]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a26      	ldr	r2, [pc, #152]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fe ff7e 	bl	8001de8 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef0:	f7fe ff7a 	bl	8001de8 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e199      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	4b1e      	ldr	r3, [pc, #120]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d038      	beq.n	8002f8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d019      	beq.n	8002f56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f22:	4b16      	ldr	r3, [pc, #88]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f26:	4a15      	ldr	r2, [pc, #84]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2e:	f7fe ff5b 	bl	8001de8 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f36:	f7fe ff57 	bl	8001de8 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e176      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f48:	4b0c      	ldr	r3, [pc, #48]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x23a>
 8002f54:	e01a      	b.n	8002f8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f56:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f5a:	4a08      	ldr	r2, [pc, #32]	@ (8002f7c <HAL_RCC_OscConfig+0x280>)
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7fe ff41 	bl	8001de8 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f6a:	f7fe ff3d 	bl	8001de8 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d903      	bls.n	8002f80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e15c      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
 8002f7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f80:	4b91      	ldr	r3, [pc, #580]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8002f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ee      	bne.n	8002f6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80a4 	beq.w	80030e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9a:	4b8b      	ldr	r3, [pc, #556]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10d      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	4b88      	ldr	r3, [pc, #544]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	4a87      	ldr	r2, [pc, #540]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fb2:	4b85      	ldr	r3, [pc, #532]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc2:	4b82      	ldr	r3, [pc, #520]	@ (80031cc <HAL_RCC_OscConfig+0x4d0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d118      	bne.n	8003000 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002fce:	4b7f      	ldr	r3, [pc, #508]	@ (80031cc <HAL_RCC_OscConfig+0x4d0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a7e      	ldr	r2, [pc, #504]	@ (80031cc <HAL_RCC_OscConfig+0x4d0>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fda:	f7fe ff05 	bl	8001de8 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe2:	f7fe ff01 	bl	8001de8 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b64      	cmp	r3, #100	@ 0x64
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e120      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff4:	4b75      	ldr	r3, [pc, #468]	@ (80031cc <HAL_RCC_OscConfig+0x4d0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x31a>
 8003008:	4b6f      	ldr	r3, [pc, #444]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300c:	4a6e      	ldr	r2, [pc, #440]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	@ 0x70
 8003014:	e02d      	b.n	8003072 <HAL_RCC_OscConfig+0x376>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x33c>
 800301e:	4b6a      	ldr	r3, [pc, #424]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003022:	4a69      	ldr	r2, [pc, #420]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	6713      	str	r3, [r2, #112]	@ 0x70
 800302a:	4b67      	ldr	r3, [pc, #412]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302e:	4a66      	ldr	r2, [pc, #408]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003030:	f023 0304 	bic.w	r3, r3, #4
 8003034:	6713      	str	r3, [r2, #112]	@ 0x70
 8003036:	e01c      	b.n	8003072 <HAL_RCC_OscConfig+0x376>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b05      	cmp	r3, #5
 800303e:	d10c      	bne.n	800305a <HAL_RCC_OscConfig+0x35e>
 8003040:	4b61      	ldr	r3, [pc, #388]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003044:	4a60      	ldr	r2, [pc, #384]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003046:	f043 0304 	orr.w	r3, r3, #4
 800304a:	6713      	str	r3, [r2, #112]	@ 0x70
 800304c:	4b5e      	ldr	r3, [pc, #376]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003050:	4a5d      	ldr	r2, [pc, #372]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6713      	str	r3, [r2, #112]	@ 0x70
 8003058:	e00b      	b.n	8003072 <HAL_RCC_OscConfig+0x376>
 800305a:	4b5b      	ldr	r3, [pc, #364]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305e:	4a5a      	ldr	r2, [pc, #360]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	6713      	str	r3, [r2, #112]	@ 0x70
 8003066:	4b58      	ldr	r3, [pc, #352]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306a:	4a57      	ldr	r2, [pc, #348]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800306c:	f023 0304 	bic.w	r3, r3, #4
 8003070:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d015      	beq.n	80030a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307a:	f7fe feb5 	bl	8001de8 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003080:	e00a      	b.n	8003098 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003082:	f7fe feb1 	bl	8001de8 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003090:	4293      	cmp	r3, r2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e0ce      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003098:	4b4b      	ldr	r3, [pc, #300]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0ee      	beq.n	8003082 <HAL_RCC_OscConfig+0x386>
 80030a4:	e014      	b.n	80030d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a6:	f7fe fe9f 	bl	8001de8 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ac:	e00a      	b.n	80030c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ae:	f7fe fe9b 	bl	8001de8 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030bc:	4293      	cmp	r3, r2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e0b8      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c4:	4b40      	ldr	r3, [pc, #256]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1ee      	bne.n	80030ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d105      	bne.n	80030e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d6:	4b3c      	ldr	r3, [pc, #240]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	4a3b      	ldr	r2, [pc, #236]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 80030dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030e0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80a4 	beq.w	8003234 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ec:	4b36      	ldr	r3, [pc, #216]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d06b      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d149      	bne.n	8003194 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003100:	4b31      	ldr	r3, [pc, #196]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a30      	ldr	r2, [pc, #192]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003106:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800310a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7fe fe6c 	bl	8001de8 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7fe fe68 	bl	8001de8 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e087      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	4b28      	ldr	r3, [pc, #160]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69da      	ldr	r2, [r3, #28]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	019b      	lsls	r3, r3, #6
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003148:	085b      	lsrs	r3, r3, #1
 800314a:	3b01      	subs	r3, #1
 800314c:	041b      	lsls	r3, r3, #16
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	4313      	orrs	r3, r2
 8003158:	4a1b      	ldr	r2, [pc, #108]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800315a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800315e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003160:	4b19      	ldr	r3, [pc, #100]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a18      	ldr	r2, [pc, #96]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800316a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe fe3c 	bl	8001de8 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003174:	f7fe fe38 	bl	8001de8 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e057      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	4b10      	ldr	r3, [pc, #64]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x478>
 8003192:	e04f      	b.n	8003234 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003194:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0b      	ldr	r2, [pc, #44]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800319a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800319e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe fe22 	bl	8001de8 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a8:	f7fe fe1e 	bl	8001de8 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e03d      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ba:	4b03      	ldr	r3, [pc, #12]	@ (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4ac>
 80031c6:	e035      	b.n	8003234 <HAL_RCC_OscConfig+0x538>
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <HAL_RCC_OscConfig+0x544>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d028      	beq.n	8003230 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d121      	bne.n	8003230 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d11a      	bne.n	8003230 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003200:	4013      	ands	r3, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003206:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003208:	4293      	cmp	r3, r2
 800320a:	d111      	bne.n	8003230 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	3b01      	subs	r3, #1
 800321a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d107      	bne.n	8003230 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800

08003244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0d0      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800325c:	4b6a      	ldr	r3, [pc, #424]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d910      	bls.n	800328c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b67      	ldr	r3, [pc, #412]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 020f 	bic.w	r2, r3, #15
 8003272:	4965      	ldr	r1, [pc, #404]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b63      	ldr	r3, [pc, #396]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b8      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a4:	4b59      	ldr	r3, [pc, #356]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a58      	ldr	r2, [pc, #352]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032bc:	4b53      	ldr	r3, [pc, #332]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a52      	ldr	r2, [pc, #328]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b50      	ldr	r3, [pc, #320]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	494d      	ldr	r1, [pc, #308]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d040      	beq.n	8003368 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	4b47      	ldr	r3, [pc, #284]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d115      	bne.n	8003326 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e07f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003306:	4b41      	ldr	r3, [pc, #260]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e073      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003316:	4b3d      	ldr	r3, [pc, #244]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e06b      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003326:	4b39      	ldr	r3, [pc, #228]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f023 0203 	bic.w	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4936      	ldr	r1, [pc, #216]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 8003334:	4313      	orrs	r3, r2
 8003336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003338:	f7fe fd56 	bl	8001de8 <HAL_GetTick>
 800333c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	e00a      	b.n	8003356 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003340:	f7fe fd52 	bl	8001de8 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e053      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	4b2d      	ldr	r3, [pc, #180]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 020c 	and.w	r2, r3, #12
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	429a      	cmp	r2, r3
 8003366:	d1eb      	bne.n	8003340 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003368:	4b27      	ldr	r3, [pc, #156]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d210      	bcs.n	8003398 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b24      	ldr	r3, [pc, #144]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 020f 	bic.w	r2, r3, #15
 800337e:	4922      	ldr	r1, [pc, #136]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b20      	ldr	r3, [pc, #128]	@ (8003408 <HAL_RCC_ClockConfig+0x1c4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e032      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4916      	ldr	r1, [pc, #88]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033c2:	4b12      	ldr	r3, [pc, #72]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	490e      	ldr	r1, [pc, #56]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033d6:	f000 f821 	bl	800341c <HAL_RCC_GetSysClockFreq>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b0b      	ldr	r3, [pc, #44]	@ (800340c <HAL_RCC_ClockConfig+0x1c8>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	490a      	ldr	r1, [pc, #40]	@ (8003410 <HAL_RCC_ClockConfig+0x1cc>)
 80033e8:	5ccb      	ldrb	r3, [r1, r3]
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	4a09      	ldr	r2, [pc, #36]	@ (8003414 <HAL_RCC_ClockConfig+0x1d0>)
 80033f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033f2:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <HAL_RCC_ClockConfig+0x1d4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fcb2 	bl	8001d60 <HAL_InitTick>

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023c00 	.word	0x40023c00
 800340c:	40023800 	.word	0x40023800
 8003410:	08007434 	.word	0x08007434
 8003414:	20000000 	.word	0x20000000
 8003418:	20000004 	.word	0x20000004

0800341c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800341c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003420:	b090      	sub	sp, #64	@ 0x40
 8003422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	637b      	str	r3, [r7, #52]	@ 0x34
 8003428:	2300      	movs	r3, #0
 800342a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800342c:	2300      	movs	r3, #0
 800342e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003434:	4b59      	ldr	r3, [pc, #356]	@ (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b08      	cmp	r3, #8
 800343e:	d00d      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x40>
 8003440:	2b08      	cmp	r3, #8
 8003442:	f200 80a1 	bhi.w	8003588 <HAL_RCC_GetSysClockFreq+0x16c>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0x34>
 800344a:	2b04      	cmp	r3, #4
 800344c:	d003      	beq.n	8003456 <HAL_RCC_GetSysClockFreq+0x3a>
 800344e:	e09b      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003450:	4b53      	ldr	r3, [pc, #332]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003452:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003454:	e09b      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003456:	4b53      	ldr	r3, [pc, #332]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003458:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800345a:	e098      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800345c:	4b4f      	ldr	r3, [pc, #316]	@ (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003464:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003466:	4b4d      	ldr	r3, [pc, #308]	@ (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d028      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003472:	4b4a      	ldr	r3, [pc, #296]	@ (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	099b      	lsrs	r3, r3, #6
 8003478:	2200      	movs	r2, #0
 800347a:	623b      	str	r3, [r7, #32]
 800347c:	627a      	str	r2, [r7, #36]	@ 0x24
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003484:	2100      	movs	r1, #0
 8003486:	4b47      	ldr	r3, [pc, #284]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003488:	fb03 f201 	mul.w	r2, r3, r1
 800348c:	2300      	movs	r3, #0
 800348e:	fb00 f303 	mul.w	r3, r0, r3
 8003492:	4413      	add	r3, r2
 8003494:	4a43      	ldr	r2, [pc, #268]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003496:	fba0 1202 	umull	r1, r2, r0, r2
 800349a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800349c:	460a      	mov	r2, r1
 800349e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80034a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034a2:	4413      	add	r3, r2
 80034a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a8:	2200      	movs	r2, #0
 80034aa:	61bb      	str	r3, [r7, #24]
 80034ac:	61fa      	str	r2, [r7, #28]
 80034ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034b6:	f7fc ff03 	bl	80002c0 <__aeabi_uldivmod>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4613      	mov	r3, r2
 80034c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034c2:	e053      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c4:	4b35      	ldr	r3, [pc, #212]	@ (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	2200      	movs	r2, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	617a      	str	r2, [r7, #20]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034d6:	f04f 0b00 	mov.w	fp, #0
 80034da:	4652      	mov	r2, sl
 80034dc:	465b      	mov	r3, fp
 80034de:	f04f 0000 	mov.w	r0, #0
 80034e2:	f04f 0100 	mov.w	r1, #0
 80034e6:	0159      	lsls	r1, r3, #5
 80034e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ec:	0150      	lsls	r0, r2, #5
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	ebb2 080a 	subs.w	r8, r2, sl
 80034f6:	eb63 090b 	sbc.w	r9, r3, fp
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003506:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800350a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800350e:	ebb2 0408 	subs.w	r4, r2, r8
 8003512:	eb63 0509 	sbc.w	r5, r3, r9
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	00eb      	lsls	r3, r5, #3
 8003520:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003524:	00e2      	lsls	r2, r4, #3
 8003526:	4614      	mov	r4, r2
 8003528:	461d      	mov	r5, r3
 800352a:	eb14 030a 	adds.w	r3, r4, sl
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	eb45 030b 	adc.w	r3, r5, fp
 8003534:	607b      	str	r3, [r7, #4]
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003542:	4629      	mov	r1, r5
 8003544:	028b      	lsls	r3, r1, #10
 8003546:	4621      	mov	r1, r4
 8003548:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800354c:	4621      	mov	r1, r4
 800354e:	028a      	lsls	r2, r1, #10
 8003550:	4610      	mov	r0, r2
 8003552:	4619      	mov	r1, r3
 8003554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003556:	2200      	movs	r2, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	60fa      	str	r2, [r7, #12]
 800355c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003560:	f7fc feae 	bl	80002c0 <__aeabi_uldivmod>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4613      	mov	r3, r2
 800356a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800356c:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <HAL_RCC_GetSysClockFreq+0x180>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	0c1b      	lsrs	r3, r3, #16
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	3301      	adds	r3, #1
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800357c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800357e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003586:	e002      	b.n	800358e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003588:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800358a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800358c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800358e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003590:	4618      	mov	r0, r3
 8003592:	3740      	adds	r7, #64	@ 0x40
 8003594:	46bd      	mov	sp, r7
 8003596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800
 80035a0:	00f42400 	.word	0x00f42400
 80035a4:	017d7840 	.word	0x017d7840

080035a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035ac:	4b03      	ldr	r3, [pc, #12]	@ (80035bc <HAL_RCC_GetHCLKFreq+0x14>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20000000 	.word	0x20000000

080035c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035c4:	f7ff fff0 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 80035c8:	4602      	mov	r2, r0
 80035ca:	4b05      	ldr	r3, [pc, #20]	@ (80035e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	0a9b      	lsrs	r3, r3, #10
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	4903      	ldr	r1, [pc, #12]	@ (80035e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d6:	5ccb      	ldrb	r3, [r1, r3]
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40023800 	.word	0x40023800
 80035e4:	08007444 	.word	0x08007444

080035e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035ec:	f7ff ffdc 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b05      	ldr	r3, [pc, #20]	@ (8003608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	0b5b      	lsrs	r3, r3, #13
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4903      	ldr	r1, [pc, #12]	@ (800360c <HAL_RCC_GetPCLK2Freq+0x24>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	08007444 	.word	0x08007444

08003610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d012      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003638:	4b69      	ldr	r3, [pc, #420]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	4a68      	ldr	r2, [pc, #416]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003642:	6093      	str	r3, [r2, #8]
 8003644:	4b66      	ldr	r3, [pc, #408]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800364c:	4964      	ldr	r1, [pc, #400]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800365a:	2301      	movs	r3, #1
 800365c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d017      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800366a:	4b5d      	ldr	r3, [pc, #372]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003670:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003678:	4959      	ldr	r1, [pc, #356]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003684:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003688:	d101      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800368a:	2301      	movs	r3, #1
 800368c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003696:	2301      	movs	r3, #1
 8003698:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d017      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036a6:	4b4e      	ldr	r3, [pc, #312]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	494a      	ldr	r1, [pc, #296]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036c4:	d101      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80036c6:	2301      	movs	r3, #1
 80036c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80036d2:	2301      	movs	r3, #1
 80036d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80036e2:	2301      	movs	r3, #1
 80036e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 808b 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036f4:	4b3a      	ldr	r3, [pc, #232]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	4a39      	ldr	r2, [pc, #228]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003700:	4b37      	ldr	r3, [pc, #220]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800370c:	4b35      	ldr	r3, [pc, #212]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a34      	ldr	r2, [pc, #208]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003718:	f7fe fb66 	bl	8001de8 <HAL_GetTick>
 800371c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003720:	f7fe fb62 	bl	8001de8 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	@ 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e357      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003732:	4b2c      	ldr	r3, [pc, #176]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800373e:	4b28      	ldr	r3, [pc, #160]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003746:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d035      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	429a      	cmp	r2, r3
 800375a:	d02e      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800375c:	4b20      	ldr	r3, [pc, #128]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003760:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003764:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003766:	4b1e      	ldr	r3, [pc, #120]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376a:	4a1d      	ldr	r2, [pc, #116]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003770:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003772:	4b1b      	ldr	r3, [pc, #108]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003776:	4a1a      	ldr	r2, [pc, #104]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800377c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800377e:	4a18      	ldr	r2, [pc, #96]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003784:	4b16      	ldr	r3, [pc, #88]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b01      	cmp	r3, #1
 800378e:	d114      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fe fb2a 	bl	8001de8 <HAL_GetTick>
 8003794:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003796:	e00a      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003798:	f7fe fb26 	bl	8001de8 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e319      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ae:	4b0c      	ldr	r3, [pc, #48]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0ee      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037c6:	d111      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80037c8:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037d4:	4b04      	ldr	r3, [pc, #16]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037d6:	400b      	ands	r3, r1
 80037d8:	4901      	ldr	r1, [pc, #4]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
 80037de:	e00b      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40007000 	.word	0x40007000
 80037e8:	0ffffcff 	.word	0x0ffffcff
 80037ec:	4baa      	ldr	r3, [pc, #680]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4aa9      	ldr	r2, [pc, #676]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80037f6:	6093      	str	r3, [r2, #8]
 80037f8:	4ba7      	ldr	r3, [pc, #668]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003804:	49a4      	ldr	r1, [pc, #656]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003806:	4313      	orrs	r3, r2
 8003808:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	d010      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003816:	4ba0      	ldr	r3, [pc, #640]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800381c:	4a9e      	ldr	r2, [pc, #632]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800381e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003822:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003826:	4b9c      	ldr	r3, [pc, #624]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003828:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003830:	4999      	ldr	r1, [pc, #612]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003844:	4b94      	ldr	r3, [pc, #592]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003852:	4991      	ldr	r1, [pc, #580]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003866:	4b8c      	ldr	r3, [pc, #560]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003874:	4988      	ldr	r1, [pc, #544]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003888:	4b83      	ldr	r3, [pc, #524]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003896:	4980      	ldr	r1, [pc, #512]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038aa:	4b7b      	ldr	r3, [pc, #492]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b8:	4977      	ldr	r1, [pc, #476]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038cc:	4b72      	ldr	r3, [pc, #456]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d2:	f023 0203 	bic.w	r2, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038da:	496f      	ldr	r1, [pc, #444]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f4:	f023 020c 	bic.w	r2, r3, #12
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038fc:	4966      	ldr	r1, [pc, #408]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003910:	4b61      	ldr	r3, [pc, #388]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003916:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391e:	495e      	ldr	r1, [pc, #376]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003932:	4b59      	ldr	r3, [pc, #356]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003938:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003940:	4955      	ldr	r1, [pc, #340]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003954:	4b50      	ldr	r3, [pc, #320]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800395a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003962:	494d      	ldr	r1, [pc, #308]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003976:	4b48      	ldr	r3, [pc, #288]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003984:	4944      	ldr	r1, [pc, #272]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003998:	4b3f      	ldr	r3, [pc, #252]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800399e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a6:	493c      	ldr	r1, [pc, #240]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039ba:	4b37      	ldr	r3, [pc, #220]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c8:	4933      	ldr	r1, [pc, #204]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039ea:	492b      	ldr	r1, [pc, #172]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d011      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039fe:	4b26      	ldr	r3, [pc, #152]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a04:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a0c:	4922      	ldr	r1, [pc, #136]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a3e:	4b16      	ldr	r3, [pc, #88]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a44:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4c:	4912      	ldr	r1, [pc, #72]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00b      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a60:	4b0d      	ldr	r3, [pc, #52]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a66:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a70:	4909      	ldr	r1, [pc, #36]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d006      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80d9 	beq.w	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a8c:	4b02      	ldr	r3, [pc, #8]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a01      	ldr	r2, [pc, #4]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a96:	e001      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9e:	f7fe f9a3 	bl	8001de8 <HAL_GetTick>
 8003aa2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003aa6:	f7fe f99f 	bl	8001de8 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b64      	cmp	r3, #100	@ 0x64
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e194      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ab8:	4b6c      	ldr	r3, [pc, #432]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f0      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d021      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d11d      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ad8:	4b64      	ldr	r3, [pc, #400]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ade:	0c1b      	lsrs	r3, r3, #16
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ae6:	4b61      	ldr	r3, [pc, #388]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aec:	0e1b      	lsrs	r3, r3, #24
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	019a      	lsls	r2, r3, #6
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	041b      	lsls	r3, r3, #16
 8003afe:	431a      	orrs	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	061b      	lsls	r3, r3, #24
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	071b      	lsls	r3, r3, #28
 8003b0c:	4957      	ldr	r1, [pc, #348]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d004      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d02e      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b3e:	d129      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b40:	4b4a      	ldr	r3, [pc, #296]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b46:	0c1b      	lsrs	r3, r3, #16
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b4e:	4b47      	ldr	r3, [pc, #284]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b54:	0f1b      	lsrs	r3, r3, #28
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	019a      	lsls	r2, r3, #6
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	041b      	lsls	r3, r3, #16
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	061b      	lsls	r3, r3, #24
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	071b      	lsls	r3, r3, #28
 8003b74:	493d      	ldr	r1, [pc, #244]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b82:	f023 021f 	bic.w	r2, r3, #31
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	4937      	ldr	r1, [pc, #220]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01d      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ba0:	4b32      	ldr	r3, [pc, #200]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ba6:	0e1b      	lsrs	r3, r3, #24
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bae:	4b2f      	ldr	r3, [pc, #188]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bb4:	0f1b      	lsrs	r3, r3, #28
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	019a      	lsls	r2, r3, #6
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	041b      	lsls	r3, r3, #16
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	061b      	lsls	r3, r3, #24
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	071b      	lsls	r3, r3, #28
 8003bd4:	4925      	ldr	r1, [pc, #148]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d011      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	019a      	lsls	r2, r3, #6
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	041b      	lsls	r3, r3, #16
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	061b      	lsls	r3, r3, #24
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	071b      	lsls	r3, r3, #28
 8003c04:	4919      	ldr	r1, [pc, #100]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c0c:	4b17      	ldr	r3, [pc, #92]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a16      	ldr	r2, [pc, #88]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c18:	f7fe f8e6 	bl	8001de8 <HAL_GetTick>
 8003c1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c20:	f7fe f8e2 	bl	8001de8 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	@ 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e0d7      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c32:	4b0e      	ldr	r3, [pc, #56]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	f040 80cd 	bne.w	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c46:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a08      	ldr	r2, [pc, #32]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c52:	f7fe f8c9 	bl	8001de8 <HAL_GetTick>
 8003c56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c5a:	f7fe f8c5 	bl	8001de8 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b64      	cmp	r3, #100	@ 0x64
 8003c66:	d903      	bls.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e0ba      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003c6c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c70:	4b5e      	ldr	r3, [pc, #376]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c7c:	d0ed      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d02e      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d12a      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ca6:	4b51      	ldr	r3, [pc, #324]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cac:	0c1b      	lsrs	r3, r3, #16
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cba:	0f1b      	lsrs	r3, r3, #28
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	019a      	lsls	r2, r3, #6
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	061b      	lsls	r3, r3, #24
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	071b      	lsls	r3, r3, #28
 8003cda:	4944      	ldr	r1, [pc, #272]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ce2:	4b42      	ldr	r3, [pc, #264]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ce8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	493d      	ldr	r1, [pc, #244]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d022      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d10:	d11d      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d12:	4b36      	ldr	r3, [pc, #216]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d18:	0e1b      	lsrs	r3, r3, #24
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d20:	4b32      	ldr	r3, [pc, #200]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d26:	0f1b      	lsrs	r3, r3, #28
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	019a      	lsls	r2, r3, #6
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	041b      	lsls	r3, r3, #16
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	061b      	lsls	r3, r3, #24
 8003d40:	431a      	orrs	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	071b      	lsls	r3, r3, #28
 8003d46:	4929      	ldr	r1, [pc, #164]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d028      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d5a:	4b24      	ldr	r3, [pc, #144]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d60:	0e1b      	lsrs	r3, r3, #24
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d68:	4b20      	ldr	r3, [pc, #128]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6e:	0c1b      	lsrs	r3, r3, #16
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	019a      	lsls	r2, r3, #6
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	041b      	lsls	r3, r3, #16
 8003d80:	431a      	orrs	r2, r3
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	061b      	lsls	r3, r3, #24
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	071b      	lsls	r3, r3, #28
 8003d8e:	4917      	ldr	r1, [pc, #92]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d96:	4b15      	ldr	r3, [pc, #84]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	4911      	ldr	r1, [pc, #68]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003dac:	4b0f      	ldr	r3, [pc, #60]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a0e      	ldr	r2, [pc, #56]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db8:	f7fe f816 	bl	8001de8 <HAL_GetTick>
 8003dbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003dc0:	f7fe f812 	bl	8001de8 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b64      	cmp	r3, #100	@ 0x64
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e007      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dd2:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dde:	d1ef      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800

08003df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e09d      	b.n	8003f3e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d108      	bne.n	8003e1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e12:	d009      	beq.n	8003e28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	61da      	str	r2, [r3, #28]
 8003e1a:	e005      	b.n	8003e28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fd fcfc 	bl	8001840 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e68:	d902      	bls.n	8003e70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	e002      	b.n	8003e76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003e7e:	d007      	beq.n	8003e90 <HAL_SPI_Init+0xa0>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e88:	d002      	beq.n	8003e90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed2:	ea42 0103 	orr.w	r1, r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eda:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	0c1b      	lsrs	r3, r3, #16
 8003eec:	f003 0204 	and.w	r2, r3, #4
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003f0c:	ea42 0103 	orr.w	r1, r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b088      	sub	sp, #32
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	4613      	mov	r3, r2
 8003f54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f56:	f7fd ff47 	bl	8001de8 <HAL_GetTick>
 8003f5a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d001      	beq.n	8003f70 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e15c      	b.n	800422a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_SPI_Transmit+0x36>
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e154      	b.n	800422a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_SPI_Transmit+0x48>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e14d      	b.n	800422a <HAL_SPI_Transmit+0x2e4>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2203      	movs	r2, #3
 8003f9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	88fa      	ldrh	r2, [r7, #6]
 8003fae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	88fa      	ldrh	r2, [r7, #6]
 8003fb4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fe0:	d10f      	bne.n	8004002 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ff0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004000:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400c:	2b40      	cmp	r3, #64	@ 0x40
 800400e:	d007      	beq.n	8004020 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800401e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004028:	d952      	bls.n	80040d0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_SPI_Transmit+0xf2>
 8004032:	8b7b      	ldrh	r3, [r7, #26]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d145      	bne.n	80040c4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403c:	881a      	ldrh	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004048:	1c9a      	adds	r2, r3, #2
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800405c:	e032      	b.n	80040c4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b02      	cmp	r3, #2
 800406a:	d112      	bne.n	8004092 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004070:	881a      	ldrh	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407c:	1c9a      	adds	r2, r3, #2
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004090:	e018      	b.n	80040c4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004092:	f7fd fea9 	bl	8001de8 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d803      	bhi.n	80040aa <HAL_SPI_Transmit+0x164>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a8:	d102      	bne.n	80040b0 <HAL_SPI_Transmit+0x16a>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d109      	bne.n	80040c4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e0b2      	b.n	800422a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1c7      	bne.n	800405e <HAL_SPI_Transmit+0x118>
 80040ce:	e083      	b.n	80041d8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_SPI_Transmit+0x198>
 80040d8:	8b7b      	ldrh	r3, [r7, #26]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d177      	bne.n	80041ce <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d912      	bls.n	800410e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ec:	881a      	ldrh	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f8:	1c9a      	adds	r2, r3, #2
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b02      	subs	r3, #2
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800410c:	e05f      	b.n	80041ce <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	330c      	adds	r3, #12
 8004118:	7812      	ldrb	r2, [r2, #0]
 800411a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004134:	e04b      	b.n	80041ce <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b02      	cmp	r3, #2
 8004142:	d12b      	bne.n	800419c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b01      	cmp	r3, #1
 800414c:	d912      	bls.n	8004174 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004152:	881a      	ldrh	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415e:	1c9a      	adds	r2, r3, #2
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b02      	subs	r3, #2
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004172:	e02c      	b.n	80041ce <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	330c      	adds	r3, #12
 800417e:	7812      	ldrb	r2, [r2, #0]
 8004180:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800419a:	e018      	b.n	80041ce <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800419c:	f7fd fe24 	bl	8001de8 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d803      	bhi.n	80041b4 <HAL_SPI_Transmit+0x26e>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	d102      	bne.n	80041ba <HAL_SPI_Transmit+0x274>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e02d      	b.n	800422a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1ae      	bne.n	8004136 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	6839      	ldr	r1, [r7, #0]
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f001 f8d3 	bl	8005388 <SPI_EndRxTxTransaction>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10a      	bne.n	800420c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004228:	2300      	movs	r3, #0
  }
}
 800422a:	4618      	mov	r0, r3
 800422c:	3720      	adds	r7, #32
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b088      	sub	sp, #32
 8004236:	af02      	add	r7, sp, #8
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	603b      	str	r3, [r7, #0]
 800423e:	4613      	mov	r3, r2
 8004240:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b01      	cmp	r3, #1
 800424c:	d001      	beq.n	8004252 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800424e:	2302      	movs	r3, #2
 8004250:	e123      	b.n	800449a <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_SPI_Receive+0x2c>
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e11b      	b.n	800449a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800426a:	d112      	bne.n	8004292 <HAL_SPI_Receive+0x60>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10e      	bne.n	8004292 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2204      	movs	r2, #4
 8004278:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800427c:	88fa      	ldrh	r2, [r7, #6]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f90a 	bl	80044a2 <HAL_SPI_TransmitReceive>
 800428e:	4603      	mov	r3, r0
 8004290:	e103      	b.n	800449a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004292:	f7fd fda9 	bl	8001de8 <HAL_GetTick>
 8004296:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_SPI_Receive+0x74>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e0f9      	b.n	800449a <HAL_SPI_Receive+0x268>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2204      	movs	r2, #4
 80042b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	88fa      	ldrh	r2, [r7, #6]
 80042c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	88fa      	ldrh	r2, [r7, #6]
 80042ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042f8:	d908      	bls.n	800430c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004308:	605a      	str	r2, [r3, #4]
 800430a:	e007      	b.n	800431c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800431a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004324:	d10f      	bne.n	8004346 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004334:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004344:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004350:	2b40      	cmp	r3, #64	@ 0x40
 8004352:	d007      	beq.n	8004364 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004362:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800436c:	d875      	bhi.n	800445a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800436e:	e037      	b.n	80043e0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b01      	cmp	r3, #1
 800437c:	d117      	bne.n	80043ae <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f103 020c 	add.w	r2, r3, #12
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	7812      	ldrb	r2, [r2, #0]
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80043ac:	e018      	b.n	80043e0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ae:	f7fd fd1b 	bl	8001de8 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d803      	bhi.n	80043c6 <HAL_SPI_Receive+0x194>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d102      	bne.n	80043cc <HAL_SPI_Receive+0x19a>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e05c      	b.n	800449a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1c1      	bne.n	8004370 <HAL_SPI_Receive+0x13e>
 80043ec:	e03b      	b.n	8004466 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d115      	bne.n	8004428 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	b292      	uxth	r2, r2
 8004408:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	1c9a      	adds	r2, r3, #2
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004426:	e018      	b.n	800445a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004428:	f7fd fcde 	bl	8001de8 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d803      	bhi.n	8004440 <HAL_SPI_Receive+0x20e>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443e:	d102      	bne.n	8004446 <HAL_SPI_Receive+0x214>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e01f      	b.n	800449a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1c3      	bne.n	80043ee <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	6839      	ldr	r1, [r7, #0]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 ff10 	bl	8005290 <SPI_EndRxTransaction>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004498:	2300      	movs	r3, #0
  }
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b08a      	sub	sp, #40	@ 0x28
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]
 80044ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044b0:	2301      	movs	r3, #1
 80044b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044b4:	f7fd fc98 	bl	8001de8 <HAL_GetTick>
 80044b8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044c0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80044c8:	887b      	ldrh	r3, [r7, #2]
 80044ca:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80044cc:	887b      	ldrh	r3, [r7, #2]
 80044ce:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044d0:	7ffb      	ldrb	r3, [r7, #31]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d00c      	beq.n	80044f0 <HAL_SPI_TransmitReceive+0x4e>
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044dc:	d106      	bne.n	80044ec <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d102      	bne.n	80044ec <HAL_SPI_TransmitReceive+0x4a>
 80044e6:	7ffb      	ldrb	r3, [r7, #31]
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d001      	beq.n	80044f0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
 80044ee:	e1f3      	b.n	80048d8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_SPI_TransmitReceive+0x60>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_SPI_TransmitReceive+0x60>
 80044fc:	887b      	ldrh	r3, [r7, #2]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e1e8      	b.n	80048d8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_SPI_TransmitReceive+0x72>
 8004510:	2302      	movs	r3, #2
 8004512:	e1e1      	b.n	80048d8 <HAL_SPI_TransmitReceive+0x436>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b04      	cmp	r3, #4
 8004526:	d003      	beq.n	8004530 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2205      	movs	r2, #5
 800452c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	887a      	ldrh	r2, [r7, #2]
 8004540:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	887a      	ldrh	r2, [r7, #2]
 8004548:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	887a      	ldrh	r2, [r7, #2]
 8004556:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004572:	d802      	bhi.n	800457a <HAL_SPI_TransmitReceive+0xd8>
 8004574:	8abb      	ldrh	r3, [r7, #20]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d908      	bls.n	800458c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	e007      	b.n	800459c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800459a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a6:	2b40      	cmp	r3, #64	@ 0x40
 80045a8:	d007      	beq.n	80045ba <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045c2:	f240 8083 	bls.w	80046cc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_SPI_TransmitReceive+0x132>
 80045ce:	8afb      	ldrh	r3, [r7, #22]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d16f      	bne.n	80046b4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d8:	881a      	ldrh	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e4:	1c9a      	adds	r2, r3, #2
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045f8:	e05c      	b.n	80046b4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b02      	cmp	r3, #2
 8004606:	d11b      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x19e>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d016      	beq.n	8004640 <HAL_SPI_TransmitReceive+0x19e>
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	2b01      	cmp	r3, #1
 8004616:	d113      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461c:	881a      	ldrh	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004628:	1c9a      	adds	r2, r3, #2
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b01      	cmp	r3, #1
 800464c:	d11c      	bne.n	8004688 <HAL_SPI_TransmitReceive+0x1e6>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d016      	beq.n	8004688 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004664:	b292      	uxth	r2, r2
 8004666:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466c:	1c9a      	adds	r2, r3, #2
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004684:	2301      	movs	r3, #1
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004688:	f7fd fbae 	bl	8001de8 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004694:	429a      	cmp	r2, r3
 8004696:	d80d      	bhi.n	80046b4 <HAL_SPI_TransmitReceive+0x212>
 8004698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469e:	d009      	beq.n	80046b4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e111      	b.n	80048d8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d19d      	bne.n	80045fa <HAL_SPI_TransmitReceive+0x158>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d197      	bne.n	80045fa <HAL_SPI_TransmitReceive+0x158>
 80046ca:	e0e5      	b.n	8004898 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_SPI_TransmitReceive+0x23a>
 80046d4:	8afb      	ldrh	r3, [r7, #22]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	f040 80d1 	bne.w	800487e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d912      	bls.n	800470c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ea:	881a      	ldrh	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f6:	1c9a      	adds	r2, r3, #2
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b02      	subs	r3, #2
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800470a:	e0b8      	b.n	800487e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004732:	e0a4      	b.n	800487e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b02      	cmp	r3, #2
 8004740:	d134      	bne.n	80047ac <HAL_SPI_TransmitReceive+0x30a>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004746:	b29b      	uxth	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d02f      	beq.n	80047ac <HAL_SPI_TransmitReceive+0x30a>
 800474c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474e:	2b01      	cmp	r3, #1
 8004750:	d12c      	bne.n	80047ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d912      	bls.n	8004782 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004760:	881a      	ldrh	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476c:	1c9a      	adds	r2, r3, #2
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b02      	subs	r3, #2
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004780:	e012      	b.n	80047a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	330c      	adds	r3, #12
 800478c:	7812      	ldrb	r2, [r2, #0]
 800478e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d148      	bne.n	800484c <HAL_SPI_TransmitReceive+0x3aa>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d042      	beq.n	800484c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d923      	bls.n	800481a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047dc:	b292      	uxth	r2, r2
 80047de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e4:	1c9a      	adds	r2, r3, #2
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b02      	subs	r3, #2
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	d81f      	bhi.n	8004848 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004816:	605a      	str	r2, [r3, #4]
 8004818:	e016      	b.n	8004848 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f103 020c 	add.w	r2, r3, #12
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004826:	7812      	ldrb	r2, [r2, #0]
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004848:	2301      	movs	r3, #1
 800484a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800484c:	f7fd facc 	bl	8001de8 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004858:	429a      	cmp	r2, r3
 800485a:	d803      	bhi.n	8004864 <HAL_SPI_TransmitReceive+0x3c2>
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004862:	d102      	bne.n	800486a <HAL_SPI_TransmitReceive+0x3c8>
 8004864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e02c      	b.n	80048d8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	f47f af55 	bne.w	8004734 <HAL_SPI_TransmitReceive+0x292>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	f47f af4e 	bne.w	8004734 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004898:	6a3a      	ldr	r2, [r7, #32]
 800489a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fd73 	bl	8005388 <SPI_EndRxTxTransaction>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e00e      	b.n	80048d8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80048d6:	2300      	movs	r3, #0
  }
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3728      	adds	r7, #40	@ 0x28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	4613      	mov	r3, r2
 80048ec:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d001      	beq.n	80048fe <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80048fa:	2302      	movs	r3, #2
 80048fc:	e0d4      	b.n	8004aa8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_SPI_Transmit_DMA+0x2a>
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e0cc      	b.n	8004aa8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_SPI_Transmit_DMA+0x3c>
 8004918:	2302      	movs	r3, #2
 800491a:	e0c5      	b.n	8004aa8 <HAL_SPI_Transmit_DMA+0x1c8>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2203      	movs	r2, #3
 8004928:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	88fa      	ldrh	r2, [r7, #6]
 8004942:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800496e:	d10f      	bne.n	8004990 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800497e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800498e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004994:	4a46      	ldr	r2, [pc, #280]	@ (8004ab0 <HAL_SPI_Transmit_DMA+0x1d0>)
 8004996:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499c:	4a45      	ldr	r2, [pc, #276]	@ (8004ab4 <HAL_SPI_Transmit_DMA+0x1d4>)
 800499e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a4:	4a44      	ldr	r2, [pc, #272]	@ (8004ab8 <HAL_SPI_Transmit_DMA+0x1d8>)
 80049a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ac:	2200      	movs	r2, #0
 80049ae:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049be:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049c8:	d82d      	bhi.n	8004a26 <HAL_SPI_Transmit_DMA+0x146>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049d4:	d127      	bne.n	8004a26 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049da:	b29b      	uxth	r3, r3
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10f      	bne.n	8004a04 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049f2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a02:	e010      	b.n	8004a26 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a12:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3301      	adds	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2e:	4619      	mov	r1, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a3c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a3e:	f7fd fbc3 	bl	80021c8 <HAL_DMA_Start_IT>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00b      	beq.n	8004a60 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4c:	f043 0210 	orr.w	r2, r3, #16
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e023      	b.n	8004aa8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6a:	2b40      	cmp	r3, #64	@ 0x40
 8004a6c:	d007      	beq.n	8004a7e <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a7c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0220 	orr.w	r2, r2, #32
 8004a94:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 0202 	orr.w	r2, r2, #2
 8004aa4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	08004fcd 	.word	0x08004fcd
 8004ab4:	08004f25 	.word	0x08004f25
 8004ab8:	08004fe9 	.word	0x08004fe9

08004abc <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	@ 0x28
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004ac8:	4b88      	ldr	r3, [pc, #544]	@ (8004cec <HAL_SPI_Abort+0x230>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a88      	ldr	r2, [pc, #544]	@ (8004cf0 <HAL_SPI_Abort+0x234>)
 8004ace:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad2:	0a5b      	lsrs	r3, r3, #9
 8004ad4:	2264      	movs	r2, #100	@ 0x64
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
 8004ada:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0220 	bic.w	r2, r2, #32
 8004aee:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004afa:	2b80      	cmp	r3, #128	@ 0x80
 8004afc:	d117      	bne.n	8004b2e <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a7c      	ldr	r2, [pc, #496]	@ (8004cf4 <HAL_SPI_Abort+0x238>)
 8004b02:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8004b16:	e008      	b.n	8004b2a <HAL_SPI_Abort+0x6e>
      }
      count--;
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b07      	cmp	r3, #7
 8004b28:	d1ec      	bne.n	8004b04 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b38:	2b40      	cmp	r3, #64	@ 0x40
 8004b3a:	d117      	bne.n	8004b6c <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a6e      	ldr	r2, [pc, #440]	@ (8004cf8 <HAL_SPI_Abort+0x23c>)
 8004b40:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d106      	bne.n	8004b56 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8004b54:	e008      	b.n	8004b68 <HAL_SPI_Abort+0xac>
      }
      count--;
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b07      	cmp	r3, #7
 8004b66:	d1ec      	bne.n	8004b42 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d141      	bne.n	8004bfe <HAL_SPI_Abort+0x142>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d03d      	beq.n	8004bfe <HAL_SPI_Abort+0x142>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b86:	2200      	movs	r2, #0
 8004b88:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fd fb7a 	bl	8002288 <HAL_DMA_Abort>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2240      	movs	r2, #64	@ 0x40
 8004b9e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0202 	bic.w	r2, r2, #2
 8004bae:	605a      	str	r2, [r3, #4]

      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004bb0:	f7fd f91a 	bl	8001de8 <HAL_GetTick>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	2164      	movs	r1, #100	@ 0x64
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fbe4 	bl	8005388 <SPI_EndRxTxTransaction>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_SPI_Abort+0x110>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2240      	movs	r2, #64	@ 0x40
 8004bca:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable SPI Peripheral */
      __HAL_SPI_DISABLE(hspi);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bda:	601a      	str	r2, [r3, #0]

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8004bdc:	f7fd f904 	bl	8001de8 <HAL_GetTick>
 8004be0:	4603      	mov	r3, r0
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	2364      	movs	r3, #100	@ 0x64
 8004be6:	2200      	movs	r2, #0
 8004be8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fab9 	bl	8005164 <SPI_WaitFifoStateUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <HAL_SPI_Abort+0x142>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2240      	movs	r2, #64	@ 0x40
 8004bfc:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d143      	bne.n	8004c94 <HAL_SPI_Abort+0x1d8>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d03f      	beq.n	8004c94 <HAL_SPI_Abort+0x1d8>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c18:	2200      	movs	r2, #0
 8004c1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fd fb31 	bl	8002288 <HAL_DMA_Abort>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <HAL_SPI_Abort+0x176>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2240      	movs	r2, #64	@ 0x40
 8004c30:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c40:	601a      	str	r2, [r3, #0]

      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004c42:	f7fd f8d1 	bl	8001de8 <HAL_GetTick>
 8004c46:	4603      	mov	r3, r0
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2364      	movs	r3, #100	@ 0x64
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2180      	movs	r1, #128	@ 0x80
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f9ff 	bl	8005054 <SPI_WaitFlagStateUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <HAL_SPI_Abort+0x1a6>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2240      	movs	r2, #64	@ 0x40
 8004c60:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8004c62:	f7fd f8c1 	bl	8001de8 <HAL_GetTick>
 8004c66:	4603      	mov	r3, r0
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	2364      	movs	r3, #100	@ 0x64
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fa76 	bl	8005164 <SPI_WaitFifoStateUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_SPI_Abort+0x1c8>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2240      	movs	r2, #64	@ 0x40
 8004c82:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0201 	bic.w	r2, r2, #1
 8004c92:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca6:	2b40      	cmp	r3, #64	@ 0x40
 8004ca8:	d102      	bne.n	8004cb0 <HAL_SPI_Abort+0x1f4>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	77fb      	strb	r3, [r7, #31]
 8004cae:	e002      	b.n	8004cb6 <HAL_SPI_Abort+0x1fa>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return errorcode;
 8004ce2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3720      	adds	r7, #32
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	20000000 	.word	0x20000000
 8004cf0:	057619f1 	.word	0x057619f1
 8004cf4:	0800551d 	.word	0x0800551d
 8004cf8:	0800545d 	.word	0x0800545d

08004cfc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10f      	bne.n	8004d40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	099b      	lsrs	r3, r3, #6
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d004      	beq.n	8004d40 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	4798      	blx	r3
    return;
 8004d3e:	e0d7      	b.n	8004ef0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	085b      	lsrs	r3, r3, #1
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <HAL_SPI_IRQHandler+0x66>
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	09db      	lsrs	r3, r3, #7
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d004      	beq.n	8004d62 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
    return;
 8004d60:	e0c6      	b.n	8004ef0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10c      	bne.n	8004d88 <HAL_SPI_IRQHandler+0x8c>
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	099b      	lsrs	r3, r3, #6
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	0a1b      	lsrs	r3, r3, #8
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 80b4 	beq.w	8004ef0 <HAL_SPI_IRQHandler+0x1f4>
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80ad 	beq.w	8004ef0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	099b      	lsrs	r3, r3, #6
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d023      	beq.n	8004dea <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d011      	beq.n	8004dd2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db2:	f043 0204 	orr.w	r2, r3, #4
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	e00b      	b.n	8004dea <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	693b      	ldr	r3, [r7, #16]
        return;
 8004de8:	e082      	b.n	8004ef0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d014      	beq.n	8004e20 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dfa:	f043 0201 	orr.w	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	0a1b      	lsrs	r3, r3, #8
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00c      	beq.n	8004e46 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e30:	f043 0208 	orr.w	r2, r3, #8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	60bb      	str	r3, [r7, #8]
 8004e44:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d04f      	beq.n	8004eee <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e5c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d104      	bne.n	8004e7a <HAL_SPI_IRQHandler+0x17e>
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d034      	beq.n	8004ee4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0203 	bic.w	r2, r2, #3
 8004e88:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d011      	beq.n	8004eb6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e96:	4a18      	ldr	r2, [pc, #96]	@ (8004ef8 <HAL_SPI_IRQHandler+0x1fc>)
 8004e98:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fd fa62 	bl	8002368 <HAL_DMA_Abort_IT>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d016      	beq.n	8004eec <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec2:	4a0d      	ldr	r2, [pc, #52]	@ (8004ef8 <HAL_SPI_IRQHandler+0x1fc>)
 8004ec4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fd fa4c 	bl	8002368 <HAL_DMA_Abort_IT>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004ee2:	e003      	b.n	8004eec <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f813 	bl	8004f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004eea:	e000      	b.n	8004eee <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004eec:	bf00      	nop
    return;
 8004eee:	bf00      	nop
  }
}
 8004ef0:	3720      	adds	r7, #32
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	08005029 	.word	0x08005029

08004efc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f30:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f32:	f7fc ff59 	bl	8001de8 <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f46:	d03b      	beq.n	8004fc0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0220 	bic.w	r2, r2, #32
 8004f56:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0202 	bic.w	r2, r2, #2
 8004f66:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	2164      	movs	r1, #100	@ 0x64
 8004f6c:	6978      	ldr	r0, [r7, #20]
 8004f6e:	f000 fa0b 	bl	8005388 <SPI_EndRxTxTransaction>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004fb8:	6978      	ldr	r0, [r7, #20]
 8004fba:	f7ff ffa9 	bl	8004f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004fbe:	e002      	b.n	8004fc6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004fc0:	6978      	ldr	r0, [r7, #20]
 8004fc2:	f7fb fdf9 	bl	8000bb8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f7ff ff8e 	bl	8004efc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004fe0:	bf00      	nop
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0203 	bic.w	r2, r2, #3
 8005004:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800500a:	f043 0210 	orr.w	r2, r3, #16
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7ff ff78 	bl	8004f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005020:	bf00      	nop
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005034:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f7ff ff63 	bl	8004f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	4613      	mov	r3, r2
 8005062:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005064:	f7fc fec0 	bl	8001de8 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	4413      	add	r3, r2
 8005072:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005074:	f7fc feb8 	bl	8001de8 <HAL_GetTick>
 8005078:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800507a:	4b39      	ldr	r3, [pc, #228]	@ (8005160 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	015b      	lsls	r3, r3, #5
 8005080:	0d1b      	lsrs	r3, r3, #20
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	fb02 f303 	mul.w	r3, r2, r3
 8005088:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800508a:	e055      	b.n	8005138 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005092:	d051      	beq.n	8005138 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005094:	f7fc fea8 	bl	8001de8 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d902      	bls.n	80050aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d13d      	bne.n	8005126 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050c2:	d111      	bne.n	80050e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050cc:	d004      	beq.n	80050d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d6:	d107      	bne.n	80050e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050f0:	d10f      	bne.n	8005112 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e018      	b.n	8005158 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d102      	bne.n	8005132 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	e002      	b.n	8005138 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	3b01      	subs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	4013      	ands	r3, r2
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	429a      	cmp	r2, r3
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	461a      	mov	r2, r3
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	429a      	cmp	r2, r3
 8005154:	d19a      	bne.n	800508c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	20000000 	.word	0x20000000

08005164 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	@ 0x28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005172:	2300      	movs	r3, #0
 8005174:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005176:	f7fc fe37 	bl	8001de8 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	4413      	add	r3, r2
 8005184:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005186:	f7fc fe2f 	bl	8001de8 <HAL_GetTick>
 800518a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005194:	4b3d      	ldr	r3, [pc, #244]	@ (800528c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	00da      	lsls	r2, r3, #3
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	0d1b      	lsrs	r3, r3, #20
 80051a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a6:	fb02 f303 	mul.w	r3, r2, r3
 80051aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80051ac:	e061      	b.n	8005272 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80051b4:	d107      	bne.n	80051c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d104      	bne.n	80051c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80051c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d051      	beq.n	8005272 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051ce:	f7fc fe0b 	bl	8001de8 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051da:	429a      	cmp	r2, r3
 80051dc:	d902      	bls.n	80051e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d13d      	bne.n	8005260 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80051f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051fc:	d111      	bne.n	8005222 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005206:	d004      	beq.n	8005212 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005210:	d107      	bne.n	8005222 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005220:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800522a:	d10f      	bne.n	800524c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800524a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e011      	b.n	8005284 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d102      	bne.n	800526c <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	627b      	str	r3, [r7, #36]	@ 0x24
 800526a:	e002      	b.n	8005272 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	3b01      	subs	r3, #1
 8005270:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4013      	ands	r3, r2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	429a      	cmp	r2, r3
 8005280:	d195      	bne.n	80051ae <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3728      	adds	r7, #40	@ 0x28
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20000000 	.word	0x20000000

08005290 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052a4:	d111      	bne.n	80052ca <SPI_EndRxTransaction+0x3a>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052ae:	d004      	beq.n	80052ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052b8:	d107      	bne.n	80052ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052d2:	d112      	bne.n	80052fa <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2200      	movs	r2, #0
 80052dc:	2180      	movs	r1, #128	@ 0x80
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f7ff feb8 	bl	8005054 <SPI_WaitFlagStateUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d021      	beq.n	800532e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ee:	f043 0220 	orr.w	r2, r3, #32
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e03d      	b.n	8005376 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052fa:	4b21      	ldr	r3, [pc, #132]	@ (8005380 <SPI_EndRxTransaction+0xf0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a21      	ldr	r2, [pc, #132]	@ (8005384 <SPI_EndRxTransaction+0xf4>)
 8005300:	fba2 2303 	umull	r2, r3, r2, r3
 8005304:	0d5b      	lsrs	r3, r3, #21
 8005306:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800530a:	fb02 f303 	mul.w	r3, r2, r3
 800530e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	3b01      	subs	r3, #1
 800531a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005326:	2b80      	cmp	r3, #128	@ 0x80
 8005328:	d0f2      	beq.n	8005310 <SPI_EndRxTransaction+0x80>
 800532a:	e000      	b.n	800532e <SPI_EndRxTransaction+0x9e>
        break;
 800532c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005336:	d11d      	bne.n	8005374 <SPI_EndRxTransaction+0xe4>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005340:	d004      	beq.n	800534c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800534a:	d113      	bne.n	8005374 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2200      	movs	r2, #0
 8005354:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f7ff ff03 	bl	8005164 <SPI_WaitFifoStateUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d007      	beq.n	8005374 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005368:	f043 0220 	orr.w	r2, r3, #32
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e000      	b.n	8005376 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	20000000 	.word	0x20000000
 8005384:	165e9f81 	.word	0x165e9f81

08005388 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af02      	add	r7, sp, #8
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2200      	movs	r2, #0
 800539c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7ff fedf 	bl	8005164 <SPI_WaitFifoStateUntilTimeout>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b0:	f043 0220 	orr.w	r2, r3, #32
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e046      	b.n	800544a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053bc:	4b25      	ldr	r3, [pc, #148]	@ (8005454 <SPI_EndRxTxTransaction+0xcc>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a25      	ldr	r2, [pc, #148]	@ (8005458 <SPI_EndRxTxTransaction+0xd0>)
 80053c2:	fba2 2303 	umull	r2, r3, r2, r3
 80053c6:	0d5b      	lsrs	r3, r3, #21
 80053c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80053cc:	fb02 f303 	mul.w	r3, r2, r3
 80053d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053da:	d112      	bne.n	8005402 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2200      	movs	r2, #0
 80053e4:	2180      	movs	r1, #128	@ 0x80
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff fe34 	bl	8005054 <SPI_WaitFlagStateUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d016      	beq.n	8005420 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053f6:	f043 0220 	orr.w	r2, r3, #32
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e023      	b.n	800544a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	3b01      	subs	r3, #1
 800540c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005418:	2b80      	cmp	r3, #128	@ 0x80
 800541a:	d0f2      	beq.n	8005402 <SPI_EndRxTxTransaction+0x7a>
 800541c:	e000      	b.n	8005420 <SPI_EndRxTxTransaction+0x98>
        break;
 800541e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2200      	movs	r2, #0
 8005428:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f7ff fe99 	bl	8005164 <SPI_WaitFifoStateUntilTimeout>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800543c:	f043 0220 	orr.w	r2, r3, #32
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e000      	b.n	800544a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000000 	.word	0x20000000
 8005458:	165e9f81 	.word	0x165e9f81

0800545c <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af02      	add	r7, sp, #8
 8005462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005472:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005474:	4b27      	ldr	r3, [pc, #156]	@ (8005514 <SPI_AbortRx_ISR+0xb8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a27      	ldr	r2, [pc, #156]	@ (8005518 <SPI_AbortRx_ISR+0xbc>)
 800547a:	fba2 2303 	umull	r2, r3, r2, r3
 800547e:	0a5b      	lsrs	r3, r3, #9
 8005480:	2264      	movs	r2, #100	@ 0x64
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005496:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 80054aa:	e009      	b.n	80054c0 <SPI_AbortRx_ISR+0x64>
    }
    count--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054bc:	2b40      	cmp	r3, #64	@ 0x40
 80054be:	d0eb      	beq.n	8005498 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80054c0:	f7fc fc92 	bl	8001de8 <HAL_GetTick>
 80054c4:	4603      	mov	r3, r0
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	2364      	movs	r3, #100	@ 0x64
 80054ca:	2200      	movs	r2, #0
 80054cc:	2180      	movs	r1, #128	@ 0x80
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff fdc0 	bl	8005054 <SPI_WaitFlagStateUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2240      	movs	r2, #64	@ 0x40
 80054de:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 80054e0:	f7fc fc82 	bl	8001de8 <HAL_GetTick>
 80054e4:	4603      	mov	r3, r0
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	2364      	movs	r3, #100	@ 0x64
 80054ea:	2200      	movs	r2, #0
 80054ec:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff fe37 	bl	8005164 <SPI_WaitFifoStateUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <SPI_AbortRx_ISR+0xa6>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2240      	movs	r2, #64	@ 0x40
 8005500:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2207      	movs	r2, #7
 8005506:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800550a:	bf00      	nop
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000000 	.word	0x20000000
 8005518:	057619f1 	.word	0x057619f1

0800551c <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af02      	add	r7, sp, #8
 8005522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005524:	4b4c      	ldr	r3, [pc, #304]	@ (8005658 <SPI_AbortTx_ISR+0x13c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a4c      	ldr	r2, [pc, #304]	@ (800565c <SPI_AbortTx_ISR+0x140>)
 800552a:	fba2 2303 	umull	r2, r3, r2, r3
 800552e:	0a5b      	lsrs	r3, r3, #9
 8005530:	2264      	movs	r2, #100	@ 0x64
 8005532:	fb02 f303 	mul.w	r3, r2, r3
 8005536:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005546:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005552:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800555a:	e009      	b.n	8005570 <SPI_AbortTx_ISR+0x54>
    }
    count--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3b01      	subs	r3, #1
 8005560:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556c:	2b80      	cmp	r3, #128	@ 0x80
 800556e:	d0eb      	beq.n	8005548 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005570:	f7fc fc3a 	bl	8001de8 <HAL_GetTick>
 8005574:	4603      	mov	r3, r0
 8005576:	461a      	mov	r2, r3
 8005578:	2164      	movs	r1, #100	@ 0x64
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff ff04 	bl	8005388 <SPI_EndRxTxTransaction>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2240      	movs	r2, #64	@ 0x40
 800558a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800559a:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800559c:	f7fc fc24 	bl	8001de8 <HAL_GetTick>
 80055a0:	4603      	mov	r3, r0
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	2364      	movs	r3, #100	@ 0x64
 80055a6:	2200      	movs	r2, #0
 80055a8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff fdd9 	bl	8005164 <SPI_WaitFifoStateUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <SPI_AbortTx_ISR+0xa2>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2240      	movs	r2, #64	@ 0x40
 80055bc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c8:	2b40      	cmp	r3, #64	@ 0x40
 80055ca:	d13c      	bne.n	8005646 <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055da:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80055ee:	e009      	b.n	8005604 <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005600:	2b40      	cmp	r3, #64	@ 0x40
 8005602:	d0eb      	beq.n	80055dc <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005604:	f7fc fbf0 	bl	8001de8 <HAL_GetTick>
 8005608:	4603      	mov	r3, r0
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	2364      	movs	r3, #100	@ 0x64
 800560e:	2200      	movs	r2, #0
 8005610:	2180      	movs	r1, #128	@ 0x80
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff fd1e 	bl	8005054 <SPI_WaitFlagStateUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2240      	movs	r2, #64	@ 0x40
 8005622:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8005624:	f7fc fbe0 	bl	8001de8 <HAL_GetTick>
 8005628:	4603      	mov	r3, r0
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	2364      	movs	r3, #100	@ 0x64
 800562e:	2200      	movs	r2, #0
 8005630:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff fd95 	bl	8005164 <SPI_WaitFifoStateUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <SPI_AbortTx_ISR+0x12a>
                                      HAL_GetTick()) != HAL_OK)
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2240      	movs	r2, #64	@ 0x40
 8005644:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2207      	movs	r2, #7
 800564a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800564e:	bf00      	nop
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000000 	.word	0x20000000
 800565c:	057619f1 	.word	0x057619f1

08005660 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e040      	b.n	80056f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fc f9aa 	bl	80019dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2224      	movs	r2, #36	@ 0x24
 800568c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0201 	bic.w	r2, r2, #1
 800569c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fb16 	bl	8005cd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f8af 	bl	8005810 <UART_SetConfig>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e01b      	b.n	80056f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fb95 	bl	8005e1c <UART_CheckIdleState>
 80056f2:	4603      	mov	r3, r0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08a      	sub	sp, #40	@ 0x28
 8005700:	af02      	add	r7, sp, #8
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	4613      	mov	r3, r2
 800570a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005710:	2b20      	cmp	r3, #32
 8005712:	d177      	bne.n	8005804 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <HAL_UART_Transmit+0x24>
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e070      	b.n	8005806 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2221      	movs	r2, #33	@ 0x21
 8005730:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005732:	f7fc fb59 	bl	8001de8 <HAL_GetTick>
 8005736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	88fa      	ldrh	r2, [r7, #6]
 800573c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	88fa      	ldrh	r2, [r7, #6]
 8005744:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005750:	d108      	bne.n	8005764 <HAL_UART_Transmit+0x68>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d104      	bne.n	8005764 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800575a:	2300      	movs	r3, #0
 800575c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	e003      	b.n	800576c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005768:	2300      	movs	r3, #0
 800576a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800576c:	e02f      	b.n	80057ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2200      	movs	r2, #0
 8005776:	2180      	movs	r1, #128	@ 0x80
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fba6 	bl	8005eca <UART_WaitOnFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d004      	beq.n	800578e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e03b      	b.n	8005806 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10b      	bne.n	80057ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	3302      	adds	r3, #2
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	e007      	b.n	80057bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	781a      	ldrb	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	3301      	adds	r3, #1
 80057ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1c9      	bne.n	800576e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2200      	movs	r2, #0
 80057e2:	2140      	movs	r1, #64	@ 0x40
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fb70 	bl	8005eca <UART_WaitOnFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2220      	movs	r2, #32
 80057f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e005      	b.n	8005806 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2220      	movs	r2, #32
 80057fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	e000      	b.n	8005806 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005804:	2302      	movs	r3, #2
  }
}
 8005806:	4618      	mov	r0, r3
 8005808:	3720      	adds	r7, #32
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b088      	sub	sp, #32
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4ba6      	ldr	r3, [pc, #664]	@ (8005ad4 <UART_SetConfig+0x2c4>)
 800583c:	4013      	ands	r3, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6812      	ldr	r2, [r2, #0]
 8005842:	6979      	ldr	r1, [r7, #20]
 8005844:	430b      	orrs	r3, r1
 8005846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	430a      	orrs	r2, r1
 8005880:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a94      	ldr	r2, [pc, #592]	@ (8005ad8 <UART_SetConfig+0x2c8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d120      	bne.n	80058ce <UART_SetConfig+0xbe>
 800588c:	4b93      	ldr	r3, [pc, #588]	@ (8005adc <UART_SetConfig+0x2cc>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b03      	cmp	r3, #3
 8005898:	d816      	bhi.n	80058c8 <UART_SetConfig+0xb8>
 800589a:	a201      	add	r2, pc, #4	@ (adr r2, 80058a0 <UART_SetConfig+0x90>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058b1 	.word	0x080058b1
 80058a4:	080058bd 	.word	0x080058bd
 80058a8:	080058b7 	.word	0x080058b7
 80058ac:	080058c3 	.word	0x080058c3
 80058b0:	2301      	movs	r3, #1
 80058b2:	77fb      	strb	r3, [r7, #31]
 80058b4:	e150      	b.n	8005b58 <UART_SetConfig+0x348>
 80058b6:	2302      	movs	r3, #2
 80058b8:	77fb      	strb	r3, [r7, #31]
 80058ba:	e14d      	b.n	8005b58 <UART_SetConfig+0x348>
 80058bc:	2304      	movs	r3, #4
 80058be:	77fb      	strb	r3, [r7, #31]
 80058c0:	e14a      	b.n	8005b58 <UART_SetConfig+0x348>
 80058c2:	2308      	movs	r3, #8
 80058c4:	77fb      	strb	r3, [r7, #31]
 80058c6:	e147      	b.n	8005b58 <UART_SetConfig+0x348>
 80058c8:	2310      	movs	r3, #16
 80058ca:	77fb      	strb	r3, [r7, #31]
 80058cc:	e144      	b.n	8005b58 <UART_SetConfig+0x348>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a83      	ldr	r2, [pc, #524]	@ (8005ae0 <UART_SetConfig+0x2d0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d132      	bne.n	800593e <UART_SetConfig+0x12e>
 80058d8:	4b80      	ldr	r3, [pc, #512]	@ (8005adc <UART_SetConfig+0x2cc>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	2b0c      	cmp	r3, #12
 80058e4:	d828      	bhi.n	8005938 <UART_SetConfig+0x128>
 80058e6:	a201      	add	r2, pc, #4	@ (adr r2, 80058ec <UART_SetConfig+0xdc>)
 80058e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ec:	08005921 	.word	0x08005921
 80058f0:	08005939 	.word	0x08005939
 80058f4:	08005939 	.word	0x08005939
 80058f8:	08005939 	.word	0x08005939
 80058fc:	0800592d 	.word	0x0800592d
 8005900:	08005939 	.word	0x08005939
 8005904:	08005939 	.word	0x08005939
 8005908:	08005939 	.word	0x08005939
 800590c:	08005927 	.word	0x08005927
 8005910:	08005939 	.word	0x08005939
 8005914:	08005939 	.word	0x08005939
 8005918:	08005939 	.word	0x08005939
 800591c:	08005933 	.word	0x08005933
 8005920:	2300      	movs	r3, #0
 8005922:	77fb      	strb	r3, [r7, #31]
 8005924:	e118      	b.n	8005b58 <UART_SetConfig+0x348>
 8005926:	2302      	movs	r3, #2
 8005928:	77fb      	strb	r3, [r7, #31]
 800592a:	e115      	b.n	8005b58 <UART_SetConfig+0x348>
 800592c:	2304      	movs	r3, #4
 800592e:	77fb      	strb	r3, [r7, #31]
 8005930:	e112      	b.n	8005b58 <UART_SetConfig+0x348>
 8005932:	2308      	movs	r3, #8
 8005934:	77fb      	strb	r3, [r7, #31]
 8005936:	e10f      	b.n	8005b58 <UART_SetConfig+0x348>
 8005938:	2310      	movs	r3, #16
 800593a:	77fb      	strb	r3, [r7, #31]
 800593c:	e10c      	b.n	8005b58 <UART_SetConfig+0x348>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a68      	ldr	r2, [pc, #416]	@ (8005ae4 <UART_SetConfig+0x2d4>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d120      	bne.n	800598a <UART_SetConfig+0x17a>
 8005948:	4b64      	ldr	r3, [pc, #400]	@ (8005adc <UART_SetConfig+0x2cc>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800594e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005952:	2b30      	cmp	r3, #48	@ 0x30
 8005954:	d013      	beq.n	800597e <UART_SetConfig+0x16e>
 8005956:	2b30      	cmp	r3, #48	@ 0x30
 8005958:	d814      	bhi.n	8005984 <UART_SetConfig+0x174>
 800595a:	2b20      	cmp	r3, #32
 800595c:	d009      	beq.n	8005972 <UART_SetConfig+0x162>
 800595e:	2b20      	cmp	r3, #32
 8005960:	d810      	bhi.n	8005984 <UART_SetConfig+0x174>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <UART_SetConfig+0x15c>
 8005966:	2b10      	cmp	r3, #16
 8005968:	d006      	beq.n	8005978 <UART_SetConfig+0x168>
 800596a:	e00b      	b.n	8005984 <UART_SetConfig+0x174>
 800596c:	2300      	movs	r3, #0
 800596e:	77fb      	strb	r3, [r7, #31]
 8005970:	e0f2      	b.n	8005b58 <UART_SetConfig+0x348>
 8005972:	2302      	movs	r3, #2
 8005974:	77fb      	strb	r3, [r7, #31]
 8005976:	e0ef      	b.n	8005b58 <UART_SetConfig+0x348>
 8005978:	2304      	movs	r3, #4
 800597a:	77fb      	strb	r3, [r7, #31]
 800597c:	e0ec      	b.n	8005b58 <UART_SetConfig+0x348>
 800597e:	2308      	movs	r3, #8
 8005980:	77fb      	strb	r3, [r7, #31]
 8005982:	e0e9      	b.n	8005b58 <UART_SetConfig+0x348>
 8005984:	2310      	movs	r3, #16
 8005986:	77fb      	strb	r3, [r7, #31]
 8005988:	e0e6      	b.n	8005b58 <UART_SetConfig+0x348>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a56      	ldr	r2, [pc, #344]	@ (8005ae8 <UART_SetConfig+0x2d8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d120      	bne.n	80059d6 <UART_SetConfig+0x1c6>
 8005994:	4b51      	ldr	r3, [pc, #324]	@ (8005adc <UART_SetConfig+0x2cc>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800599a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800599e:	2bc0      	cmp	r3, #192	@ 0xc0
 80059a0:	d013      	beq.n	80059ca <UART_SetConfig+0x1ba>
 80059a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80059a4:	d814      	bhi.n	80059d0 <UART_SetConfig+0x1c0>
 80059a6:	2b80      	cmp	r3, #128	@ 0x80
 80059a8:	d009      	beq.n	80059be <UART_SetConfig+0x1ae>
 80059aa:	2b80      	cmp	r3, #128	@ 0x80
 80059ac:	d810      	bhi.n	80059d0 <UART_SetConfig+0x1c0>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <UART_SetConfig+0x1a8>
 80059b2:	2b40      	cmp	r3, #64	@ 0x40
 80059b4:	d006      	beq.n	80059c4 <UART_SetConfig+0x1b4>
 80059b6:	e00b      	b.n	80059d0 <UART_SetConfig+0x1c0>
 80059b8:	2300      	movs	r3, #0
 80059ba:	77fb      	strb	r3, [r7, #31]
 80059bc:	e0cc      	b.n	8005b58 <UART_SetConfig+0x348>
 80059be:	2302      	movs	r3, #2
 80059c0:	77fb      	strb	r3, [r7, #31]
 80059c2:	e0c9      	b.n	8005b58 <UART_SetConfig+0x348>
 80059c4:	2304      	movs	r3, #4
 80059c6:	77fb      	strb	r3, [r7, #31]
 80059c8:	e0c6      	b.n	8005b58 <UART_SetConfig+0x348>
 80059ca:	2308      	movs	r3, #8
 80059cc:	77fb      	strb	r3, [r7, #31]
 80059ce:	e0c3      	b.n	8005b58 <UART_SetConfig+0x348>
 80059d0:	2310      	movs	r3, #16
 80059d2:	77fb      	strb	r3, [r7, #31]
 80059d4:	e0c0      	b.n	8005b58 <UART_SetConfig+0x348>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a44      	ldr	r2, [pc, #272]	@ (8005aec <UART_SetConfig+0x2dc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d125      	bne.n	8005a2c <UART_SetConfig+0x21c>
 80059e0:	4b3e      	ldr	r3, [pc, #248]	@ (8005adc <UART_SetConfig+0x2cc>)
 80059e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059ee:	d017      	beq.n	8005a20 <UART_SetConfig+0x210>
 80059f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059f4:	d817      	bhi.n	8005a26 <UART_SetConfig+0x216>
 80059f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059fa:	d00b      	beq.n	8005a14 <UART_SetConfig+0x204>
 80059fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a00:	d811      	bhi.n	8005a26 <UART_SetConfig+0x216>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <UART_SetConfig+0x1fe>
 8005a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a0a:	d006      	beq.n	8005a1a <UART_SetConfig+0x20a>
 8005a0c:	e00b      	b.n	8005a26 <UART_SetConfig+0x216>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	77fb      	strb	r3, [r7, #31]
 8005a12:	e0a1      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a14:	2302      	movs	r3, #2
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e09e      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a1a:	2304      	movs	r3, #4
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e09b      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a20:	2308      	movs	r3, #8
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e098      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a26:	2310      	movs	r3, #16
 8005a28:	77fb      	strb	r3, [r7, #31]
 8005a2a:	e095      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a2f      	ldr	r2, [pc, #188]	@ (8005af0 <UART_SetConfig+0x2e0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d125      	bne.n	8005a82 <UART_SetConfig+0x272>
 8005a36:	4b29      	ldr	r3, [pc, #164]	@ (8005adc <UART_SetConfig+0x2cc>)
 8005a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005a40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a44:	d017      	beq.n	8005a76 <UART_SetConfig+0x266>
 8005a46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a4a:	d817      	bhi.n	8005a7c <UART_SetConfig+0x26c>
 8005a4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a50:	d00b      	beq.n	8005a6a <UART_SetConfig+0x25a>
 8005a52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a56:	d811      	bhi.n	8005a7c <UART_SetConfig+0x26c>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <UART_SetConfig+0x254>
 8005a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a60:	d006      	beq.n	8005a70 <UART_SetConfig+0x260>
 8005a62:	e00b      	b.n	8005a7c <UART_SetConfig+0x26c>
 8005a64:	2301      	movs	r3, #1
 8005a66:	77fb      	strb	r3, [r7, #31]
 8005a68:	e076      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	77fb      	strb	r3, [r7, #31]
 8005a6e:	e073      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a70:	2304      	movs	r3, #4
 8005a72:	77fb      	strb	r3, [r7, #31]
 8005a74:	e070      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a76:	2308      	movs	r3, #8
 8005a78:	77fb      	strb	r3, [r7, #31]
 8005a7a:	e06d      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	77fb      	strb	r3, [r7, #31]
 8005a80:	e06a      	b.n	8005b58 <UART_SetConfig+0x348>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1b      	ldr	r2, [pc, #108]	@ (8005af4 <UART_SetConfig+0x2e4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d138      	bne.n	8005afe <UART_SetConfig+0x2ee>
 8005a8c:	4b13      	ldr	r3, [pc, #76]	@ (8005adc <UART_SetConfig+0x2cc>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a92:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005a96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a9a:	d017      	beq.n	8005acc <UART_SetConfig+0x2bc>
 8005a9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005aa0:	d82a      	bhi.n	8005af8 <UART_SetConfig+0x2e8>
 8005aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aa6:	d00b      	beq.n	8005ac0 <UART_SetConfig+0x2b0>
 8005aa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aac:	d824      	bhi.n	8005af8 <UART_SetConfig+0x2e8>
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <UART_SetConfig+0x2aa>
 8005ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab6:	d006      	beq.n	8005ac6 <UART_SetConfig+0x2b6>
 8005ab8:	e01e      	b.n	8005af8 <UART_SetConfig+0x2e8>
 8005aba:	2300      	movs	r3, #0
 8005abc:	77fb      	strb	r3, [r7, #31]
 8005abe:	e04b      	b.n	8005b58 <UART_SetConfig+0x348>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	77fb      	strb	r3, [r7, #31]
 8005ac4:	e048      	b.n	8005b58 <UART_SetConfig+0x348>
 8005ac6:	2304      	movs	r3, #4
 8005ac8:	77fb      	strb	r3, [r7, #31]
 8005aca:	e045      	b.n	8005b58 <UART_SetConfig+0x348>
 8005acc:	2308      	movs	r3, #8
 8005ace:	77fb      	strb	r3, [r7, #31]
 8005ad0:	e042      	b.n	8005b58 <UART_SetConfig+0x348>
 8005ad2:	bf00      	nop
 8005ad4:	efff69f3 	.word	0xefff69f3
 8005ad8:	40011000 	.word	0x40011000
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	40004400 	.word	0x40004400
 8005ae4:	40004800 	.word	0x40004800
 8005ae8:	40004c00 	.word	0x40004c00
 8005aec:	40005000 	.word	0x40005000
 8005af0:	40011400 	.word	0x40011400
 8005af4:	40007800 	.word	0x40007800
 8005af8:	2310      	movs	r3, #16
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e02c      	b.n	8005b58 <UART_SetConfig+0x348>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a72      	ldr	r2, [pc, #456]	@ (8005ccc <UART_SetConfig+0x4bc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d125      	bne.n	8005b54 <UART_SetConfig+0x344>
 8005b08:	4b71      	ldr	r3, [pc, #452]	@ (8005cd0 <UART_SetConfig+0x4c0>)
 8005b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b0e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005b12:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005b16:	d017      	beq.n	8005b48 <UART_SetConfig+0x338>
 8005b18:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005b1c:	d817      	bhi.n	8005b4e <UART_SetConfig+0x33e>
 8005b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b22:	d00b      	beq.n	8005b3c <UART_SetConfig+0x32c>
 8005b24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b28:	d811      	bhi.n	8005b4e <UART_SetConfig+0x33e>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <UART_SetConfig+0x326>
 8005b2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b32:	d006      	beq.n	8005b42 <UART_SetConfig+0x332>
 8005b34:	e00b      	b.n	8005b4e <UART_SetConfig+0x33e>
 8005b36:	2300      	movs	r3, #0
 8005b38:	77fb      	strb	r3, [r7, #31]
 8005b3a:	e00d      	b.n	8005b58 <UART_SetConfig+0x348>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	77fb      	strb	r3, [r7, #31]
 8005b40:	e00a      	b.n	8005b58 <UART_SetConfig+0x348>
 8005b42:	2304      	movs	r3, #4
 8005b44:	77fb      	strb	r3, [r7, #31]
 8005b46:	e007      	b.n	8005b58 <UART_SetConfig+0x348>
 8005b48:	2308      	movs	r3, #8
 8005b4a:	77fb      	strb	r3, [r7, #31]
 8005b4c:	e004      	b.n	8005b58 <UART_SetConfig+0x348>
 8005b4e:	2310      	movs	r3, #16
 8005b50:	77fb      	strb	r3, [r7, #31]
 8005b52:	e001      	b.n	8005b58 <UART_SetConfig+0x348>
 8005b54:	2310      	movs	r3, #16
 8005b56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b60:	d15b      	bne.n	8005c1a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005b62:	7ffb      	ldrb	r3, [r7, #31]
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d828      	bhi.n	8005bba <UART_SetConfig+0x3aa>
 8005b68:	a201      	add	r2, pc, #4	@ (adr r2, 8005b70 <UART_SetConfig+0x360>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005b95 	.word	0x08005b95
 8005b74:	08005b9d 	.word	0x08005b9d
 8005b78:	08005ba5 	.word	0x08005ba5
 8005b7c:	08005bbb 	.word	0x08005bbb
 8005b80:	08005bab 	.word	0x08005bab
 8005b84:	08005bbb 	.word	0x08005bbb
 8005b88:	08005bbb 	.word	0x08005bbb
 8005b8c:	08005bbb 	.word	0x08005bbb
 8005b90:	08005bb3 	.word	0x08005bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b94:	f7fd fd14 	bl	80035c0 <HAL_RCC_GetPCLK1Freq>
 8005b98:	61b8      	str	r0, [r7, #24]
        break;
 8005b9a:	e013      	b.n	8005bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b9c:	f7fd fd24 	bl	80035e8 <HAL_RCC_GetPCLK2Freq>
 8005ba0:	61b8      	str	r0, [r7, #24]
        break;
 8005ba2:	e00f      	b.n	8005bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba4:	4b4b      	ldr	r3, [pc, #300]	@ (8005cd4 <UART_SetConfig+0x4c4>)
 8005ba6:	61bb      	str	r3, [r7, #24]
        break;
 8005ba8:	e00c      	b.n	8005bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005baa:	f7fd fc37 	bl	800341c <HAL_RCC_GetSysClockFreq>
 8005bae:	61b8      	str	r0, [r7, #24]
        break;
 8005bb0:	e008      	b.n	8005bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bb6:	61bb      	str	r3, [r7, #24]
        break;
 8005bb8:	e004      	b.n	8005bc4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	77bb      	strb	r3, [r7, #30]
        break;
 8005bc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d074      	beq.n	8005cb4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	005a      	lsls	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	441a      	add	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2b0f      	cmp	r3, #15
 8005be4:	d916      	bls.n	8005c14 <UART_SetConfig+0x404>
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bec:	d212      	bcs.n	8005c14 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f023 030f 	bic.w	r3, r3, #15
 8005bf6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	89fb      	ldrh	r3, [r7, #14]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	89fa      	ldrh	r2, [r7, #14]
 8005c10:	60da      	str	r2, [r3, #12]
 8005c12:	e04f      	b.n	8005cb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	77bb      	strb	r3, [r7, #30]
 8005c18:	e04c      	b.n	8005cb4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c1a:	7ffb      	ldrb	r3, [r7, #31]
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d828      	bhi.n	8005c72 <UART_SetConfig+0x462>
 8005c20:	a201      	add	r2, pc, #4	@ (adr r2, 8005c28 <UART_SetConfig+0x418>)
 8005c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c26:	bf00      	nop
 8005c28:	08005c4d 	.word	0x08005c4d
 8005c2c:	08005c55 	.word	0x08005c55
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	08005c73 	.word	0x08005c73
 8005c38:	08005c63 	.word	0x08005c63
 8005c3c:	08005c73 	.word	0x08005c73
 8005c40:	08005c73 	.word	0x08005c73
 8005c44:	08005c73 	.word	0x08005c73
 8005c48:	08005c6b 	.word	0x08005c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c4c:	f7fd fcb8 	bl	80035c0 <HAL_RCC_GetPCLK1Freq>
 8005c50:	61b8      	str	r0, [r7, #24]
        break;
 8005c52:	e013      	b.n	8005c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c54:	f7fd fcc8 	bl	80035e8 <HAL_RCC_GetPCLK2Freq>
 8005c58:	61b8      	str	r0, [r7, #24]
        break;
 8005c5a:	e00f      	b.n	8005c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd4 <UART_SetConfig+0x4c4>)
 8005c5e:	61bb      	str	r3, [r7, #24]
        break;
 8005c60:	e00c      	b.n	8005c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c62:	f7fd fbdb 	bl	800341c <HAL_RCC_GetSysClockFreq>
 8005c66:	61b8      	str	r0, [r7, #24]
        break;
 8005c68:	e008      	b.n	8005c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c6e:	61bb      	str	r3, [r7, #24]
        break;
 8005c70:	e004      	b.n	8005c7c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	77bb      	strb	r3, [r7, #30]
        break;
 8005c7a:	bf00      	nop
    }

    if (pclk != 0U)
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d018      	beq.n	8005cb4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	085a      	lsrs	r2, r3, #1
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	441a      	add	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b0f      	cmp	r3, #15
 8005c9a:	d909      	bls.n	8005cb0 <UART_SetConfig+0x4a0>
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ca2:	d205      	bcs.n	8005cb0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	60da      	str	r2, [r3, #12]
 8005cae:	e001      	b.n	8005cb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005cc0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3720      	adds	r7, #32
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	40007c00 	.word	0x40007c00
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	00f42400 	.word	0x00f42400

08005cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6c:	f003 0310 	and.w	r3, r3, #16
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01a      	beq.n	8005dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dd6:	d10a      	bne.n	8005dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	605a      	str	r2, [r3, #4]
  }
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08c      	sub	sp, #48	@ 0x30
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e2c:	f7fb ffdc 	bl	8001de8 <HAL_GetTick>
 8005e30:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d12e      	bne.n	8005e9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f83b 	bl	8005eca <UART_WaitOnFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d021      	beq.n	8005e9e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e6e:	623b      	str	r3, [r7, #32]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	61fb      	str	r3, [r7, #28]
 8005e7a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7c:	69b9      	ldr	r1, [r7, #24]
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	e841 2300 	strex	r3, r2, [r1]
 8005e84:	617b      	str	r3, [r7, #20]
   return(result);
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1e6      	bne.n	8005e5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e011      	b.n	8005ec2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3728      	adds	r7, #40	@ 0x28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	603b      	str	r3, [r7, #0]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eda:	e04f      	b.n	8005f7c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee2:	d04b      	beq.n	8005f7c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee4:	f7fb ff80 	bl	8001de8 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d302      	bcc.n	8005efa <UART_WaitOnFlagUntilTimeout+0x30>
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e04e      	b.n	8005f9c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d037      	beq.n	8005f7c <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b80      	cmp	r3, #128	@ 0x80
 8005f10:	d034      	beq.n	8005f7c <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b40      	cmp	r3, #64	@ 0x40
 8005f16:	d031      	beq.n	8005f7c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b08      	cmp	r3, #8
 8005f24:	d110      	bne.n	8005f48 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2208      	movs	r2, #8
 8005f2c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 f838 	bl	8005fa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2208      	movs	r2, #8
 8005f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e029      	b.n	8005f9c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f56:	d111      	bne.n	8005f7c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f60:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 f81e 	bl	8005fa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e00f      	b.n	8005f9c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69da      	ldr	r2, [r3, #28]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	4013      	ands	r3, r2
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	bf0c      	ite	eq
 8005f8c:	2301      	moveq	r3, #1
 8005f8e:	2300      	movne	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d0a0      	beq.n	8005edc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b095      	sub	sp, #84	@ 0x54
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fca:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e6      	bne.n	8005fac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	e853 3f00 	ldrex	r3, [r3]
 8005fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	f023 0301 	bic.w	r3, r3, #1
 8005ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ffe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006000:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e5      	bne.n	8005fde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006016:	2b01      	cmp	r3, #1
 8006018:	d118      	bne.n	800604c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	e853 3f00 	ldrex	r3, [r3]
 8006026:	60bb      	str	r3, [r7, #8]
   return(result);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f023 0310 	bic.w	r3, r3, #16
 800602e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	461a      	mov	r2, r3
 8006036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006038:	61bb      	str	r3, [r7, #24]
 800603a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	6979      	ldr	r1, [r7, #20]
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	613b      	str	r3, [r7, #16]
   return(result);
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e6      	bne.n	800601a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006060:	bf00      	nop
 8006062:	3754      	adds	r7, #84	@ 0x54
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <std>:
 800606c:	2300      	movs	r3, #0
 800606e:	b510      	push	{r4, lr}
 8006070:	4604      	mov	r4, r0
 8006072:	e9c0 3300 	strd	r3, r3, [r0]
 8006076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800607a:	6083      	str	r3, [r0, #8]
 800607c:	8181      	strh	r1, [r0, #12]
 800607e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006080:	81c2      	strh	r2, [r0, #14]
 8006082:	6183      	str	r3, [r0, #24]
 8006084:	4619      	mov	r1, r3
 8006086:	2208      	movs	r2, #8
 8006088:	305c      	adds	r0, #92	@ 0x5c
 800608a:	f000 fa2f 	bl	80064ec <memset>
 800608e:	4b0d      	ldr	r3, [pc, #52]	@ (80060c4 <std+0x58>)
 8006090:	6263      	str	r3, [r4, #36]	@ 0x24
 8006092:	4b0d      	ldr	r3, [pc, #52]	@ (80060c8 <std+0x5c>)
 8006094:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006096:	4b0d      	ldr	r3, [pc, #52]	@ (80060cc <std+0x60>)
 8006098:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800609a:	4b0d      	ldr	r3, [pc, #52]	@ (80060d0 <std+0x64>)
 800609c:	6323      	str	r3, [r4, #48]	@ 0x30
 800609e:	4b0d      	ldr	r3, [pc, #52]	@ (80060d4 <std+0x68>)
 80060a0:	6224      	str	r4, [r4, #32]
 80060a2:	429c      	cmp	r4, r3
 80060a4:	d006      	beq.n	80060b4 <std+0x48>
 80060a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060aa:	4294      	cmp	r4, r2
 80060ac:	d002      	beq.n	80060b4 <std+0x48>
 80060ae:	33d0      	adds	r3, #208	@ 0xd0
 80060b0:	429c      	cmp	r4, r3
 80060b2:	d105      	bne.n	80060c0 <std+0x54>
 80060b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060bc:	f000 ba8e 	b.w	80065dc <__retarget_lock_init_recursive>
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	bf00      	nop
 80060c4:	0800633d 	.word	0x0800633d
 80060c8:	0800635f 	.word	0x0800635f
 80060cc:	08006397 	.word	0x08006397
 80060d0:	080063bb 	.word	0x080063bb
 80060d4:	20000340 	.word	0x20000340

080060d8 <stdio_exit_handler>:
 80060d8:	4a02      	ldr	r2, [pc, #8]	@ (80060e4 <stdio_exit_handler+0xc>)
 80060da:	4903      	ldr	r1, [pc, #12]	@ (80060e8 <stdio_exit_handler+0x10>)
 80060dc:	4803      	ldr	r0, [pc, #12]	@ (80060ec <stdio_exit_handler+0x14>)
 80060de:	f000 b869 	b.w	80061b4 <_fwalk_sglue>
 80060e2:	bf00      	nop
 80060e4:	2000000c 	.word	0x2000000c
 80060e8:	08007145 	.word	0x08007145
 80060ec:	2000001c 	.word	0x2000001c

080060f0 <cleanup_stdio>:
 80060f0:	6841      	ldr	r1, [r0, #4]
 80060f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006124 <cleanup_stdio+0x34>)
 80060f4:	4299      	cmp	r1, r3
 80060f6:	b510      	push	{r4, lr}
 80060f8:	4604      	mov	r4, r0
 80060fa:	d001      	beq.n	8006100 <cleanup_stdio+0x10>
 80060fc:	f001 f822 	bl	8007144 <_fflush_r>
 8006100:	68a1      	ldr	r1, [r4, #8]
 8006102:	4b09      	ldr	r3, [pc, #36]	@ (8006128 <cleanup_stdio+0x38>)
 8006104:	4299      	cmp	r1, r3
 8006106:	d002      	beq.n	800610e <cleanup_stdio+0x1e>
 8006108:	4620      	mov	r0, r4
 800610a:	f001 f81b 	bl	8007144 <_fflush_r>
 800610e:	68e1      	ldr	r1, [r4, #12]
 8006110:	4b06      	ldr	r3, [pc, #24]	@ (800612c <cleanup_stdio+0x3c>)
 8006112:	4299      	cmp	r1, r3
 8006114:	d004      	beq.n	8006120 <cleanup_stdio+0x30>
 8006116:	4620      	mov	r0, r4
 8006118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800611c:	f001 b812 	b.w	8007144 <_fflush_r>
 8006120:	bd10      	pop	{r4, pc}
 8006122:	bf00      	nop
 8006124:	20000340 	.word	0x20000340
 8006128:	200003a8 	.word	0x200003a8
 800612c:	20000410 	.word	0x20000410

08006130 <global_stdio_init.part.0>:
 8006130:	b510      	push	{r4, lr}
 8006132:	4b0b      	ldr	r3, [pc, #44]	@ (8006160 <global_stdio_init.part.0+0x30>)
 8006134:	4c0b      	ldr	r4, [pc, #44]	@ (8006164 <global_stdio_init.part.0+0x34>)
 8006136:	4a0c      	ldr	r2, [pc, #48]	@ (8006168 <global_stdio_init.part.0+0x38>)
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	4620      	mov	r0, r4
 800613c:	2200      	movs	r2, #0
 800613e:	2104      	movs	r1, #4
 8006140:	f7ff ff94 	bl	800606c <std>
 8006144:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006148:	2201      	movs	r2, #1
 800614a:	2109      	movs	r1, #9
 800614c:	f7ff ff8e 	bl	800606c <std>
 8006150:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006154:	2202      	movs	r2, #2
 8006156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800615a:	2112      	movs	r1, #18
 800615c:	f7ff bf86 	b.w	800606c <std>
 8006160:	20000478 	.word	0x20000478
 8006164:	20000340 	.word	0x20000340
 8006168:	080060d9 	.word	0x080060d9

0800616c <__sfp_lock_acquire>:
 800616c:	4801      	ldr	r0, [pc, #4]	@ (8006174 <__sfp_lock_acquire+0x8>)
 800616e:	f000 ba36 	b.w	80065de <__retarget_lock_acquire_recursive>
 8006172:	bf00      	nop
 8006174:	20000481 	.word	0x20000481

08006178 <__sfp_lock_release>:
 8006178:	4801      	ldr	r0, [pc, #4]	@ (8006180 <__sfp_lock_release+0x8>)
 800617a:	f000 ba31 	b.w	80065e0 <__retarget_lock_release_recursive>
 800617e:	bf00      	nop
 8006180:	20000481 	.word	0x20000481

08006184 <__sinit>:
 8006184:	b510      	push	{r4, lr}
 8006186:	4604      	mov	r4, r0
 8006188:	f7ff fff0 	bl	800616c <__sfp_lock_acquire>
 800618c:	6a23      	ldr	r3, [r4, #32]
 800618e:	b11b      	cbz	r3, 8006198 <__sinit+0x14>
 8006190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006194:	f7ff bff0 	b.w	8006178 <__sfp_lock_release>
 8006198:	4b04      	ldr	r3, [pc, #16]	@ (80061ac <__sinit+0x28>)
 800619a:	6223      	str	r3, [r4, #32]
 800619c:	4b04      	ldr	r3, [pc, #16]	@ (80061b0 <__sinit+0x2c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1f5      	bne.n	8006190 <__sinit+0xc>
 80061a4:	f7ff ffc4 	bl	8006130 <global_stdio_init.part.0>
 80061a8:	e7f2      	b.n	8006190 <__sinit+0xc>
 80061aa:	bf00      	nop
 80061ac:	080060f1 	.word	0x080060f1
 80061b0:	20000478 	.word	0x20000478

080061b4 <_fwalk_sglue>:
 80061b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b8:	4607      	mov	r7, r0
 80061ba:	4688      	mov	r8, r1
 80061bc:	4614      	mov	r4, r2
 80061be:	2600      	movs	r6, #0
 80061c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061c4:	f1b9 0901 	subs.w	r9, r9, #1
 80061c8:	d505      	bpl.n	80061d6 <_fwalk_sglue+0x22>
 80061ca:	6824      	ldr	r4, [r4, #0]
 80061cc:	2c00      	cmp	r4, #0
 80061ce:	d1f7      	bne.n	80061c0 <_fwalk_sglue+0xc>
 80061d0:	4630      	mov	r0, r6
 80061d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061d6:	89ab      	ldrh	r3, [r5, #12]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d907      	bls.n	80061ec <_fwalk_sglue+0x38>
 80061dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061e0:	3301      	adds	r3, #1
 80061e2:	d003      	beq.n	80061ec <_fwalk_sglue+0x38>
 80061e4:	4629      	mov	r1, r5
 80061e6:	4638      	mov	r0, r7
 80061e8:	47c0      	blx	r8
 80061ea:	4306      	orrs	r6, r0
 80061ec:	3568      	adds	r5, #104	@ 0x68
 80061ee:	e7e9      	b.n	80061c4 <_fwalk_sglue+0x10>

080061f0 <iprintf>:
 80061f0:	b40f      	push	{r0, r1, r2, r3}
 80061f2:	b507      	push	{r0, r1, r2, lr}
 80061f4:	4906      	ldr	r1, [pc, #24]	@ (8006210 <iprintf+0x20>)
 80061f6:	ab04      	add	r3, sp, #16
 80061f8:	6808      	ldr	r0, [r1, #0]
 80061fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80061fe:	6881      	ldr	r1, [r0, #8]
 8006200:	9301      	str	r3, [sp, #4]
 8006202:	f000 fc77 	bl	8006af4 <_vfiprintf_r>
 8006206:	b003      	add	sp, #12
 8006208:	f85d eb04 	ldr.w	lr, [sp], #4
 800620c:	b004      	add	sp, #16
 800620e:	4770      	bx	lr
 8006210:	20000018 	.word	0x20000018

08006214 <_puts_r>:
 8006214:	6a03      	ldr	r3, [r0, #32]
 8006216:	b570      	push	{r4, r5, r6, lr}
 8006218:	6884      	ldr	r4, [r0, #8]
 800621a:	4605      	mov	r5, r0
 800621c:	460e      	mov	r6, r1
 800621e:	b90b      	cbnz	r3, 8006224 <_puts_r+0x10>
 8006220:	f7ff ffb0 	bl	8006184 <__sinit>
 8006224:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006226:	07db      	lsls	r3, r3, #31
 8006228:	d405      	bmi.n	8006236 <_puts_r+0x22>
 800622a:	89a3      	ldrh	r3, [r4, #12]
 800622c:	0598      	lsls	r0, r3, #22
 800622e:	d402      	bmi.n	8006236 <_puts_r+0x22>
 8006230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006232:	f000 f9d4 	bl	80065de <__retarget_lock_acquire_recursive>
 8006236:	89a3      	ldrh	r3, [r4, #12]
 8006238:	0719      	lsls	r1, r3, #28
 800623a:	d502      	bpl.n	8006242 <_puts_r+0x2e>
 800623c:	6923      	ldr	r3, [r4, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d135      	bne.n	80062ae <_puts_r+0x9a>
 8006242:	4621      	mov	r1, r4
 8006244:	4628      	mov	r0, r5
 8006246:	f000 f8fb 	bl	8006440 <__swsetup_r>
 800624a:	b380      	cbz	r0, 80062ae <_puts_r+0x9a>
 800624c:	f04f 35ff 	mov.w	r5, #4294967295
 8006250:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006252:	07da      	lsls	r2, r3, #31
 8006254:	d405      	bmi.n	8006262 <_puts_r+0x4e>
 8006256:	89a3      	ldrh	r3, [r4, #12]
 8006258:	059b      	lsls	r3, r3, #22
 800625a:	d402      	bmi.n	8006262 <_puts_r+0x4e>
 800625c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800625e:	f000 f9bf 	bl	80065e0 <__retarget_lock_release_recursive>
 8006262:	4628      	mov	r0, r5
 8006264:	bd70      	pop	{r4, r5, r6, pc}
 8006266:	2b00      	cmp	r3, #0
 8006268:	da04      	bge.n	8006274 <_puts_r+0x60>
 800626a:	69a2      	ldr	r2, [r4, #24]
 800626c:	429a      	cmp	r2, r3
 800626e:	dc17      	bgt.n	80062a0 <_puts_r+0x8c>
 8006270:	290a      	cmp	r1, #10
 8006272:	d015      	beq.n	80062a0 <_puts_r+0x8c>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	6022      	str	r2, [r4, #0]
 800627a:	7019      	strb	r1, [r3, #0]
 800627c:	68a3      	ldr	r3, [r4, #8]
 800627e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006282:	3b01      	subs	r3, #1
 8006284:	60a3      	str	r3, [r4, #8]
 8006286:	2900      	cmp	r1, #0
 8006288:	d1ed      	bne.n	8006266 <_puts_r+0x52>
 800628a:	2b00      	cmp	r3, #0
 800628c:	da11      	bge.n	80062b2 <_puts_r+0x9e>
 800628e:	4622      	mov	r2, r4
 8006290:	210a      	movs	r1, #10
 8006292:	4628      	mov	r0, r5
 8006294:	f000 f895 	bl	80063c2 <__swbuf_r>
 8006298:	3001      	adds	r0, #1
 800629a:	d0d7      	beq.n	800624c <_puts_r+0x38>
 800629c:	250a      	movs	r5, #10
 800629e:	e7d7      	b.n	8006250 <_puts_r+0x3c>
 80062a0:	4622      	mov	r2, r4
 80062a2:	4628      	mov	r0, r5
 80062a4:	f000 f88d 	bl	80063c2 <__swbuf_r>
 80062a8:	3001      	adds	r0, #1
 80062aa:	d1e7      	bne.n	800627c <_puts_r+0x68>
 80062ac:	e7ce      	b.n	800624c <_puts_r+0x38>
 80062ae:	3e01      	subs	r6, #1
 80062b0:	e7e4      	b.n	800627c <_puts_r+0x68>
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	6022      	str	r2, [r4, #0]
 80062b8:	220a      	movs	r2, #10
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	e7ee      	b.n	800629c <_puts_r+0x88>
	...

080062c0 <puts>:
 80062c0:	4b02      	ldr	r3, [pc, #8]	@ (80062cc <puts+0xc>)
 80062c2:	4601      	mov	r1, r0
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	f7ff bfa5 	b.w	8006214 <_puts_r>
 80062ca:	bf00      	nop
 80062cc:	20000018 	.word	0x20000018

080062d0 <sniprintf>:
 80062d0:	b40c      	push	{r2, r3}
 80062d2:	b530      	push	{r4, r5, lr}
 80062d4:	4b18      	ldr	r3, [pc, #96]	@ (8006338 <sniprintf+0x68>)
 80062d6:	1e0c      	subs	r4, r1, #0
 80062d8:	681d      	ldr	r5, [r3, #0]
 80062da:	b09d      	sub	sp, #116	@ 0x74
 80062dc:	da08      	bge.n	80062f0 <sniprintf+0x20>
 80062de:	238b      	movs	r3, #139	@ 0x8b
 80062e0:	602b      	str	r3, [r5, #0]
 80062e2:	f04f 30ff 	mov.w	r0, #4294967295
 80062e6:	b01d      	add	sp, #116	@ 0x74
 80062e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062ec:	b002      	add	sp, #8
 80062ee:	4770      	bx	lr
 80062f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80062f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80062fe:	bf14      	ite	ne
 8006300:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006304:	4623      	moveq	r3, r4
 8006306:	9304      	str	r3, [sp, #16]
 8006308:	9307      	str	r3, [sp, #28]
 800630a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800630e:	9002      	str	r0, [sp, #8]
 8006310:	9006      	str	r0, [sp, #24]
 8006312:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006316:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006318:	ab21      	add	r3, sp, #132	@ 0x84
 800631a:	a902      	add	r1, sp, #8
 800631c:	4628      	mov	r0, r5
 800631e:	9301      	str	r3, [sp, #4]
 8006320:	f000 fac2 	bl	80068a8 <_svfiprintf_r>
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	bfbc      	itt	lt
 8006328:	238b      	movlt	r3, #139	@ 0x8b
 800632a:	602b      	strlt	r3, [r5, #0]
 800632c:	2c00      	cmp	r4, #0
 800632e:	d0da      	beq.n	80062e6 <sniprintf+0x16>
 8006330:	9b02      	ldr	r3, [sp, #8]
 8006332:	2200      	movs	r2, #0
 8006334:	701a      	strb	r2, [r3, #0]
 8006336:	e7d6      	b.n	80062e6 <sniprintf+0x16>
 8006338:	20000018 	.word	0x20000018

0800633c <__sread>:
 800633c:	b510      	push	{r4, lr}
 800633e:	460c      	mov	r4, r1
 8006340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006344:	f000 f8fc 	bl	8006540 <_read_r>
 8006348:	2800      	cmp	r0, #0
 800634a:	bfab      	itete	ge
 800634c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800634e:	89a3      	ldrhlt	r3, [r4, #12]
 8006350:	181b      	addge	r3, r3, r0
 8006352:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006356:	bfac      	ite	ge
 8006358:	6563      	strge	r3, [r4, #84]	@ 0x54
 800635a:	81a3      	strhlt	r3, [r4, #12]
 800635c:	bd10      	pop	{r4, pc}

0800635e <__swrite>:
 800635e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006362:	461f      	mov	r7, r3
 8006364:	898b      	ldrh	r3, [r1, #12]
 8006366:	05db      	lsls	r3, r3, #23
 8006368:	4605      	mov	r5, r0
 800636a:	460c      	mov	r4, r1
 800636c:	4616      	mov	r6, r2
 800636e:	d505      	bpl.n	800637c <__swrite+0x1e>
 8006370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006374:	2302      	movs	r3, #2
 8006376:	2200      	movs	r2, #0
 8006378:	f000 f8d0 	bl	800651c <_lseek_r>
 800637c:	89a3      	ldrh	r3, [r4, #12]
 800637e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006382:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	4632      	mov	r2, r6
 800638a:	463b      	mov	r3, r7
 800638c:	4628      	mov	r0, r5
 800638e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006392:	f000 b8e7 	b.w	8006564 <_write_r>

08006396 <__sseek>:
 8006396:	b510      	push	{r4, lr}
 8006398:	460c      	mov	r4, r1
 800639a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800639e:	f000 f8bd 	bl	800651c <_lseek_r>
 80063a2:	1c43      	adds	r3, r0, #1
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	bf15      	itete	ne
 80063a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80063aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80063ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80063b2:	81a3      	strheq	r3, [r4, #12]
 80063b4:	bf18      	it	ne
 80063b6:	81a3      	strhne	r3, [r4, #12]
 80063b8:	bd10      	pop	{r4, pc}

080063ba <__sclose>:
 80063ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063be:	f000 b89d 	b.w	80064fc <_close_r>

080063c2 <__swbuf_r>:
 80063c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c4:	460e      	mov	r6, r1
 80063c6:	4614      	mov	r4, r2
 80063c8:	4605      	mov	r5, r0
 80063ca:	b118      	cbz	r0, 80063d4 <__swbuf_r+0x12>
 80063cc:	6a03      	ldr	r3, [r0, #32]
 80063ce:	b90b      	cbnz	r3, 80063d4 <__swbuf_r+0x12>
 80063d0:	f7ff fed8 	bl	8006184 <__sinit>
 80063d4:	69a3      	ldr	r3, [r4, #24]
 80063d6:	60a3      	str	r3, [r4, #8]
 80063d8:	89a3      	ldrh	r3, [r4, #12]
 80063da:	071a      	lsls	r2, r3, #28
 80063dc:	d501      	bpl.n	80063e2 <__swbuf_r+0x20>
 80063de:	6923      	ldr	r3, [r4, #16]
 80063e0:	b943      	cbnz	r3, 80063f4 <__swbuf_r+0x32>
 80063e2:	4621      	mov	r1, r4
 80063e4:	4628      	mov	r0, r5
 80063e6:	f000 f82b 	bl	8006440 <__swsetup_r>
 80063ea:	b118      	cbz	r0, 80063f4 <__swbuf_r+0x32>
 80063ec:	f04f 37ff 	mov.w	r7, #4294967295
 80063f0:	4638      	mov	r0, r7
 80063f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	6922      	ldr	r2, [r4, #16]
 80063f8:	1a98      	subs	r0, r3, r2
 80063fa:	6963      	ldr	r3, [r4, #20]
 80063fc:	b2f6      	uxtb	r6, r6
 80063fe:	4283      	cmp	r3, r0
 8006400:	4637      	mov	r7, r6
 8006402:	dc05      	bgt.n	8006410 <__swbuf_r+0x4e>
 8006404:	4621      	mov	r1, r4
 8006406:	4628      	mov	r0, r5
 8006408:	f000 fe9c 	bl	8007144 <_fflush_r>
 800640c:	2800      	cmp	r0, #0
 800640e:	d1ed      	bne.n	80063ec <__swbuf_r+0x2a>
 8006410:	68a3      	ldr	r3, [r4, #8]
 8006412:	3b01      	subs	r3, #1
 8006414:	60a3      	str	r3, [r4, #8]
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	6022      	str	r2, [r4, #0]
 800641c:	701e      	strb	r6, [r3, #0]
 800641e:	6962      	ldr	r2, [r4, #20]
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	429a      	cmp	r2, r3
 8006424:	d004      	beq.n	8006430 <__swbuf_r+0x6e>
 8006426:	89a3      	ldrh	r3, [r4, #12]
 8006428:	07db      	lsls	r3, r3, #31
 800642a:	d5e1      	bpl.n	80063f0 <__swbuf_r+0x2e>
 800642c:	2e0a      	cmp	r6, #10
 800642e:	d1df      	bne.n	80063f0 <__swbuf_r+0x2e>
 8006430:	4621      	mov	r1, r4
 8006432:	4628      	mov	r0, r5
 8006434:	f000 fe86 	bl	8007144 <_fflush_r>
 8006438:	2800      	cmp	r0, #0
 800643a:	d0d9      	beq.n	80063f0 <__swbuf_r+0x2e>
 800643c:	e7d6      	b.n	80063ec <__swbuf_r+0x2a>
	...

08006440 <__swsetup_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4b29      	ldr	r3, [pc, #164]	@ (80064e8 <__swsetup_r+0xa8>)
 8006444:	4605      	mov	r5, r0
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	460c      	mov	r4, r1
 800644a:	b118      	cbz	r0, 8006454 <__swsetup_r+0x14>
 800644c:	6a03      	ldr	r3, [r0, #32]
 800644e:	b90b      	cbnz	r3, 8006454 <__swsetup_r+0x14>
 8006450:	f7ff fe98 	bl	8006184 <__sinit>
 8006454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006458:	0719      	lsls	r1, r3, #28
 800645a:	d422      	bmi.n	80064a2 <__swsetup_r+0x62>
 800645c:	06da      	lsls	r2, r3, #27
 800645e:	d407      	bmi.n	8006470 <__swsetup_r+0x30>
 8006460:	2209      	movs	r2, #9
 8006462:	602a      	str	r2, [r5, #0]
 8006464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006468:	81a3      	strh	r3, [r4, #12]
 800646a:	f04f 30ff 	mov.w	r0, #4294967295
 800646e:	e033      	b.n	80064d8 <__swsetup_r+0x98>
 8006470:	0758      	lsls	r0, r3, #29
 8006472:	d512      	bpl.n	800649a <__swsetup_r+0x5a>
 8006474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006476:	b141      	cbz	r1, 800648a <__swsetup_r+0x4a>
 8006478:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800647c:	4299      	cmp	r1, r3
 800647e:	d002      	beq.n	8006486 <__swsetup_r+0x46>
 8006480:	4628      	mov	r0, r5
 8006482:	f000 f8bd 	bl	8006600 <_free_r>
 8006486:	2300      	movs	r3, #0
 8006488:	6363      	str	r3, [r4, #52]	@ 0x34
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006490:	81a3      	strh	r3, [r4, #12]
 8006492:	2300      	movs	r3, #0
 8006494:	6063      	str	r3, [r4, #4]
 8006496:	6923      	ldr	r3, [r4, #16]
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	89a3      	ldrh	r3, [r4, #12]
 800649c:	f043 0308 	orr.w	r3, r3, #8
 80064a0:	81a3      	strh	r3, [r4, #12]
 80064a2:	6923      	ldr	r3, [r4, #16]
 80064a4:	b94b      	cbnz	r3, 80064ba <__swsetup_r+0x7a>
 80064a6:	89a3      	ldrh	r3, [r4, #12]
 80064a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80064ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064b0:	d003      	beq.n	80064ba <__swsetup_r+0x7a>
 80064b2:	4621      	mov	r1, r4
 80064b4:	4628      	mov	r0, r5
 80064b6:	f000 fe93 	bl	80071e0 <__smakebuf_r>
 80064ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064be:	f013 0201 	ands.w	r2, r3, #1
 80064c2:	d00a      	beq.n	80064da <__swsetup_r+0x9a>
 80064c4:	2200      	movs	r2, #0
 80064c6:	60a2      	str	r2, [r4, #8]
 80064c8:	6962      	ldr	r2, [r4, #20]
 80064ca:	4252      	negs	r2, r2
 80064cc:	61a2      	str	r2, [r4, #24]
 80064ce:	6922      	ldr	r2, [r4, #16]
 80064d0:	b942      	cbnz	r2, 80064e4 <__swsetup_r+0xa4>
 80064d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80064d6:	d1c5      	bne.n	8006464 <__swsetup_r+0x24>
 80064d8:	bd38      	pop	{r3, r4, r5, pc}
 80064da:	0799      	lsls	r1, r3, #30
 80064dc:	bf58      	it	pl
 80064de:	6962      	ldrpl	r2, [r4, #20]
 80064e0:	60a2      	str	r2, [r4, #8]
 80064e2:	e7f4      	b.n	80064ce <__swsetup_r+0x8e>
 80064e4:	2000      	movs	r0, #0
 80064e6:	e7f7      	b.n	80064d8 <__swsetup_r+0x98>
 80064e8:	20000018 	.word	0x20000018

080064ec <memset>:
 80064ec:	4402      	add	r2, r0
 80064ee:	4603      	mov	r3, r0
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d100      	bne.n	80064f6 <memset+0xa>
 80064f4:	4770      	bx	lr
 80064f6:	f803 1b01 	strb.w	r1, [r3], #1
 80064fa:	e7f9      	b.n	80064f0 <memset+0x4>

080064fc <_close_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	4d06      	ldr	r5, [pc, #24]	@ (8006518 <_close_r+0x1c>)
 8006500:	2300      	movs	r3, #0
 8006502:	4604      	mov	r4, r0
 8006504:	4608      	mov	r0, r1
 8006506:	602b      	str	r3, [r5, #0]
 8006508:	f7fb fb77 	bl	8001bfa <_close>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d102      	bne.n	8006516 <_close_r+0x1a>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	b103      	cbz	r3, 8006516 <_close_r+0x1a>
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	2000047c 	.word	0x2000047c

0800651c <_lseek_r>:
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	4d07      	ldr	r5, [pc, #28]	@ (800653c <_lseek_r+0x20>)
 8006520:	4604      	mov	r4, r0
 8006522:	4608      	mov	r0, r1
 8006524:	4611      	mov	r1, r2
 8006526:	2200      	movs	r2, #0
 8006528:	602a      	str	r2, [r5, #0]
 800652a:	461a      	mov	r2, r3
 800652c:	f7fb fb8c 	bl	8001c48 <_lseek>
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	d102      	bne.n	800653a <_lseek_r+0x1e>
 8006534:	682b      	ldr	r3, [r5, #0]
 8006536:	b103      	cbz	r3, 800653a <_lseek_r+0x1e>
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	bd38      	pop	{r3, r4, r5, pc}
 800653c:	2000047c 	.word	0x2000047c

08006540 <_read_r>:
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	4d07      	ldr	r5, [pc, #28]	@ (8006560 <_read_r+0x20>)
 8006544:	4604      	mov	r4, r0
 8006546:	4608      	mov	r0, r1
 8006548:	4611      	mov	r1, r2
 800654a:	2200      	movs	r2, #0
 800654c:	602a      	str	r2, [r5, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	f7fb fb1a 	bl	8001b88 <_read>
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	d102      	bne.n	800655e <_read_r+0x1e>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	b103      	cbz	r3, 800655e <_read_r+0x1e>
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	bd38      	pop	{r3, r4, r5, pc}
 8006560:	2000047c 	.word	0x2000047c

08006564 <_write_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4d07      	ldr	r5, [pc, #28]	@ (8006584 <_write_r+0x20>)
 8006568:	4604      	mov	r4, r0
 800656a:	4608      	mov	r0, r1
 800656c:	4611      	mov	r1, r2
 800656e:	2200      	movs	r2, #0
 8006570:	602a      	str	r2, [r5, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	f7fb fb25 	bl	8001bc2 <_write>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_write_r+0x1e>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	b103      	cbz	r3, 8006582 <_write_r+0x1e>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	2000047c 	.word	0x2000047c

08006588 <__errno>:
 8006588:	4b01      	ldr	r3, [pc, #4]	@ (8006590 <__errno+0x8>)
 800658a:	6818      	ldr	r0, [r3, #0]
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	20000018 	.word	0x20000018

08006594 <__libc_init_array>:
 8006594:	b570      	push	{r4, r5, r6, lr}
 8006596:	4d0d      	ldr	r5, [pc, #52]	@ (80065cc <__libc_init_array+0x38>)
 8006598:	4c0d      	ldr	r4, [pc, #52]	@ (80065d0 <__libc_init_array+0x3c>)
 800659a:	1b64      	subs	r4, r4, r5
 800659c:	10a4      	asrs	r4, r4, #2
 800659e:	2600      	movs	r6, #0
 80065a0:	42a6      	cmp	r6, r4
 80065a2:	d109      	bne.n	80065b8 <__libc_init_array+0x24>
 80065a4:	4d0b      	ldr	r5, [pc, #44]	@ (80065d4 <__libc_init_array+0x40>)
 80065a6:	4c0c      	ldr	r4, [pc, #48]	@ (80065d8 <__libc_init_array+0x44>)
 80065a8:	f000 fed8 	bl	800735c <_init>
 80065ac:	1b64      	subs	r4, r4, r5
 80065ae:	10a4      	asrs	r4, r4, #2
 80065b0:	2600      	movs	r6, #0
 80065b2:	42a6      	cmp	r6, r4
 80065b4:	d105      	bne.n	80065c2 <__libc_init_array+0x2e>
 80065b6:	bd70      	pop	{r4, r5, r6, pc}
 80065b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065bc:	4798      	blx	r3
 80065be:	3601      	adds	r6, #1
 80065c0:	e7ee      	b.n	80065a0 <__libc_init_array+0xc>
 80065c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c6:	4798      	blx	r3
 80065c8:	3601      	adds	r6, #1
 80065ca:	e7f2      	b.n	80065b2 <__libc_init_array+0x1e>
 80065cc:	08007490 	.word	0x08007490
 80065d0:	08007490 	.word	0x08007490
 80065d4:	08007490 	.word	0x08007490
 80065d8:	08007494 	.word	0x08007494

080065dc <__retarget_lock_init_recursive>:
 80065dc:	4770      	bx	lr

080065de <__retarget_lock_acquire_recursive>:
 80065de:	4770      	bx	lr

080065e0 <__retarget_lock_release_recursive>:
 80065e0:	4770      	bx	lr

080065e2 <memcpy>:
 80065e2:	440a      	add	r2, r1
 80065e4:	4291      	cmp	r1, r2
 80065e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80065ea:	d100      	bne.n	80065ee <memcpy+0xc>
 80065ec:	4770      	bx	lr
 80065ee:	b510      	push	{r4, lr}
 80065f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065f8:	4291      	cmp	r1, r2
 80065fa:	d1f9      	bne.n	80065f0 <memcpy+0xe>
 80065fc:	bd10      	pop	{r4, pc}
	...

08006600 <_free_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4605      	mov	r5, r0
 8006604:	2900      	cmp	r1, #0
 8006606:	d041      	beq.n	800668c <_free_r+0x8c>
 8006608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800660c:	1f0c      	subs	r4, r1, #4
 800660e:	2b00      	cmp	r3, #0
 8006610:	bfb8      	it	lt
 8006612:	18e4      	addlt	r4, r4, r3
 8006614:	f000 f8e0 	bl	80067d8 <__malloc_lock>
 8006618:	4a1d      	ldr	r2, [pc, #116]	@ (8006690 <_free_r+0x90>)
 800661a:	6813      	ldr	r3, [r2, #0]
 800661c:	b933      	cbnz	r3, 800662c <_free_r+0x2c>
 800661e:	6063      	str	r3, [r4, #4]
 8006620:	6014      	str	r4, [r2, #0]
 8006622:	4628      	mov	r0, r5
 8006624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006628:	f000 b8dc 	b.w	80067e4 <__malloc_unlock>
 800662c:	42a3      	cmp	r3, r4
 800662e:	d908      	bls.n	8006642 <_free_r+0x42>
 8006630:	6820      	ldr	r0, [r4, #0]
 8006632:	1821      	adds	r1, r4, r0
 8006634:	428b      	cmp	r3, r1
 8006636:	bf01      	itttt	eq
 8006638:	6819      	ldreq	r1, [r3, #0]
 800663a:	685b      	ldreq	r3, [r3, #4]
 800663c:	1809      	addeq	r1, r1, r0
 800663e:	6021      	streq	r1, [r4, #0]
 8006640:	e7ed      	b.n	800661e <_free_r+0x1e>
 8006642:	461a      	mov	r2, r3
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	b10b      	cbz	r3, 800664c <_free_r+0x4c>
 8006648:	42a3      	cmp	r3, r4
 800664a:	d9fa      	bls.n	8006642 <_free_r+0x42>
 800664c:	6811      	ldr	r1, [r2, #0]
 800664e:	1850      	adds	r0, r2, r1
 8006650:	42a0      	cmp	r0, r4
 8006652:	d10b      	bne.n	800666c <_free_r+0x6c>
 8006654:	6820      	ldr	r0, [r4, #0]
 8006656:	4401      	add	r1, r0
 8006658:	1850      	adds	r0, r2, r1
 800665a:	4283      	cmp	r3, r0
 800665c:	6011      	str	r1, [r2, #0]
 800665e:	d1e0      	bne.n	8006622 <_free_r+0x22>
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	6053      	str	r3, [r2, #4]
 8006666:	4408      	add	r0, r1
 8006668:	6010      	str	r0, [r2, #0]
 800666a:	e7da      	b.n	8006622 <_free_r+0x22>
 800666c:	d902      	bls.n	8006674 <_free_r+0x74>
 800666e:	230c      	movs	r3, #12
 8006670:	602b      	str	r3, [r5, #0]
 8006672:	e7d6      	b.n	8006622 <_free_r+0x22>
 8006674:	6820      	ldr	r0, [r4, #0]
 8006676:	1821      	adds	r1, r4, r0
 8006678:	428b      	cmp	r3, r1
 800667a:	bf04      	itt	eq
 800667c:	6819      	ldreq	r1, [r3, #0]
 800667e:	685b      	ldreq	r3, [r3, #4]
 8006680:	6063      	str	r3, [r4, #4]
 8006682:	bf04      	itt	eq
 8006684:	1809      	addeq	r1, r1, r0
 8006686:	6021      	streq	r1, [r4, #0]
 8006688:	6054      	str	r4, [r2, #4]
 800668a:	e7ca      	b.n	8006622 <_free_r+0x22>
 800668c:	bd38      	pop	{r3, r4, r5, pc}
 800668e:	bf00      	nop
 8006690:	20000488 	.word	0x20000488

08006694 <sbrk_aligned>:
 8006694:	b570      	push	{r4, r5, r6, lr}
 8006696:	4e0f      	ldr	r6, [pc, #60]	@ (80066d4 <sbrk_aligned+0x40>)
 8006698:	460c      	mov	r4, r1
 800669a:	6831      	ldr	r1, [r6, #0]
 800669c:	4605      	mov	r5, r0
 800669e:	b911      	cbnz	r1, 80066a6 <sbrk_aligned+0x12>
 80066a0:	f000 fe16 	bl	80072d0 <_sbrk_r>
 80066a4:	6030      	str	r0, [r6, #0]
 80066a6:	4621      	mov	r1, r4
 80066a8:	4628      	mov	r0, r5
 80066aa:	f000 fe11 	bl	80072d0 <_sbrk_r>
 80066ae:	1c43      	adds	r3, r0, #1
 80066b0:	d103      	bne.n	80066ba <sbrk_aligned+0x26>
 80066b2:	f04f 34ff 	mov.w	r4, #4294967295
 80066b6:	4620      	mov	r0, r4
 80066b8:	bd70      	pop	{r4, r5, r6, pc}
 80066ba:	1cc4      	adds	r4, r0, #3
 80066bc:	f024 0403 	bic.w	r4, r4, #3
 80066c0:	42a0      	cmp	r0, r4
 80066c2:	d0f8      	beq.n	80066b6 <sbrk_aligned+0x22>
 80066c4:	1a21      	subs	r1, r4, r0
 80066c6:	4628      	mov	r0, r5
 80066c8:	f000 fe02 	bl	80072d0 <_sbrk_r>
 80066cc:	3001      	adds	r0, #1
 80066ce:	d1f2      	bne.n	80066b6 <sbrk_aligned+0x22>
 80066d0:	e7ef      	b.n	80066b2 <sbrk_aligned+0x1e>
 80066d2:	bf00      	nop
 80066d4:	20000484 	.word	0x20000484

080066d8 <_malloc_r>:
 80066d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066dc:	1ccd      	adds	r5, r1, #3
 80066de:	f025 0503 	bic.w	r5, r5, #3
 80066e2:	3508      	adds	r5, #8
 80066e4:	2d0c      	cmp	r5, #12
 80066e6:	bf38      	it	cc
 80066e8:	250c      	movcc	r5, #12
 80066ea:	2d00      	cmp	r5, #0
 80066ec:	4606      	mov	r6, r0
 80066ee:	db01      	blt.n	80066f4 <_malloc_r+0x1c>
 80066f0:	42a9      	cmp	r1, r5
 80066f2:	d904      	bls.n	80066fe <_malloc_r+0x26>
 80066f4:	230c      	movs	r3, #12
 80066f6:	6033      	str	r3, [r6, #0]
 80066f8:	2000      	movs	r0, #0
 80066fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067d4 <_malloc_r+0xfc>
 8006702:	f000 f869 	bl	80067d8 <__malloc_lock>
 8006706:	f8d8 3000 	ldr.w	r3, [r8]
 800670a:	461c      	mov	r4, r3
 800670c:	bb44      	cbnz	r4, 8006760 <_malloc_r+0x88>
 800670e:	4629      	mov	r1, r5
 8006710:	4630      	mov	r0, r6
 8006712:	f7ff ffbf 	bl	8006694 <sbrk_aligned>
 8006716:	1c43      	adds	r3, r0, #1
 8006718:	4604      	mov	r4, r0
 800671a:	d158      	bne.n	80067ce <_malloc_r+0xf6>
 800671c:	f8d8 4000 	ldr.w	r4, [r8]
 8006720:	4627      	mov	r7, r4
 8006722:	2f00      	cmp	r7, #0
 8006724:	d143      	bne.n	80067ae <_malloc_r+0xd6>
 8006726:	2c00      	cmp	r4, #0
 8006728:	d04b      	beq.n	80067c2 <_malloc_r+0xea>
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	4639      	mov	r1, r7
 800672e:	4630      	mov	r0, r6
 8006730:	eb04 0903 	add.w	r9, r4, r3
 8006734:	f000 fdcc 	bl	80072d0 <_sbrk_r>
 8006738:	4581      	cmp	r9, r0
 800673a:	d142      	bne.n	80067c2 <_malloc_r+0xea>
 800673c:	6821      	ldr	r1, [r4, #0]
 800673e:	1a6d      	subs	r5, r5, r1
 8006740:	4629      	mov	r1, r5
 8006742:	4630      	mov	r0, r6
 8006744:	f7ff ffa6 	bl	8006694 <sbrk_aligned>
 8006748:	3001      	adds	r0, #1
 800674a:	d03a      	beq.n	80067c2 <_malloc_r+0xea>
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	442b      	add	r3, r5
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	f8d8 3000 	ldr.w	r3, [r8]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	bb62      	cbnz	r2, 80067b4 <_malloc_r+0xdc>
 800675a:	f8c8 7000 	str.w	r7, [r8]
 800675e:	e00f      	b.n	8006780 <_malloc_r+0xa8>
 8006760:	6822      	ldr	r2, [r4, #0]
 8006762:	1b52      	subs	r2, r2, r5
 8006764:	d420      	bmi.n	80067a8 <_malloc_r+0xd0>
 8006766:	2a0b      	cmp	r2, #11
 8006768:	d917      	bls.n	800679a <_malloc_r+0xc2>
 800676a:	1961      	adds	r1, r4, r5
 800676c:	42a3      	cmp	r3, r4
 800676e:	6025      	str	r5, [r4, #0]
 8006770:	bf18      	it	ne
 8006772:	6059      	strne	r1, [r3, #4]
 8006774:	6863      	ldr	r3, [r4, #4]
 8006776:	bf08      	it	eq
 8006778:	f8c8 1000 	streq.w	r1, [r8]
 800677c:	5162      	str	r2, [r4, r5]
 800677e:	604b      	str	r3, [r1, #4]
 8006780:	4630      	mov	r0, r6
 8006782:	f000 f82f 	bl	80067e4 <__malloc_unlock>
 8006786:	f104 000b 	add.w	r0, r4, #11
 800678a:	1d23      	adds	r3, r4, #4
 800678c:	f020 0007 	bic.w	r0, r0, #7
 8006790:	1ac2      	subs	r2, r0, r3
 8006792:	bf1c      	itt	ne
 8006794:	1a1b      	subne	r3, r3, r0
 8006796:	50a3      	strne	r3, [r4, r2]
 8006798:	e7af      	b.n	80066fa <_malloc_r+0x22>
 800679a:	6862      	ldr	r2, [r4, #4]
 800679c:	42a3      	cmp	r3, r4
 800679e:	bf0c      	ite	eq
 80067a0:	f8c8 2000 	streq.w	r2, [r8]
 80067a4:	605a      	strne	r2, [r3, #4]
 80067a6:	e7eb      	b.n	8006780 <_malloc_r+0xa8>
 80067a8:	4623      	mov	r3, r4
 80067aa:	6864      	ldr	r4, [r4, #4]
 80067ac:	e7ae      	b.n	800670c <_malloc_r+0x34>
 80067ae:	463c      	mov	r4, r7
 80067b0:	687f      	ldr	r7, [r7, #4]
 80067b2:	e7b6      	b.n	8006722 <_malloc_r+0x4a>
 80067b4:	461a      	mov	r2, r3
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	42a3      	cmp	r3, r4
 80067ba:	d1fb      	bne.n	80067b4 <_malloc_r+0xdc>
 80067bc:	2300      	movs	r3, #0
 80067be:	6053      	str	r3, [r2, #4]
 80067c0:	e7de      	b.n	8006780 <_malloc_r+0xa8>
 80067c2:	230c      	movs	r3, #12
 80067c4:	6033      	str	r3, [r6, #0]
 80067c6:	4630      	mov	r0, r6
 80067c8:	f000 f80c 	bl	80067e4 <__malloc_unlock>
 80067cc:	e794      	b.n	80066f8 <_malloc_r+0x20>
 80067ce:	6005      	str	r5, [r0, #0]
 80067d0:	e7d6      	b.n	8006780 <_malloc_r+0xa8>
 80067d2:	bf00      	nop
 80067d4:	20000488 	.word	0x20000488

080067d8 <__malloc_lock>:
 80067d8:	4801      	ldr	r0, [pc, #4]	@ (80067e0 <__malloc_lock+0x8>)
 80067da:	f7ff bf00 	b.w	80065de <__retarget_lock_acquire_recursive>
 80067de:	bf00      	nop
 80067e0:	20000480 	.word	0x20000480

080067e4 <__malloc_unlock>:
 80067e4:	4801      	ldr	r0, [pc, #4]	@ (80067ec <__malloc_unlock+0x8>)
 80067e6:	f7ff befb 	b.w	80065e0 <__retarget_lock_release_recursive>
 80067ea:	bf00      	nop
 80067ec:	20000480 	.word	0x20000480

080067f0 <__ssputs_r>:
 80067f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f4:	688e      	ldr	r6, [r1, #8]
 80067f6:	461f      	mov	r7, r3
 80067f8:	42be      	cmp	r6, r7
 80067fa:	680b      	ldr	r3, [r1, #0]
 80067fc:	4682      	mov	sl, r0
 80067fe:	460c      	mov	r4, r1
 8006800:	4690      	mov	r8, r2
 8006802:	d82d      	bhi.n	8006860 <__ssputs_r+0x70>
 8006804:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006808:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800680c:	d026      	beq.n	800685c <__ssputs_r+0x6c>
 800680e:	6965      	ldr	r5, [r4, #20]
 8006810:	6909      	ldr	r1, [r1, #16]
 8006812:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006816:	eba3 0901 	sub.w	r9, r3, r1
 800681a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800681e:	1c7b      	adds	r3, r7, #1
 8006820:	444b      	add	r3, r9
 8006822:	106d      	asrs	r5, r5, #1
 8006824:	429d      	cmp	r5, r3
 8006826:	bf38      	it	cc
 8006828:	461d      	movcc	r5, r3
 800682a:	0553      	lsls	r3, r2, #21
 800682c:	d527      	bpl.n	800687e <__ssputs_r+0x8e>
 800682e:	4629      	mov	r1, r5
 8006830:	f7ff ff52 	bl	80066d8 <_malloc_r>
 8006834:	4606      	mov	r6, r0
 8006836:	b360      	cbz	r0, 8006892 <__ssputs_r+0xa2>
 8006838:	6921      	ldr	r1, [r4, #16]
 800683a:	464a      	mov	r2, r9
 800683c:	f7ff fed1 	bl	80065e2 <memcpy>
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800684a:	81a3      	strh	r3, [r4, #12]
 800684c:	6126      	str	r6, [r4, #16]
 800684e:	6165      	str	r5, [r4, #20]
 8006850:	444e      	add	r6, r9
 8006852:	eba5 0509 	sub.w	r5, r5, r9
 8006856:	6026      	str	r6, [r4, #0]
 8006858:	60a5      	str	r5, [r4, #8]
 800685a:	463e      	mov	r6, r7
 800685c:	42be      	cmp	r6, r7
 800685e:	d900      	bls.n	8006862 <__ssputs_r+0x72>
 8006860:	463e      	mov	r6, r7
 8006862:	6820      	ldr	r0, [r4, #0]
 8006864:	4632      	mov	r2, r6
 8006866:	4641      	mov	r1, r8
 8006868:	f000 fcf6 	bl	8007258 <memmove>
 800686c:	68a3      	ldr	r3, [r4, #8]
 800686e:	1b9b      	subs	r3, r3, r6
 8006870:	60a3      	str	r3, [r4, #8]
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	4433      	add	r3, r6
 8006876:	6023      	str	r3, [r4, #0]
 8006878:	2000      	movs	r0, #0
 800687a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687e:	462a      	mov	r2, r5
 8006880:	f000 fd36 	bl	80072f0 <_realloc_r>
 8006884:	4606      	mov	r6, r0
 8006886:	2800      	cmp	r0, #0
 8006888:	d1e0      	bne.n	800684c <__ssputs_r+0x5c>
 800688a:	6921      	ldr	r1, [r4, #16]
 800688c:	4650      	mov	r0, sl
 800688e:	f7ff feb7 	bl	8006600 <_free_r>
 8006892:	230c      	movs	r3, #12
 8006894:	f8ca 3000 	str.w	r3, [sl]
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800689e:	81a3      	strh	r3, [r4, #12]
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	e7e9      	b.n	800687a <__ssputs_r+0x8a>
	...

080068a8 <_svfiprintf_r>:
 80068a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ac:	4698      	mov	r8, r3
 80068ae:	898b      	ldrh	r3, [r1, #12]
 80068b0:	061b      	lsls	r3, r3, #24
 80068b2:	b09d      	sub	sp, #116	@ 0x74
 80068b4:	4607      	mov	r7, r0
 80068b6:	460d      	mov	r5, r1
 80068b8:	4614      	mov	r4, r2
 80068ba:	d510      	bpl.n	80068de <_svfiprintf_r+0x36>
 80068bc:	690b      	ldr	r3, [r1, #16]
 80068be:	b973      	cbnz	r3, 80068de <_svfiprintf_r+0x36>
 80068c0:	2140      	movs	r1, #64	@ 0x40
 80068c2:	f7ff ff09 	bl	80066d8 <_malloc_r>
 80068c6:	6028      	str	r0, [r5, #0]
 80068c8:	6128      	str	r0, [r5, #16]
 80068ca:	b930      	cbnz	r0, 80068da <_svfiprintf_r+0x32>
 80068cc:	230c      	movs	r3, #12
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	f04f 30ff 	mov.w	r0, #4294967295
 80068d4:	b01d      	add	sp, #116	@ 0x74
 80068d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068da:	2340      	movs	r3, #64	@ 0x40
 80068dc:	616b      	str	r3, [r5, #20]
 80068de:	2300      	movs	r3, #0
 80068e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80068e2:	2320      	movs	r3, #32
 80068e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80068ec:	2330      	movs	r3, #48	@ 0x30
 80068ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006a8c <_svfiprintf_r+0x1e4>
 80068f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068f6:	f04f 0901 	mov.w	r9, #1
 80068fa:	4623      	mov	r3, r4
 80068fc:	469a      	mov	sl, r3
 80068fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006902:	b10a      	cbz	r2, 8006908 <_svfiprintf_r+0x60>
 8006904:	2a25      	cmp	r2, #37	@ 0x25
 8006906:	d1f9      	bne.n	80068fc <_svfiprintf_r+0x54>
 8006908:	ebba 0b04 	subs.w	fp, sl, r4
 800690c:	d00b      	beq.n	8006926 <_svfiprintf_r+0x7e>
 800690e:	465b      	mov	r3, fp
 8006910:	4622      	mov	r2, r4
 8006912:	4629      	mov	r1, r5
 8006914:	4638      	mov	r0, r7
 8006916:	f7ff ff6b 	bl	80067f0 <__ssputs_r>
 800691a:	3001      	adds	r0, #1
 800691c:	f000 80a7 	beq.w	8006a6e <_svfiprintf_r+0x1c6>
 8006920:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006922:	445a      	add	r2, fp
 8006924:	9209      	str	r2, [sp, #36]	@ 0x24
 8006926:	f89a 3000 	ldrb.w	r3, [sl]
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 809f 	beq.w	8006a6e <_svfiprintf_r+0x1c6>
 8006930:	2300      	movs	r3, #0
 8006932:	f04f 32ff 	mov.w	r2, #4294967295
 8006936:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800693a:	f10a 0a01 	add.w	sl, sl, #1
 800693e:	9304      	str	r3, [sp, #16]
 8006940:	9307      	str	r3, [sp, #28]
 8006942:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006946:	931a      	str	r3, [sp, #104]	@ 0x68
 8006948:	4654      	mov	r4, sl
 800694a:	2205      	movs	r2, #5
 800694c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006950:	484e      	ldr	r0, [pc, #312]	@ (8006a8c <_svfiprintf_r+0x1e4>)
 8006952:	f7f9 fc65 	bl	8000220 <memchr>
 8006956:	9a04      	ldr	r2, [sp, #16]
 8006958:	b9d8      	cbnz	r0, 8006992 <_svfiprintf_r+0xea>
 800695a:	06d0      	lsls	r0, r2, #27
 800695c:	bf44      	itt	mi
 800695e:	2320      	movmi	r3, #32
 8006960:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006964:	0711      	lsls	r1, r2, #28
 8006966:	bf44      	itt	mi
 8006968:	232b      	movmi	r3, #43	@ 0x2b
 800696a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800696e:	f89a 3000 	ldrb.w	r3, [sl]
 8006972:	2b2a      	cmp	r3, #42	@ 0x2a
 8006974:	d015      	beq.n	80069a2 <_svfiprintf_r+0xfa>
 8006976:	9a07      	ldr	r2, [sp, #28]
 8006978:	4654      	mov	r4, sl
 800697a:	2000      	movs	r0, #0
 800697c:	f04f 0c0a 	mov.w	ip, #10
 8006980:	4621      	mov	r1, r4
 8006982:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006986:	3b30      	subs	r3, #48	@ 0x30
 8006988:	2b09      	cmp	r3, #9
 800698a:	d94b      	bls.n	8006a24 <_svfiprintf_r+0x17c>
 800698c:	b1b0      	cbz	r0, 80069bc <_svfiprintf_r+0x114>
 800698e:	9207      	str	r2, [sp, #28]
 8006990:	e014      	b.n	80069bc <_svfiprintf_r+0x114>
 8006992:	eba0 0308 	sub.w	r3, r0, r8
 8006996:	fa09 f303 	lsl.w	r3, r9, r3
 800699a:	4313      	orrs	r3, r2
 800699c:	9304      	str	r3, [sp, #16]
 800699e:	46a2      	mov	sl, r4
 80069a0:	e7d2      	b.n	8006948 <_svfiprintf_r+0xa0>
 80069a2:	9b03      	ldr	r3, [sp, #12]
 80069a4:	1d19      	adds	r1, r3, #4
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	9103      	str	r1, [sp, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	bfbb      	ittet	lt
 80069ae:	425b      	neglt	r3, r3
 80069b0:	f042 0202 	orrlt.w	r2, r2, #2
 80069b4:	9307      	strge	r3, [sp, #28]
 80069b6:	9307      	strlt	r3, [sp, #28]
 80069b8:	bfb8      	it	lt
 80069ba:	9204      	strlt	r2, [sp, #16]
 80069bc:	7823      	ldrb	r3, [r4, #0]
 80069be:	2b2e      	cmp	r3, #46	@ 0x2e
 80069c0:	d10a      	bne.n	80069d8 <_svfiprintf_r+0x130>
 80069c2:	7863      	ldrb	r3, [r4, #1]
 80069c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80069c6:	d132      	bne.n	8006a2e <_svfiprintf_r+0x186>
 80069c8:	9b03      	ldr	r3, [sp, #12]
 80069ca:	1d1a      	adds	r2, r3, #4
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	9203      	str	r2, [sp, #12]
 80069d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80069d4:	3402      	adds	r4, #2
 80069d6:	9305      	str	r3, [sp, #20]
 80069d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006a9c <_svfiprintf_r+0x1f4>
 80069dc:	7821      	ldrb	r1, [r4, #0]
 80069de:	2203      	movs	r2, #3
 80069e0:	4650      	mov	r0, sl
 80069e2:	f7f9 fc1d 	bl	8000220 <memchr>
 80069e6:	b138      	cbz	r0, 80069f8 <_svfiprintf_r+0x150>
 80069e8:	9b04      	ldr	r3, [sp, #16]
 80069ea:	eba0 000a 	sub.w	r0, r0, sl
 80069ee:	2240      	movs	r2, #64	@ 0x40
 80069f0:	4082      	lsls	r2, r0
 80069f2:	4313      	orrs	r3, r2
 80069f4:	3401      	adds	r4, #1
 80069f6:	9304      	str	r3, [sp, #16]
 80069f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069fc:	4824      	ldr	r0, [pc, #144]	@ (8006a90 <_svfiprintf_r+0x1e8>)
 80069fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a02:	2206      	movs	r2, #6
 8006a04:	f7f9 fc0c 	bl	8000220 <memchr>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d036      	beq.n	8006a7a <_svfiprintf_r+0x1d2>
 8006a0c:	4b21      	ldr	r3, [pc, #132]	@ (8006a94 <_svfiprintf_r+0x1ec>)
 8006a0e:	bb1b      	cbnz	r3, 8006a58 <_svfiprintf_r+0x1b0>
 8006a10:	9b03      	ldr	r3, [sp, #12]
 8006a12:	3307      	adds	r3, #7
 8006a14:	f023 0307 	bic.w	r3, r3, #7
 8006a18:	3308      	adds	r3, #8
 8006a1a:	9303      	str	r3, [sp, #12]
 8006a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a1e:	4433      	add	r3, r6
 8006a20:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a22:	e76a      	b.n	80068fa <_svfiprintf_r+0x52>
 8006a24:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a28:	460c      	mov	r4, r1
 8006a2a:	2001      	movs	r0, #1
 8006a2c:	e7a8      	b.n	8006980 <_svfiprintf_r+0xd8>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	3401      	adds	r4, #1
 8006a32:	9305      	str	r3, [sp, #20]
 8006a34:	4619      	mov	r1, r3
 8006a36:	f04f 0c0a 	mov.w	ip, #10
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a40:	3a30      	subs	r2, #48	@ 0x30
 8006a42:	2a09      	cmp	r2, #9
 8006a44:	d903      	bls.n	8006a4e <_svfiprintf_r+0x1a6>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0c6      	beq.n	80069d8 <_svfiprintf_r+0x130>
 8006a4a:	9105      	str	r1, [sp, #20]
 8006a4c:	e7c4      	b.n	80069d8 <_svfiprintf_r+0x130>
 8006a4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a52:	4604      	mov	r4, r0
 8006a54:	2301      	movs	r3, #1
 8006a56:	e7f0      	b.n	8006a3a <_svfiprintf_r+0x192>
 8006a58:	ab03      	add	r3, sp, #12
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	462a      	mov	r2, r5
 8006a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a98 <_svfiprintf_r+0x1f0>)
 8006a60:	a904      	add	r1, sp, #16
 8006a62:	4638      	mov	r0, r7
 8006a64:	f3af 8000 	nop.w
 8006a68:	1c42      	adds	r2, r0, #1
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	d1d6      	bne.n	8006a1c <_svfiprintf_r+0x174>
 8006a6e:	89ab      	ldrh	r3, [r5, #12]
 8006a70:	065b      	lsls	r3, r3, #25
 8006a72:	f53f af2d 	bmi.w	80068d0 <_svfiprintf_r+0x28>
 8006a76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a78:	e72c      	b.n	80068d4 <_svfiprintf_r+0x2c>
 8006a7a:	ab03      	add	r3, sp, #12
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	462a      	mov	r2, r5
 8006a80:	4b05      	ldr	r3, [pc, #20]	@ (8006a98 <_svfiprintf_r+0x1f0>)
 8006a82:	a904      	add	r1, sp, #16
 8006a84:	4638      	mov	r0, r7
 8006a86:	f000 f9bb 	bl	8006e00 <_printf_i>
 8006a8a:	e7ed      	b.n	8006a68 <_svfiprintf_r+0x1c0>
 8006a8c:	08007454 	.word	0x08007454
 8006a90:	0800745e 	.word	0x0800745e
 8006a94:	00000000 	.word	0x00000000
 8006a98:	080067f1 	.word	0x080067f1
 8006a9c:	0800745a 	.word	0x0800745a

08006aa0 <__sfputc_r>:
 8006aa0:	6893      	ldr	r3, [r2, #8]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	b410      	push	{r4}
 8006aa8:	6093      	str	r3, [r2, #8]
 8006aaa:	da08      	bge.n	8006abe <__sfputc_r+0x1e>
 8006aac:	6994      	ldr	r4, [r2, #24]
 8006aae:	42a3      	cmp	r3, r4
 8006ab0:	db01      	blt.n	8006ab6 <__sfputc_r+0x16>
 8006ab2:	290a      	cmp	r1, #10
 8006ab4:	d103      	bne.n	8006abe <__sfputc_r+0x1e>
 8006ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aba:	f7ff bc82 	b.w	80063c2 <__swbuf_r>
 8006abe:	6813      	ldr	r3, [r2, #0]
 8006ac0:	1c58      	adds	r0, r3, #1
 8006ac2:	6010      	str	r0, [r2, #0]
 8006ac4:	7019      	strb	r1, [r3, #0]
 8006ac6:	4608      	mov	r0, r1
 8006ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <__sfputs_r>:
 8006ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	460f      	mov	r7, r1
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	18d5      	adds	r5, r2, r3
 8006ad8:	42ac      	cmp	r4, r5
 8006ada:	d101      	bne.n	8006ae0 <__sfputs_r+0x12>
 8006adc:	2000      	movs	r0, #0
 8006ade:	e007      	b.n	8006af0 <__sfputs_r+0x22>
 8006ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ae4:	463a      	mov	r2, r7
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f7ff ffda 	bl	8006aa0 <__sfputc_r>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d1f3      	bne.n	8006ad8 <__sfputs_r+0xa>
 8006af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006af4 <_vfiprintf_r>:
 8006af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af8:	460d      	mov	r5, r1
 8006afa:	b09d      	sub	sp, #116	@ 0x74
 8006afc:	4614      	mov	r4, r2
 8006afe:	4698      	mov	r8, r3
 8006b00:	4606      	mov	r6, r0
 8006b02:	b118      	cbz	r0, 8006b0c <_vfiprintf_r+0x18>
 8006b04:	6a03      	ldr	r3, [r0, #32]
 8006b06:	b90b      	cbnz	r3, 8006b0c <_vfiprintf_r+0x18>
 8006b08:	f7ff fb3c 	bl	8006184 <__sinit>
 8006b0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b0e:	07d9      	lsls	r1, r3, #31
 8006b10:	d405      	bmi.n	8006b1e <_vfiprintf_r+0x2a>
 8006b12:	89ab      	ldrh	r3, [r5, #12]
 8006b14:	059a      	lsls	r2, r3, #22
 8006b16:	d402      	bmi.n	8006b1e <_vfiprintf_r+0x2a>
 8006b18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b1a:	f7ff fd60 	bl	80065de <__retarget_lock_acquire_recursive>
 8006b1e:	89ab      	ldrh	r3, [r5, #12]
 8006b20:	071b      	lsls	r3, r3, #28
 8006b22:	d501      	bpl.n	8006b28 <_vfiprintf_r+0x34>
 8006b24:	692b      	ldr	r3, [r5, #16]
 8006b26:	b99b      	cbnz	r3, 8006b50 <_vfiprintf_r+0x5c>
 8006b28:	4629      	mov	r1, r5
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	f7ff fc88 	bl	8006440 <__swsetup_r>
 8006b30:	b170      	cbz	r0, 8006b50 <_vfiprintf_r+0x5c>
 8006b32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b34:	07dc      	lsls	r4, r3, #31
 8006b36:	d504      	bpl.n	8006b42 <_vfiprintf_r+0x4e>
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	b01d      	add	sp, #116	@ 0x74
 8006b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b42:	89ab      	ldrh	r3, [r5, #12]
 8006b44:	0598      	lsls	r0, r3, #22
 8006b46:	d4f7      	bmi.n	8006b38 <_vfiprintf_r+0x44>
 8006b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b4a:	f7ff fd49 	bl	80065e0 <__retarget_lock_release_recursive>
 8006b4e:	e7f3      	b.n	8006b38 <_vfiprintf_r+0x44>
 8006b50:	2300      	movs	r3, #0
 8006b52:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b54:	2320      	movs	r3, #32
 8006b56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b5e:	2330      	movs	r3, #48	@ 0x30
 8006b60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006d10 <_vfiprintf_r+0x21c>
 8006b64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b68:	f04f 0901 	mov.w	r9, #1
 8006b6c:	4623      	mov	r3, r4
 8006b6e:	469a      	mov	sl, r3
 8006b70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b74:	b10a      	cbz	r2, 8006b7a <_vfiprintf_r+0x86>
 8006b76:	2a25      	cmp	r2, #37	@ 0x25
 8006b78:	d1f9      	bne.n	8006b6e <_vfiprintf_r+0x7a>
 8006b7a:	ebba 0b04 	subs.w	fp, sl, r4
 8006b7e:	d00b      	beq.n	8006b98 <_vfiprintf_r+0xa4>
 8006b80:	465b      	mov	r3, fp
 8006b82:	4622      	mov	r2, r4
 8006b84:	4629      	mov	r1, r5
 8006b86:	4630      	mov	r0, r6
 8006b88:	f7ff ffa1 	bl	8006ace <__sfputs_r>
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	f000 80a7 	beq.w	8006ce0 <_vfiprintf_r+0x1ec>
 8006b92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b94:	445a      	add	r2, fp
 8006b96:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b98:	f89a 3000 	ldrb.w	r3, [sl]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 809f 	beq.w	8006ce0 <_vfiprintf_r+0x1ec>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bac:	f10a 0a01 	add.w	sl, sl, #1
 8006bb0:	9304      	str	r3, [sp, #16]
 8006bb2:	9307      	str	r3, [sp, #28]
 8006bb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bba:	4654      	mov	r4, sl
 8006bbc:	2205      	movs	r2, #5
 8006bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bc2:	4853      	ldr	r0, [pc, #332]	@ (8006d10 <_vfiprintf_r+0x21c>)
 8006bc4:	f7f9 fb2c 	bl	8000220 <memchr>
 8006bc8:	9a04      	ldr	r2, [sp, #16]
 8006bca:	b9d8      	cbnz	r0, 8006c04 <_vfiprintf_r+0x110>
 8006bcc:	06d1      	lsls	r1, r2, #27
 8006bce:	bf44      	itt	mi
 8006bd0:	2320      	movmi	r3, #32
 8006bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bd6:	0713      	lsls	r3, r2, #28
 8006bd8:	bf44      	itt	mi
 8006bda:	232b      	movmi	r3, #43	@ 0x2b
 8006bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006be0:	f89a 3000 	ldrb.w	r3, [sl]
 8006be4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006be6:	d015      	beq.n	8006c14 <_vfiprintf_r+0x120>
 8006be8:	9a07      	ldr	r2, [sp, #28]
 8006bea:	4654      	mov	r4, sl
 8006bec:	2000      	movs	r0, #0
 8006bee:	f04f 0c0a 	mov.w	ip, #10
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bf8:	3b30      	subs	r3, #48	@ 0x30
 8006bfa:	2b09      	cmp	r3, #9
 8006bfc:	d94b      	bls.n	8006c96 <_vfiprintf_r+0x1a2>
 8006bfe:	b1b0      	cbz	r0, 8006c2e <_vfiprintf_r+0x13a>
 8006c00:	9207      	str	r2, [sp, #28]
 8006c02:	e014      	b.n	8006c2e <_vfiprintf_r+0x13a>
 8006c04:	eba0 0308 	sub.w	r3, r0, r8
 8006c08:	fa09 f303 	lsl.w	r3, r9, r3
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	9304      	str	r3, [sp, #16]
 8006c10:	46a2      	mov	sl, r4
 8006c12:	e7d2      	b.n	8006bba <_vfiprintf_r+0xc6>
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	1d19      	adds	r1, r3, #4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	9103      	str	r1, [sp, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	bfbb      	ittet	lt
 8006c20:	425b      	neglt	r3, r3
 8006c22:	f042 0202 	orrlt.w	r2, r2, #2
 8006c26:	9307      	strge	r3, [sp, #28]
 8006c28:	9307      	strlt	r3, [sp, #28]
 8006c2a:	bfb8      	it	lt
 8006c2c:	9204      	strlt	r2, [sp, #16]
 8006c2e:	7823      	ldrb	r3, [r4, #0]
 8006c30:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c32:	d10a      	bne.n	8006c4a <_vfiprintf_r+0x156>
 8006c34:	7863      	ldrb	r3, [r4, #1]
 8006c36:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c38:	d132      	bne.n	8006ca0 <_vfiprintf_r+0x1ac>
 8006c3a:	9b03      	ldr	r3, [sp, #12]
 8006c3c:	1d1a      	adds	r2, r3, #4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	9203      	str	r2, [sp, #12]
 8006c42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c46:	3402      	adds	r4, #2
 8006c48:	9305      	str	r3, [sp, #20]
 8006c4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d20 <_vfiprintf_r+0x22c>
 8006c4e:	7821      	ldrb	r1, [r4, #0]
 8006c50:	2203      	movs	r2, #3
 8006c52:	4650      	mov	r0, sl
 8006c54:	f7f9 fae4 	bl	8000220 <memchr>
 8006c58:	b138      	cbz	r0, 8006c6a <_vfiprintf_r+0x176>
 8006c5a:	9b04      	ldr	r3, [sp, #16]
 8006c5c:	eba0 000a 	sub.w	r0, r0, sl
 8006c60:	2240      	movs	r2, #64	@ 0x40
 8006c62:	4082      	lsls	r2, r0
 8006c64:	4313      	orrs	r3, r2
 8006c66:	3401      	adds	r4, #1
 8006c68:	9304      	str	r3, [sp, #16]
 8006c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c6e:	4829      	ldr	r0, [pc, #164]	@ (8006d14 <_vfiprintf_r+0x220>)
 8006c70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c74:	2206      	movs	r2, #6
 8006c76:	f7f9 fad3 	bl	8000220 <memchr>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	d03f      	beq.n	8006cfe <_vfiprintf_r+0x20a>
 8006c7e:	4b26      	ldr	r3, [pc, #152]	@ (8006d18 <_vfiprintf_r+0x224>)
 8006c80:	bb1b      	cbnz	r3, 8006cca <_vfiprintf_r+0x1d6>
 8006c82:	9b03      	ldr	r3, [sp, #12]
 8006c84:	3307      	adds	r3, #7
 8006c86:	f023 0307 	bic.w	r3, r3, #7
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	9303      	str	r3, [sp, #12]
 8006c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c90:	443b      	add	r3, r7
 8006c92:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c94:	e76a      	b.n	8006b6c <_vfiprintf_r+0x78>
 8006c96:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	2001      	movs	r0, #1
 8006c9e:	e7a8      	b.n	8006bf2 <_vfiprintf_r+0xfe>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	3401      	adds	r4, #1
 8006ca4:	9305      	str	r3, [sp, #20]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	f04f 0c0a 	mov.w	ip, #10
 8006cac:	4620      	mov	r0, r4
 8006cae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cb2:	3a30      	subs	r2, #48	@ 0x30
 8006cb4:	2a09      	cmp	r2, #9
 8006cb6:	d903      	bls.n	8006cc0 <_vfiprintf_r+0x1cc>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0c6      	beq.n	8006c4a <_vfiprintf_r+0x156>
 8006cbc:	9105      	str	r1, [sp, #20]
 8006cbe:	e7c4      	b.n	8006c4a <_vfiprintf_r+0x156>
 8006cc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e7f0      	b.n	8006cac <_vfiprintf_r+0x1b8>
 8006cca:	ab03      	add	r3, sp, #12
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	462a      	mov	r2, r5
 8006cd0:	4b12      	ldr	r3, [pc, #72]	@ (8006d1c <_vfiprintf_r+0x228>)
 8006cd2:	a904      	add	r1, sp, #16
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	f3af 8000 	nop.w
 8006cda:	4607      	mov	r7, r0
 8006cdc:	1c78      	adds	r0, r7, #1
 8006cde:	d1d6      	bne.n	8006c8e <_vfiprintf_r+0x19a>
 8006ce0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ce2:	07d9      	lsls	r1, r3, #31
 8006ce4:	d405      	bmi.n	8006cf2 <_vfiprintf_r+0x1fe>
 8006ce6:	89ab      	ldrh	r3, [r5, #12]
 8006ce8:	059a      	lsls	r2, r3, #22
 8006cea:	d402      	bmi.n	8006cf2 <_vfiprintf_r+0x1fe>
 8006cec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cee:	f7ff fc77 	bl	80065e0 <__retarget_lock_release_recursive>
 8006cf2:	89ab      	ldrh	r3, [r5, #12]
 8006cf4:	065b      	lsls	r3, r3, #25
 8006cf6:	f53f af1f 	bmi.w	8006b38 <_vfiprintf_r+0x44>
 8006cfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cfc:	e71e      	b.n	8006b3c <_vfiprintf_r+0x48>
 8006cfe:	ab03      	add	r3, sp, #12
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	462a      	mov	r2, r5
 8006d04:	4b05      	ldr	r3, [pc, #20]	@ (8006d1c <_vfiprintf_r+0x228>)
 8006d06:	a904      	add	r1, sp, #16
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f000 f879 	bl	8006e00 <_printf_i>
 8006d0e:	e7e4      	b.n	8006cda <_vfiprintf_r+0x1e6>
 8006d10:	08007454 	.word	0x08007454
 8006d14:	0800745e 	.word	0x0800745e
 8006d18:	00000000 	.word	0x00000000
 8006d1c:	08006acf 	.word	0x08006acf
 8006d20:	0800745a 	.word	0x0800745a

08006d24 <_printf_common>:
 8006d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d28:	4616      	mov	r6, r2
 8006d2a:	4698      	mov	r8, r3
 8006d2c:	688a      	ldr	r2, [r1, #8]
 8006d2e:	690b      	ldr	r3, [r1, #16]
 8006d30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d34:	4293      	cmp	r3, r2
 8006d36:	bfb8      	it	lt
 8006d38:	4613      	movlt	r3, r2
 8006d3a:	6033      	str	r3, [r6, #0]
 8006d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d40:	4607      	mov	r7, r0
 8006d42:	460c      	mov	r4, r1
 8006d44:	b10a      	cbz	r2, 8006d4a <_printf_common+0x26>
 8006d46:	3301      	adds	r3, #1
 8006d48:	6033      	str	r3, [r6, #0]
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	0699      	lsls	r1, r3, #26
 8006d4e:	bf42      	ittt	mi
 8006d50:	6833      	ldrmi	r3, [r6, #0]
 8006d52:	3302      	addmi	r3, #2
 8006d54:	6033      	strmi	r3, [r6, #0]
 8006d56:	6825      	ldr	r5, [r4, #0]
 8006d58:	f015 0506 	ands.w	r5, r5, #6
 8006d5c:	d106      	bne.n	8006d6c <_printf_common+0x48>
 8006d5e:	f104 0a19 	add.w	sl, r4, #25
 8006d62:	68e3      	ldr	r3, [r4, #12]
 8006d64:	6832      	ldr	r2, [r6, #0]
 8006d66:	1a9b      	subs	r3, r3, r2
 8006d68:	42ab      	cmp	r3, r5
 8006d6a:	dc26      	bgt.n	8006dba <_printf_common+0x96>
 8006d6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d70:	6822      	ldr	r2, [r4, #0]
 8006d72:	3b00      	subs	r3, #0
 8006d74:	bf18      	it	ne
 8006d76:	2301      	movne	r3, #1
 8006d78:	0692      	lsls	r2, r2, #26
 8006d7a:	d42b      	bmi.n	8006dd4 <_printf_common+0xb0>
 8006d7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d80:	4641      	mov	r1, r8
 8006d82:	4638      	mov	r0, r7
 8006d84:	47c8      	blx	r9
 8006d86:	3001      	adds	r0, #1
 8006d88:	d01e      	beq.n	8006dc8 <_printf_common+0xa4>
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	6922      	ldr	r2, [r4, #16]
 8006d8e:	f003 0306 	and.w	r3, r3, #6
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	bf02      	ittt	eq
 8006d96:	68e5      	ldreq	r5, [r4, #12]
 8006d98:	6833      	ldreq	r3, [r6, #0]
 8006d9a:	1aed      	subeq	r5, r5, r3
 8006d9c:	68a3      	ldr	r3, [r4, #8]
 8006d9e:	bf0c      	ite	eq
 8006da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006da4:	2500      	movne	r5, #0
 8006da6:	4293      	cmp	r3, r2
 8006da8:	bfc4      	itt	gt
 8006daa:	1a9b      	subgt	r3, r3, r2
 8006dac:	18ed      	addgt	r5, r5, r3
 8006dae:	2600      	movs	r6, #0
 8006db0:	341a      	adds	r4, #26
 8006db2:	42b5      	cmp	r5, r6
 8006db4:	d11a      	bne.n	8006dec <_printf_common+0xc8>
 8006db6:	2000      	movs	r0, #0
 8006db8:	e008      	b.n	8006dcc <_printf_common+0xa8>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	4652      	mov	r2, sl
 8006dbe:	4641      	mov	r1, r8
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	47c8      	blx	r9
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d103      	bne.n	8006dd0 <_printf_common+0xac>
 8006dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd0:	3501      	adds	r5, #1
 8006dd2:	e7c6      	b.n	8006d62 <_printf_common+0x3e>
 8006dd4:	18e1      	adds	r1, r4, r3
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	2030      	movs	r0, #48	@ 0x30
 8006dda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006dde:	4422      	add	r2, r4
 8006de0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006de4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006de8:	3302      	adds	r3, #2
 8006dea:	e7c7      	b.n	8006d7c <_printf_common+0x58>
 8006dec:	2301      	movs	r3, #1
 8006dee:	4622      	mov	r2, r4
 8006df0:	4641      	mov	r1, r8
 8006df2:	4638      	mov	r0, r7
 8006df4:	47c8      	blx	r9
 8006df6:	3001      	adds	r0, #1
 8006df8:	d0e6      	beq.n	8006dc8 <_printf_common+0xa4>
 8006dfa:	3601      	adds	r6, #1
 8006dfc:	e7d9      	b.n	8006db2 <_printf_common+0x8e>
	...

08006e00 <_printf_i>:
 8006e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e04:	7e0f      	ldrb	r7, [r1, #24]
 8006e06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e08:	2f78      	cmp	r7, #120	@ 0x78
 8006e0a:	4691      	mov	r9, r2
 8006e0c:	4680      	mov	r8, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	469a      	mov	sl, r3
 8006e12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e16:	d807      	bhi.n	8006e28 <_printf_i+0x28>
 8006e18:	2f62      	cmp	r7, #98	@ 0x62
 8006e1a:	d80a      	bhi.n	8006e32 <_printf_i+0x32>
 8006e1c:	2f00      	cmp	r7, #0
 8006e1e:	f000 80d1 	beq.w	8006fc4 <_printf_i+0x1c4>
 8006e22:	2f58      	cmp	r7, #88	@ 0x58
 8006e24:	f000 80b8 	beq.w	8006f98 <_printf_i+0x198>
 8006e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e30:	e03a      	b.n	8006ea8 <_printf_i+0xa8>
 8006e32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e36:	2b15      	cmp	r3, #21
 8006e38:	d8f6      	bhi.n	8006e28 <_printf_i+0x28>
 8006e3a:	a101      	add	r1, pc, #4	@ (adr r1, 8006e40 <_printf_i+0x40>)
 8006e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e40:	08006e99 	.word	0x08006e99
 8006e44:	08006ead 	.word	0x08006ead
 8006e48:	08006e29 	.word	0x08006e29
 8006e4c:	08006e29 	.word	0x08006e29
 8006e50:	08006e29 	.word	0x08006e29
 8006e54:	08006e29 	.word	0x08006e29
 8006e58:	08006ead 	.word	0x08006ead
 8006e5c:	08006e29 	.word	0x08006e29
 8006e60:	08006e29 	.word	0x08006e29
 8006e64:	08006e29 	.word	0x08006e29
 8006e68:	08006e29 	.word	0x08006e29
 8006e6c:	08006fab 	.word	0x08006fab
 8006e70:	08006ed7 	.word	0x08006ed7
 8006e74:	08006f65 	.word	0x08006f65
 8006e78:	08006e29 	.word	0x08006e29
 8006e7c:	08006e29 	.word	0x08006e29
 8006e80:	08006fcd 	.word	0x08006fcd
 8006e84:	08006e29 	.word	0x08006e29
 8006e88:	08006ed7 	.word	0x08006ed7
 8006e8c:	08006e29 	.word	0x08006e29
 8006e90:	08006e29 	.word	0x08006e29
 8006e94:	08006f6d 	.word	0x08006f6d
 8006e98:	6833      	ldr	r3, [r6, #0]
 8006e9a:	1d1a      	adds	r2, r3, #4
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6032      	str	r2, [r6, #0]
 8006ea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ea4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e09c      	b.n	8006fe6 <_printf_i+0x1e6>
 8006eac:	6833      	ldr	r3, [r6, #0]
 8006eae:	6820      	ldr	r0, [r4, #0]
 8006eb0:	1d19      	adds	r1, r3, #4
 8006eb2:	6031      	str	r1, [r6, #0]
 8006eb4:	0606      	lsls	r6, r0, #24
 8006eb6:	d501      	bpl.n	8006ebc <_printf_i+0xbc>
 8006eb8:	681d      	ldr	r5, [r3, #0]
 8006eba:	e003      	b.n	8006ec4 <_printf_i+0xc4>
 8006ebc:	0645      	lsls	r5, r0, #25
 8006ebe:	d5fb      	bpl.n	8006eb8 <_printf_i+0xb8>
 8006ec0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ec4:	2d00      	cmp	r5, #0
 8006ec6:	da03      	bge.n	8006ed0 <_printf_i+0xd0>
 8006ec8:	232d      	movs	r3, #45	@ 0x2d
 8006eca:	426d      	negs	r5, r5
 8006ecc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ed0:	4858      	ldr	r0, [pc, #352]	@ (8007034 <_printf_i+0x234>)
 8006ed2:	230a      	movs	r3, #10
 8006ed4:	e011      	b.n	8006efa <_printf_i+0xfa>
 8006ed6:	6821      	ldr	r1, [r4, #0]
 8006ed8:	6833      	ldr	r3, [r6, #0]
 8006eda:	0608      	lsls	r0, r1, #24
 8006edc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ee0:	d402      	bmi.n	8006ee8 <_printf_i+0xe8>
 8006ee2:	0649      	lsls	r1, r1, #25
 8006ee4:	bf48      	it	mi
 8006ee6:	b2ad      	uxthmi	r5, r5
 8006ee8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006eea:	4852      	ldr	r0, [pc, #328]	@ (8007034 <_printf_i+0x234>)
 8006eec:	6033      	str	r3, [r6, #0]
 8006eee:	bf14      	ite	ne
 8006ef0:	230a      	movne	r3, #10
 8006ef2:	2308      	moveq	r3, #8
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006efa:	6866      	ldr	r6, [r4, #4]
 8006efc:	60a6      	str	r6, [r4, #8]
 8006efe:	2e00      	cmp	r6, #0
 8006f00:	db05      	blt.n	8006f0e <_printf_i+0x10e>
 8006f02:	6821      	ldr	r1, [r4, #0]
 8006f04:	432e      	orrs	r6, r5
 8006f06:	f021 0104 	bic.w	r1, r1, #4
 8006f0a:	6021      	str	r1, [r4, #0]
 8006f0c:	d04b      	beq.n	8006fa6 <_printf_i+0x1a6>
 8006f0e:	4616      	mov	r6, r2
 8006f10:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f14:	fb03 5711 	mls	r7, r3, r1, r5
 8006f18:	5dc7      	ldrb	r7, [r0, r7]
 8006f1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f1e:	462f      	mov	r7, r5
 8006f20:	42bb      	cmp	r3, r7
 8006f22:	460d      	mov	r5, r1
 8006f24:	d9f4      	bls.n	8006f10 <_printf_i+0x110>
 8006f26:	2b08      	cmp	r3, #8
 8006f28:	d10b      	bne.n	8006f42 <_printf_i+0x142>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	07df      	lsls	r7, r3, #31
 8006f2e:	d508      	bpl.n	8006f42 <_printf_i+0x142>
 8006f30:	6923      	ldr	r3, [r4, #16]
 8006f32:	6861      	ldr	r1, [r4, #4]
 8006f34:	4299      	cmp	r1, r3
 8006f36:	bfde      	ittt	le
 8006f38:	2330      	movle	r3, #48	@ 0x30
 8006f3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f42:	1b92      	subs	r2, r2, r6
 8006f44:	6122      	str	r2, [r4, #16]
 8006f46:	f8cd a000 	str.w	sl, [sp]
 8006f4a:	464b      	mov	r3, r9
 8006f4c:	aa03      	add	r2, sp, #12
 8006f4e:	4621      	mov	r1, r4
 8006f50:	4640      	mov	r0, r8
 8006f52:	f7ff fee7 	bl	8006d24 <_printf_common>
 8006f56:	3001      	adds	r0, #1
 8006f58:	d14a      	bne.n	8006ff0 <_printf_i+0x1f0>
 8006f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5e:	b004      	add	sp, #16
 8006f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	f043 0320 	orr.w	r3, r3, #32
 8006f6a:	6023      	str	r3, [r4, #0]
 8006f6c:	4832      	ldr	r0, [pc, #200]	@ (8007038 <_printf_i+0x238>)
 8006f6e:	2778      	movs	r7, #120	@ 0x78
 8006f70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	6831      	ldr	r1, [r6, #0]
 8006f78:	061f      	lsls	r7, r3, #24
 8006f7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f7e:	d402      	bmi.n	8006f86 <_printf_i+0x186>
 8006f80:	065f      	lsls	r7, r3, #25
 8006f82:	bf48      	it	mi
 8006f84:	b2ad      	uxthmi	r5, r5
 8006f86:	6031      	str	r1, [r6, #0]
 8006f88:	07d9      	lsls	r1, r3, #31
 8006f8a:	bf44      	itt	mi
 8006f8c:	f043 0320 	orrmi.w	r3, r3, #32
 8006f90:	6023      	strmi	r3, [r4, #0]
 8006f92:	b11d      	cbz	r5, 8006f9c <_printf_i+0x19c>
 8006f94:	2310      	movs	r3, #16
 8006f96:	e7ad      	b.n	8006ef4 <_printf_i+0xf4>
 8006f98:	4826      	ldr	r0, [pc, #152]	@ (8007034 <_printf_i+0x234>)
 8006f9a:	e7e9      	b.n	8006f70 <_printf_i+0x170>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	f023 0320 	bic.w	r3, r3, #32
 8006fa2:	6023      	str	r3, [r4, #0]
 8006fa4:	e7f6      	b.n	8006f94 <_printf_i+0x194>
 8006fa6:	4616      	mov	r6, r2
 8006fa8:	e7bd      	b.n	8006f26 <_printf_i+0x126>
 8006faa:	6833      	ldr	r3, [r6, #0]
 8006fac:	6825      	ldr	r5, [r4, #0]
 8006fae:	6961      	ldr	r1, [r4, #20]
 8006fb0:	1d18      	adds	r0, r3, #4
 8006fb2:	6030      	str	r0, [r6, #0]
 8006fb4:	062e      	lsls	r6, r5, #24
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	d501      	bpl.n	8006fbe <_printf_i+0x1be>
 8006fba:	6019      	str	r1, [r3, #0]
 8006fbc:	e002      	b.n	8006fc4 <_printf_i+0x1c4>
 8006fbe:	0668      	lsls	r0, r5, #25
 8006fc0:	d5fb      	bpl.n	8006fba <_printf_i+0x1ba>
 8006fc2:	8019      	strh	r1, [r3, #0]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	6123      	str	r3, [r4, #16]
 8006fc8:	4616      	mov	r6, r2
 8006fca:	e7bc      	b.n	8006f46 <_printf_i+0x146>
 8006fcc:	6833      	ldr	r3, [r6, #0]
 8006fce:	1d1a      	adds	r2, r3, #4
 8006fd0:	6032      	str	r2, [r6, #0]
 8006fd2:	681e      	ldr	r6, [r3, #0]
 8006fd4:	6862      	ldr	r2, [r4, #4]
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f7f9 f921 	bl	8000220 <memchr>
 8006fde:	b108      	cbz	r0, 8006fe4 <_printf_i+0x1e4>
 8006fe0:	1b80      	subs	r0, r0, r6
 8006fe2:	6060      	str	r0, [r4, #4]
 8006fe4:	6863      	ldr	r3, [r4, #4]
 8006fe6:	6123      	str	r3, [r4, #16]
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fee:	e7aa      	b.n	8006f46 <_printf_i+0x146>
 8006ff0:	6923      	ldr	r3, [r4, #16]
 8006ff2:	4632      	mov	r2, r6
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	47d0      	blx	sl
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	d0ad      	beq.n	8006f5a <_printf_i+0x15a>
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	079b      	lsls	r3, r3, #30
 8007002:	d413      	bmi.n	800702c <_printf_i+0x22c>
 8007004:	68e0      	ldr	r0, [r4, #12]
 8007006:	9b03      	ldr	r3, [sp, #12]
 8007008:	4298      	cmp	r0, r3
 800700a:	bfb8      	it	lt
 800700c:	4618      	movlt	r0, r3
 800700e:	e7a6      	b.n	8006f5e <_printf_i+0x15e>
 8007010:	2301      	movs	r3, #1
 8007012:	4632      	mov	r2, r6
 8007014:	4649      	mov	r1, r9
 8007016:	4640      	mov	r0, r8
 8007018:	47d0      	blx	sl
 800701a:	3001      	adds	r0, #1
 800701c:	d09d      	beq.n	8006f5a <_printf_i+0x15a>
 800701e:	3501      	adds	r5, #1
 8007020:	68e3      	ldr	r3, [r4, #12]
 8007022:	9903      	ldr	r1, [sp, #12]
 8007024:	1a5b      	subs	r3, r3, r1
 8007026:	42ab      	cmp	r3, r5
 8007028:	dcf2      	bgt.n	8007010 <_printf_i+0x210>
 800702a:	e7eb      	b.n	8007004 <_printf_i+0x204>
 800702c:	2500      	movs	r5, #0
 800702e:	f104 0619 	add.w	r6, r4, #25
 8007032:	e7f5      	b.n	8007020 <_printf_i+0x220>
 8007034:	08007465 	.word	0x08007465
 8007038:	08007476 	.word	0x08007476

0800703c <__sflush_r>:
 800703c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007044:	0716      	lsls	r6, r2, #28
 8007046:	4605      	mov	r5, r0
 8007048:	460c      	mov	r4, r1
 800704a:	d454      	bmi.n	80070f6 <__sflush_r+0xba>
 800704c:	684b      	ldr	r3, [r1, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	dc02      	bgt.n	8007058 <__sflush_r+0x1c>
 8007052:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	dd48      	ble.n	80070ea <__sflush_r+0xae>
 8007058:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800705a:	2e00      	cmp	r6, #0
 800705c:	d045      	beq.n	80070ea <__sflush_r+0xae>
 800705e:	2300      	movs	r3, #0
 8007060:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007064:	682f      	ldr	r7, [r5, #0]
 8007066:	6a21      	ldr	r1, [r4, #32]
 8007068:	602b      	str	r3, [r5, #0]
 800706a:	d030      	beq.n	80070ce <__sflush_r+0x92>
 800706c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	0759      	lsls	r1, r3, #29
 8007072:	d505      	bpl.n	8007080 <__sflush_r+0x44>
 8007074:	6863      	ldr	r3, [r4, #4]
 8007076:	1ad2      	subs	r2, r2, r3
 8007078:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800707a:	b10b      	cbz	r3, 8007080 <__sflush_r+0x44>
 800707c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800707e:	1ad2      	subs	r2, r2, r3
 8007080:	2300      	movs	r3, #0
 8007082:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007084:	6a21      	ldr	r1, [r4, #32]
 8007086:	4628      	mov	r0, r5
 8007088:	47b0      	blx	r6
 800708a:	1c43      	adds	r3, r0, #1
 800708c:	89a3      	ldrh	r3, [r4, #12]
 800708e:	d106      	bne.n	800709e <__sflush_r+0x62>
 8007090:	6829      	ldr	r1, [r5, #0]
 8007092:	291d      	cmp	r1, #29
 8007094:	d82b      	bhi.n	80070ee <__sflush_r+0xb2>
 8007096:	4a2a      	ldr	r2, [pc, #168]	@ (8007140 <__sflush_r+0x104>)
 8007098:	40ca      	lsrs	r2, r1
 800709a:	07d6      	lsls	r6, r2, #31
 800709c:	d527      	bpl.n	80070ee <__sflush_r+0xb2>
 800709e:	2200      	movs	r2, #0
 80070a0:	6062      	str	r2, [r4, #4]
 80070a2:	04d9      	lsls	r1, r3, #19
 80070a4:	6922      	ldr	r2, [r4, #16]
 80070a6:	6022      	str	r2, [r4, #0]
 80070a8:	d504      	bpl.n	80070b4 <__sflush_r+0x78>
 80070aa:	1c42      	adds	r2, r0, #1
 80070ac:	d101      	bne.n	80070b2 <__sflush_r+0x76>
 80070ae:	682b      	ldr	r3, [r5, #0]
 80070b0:	b903      	cbnz	r3, 80070b4 <__sflush_r+0x78>
 80070b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80070b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070b6:	602f      	str	r7, [r5, #0]
 80070b8:	b1b9      	cbz	r1, 80070ea <__sflush_r+0xae>
 80070ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070be:	4299      	cmp	r1, r3
 80070c0:	d002      	beq.n	80070c8 <__sflush_r+0x8c>
 80070c2:	4628      	mov	r0, r5
 80070c4:	f7ff fa9c 	bl	8006600 <_free_r>
 80070c8:	2300      	movs	r3, #0
 80070ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80070cc:	e00d      	b.n	80070ea <__sflush_r+0xae>
 80070ce:	2301      	movs	r3, #1
 80070d0:	4628      	mov	r0, r5
 80070d2:	47b0      	blx	r6
 80070d4:	4602      	mov	r2, r0
 80070d6:	1c50      	adds	r0, r2, #1
 80070d8:	d1c9      	bne.n	800706e <__sflush_r+0x32>
 80070da:	682b      	ldr	r3, [r5, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d0c6      	beq.n	800706e <__sflush_r+0x32>
 80070e0:	2b1d      	cmp	r3, #29
 80070e2:	d001      	beq.n	80070e8 <__sflush_r+0xac>
 80070e4:	2b16      	cmp	r3, #22
 80070e6:	d11e      	bne.n	8007126 <__sflush_r+0xea>
 80070e8:	602f      	str	r7, [r5, #0]
 80070ea:	2000      	movs	r0, #0
 80070ec:	e022      	b.n	8007134 <__sflush_r+0xf8>
 80070ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070f2:	b21b      	sxth	r3, r3
 80070f4:	e01b      	b.n	800712e <__sflush_r+0xf2>
 80070f6:	690f      	ldr	r7, [r1, #16]
 80070f8:	2f00      	cmp	r7, #0
 80070fa:	d0f6      	beq.n	80070ea <__sflush_r+0xae>
 80070fc:	0793      	lsls	r3, r2, #30
 80070fe:	680e      	ldr	r6, [r1, #0]
 8007100:	bf08      	it	eq
 8007102:	694b      	ldreq	r3, [r1, #20]
 8007104:	600f      	str	r7, [r1, #0]
 8007106:	bf18      	it	ne
 8007108:	2300      	movne	r3, #0
 800710a:	eba6 0807 	sub.w	r8, r6, r7
 800710e:	608b      	str	r3, [r1, #8]
 8007110:	f1b8 0f00 	cmp.w	r8, #0
 8007114:	dde9      	ble.n	80070ea <__sflush_r+0xae>
 8007116:	6a21      	ldr	r1, [r4, #32]
 8007118:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800711a:	4643      	mov	r3, r8
 800711c:	463a      	mov	r2, r7
 800711e:	4628      	mov	r0, r5
 8007120:	47b0      	blx	r6
 8007122:	2800      	cmp	r0, #0
 8007124:	dc08      	bgt.n	8007138 <__sflush_r+0xfc>
 8007126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800712a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800712e:	81a3      	strh	r3, [r4, #12]
 8007130:	f04f 30ff 	mov.w	r0, #4294967295
 8007134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007138:	4407      	add	r7, r0
 800713a:	eba8 0800 	sub.w	r8, r8, r0
 800713e:	e7e7      	b.n	8007110 <__sflush_r+0xd4>
 8007140:	20400001 	.word	0x20400001

08007144 <_fflush_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	690b      	ldr	r3, [r1, #16]
 8007148:	4605      	mov	r5, r0
 800714a:	460c      	mov	r4, r1
 800714c:	b913      	cbnz	r3, 8007154 <_fflush_r+0x10>
 800714e:	2500      	movs	r5, #0
 8007150:	4628      	mov	r0, r5
 8007152:	bd38      	pop	{r3, r4, r5, pc}
 8007154:	b118      	cbz	r0, 800715e <_fflush_r+0x1a>
 8007156:	6a03      	ldr	r3, [r0, #32]
 8007158:	b90b      	cbnz	r3, 800715e <_fflush_r+0x1a>
 800715a:	f7ff f813 	bl	8006184 <__sinit>
 800715e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0f3      	beq.n	800714e <_fflush_r+0xa>
 8007166:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007168:	07d0      	lsls	r0, r2, #31
 800716a:	d404      	bmi.n	8007176 <_fflush_r+0x32>
 800716c:	0599      	lsls	r1, r3, #22
 800716e:	d402      	bmi.n	8007176 <_fflush_r+0x32>
 8007170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007172:	f7ff fa34 	bl	80065de <__retarget_lock_acquire_recursive>
 8007176:	4628      	mov	r0, r5
 8007178:	4621      	mov	r1, r4
 800717a:	f7ff ff5f 	bl	800703c <__sflush_r>
 800717e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007180:	07da      	lsls	r2, r3, #31
 8007182:	4605      	mov	r5, r0
 8007184:	d4e4      	bmi.n	8007150 <_fflush_r+0xc>
 8007186:	89a3      	ldrh	r3, [r4, #12]
 8007188:	059b      	lsls	r3, r3, #22
 800718a:	d4e1      	bmi.n	8007150 <_fflush_r+0xc>
 800718c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800718e:	f7ff fa27 	bl	80065e0 <__retarget_lock_release_recursive>
 8007192:	e7dd      	b.n	8007150 <_fflush_r+0xc>

08007194 <__swhatbuf_r>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	460c      	mov	r4, r1
 8007198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719c:	2900      	cmp	r1, #0
 800719e:	b096      	sub	sp, #88	@ 0x58
 80071a0:	4615      	mov	r5, r2
 80071a2:	461e      	mov	r6, r3
 80071a4:	da0d      	bge.n	80071c2 <__swhatbuf_r+0x2e>
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80071ac:	f04f 0100 	mov.w	r1, #0
 80071b0:	bf14      	ite	ne
 80071b2:	2340      	movne	r3, #64	@ 0x40
 80071b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80071b8:	2000      	movs	r0, #0
 80071ba:	6031      	str	r1, [r6, #0]
 80071bc:	602b      	str	r3, [r5, #0]
 80071be:	b016      	add	sp, #88	@ 0x58
 80071c0:	bd70      	pop	{r4, r5, r6, pc}
 80071c2:	466a      	mov	r2, sp
 80071c4:	f000 f862 	bl	800728c <_fstat_r>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	dbec      	blt.n	80071a6 <__swhatbuf_r+0x12>
 80071cc:	9901      	ldr	r1, [sp, #4]
 80071ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80071d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80071d6:	4259      	negs	r1, r3
 80071d8:	4159      	adcs	r1, r3
 80071da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071de:	e7eb      	b.n	80071b8 <__swhatbuf_r+0x24>

080071e0 <__smakebuf_r>:
 80071e0:	898b      	ldrh	r3, [r1, #12]
 80071e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071e4:	079d      	lsls	r5, r3, #30
 80071e6:	4606      	mov	r6, r0
 80071e8:	460c      	mov	r4, r1
 80071ea:	d507      	bpl.n	80071fc <__smakebuf_r+0x1c>
 80071ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	6123      	str	r3, [r4, #16]
 80071f4:	2301      	movs	r3, #1
 80071f6:	6163      	str	r3, [r4, #20]
 80071f8:	b003      	add	sp, #12
 80071fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071fc:	ab01      	add	r3, sp, #4
 80071fe:	466a      	mov	r2, sp
 8007200:	f7ff ffc8 	bl	8007194 <__swhatbuf_r>
 8007204:	9f00      	ldr	r7, [sp, #0]
 8007206:	4605      	mov	r5, r0
 8007208:	4639      	mov	r1, r7
 800720a:	4630      	mov	r0, r6
 800720c:	f7ff fa64 	bl	80066d8 <_malloc_r>
 8007210:	b948      	cbnz	r0, 8007226 <__smakebuf_r+0x46>
 8007212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007216:	059a      	lsls	r2, r3, #22
 8007218:	d4ee      	bmi.n	80071f8 <__smakebuf_r+0x18>
 800721a:	f023 0303 	bic.w	r3, r3, #3
 800721e:	f043 0302 	orr.w	r3, r3, #2
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	e7e2      	b.n	80071ec <__smakebuf_r+0xc>
 8007226:	89a3      	ldrh	r3, [r4, #12]
 8007228:	6020      	str	r0, [r4, #0]
 800722a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800722e:	81a3      	strh	r3, [r4, #12]
 8007230:	9b01      	ldr	r3, [sp, #4]
 8007232:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007236:	b15b      	cbz	r3, 8007250 <__smakebuf_r+0x70>
 8007238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800723c:	4630      	mov	r0, r6
 800723e:	f000 f837 	bl	80072b0 <_isatty_r>
 8007242:	b128      	cbz	r0, 8007250 <__smakebuf_r+0x70>
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	f023 0303 	bic.w	r3, r3, #3
 800724a:	f043 0301 	orr.w	r3, r3, #1
 800724e:	81a3      	strh	r3, [r4, #12]
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	431d      	orrs	r5, r3
 8007254:	81a5      	strh	r5, [r4, #12]
 8007256:	e7cf      	b.n	80071f8 <__smakebuf_r+0x18>

08007258 <memmove>:
 8007258:	4288      	cmp	r0, r1
 800725a:	b510      	push	{r4, lr}
 800725c:	eb01 0402 	add.w	r4, r1, r2
 8007260:	d902      	bls.n	8007268 <memmove+0x10>
 8007262:	4284      	cmp	r4, r0
 8007264:	4623      	mov	r3, r4
 8007266:	d807      	bhi.n	8007278 <memmove+0x20>
 8007268:	1e43      	subs	r3, r0, #1
 800726a:	42a1      	cmp	r1, r4
 800726c:	d008      	beq.n	8007280 <memmove+0x28>
 800726e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007276:	e7f8      	b.n	800726a <memmove+0x12>
 8007278:	4402      	add	r2, r0
 800727a:	4601      	mov	r1, r0
 800727c:	428a      	cmp	r2, r1
 800727e:	d100      	bne.n	8007282 <memmove+0x2a>
 8007280:	bd10      	pop	{r4, pc}
 8007282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800728a:	e7f7      	b.n	800727c <memmove+0x24>

0800728c <_fstat_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4d07      	ldr	r5, [pc, #28]	@ (80072ac <_fstat_r+0x20>)
 8007290:	2300      	movs	r3, #0
 8007292:	4604      	mov	r4, r0
 8007294:	4608      	mov	r0, r1
 8007296:	4611      	mov	r1, r2
 8007298:	602b      	str	r3, [r5, #0]
 800729a:	f7fa fcba 	bl	8001c12 <_fstat>
 800729e:	1c43      	adds	r3, r0, #1
 80072a0:	d102      	bne.n	80072a8 <_fstat_r+0x1c>
 80072a2:	682b      	ldr	r3, [r5, #0]
 80072a4:	b103      	cbz	r3, 80072a8 <_fstat_r+0x1c>
 80072a6:	6023      	str	r3, [r4, #0]
 80072a8:	bd38      	pop	{r3, r4, r5, pc}
 80072aa:	bf00      	nop
 80072ac:	2000047c 	.word	0x2000047c

080072b0 <_isatty_r>:
 80072b0:	b538      	push	{r3, r4, r5, lr}
 80072b2:	4d06      	ldr	r5, [pc, #24]	@ (80072cc <_isatty_r+0x1c>)
 80072b4:	2300      	movs	r3, #0
 80072b6:	4604      	mov	r4, r0
 80072b8:	4608      	mov	r0, r1
 80072ba:	602b      	str	r3, [r5, #0]
 80072bc:	f7fa fcb9 	bl	8001c32 <_isatty>
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	d102      	bne.n	80072ca <_isatty_r+0x1a>
 80072c4:	682b      	ldr	r3, [r5, #0]
 80072c6:	b103      	cbz	r3, 80072ca <_isatty_r+0x1a>
 80072c8:	6023      	str	r3, [r4, #0]
 80072ca:	bd38      	pop	{r3, r4, r5, pc}
 80072cc:	2000047c 	.word	0x2000047c

080072d0 <_sbrk_r>:
 80072d0:	b538      	push	{r3, r4, r5, lr}
 80072d2:	4d06      	ldr	r5, [pc, #24]	@ (80072ec <_sbrk_r+0x1c>)
 80072d4:	2300      	movs	r3, #0
 80072d6:	4604      	mov	r4, r0
 80072d8:	4608      	mov	r0, r1
 80072da:	602b      	str	r3, [r5, #0]
 80072dc:	f7fa fcc2 	bl	8001c64 <_sbrk>
 80072e0:	1c43      	adds	r3, r0, #1
 80072e2:	d102      	bne.n	80072ea <_sbrk_r+0x1a>
 80072e4:	682b      	ldr	r3, [r5, #0]
 80072e6:	b103      	cbz	r3, 80072ea <_sbrk_r+0x1a>
 80072e8:	6023      	str	r3, [r4, #0]
 80072ea:	bd38      	pop	{r3, r4, r5, pc}
 80072ec:	2000047c 	.word	0x2000047c

080072f0 <_realloc_r>:
 80072f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f4:	4607      	mov	r7, r0
 80072f6:	4614      	mov	r4, r2
 80072f8:	460d      	mov	r5, r1
 80072fa:	b921      	cbnz	r1, 8007306 <_realloc_r+0x16>
 80072fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007300:	4611      	mov	r1, r2
 8007302:	f7ff b9e9 	b.w	80066d8 <_malloc_r>
 8007306:	b92a      	cbnz	r2, 8007314 <_realloc_r+0x24>
 8007308:	f7ff f97a 	bl	8006600 <_free_r>
 800730c:	4625      	mov	r5, r4
 800730e:	4628      	mov	r0, r5
 8007310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007314:	f000 f81a 	bl	800734c <_malloc_usable_size_r>
 8007318:	4284      	cmp	r4, r0
 800731a:	4606      	mov	r6, r0
 800731c:	d802      	bhi.n	8007324 <_realloc_r+0x34>
 800731e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007322:	d8f4      	bhi.n	800730e <_realloc_r+0x1e>
 8007324:	4621      	mov	r1, r4
 8007326:	4638      	mov	r0, r7
 8007328:	f7ff f9d6 	bl	80066d8 <_malloc_r>
 800732c:	4680      	mov	r8, r0
 800732e:	b908      	cbnz	r0, 8007334 <_realloc_r+0x44>
 8007330:	4645      	mov	r5, r8
 8007332:	e7ec      	b.n	800730e <_realloc_r+0x1e>
 8007334:	42b4      	cmp	r4, r6
 8007336:	4622      	mov	r2, r4
 8007338:	4629      	mov	r1, r5
 800733a:	bf28      	it	cs
 800733c:	4632      	movcs	r2, r6
 800733e:	f7ff f950 	bl	80065e2 <memcpy>
 8007342:	4629      	mov	r1, r5
 8007344:	4638      	mov	r0, r7
 8007346:	f7ff f95b 	bl	8006600 <_free_r>
 800734a:	e7f1      	b.n	8007330 <_realloc_r+0x40>

0800734c <_malloc_usable_size_r>:
 800734c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007350:	1f18      	subs	r0, r3, #4
 8007352:	2b00      	cmp	r3, #0
 8007354:	bfbc      	itt	lt
 8007356:	580b      	ldrlt	r3, [r1, r0]
 8007358:	18c0      	addlt	r0, r0, r3
 800735a:	4770      	bx	lr

0800735c <_init>:
 800735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735e:	bf00      	nop
 8007360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007362:	bc08      	pop	{r3}
 8007364:	469e      	mov	lr, r3
 8007366:	4770      	bx	lr

08007368 <_fini>:
 8007368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736a:	bf00      	nop
 800736c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800736e:	bc08      	pop	{r3}
 8007370:	469e      	mov	lr, r3
 8007372:	4770      	bx	lr
