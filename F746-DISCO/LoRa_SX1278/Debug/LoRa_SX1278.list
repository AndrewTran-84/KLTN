
LoRa_SX1278.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084b0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08008680  08008680  00009680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b2c  08008b2c  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008b2c  08008b2c  00009b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b34  08008b34  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b34  08008b34  00009b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b38  08008b38  00009b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008b3c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001d4  08008d10  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08008d10  0000a430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee7b  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002394  00000000  00000000  0001907f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0001b418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091d  00000000  00000000  0001c008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027292  00000000  00000000  0001c925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103a5  00000000  00000000  00043bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecb86  00000000  00000000  00053f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140ae2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004070  00000000  00000000  00140b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00144b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008668 	.word	0x08008668

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08008668 	.word	0x08008668

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000f14:	b4b0      	push	{r4, r5, r7}
 8000f16:	b08f      	sub	sp, #60	@ 0x3c
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000f1c:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000f22:	2307      	movs	r3, #7
 8000f24:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000f28:	2307      	movs	r3, #7
 8000f2a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000f34:	23ff      	movs	r3, #255	@ 0xff
 8000f36:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000f3a:	2364      	movs	r3, #100	@ 0x64
 8000f3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000f40:	2308      	movs	r3, #8
 8000f42:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	461d      	mov	r5, r3
 8000f48:	f107 040c 	add.w	r4, r7, #12
 8000f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f54:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000f58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	373c      	adds	r7, #60	@ 0x3c
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bcb0      	pop	{r4, r5, r7}
 8000f64:	4770      	bx	lr

08000f66 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6898      	ldr	r0, [r3, #8]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	899b      	ldrh	r3, [r3, #12]
 8000f76:	2200      	movs	r2, #0
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f001 ffbb 	bl	8002ef4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f001 fcb4 	bl	80028ec <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6898      	ldr	r0, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	899b      	ldrh	r3, [r3, #12]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f001 ffb0 	bl	8002ef4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000f94:	2064      	movs	r0, #100	@ 0x64
 8000f96:	f001 fca9 	bl	80028ec <HAL_Delay>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000fac:	2101      	movs	r1, #1
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f9ff 	bl	80013b2 <LoRa_read>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d107      	bne.n	8000fd2 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	f023 0307 	bic.w	r3, r3, #7
 8000fc8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
 8000fd0:	e03e      	b.n	8001050 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d10c      	bne.n	8000ff2 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000fd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fdc:	f023 0307 	bic.w	r3, r3, #7
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	61da      	str	r2, [r3, #28]
 8000ff0:	e02e      	b.n	8001050 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d10c      	bne.n	8001012 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ffc:	f023 0307 	bic.w	r3, r3, #7
 8001000:	b25b      	sxtb	r3, r3
 8001002:	f043 0303 	orr.w	r3, r3, #3
 8001006:	b25b      	sxtb	r3, r3
 8001008:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2203      	movs	r2, #3
 800100e:	61da      	str	r2, [r3, #28]
 8001010:	e01e      	b.n	8001050 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	2b05      	cmp	r3, #5
 8001016:	d10c      	bne.n	8001032 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800101c:	f023 0307 	bic.w	r3, r3, #7
 8001020:	b25b      	sxtb	r3, r3
 8001022:	f043 0305 	orr.w	r3, r3, #5
 8001026:	b25b      	sxtb	r3, r3
 8001028:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2205      	movs	r2, #5
 800102e:	61da      	str	r2, [r3, #28]
 8001030:	e00e      	b.n	8001050 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b06      	cmp	r3, #6
 8001036:	d10b      	bne.n	8001050 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800103c:	f023 0307 	bic.w	r3, r3, #7
 8001040:	b25b      	sxtb	r3, r3
 8001042:	f043 0306 	orr.w	r3, r3, #6
 8001046:	b25b      	sxtb	r3, r3
 8001048:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2206      	movs	r2, #6
 800104e:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	461a      	mov	r2, r3
 8001054:	2101      	movs	r1, #1
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f9c5 	bl	80013e6 <LoRa_write>
	//HAL_Delay(10);
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	4613      	mov	r3, r2
 8001072:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	889b      	ldrh	r3, [r3, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	4619      	mov	r1, r3
 8001080:	f001 ff38 	bl	8002ef4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6998      	ldr	r0, [r3, #24]
 8001088:	88fa      	ldrh	r2, [r7, #6]
 800108a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	f003 f8f3 	bl	800427a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001094:	bf00      	nop
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4618      	mov	r0, r3
 800109c:	f003 fec4 	bl	8004e28 <HAL_SPI_GetState>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d1f7      	bne.n	8001096 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6998      	ldr	r0, [r3, #24]
 80010aa:	8b3a      	ldrh	r2, [r7, #24]
 80010ac:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010b0:	6839      	ldr	r1, [r7, #0]
 80010b2:	f003 fa58 	bl	8004566 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80010b6:	bf00      	nop
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4618      	mov	r0, r3
 80010be:	f003 feb3 	bl	8004e28 <HAL_SPI_GetState>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d1f7      	bne.n	80010b8 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	889b      	ldrh	r3, [r3, #4]
 80010d0:	2201      	movs	r2, #1
 80010d2:	4619      	mov	r1, r3
 80010d4:	f001 ff0e 	bl	8002ef4 <HAL_GPIO_WritePin>
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	4613      	mov	r3, r2
 80010ee:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	889b      	ldrh	r3, [r3, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	4619      	mov	r1, r3
 80010fc:	f001 fefa 	bl	8002ef4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6998      	ldr	r0, [r3, #24]
 8001104:	88fa      	ldrh	r2, [r7, #6]
 8001106:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800110a:	68b9      	ldr	r1, [r7, #8]
 800110c:	f003 f8b5 	bl	800427a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001110:	bf00      	nop
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fe86 	bl	8004e28 <HAL_SPI_GetState>
 800111c:	4603      	mov	r3, r0
 800111e:	2b01      	cmp	r3, #1
 8001120:	d1f7      	bne.n	8001112 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6998      	ldr	r0, [r3, #24]
 8001126:	8b3a      	ldrh	r2, [r7, #24]
 8001128:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800112c:	6839      	ldr	r1, [r7, #0]
 800112e:	f003 f8a4 	bl	800427a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001132:	bf00      	nop
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4618      	mov	r0, r3
 800113a:	f003 fe75 	bl	8004e28 <HAL_SPI_GetState>
 800113e:	4603      	mov	r3, r0
 8001140:	2b01      	cmp	r3, #1
 8001142:	d1f7      	bne.n	8001134 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	889b      	ldrh	r3, [r3, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	4619      	mov	r1, r3
 8001150:	f001 fed0 	bl	8002ef4 <HAL_GPIO_WritePin>
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8001168:	2126      	movs	r1, #38	@ 0x26
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f921 	bl	80013b2 <LoRa_read>
 8001170:	4603      	mov	r3, r0
 8001172:	73bb      	strb	r3, [r7, #14]

	if(value)
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 800117a:	7bbb      	ldrb	r3, [r7, #14]
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	e003      	b.n	800118c <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8001184:	7bbb      	ldrb	r3, [r7, #14]
 8001186:	f023 0308 	bic.w	r3, r3, #8
 800118a:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	461a      	mov	r2, r3
 8001190:	2126      	movs	r1, #38	@ 0x26
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f927 	bl	80013e6 <LoRa_write>
	HAL_Delay(10);
 8001198:	200a      	movs	r0, #10
 800119a:	f001 fba7 	bl	80028ec <HAL_Delay>
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b096      	sub	sp, #88	@ 0x58
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 80011b0:	4a17      	ldr	r2, [pc, #92]	@ (8001210 <LoRa_setAutoLDO+0x68>)
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	4611      	mov	r1, r2
 80011b8:	2250      	movs	r2, #80	@ 0x50
 80011ba:	4618      	mov	r0, r3
 80011bc:	f005 fc41 	bl	8006a42 <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011c6:	461a      	mov	r2, r3
 80011c8:	2301      	movs	r3, #1
 80011ca:	4093      	lsls	r3, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9c9 	bl	8000564 <__aeabi_i2d>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	3358      	adds	r3, #88	@ 0x58
 80011dc:	443b      	add	r3, r7
 80011de:	3b50      	subs	r3, #80	@ 0x50
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fb52 	bl	800088c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fcd2 	bl	8000b98 <__aeabi_d2iz>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	bfcc      	ite	gt
 80011fa:	2301      	movgt	r3, #1
 80011fc:	2300      	movle	r3, #0
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4619      	mov	r1, r3
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffaa 	bl	800115c <LoRa_setLowDaraRateOptimization>
}
 8001208:	bf00      	nop
 800120a:	3758      	adds	r7, #88	@ 0x58
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	08008680 	.word	0x08008680

08001214 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	04db      	lsls	r3, r3, #19
 8001222:	115b      	asrs	r3, r3, #5
 8001224:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	0c1b      	lsrs	r3, r3, #16
 800122a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800122c:	7afb      	ldrb	r3, [r7, #11]
 800122e:	461a      	mov	r2, r3
 8001230:	2106      	movs	r1, #6
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f8d7 	bl	80013e6 <LoRa_write>
	HAL_Delay(5);
 8001238:	2005      	movs	r0, #5
 800123a:	f001 fb57 	bl	80028ec <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	461a      	mov	r2, r3
 8001248:	2107      	movs	r1, #7
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f8cb 	bl	80013e6 <LoRa_write>
	HAL_Delay(5);
 8001250:	2005      	movs	r0, #5
 8001252:	f001 fb4b 	bl	80028ec <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800125a:	7afb      	ldrb	r3, [r7, #11]
 800125c:	461a      	mov	r2, r3
 800125e:	2108      	movs	r1, #8
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f8c0 	bl	80013e6 <LoRa_write>
	HAL_Delay(5);
 8001266:	2005      	movs	r0, #5
 8001268:	f001 fb40 	bl	80028ec <HAL_Delay>
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	2b0c      	cmp	r3, #12
 8001282:	dd01      	ble.n	8001288 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001284:	230c      	movs	r3, #12
 8001286:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b06      	cmp	r3, #6
 800128c:	dc01      	bgt.n	8001292 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800128e:	2307      	movs	r3, #7
 8001290:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001292:	211e      	movs	r1, #30
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f88c 	bl	80013b2 <LoRa_read>
 800129a:	4603      	mov	r3, r0
 800129c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800129e:	200a      	movs	r0, #10
 80012a0:	f001 fb24 	bl	80028ec <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4413      	add	r3, r2
 80012b6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80012b8:	7bbb      	ldrb	r3, [r7, #14]
 80012ba:	461a      	mov	r2, r3
 80012bc:	211e      	movs	r1, #30
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f891 	bl	80013e6 <LoRa_write>
	HAL_Delay(10);
 80012c4:	200a      	movs	r0, #10
 80012c6:	f001 fb11 	bl	80028ec <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff6c 	bl	80011a8 <LoRa_setAutoLDO>
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	461a      	mov	r2, r3
 80012e8:	2109      	movs	r1, #9
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f87b 	bl	80013e6 <LoRa_write>
	HAL_Delay(10);
 80012f0:	200a      	movs	r0, #10
 80012f2:	f001 fafb 	bl	80028ec <HAL_Delay>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	2b2c      	cmp	r3, #44	@ 0x2c
 8001314:	d801      	bhi.n	800131a <LoRa_setOCP+0x1a>
		current = 45;
 8001316:	232d      	movs	r3, #45	@ 0x2d
 8001318:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	2bf0      	cmp	r3, #240	@ 0xf0
 800131e:	d901      	bls.n	8001324 <LoRa_setOCP+0x24>
		current = 240;
 8001320:	23f0      	movs	r3, #240	@ 0xf0
 8001322:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	2b78      	cmp	r3, #120	@ 0x78
 8001328:	d809      	bhi.n	800133e <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	3b2d      	subs	r3, #45	@ 0x2d
 800132e:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <LoRa_setOCP+0x78>)
 8001330:	fb82 1203 	smull	r1, r2, r2, r3
 8001334:	1052      	asrs	r2, r2, #1
 8001336:	17db      	asrs	r3, r3, #31
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e00b      	b.n	8001356 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	2bf0      	cmp	r3, #240	@ 0xf0
 8001342:	d808      	bhi.n	8001356 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	331e      	adds	r3, #30
 8001348:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <LoRa_setOCP+0x78>)
 800134a:	fb82 1203 	smull	r1, r2, r2, r3
 800134e:	1092      	asrs	r2, r2, #2
 8001350:	17db      	asrs	r3, r3, #31
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	3320      	adds	r3, #32
 800135a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	461a      	mov	r2, r3
 8001360:	210b      	movs	r1, #11
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f83f 	bl	80013e6 <LoRa_write>
	HAL_Delay(10);
 8001368:	200a      	movs	r0, #10
 800136a:	f001 fabf 	bl	80028ec <HAL_Delay>
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	66666667 	.word	0x66666667

0800137c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001384:	211e      	movs	r1, #30
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 f813 	bl	80013b2 <LoRa_read>
 800138c:	4603      	mov	r3, r0
 800138e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	f043 0307 	orr.w	r3, r3, #7
 8001396:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001398:	7bbb      	ldrb	r3, [r7, #14]
 800139a:	461a      	mov	r2, r3
 800139c:	211e      	movs	r1, #30
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 f821 	bl	80013e6 <LoRa_write>
	HAL_Delay(10);
 80013a4:	200a      	movs	r0, #10
 80013a6:	f001 faa1 	bl	80028ec <HAL_Delay>
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af02      	add	r7, sp, #8
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80013c8:	f107 030f 	add.w	r3, r7, #15
 80013cc:	f107 010e 	add.w	r1, r7, #14
 80013d0:	2201      	movs	r2, #1
 80013d2:	9200      	str	r2, [sp, #0]
 80013d4:	2201      	movs	r2, #1
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fe44 	bl	8001064 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af02      	add	r7, sp, #8
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	460b      	mov	r3, r1
 80013f0:	70fb      	strb	r3, [r7, #3]
 80013f2:	4613      	mov	r3, r2
 80013f4:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001400:	78bb      	ldrb	r3, [r7, #2]
 8001402:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001404:	f107 030f 	add.w	r3, r7, #15
 8001408:	f107 010e 	add.w	r1, r7, #14
 800140c:	2201      	movs	r2, #1
 800140e:	9200      	str	r2, [sp, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff fe64 	bl	80010e0 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	461a      	mov	r2, r3
 800142c:	460b      	mov	r3, r1
 800142e:	72fb      	strb	r3, [r7, #11]
 8001430:	4613      	mov	r3, r2
 8001432:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001434:	7afb      	ldrb	r3, [r7, #11]
 8001436:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800143a:	b2db      	uxtb	r3, r3
 800143c:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	889b      	ldrh	r3, [r3, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	4619      	mov	r1, r3
 800144a:	f001 fd53 	bl	8002ef4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6998      	ldr	r0, [r3, #24]
 8001452:	f107 0117 	add.w	r1, r7, #23
 8001456:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800145a:	2201      	movs	r2, #1
 800145c:	f002 ff0d 	bl	800427a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001460:	bf00      	nop
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fcde 	bl	8004e28 <HAL_SPI_GetState>
 800146c:	4603      	mov	r3, r0
 800146e:	2b01      	cmp	r3, #1
 8001470:	d1f7      	bne.n	8001462 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6998      	ldr	r0, [r3, #24]
 8001476:	7abb      	ldrb	r3, [r7, #10]
 8001478:	b29a      	uxth	r2, r3
 800147a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f002 fefb 	bl	800427a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001484:	bf00      	nop
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	4618      	mov	r0, r3
 800148c:	f003 fccc 	bl	8004e28 <HAL_SPI_GetState>
 8001490:	4603      	mov	r3, r0
 8001492:	2b01      	cmp	r3, #1
 8001494:	d1f7      	bne.n	8001486 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	889b      	ldrh	r3, [r3, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	f001 fd27 	bl	8002ef4 <HAL_GPIO_WritePin>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]

	return 1;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	4611      	mov	r1, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	460b      	mov	r3, r1
 80014d4:	71fb      	strb	r3, [r7, #7]
 80014d6:	4613      	mov	r3, r2
 80014d8:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80014e0:	2101      	movs	r1, #1
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7ff fd5d 	bl	8000fa2 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80014e8:	210e      	movs	r1, #14
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f7ff ff61 	bl	80013b2 <LoRa_read>
 80014f0:	4603      	mov	r3, r0
 80014f2:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80014f4:	7cfb      	ldrb	r3, [r7, #19]
 80014f6:	461a      	mov	r2, r3
 80014f8:	210d      	movs	r1, #13
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f7ff ff73 	bl	80013e6 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	461a      	mov	r2, r3
 8001504:	2122      	movs	r1, #34	@ 0x22
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f7ff ff6d 	bl	80013e6 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	2100      	movs	r1, #0
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f7ff ff84 	bl	8001420 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001518:	2103      	movs	r1, #3
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f7ff fd41 	bl	8000fa2 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001520:	2112      	movs	r1, #18
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f7ff ff45 	bl	80013b2 <LoRa_read>
 8001528:	4603      	mov	r3, r0
 800152a:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800152c:	7cfb      	ldrb	r3, [r7, #19]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00a      	beq.n	800154c <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001536:	22ff      	movs	r2, #255	@ 0xff
 8001538:	2112      	movs	r1, #18
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7ff ff53 	bl	80013e6 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001540:	6979      	ldr	r1, [r7, #20]
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7ff fd2d 	bl	8000fa2 <LoRa_gotoMode>
			return 1;
 8001548:	2301      	movs	r3, #1
 800154a:	e00f      	b.n	800156c <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800154c:	88bb      	ldrh	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	80bb      	strh	r3, [r7, #4]
 8001552:	88bb      	ldrh	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d105      	bne.n	8001564 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001558:	6979      	ldr	r1, [r7, #20]
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f7ff fd21 	bl	8000fa2 <LoRa_gotoMode>
				return 0;
 8001560:	2300      	movs	r3, #0
 8001562:	e003      	b.n	800156c <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001564:	2001      	movs	r0, #1
 8001566:	f001 f9c1 	bl	80028ec <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 800156a:	e7d9      	b.n	8001520 <LoRa_transmit+0x5c>
	}
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800157c:	2105      	movs	r1, #5
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fd0f 	bl	8000fa2 <LoRa_gotoMode>
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b089      	sub	sp, #36	@ 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	4613      	mov	r3, r2
 8001598:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	e007      	b.n	80015b4 <LoRa_receive+0x28>
		data[i]=0;
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	4413      	add	r3, r2
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	3301      	adds	r3, #1
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbf3      	blt.n	80015a4 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80015bc:	2101      	movs	r1, #1
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f7ff fcef 	bl	8000fa2 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80015c4:	2112      	movs	r1, #18
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f7ff fef3 	bl	80013b2 <LoRa_read>
 80015cc:	4603      	mov	r3, r0
 80015ce:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80015d0:	7cfb      	ldrb	r3, [r7, #19]
 80015d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d02f      	beq.n	800163a <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80015da:	22ff      	movs	r2, #255	@ 0xff
 80015dc:	2112      	movs	r1, #18
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f7ff ff01 	bl	80013e6 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80015e4:	2113      	movs	r1, #19
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f7ff fee3 	bl	80013b2 <LoRa_read>
 80015ec:	4603      	mov	r3, r0
 80015ee:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80015f0:	2110      	movs	r1, #16
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff fedd 	bl	80013b2 <LoRa_read>
 80015f8:	4603      	mov	r3, r0
 80015fa:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80015fc:	7cfb      	ldrb	r3, [r7, #19]
 80015fe:	461a      	mov	r2, r3
 8001600:	210d      	movs	r1, #13
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f7ff feef 	bl	80013e6 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001608:	7cba      	ldrb	r2, [r7, #18]
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	4293      	cmp	r3, r2
 800160e:	bf28      	it	cs
 8001610:	4613      	movcs	r3, r2
 8001612:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	e00b      	b.n	8001632 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	18d4      	adds	r4, r2, r3
 8001620:	2100      	movs	r1, #0
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7ff fec5 	bl	80013b2 <LoRa_read>
 8001628:	4603      	mov	r3, r0
 800162a:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3301      	adds	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	7ffb      	ldrb	r3, [r7, #31]
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	429a      	cmp	r2, r3
 8001638:	dbef      	blt.n	800161a <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800163a:	2105      	movs	r1, #5
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f7ff fcb0 	bl	8000fa2 <LoRa_gotoMode>
    return min;
 8001642:	7ffb      	ldrb	r3, [r7, #31]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3724      	adds	r7, #36	@ 0x24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}

0800164c <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff2a 	bl	80014ae <LoRa_isvalid>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 8096 	beq.w	800178e <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001662:	2100      	movs	r1, #0
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff fc9c 	bl	8000fa2 <LoRa_gotoMode>
			HAL_Delay(10);
 800166a:	200a      	movs	r0, #10
 800166c:	f001 f93e 	bl	80028ec <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001670:	2101      	movs	r1, #1
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fe9d 	bl	80013b2 <LoRa_read>
 8001678:	4603      	mov	r3, r0
 800167a:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800167c:	200a      	movs	r0, #10
 800167e:	f001 f935 	bl	80028ec <HAL_Delay>
			data = read | 0x80;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001688:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 800168a:	7bbb      	ldrb	r3, [r7, #14]
 800168c:	461a      	mov	r2, r3
 800168e:	2101      	movs	r1, #1
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fea8 	bl	80013e6 <LoRa_write>
			HAL_Delay(100);
 8001696:	2064      	movs	r0, #100	@ 0x64
 8001698:	f001 f928 	bl	80028ec <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4619      	mov	r1, r3
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fdb6 	bl	8001214 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80016ae:	4619      	mov	r1, r3
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fe11 	bl	80012d8 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80016bc:	4619      	mov	r1, r3
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fe1e 	bl	8001300 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80016c4:	2223      	movs	r2, #35	@ 0x23
 80016c6:	210c      	movs	r1, #12
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fe8c 	bl	80013e6 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fe54 	bl	800137c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fdc9 	bl	8001274 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80016e2:	22ff      	movs	r2, #255	@ 0xff
 80016e4:	211f      	movs	r1, #31
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fe7d 	bl	80013e6 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	4413      	add	r3, r2
 8001706:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001708:	7bbb      	ldrb	r3, [r7, #14]
 800170a:	461a      	mov	r2, r3
 800170c:	211d      	movs	r1, #29
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fe69 	bl	80013e6 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fd47 	bl	80011a8 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	b29b      	uxth	r3, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	461a      	mov	r2, r3
 8001726:	2120      	movs	r1, #32
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fe5c 	bl	80013e6 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001732:	b2db      	uxtb	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	2121      	movs	r1, #33	@ 0x21
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff fe54 	bl	80013e6 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800173e:	2140      	movs	r1, #64	@ 0x40
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fe36 	bl	80013b2 <LoRa_read>
 8001746:	4603      	mov	r3, r0
 8001748:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001750:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001752:	7bbb      	ldrb	r3, [r7, #14]
 8001754:	461a      	mov	r2, r3
 8001756:	2140      	movs	r1, #64	@ 0x40
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fe44 	bl	80013e6 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800175e:	2101      	movs	r1, #1
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fc1e 	bl	8000fa2 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800176c:	200a      	movs	r0, #10
 800176e:	f001 f8bd 	bl	80028ec <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001772:	2142      	movs	r1, #66	@ 0x42
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff fe1c 	bl	80013b2 <LoRa_read>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	2b12      	cmp	r3, #18
 8001782:	d101      	bne.n	8001788 <LoRa_init+0x13c>
				return LORA_OK;
 8001784:	23c8      	movs	r3, #200	@ 0xc8
 8001786:	e004      	b.n	8001792 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001788:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 800178c:	e001      	b.n	8001792 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 800178e:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	uint8_t c = (uint8_t)ch;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, HAL_MAX_DELAY);
 80017aa:	f107 010f 	add.w	r1, r7, #15
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	2201      	movs	r2, #1
 80017b4:	4803      	ldr	r0, [pc, #12]	@ (80017c4 <__io_putchar+0x28>)
 80017b6:	f003 fdad 	bl	8005314 <HAL_UART_Transmit>
	return ch;
 80017ba:	687b      	ldr	r3, [r7, #4]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000254 	.word	0x20000254

080017c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b09e      	sub	sp, #120	@ 0x78
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ce:	f001 f830 	bl	8002832 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d2:	f000 f897 	bl	8001904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d6:	f000 f971 	bl	8001abc <MX_GPIO_Init>
  MX_SPI2_Init();
 80017da:	f000 f901 	bl	80019e0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80017de:	f000 f93d 	bl	8001a5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LoRa lora = newLoRa();
 80017e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fb94 	bl	8000f14 <newLoRa>
  lora.CS_port = LORA_CS_GPIO_Port;
 80017ec:	4b3b      	ldr	r3, [pc, #236]	@ (80018dc <main+0x114>)
 80017ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  lora.CS_pin = LORA_CS_Pin;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  lora.reset_port = LORA_RST_GPIO_Port;
 80017f6:	4b3a      	ldr	r3, [pc, #232]	@ (80018e0 <main+0x118>)
 80017f8:	653b      	str	r3, [r7, #80]	@ 0x50
  lora.reset_pin = LORA_RST_Pin;
 80017fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017fe:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
  lora.DIO0_port = LORA_DIO0_GPIO_Port;
 8001802:	4b36      	ldr	r3, [pc, #216]	@ (80018dc <main+0x114>)
 8001804:	65bb      	str	r3, [r7, #88]	@ 0x58
  lora.DIO0_pin = LORA_DIO0_Pin;
 8001806:	2304      	movs	r3, #4
 8001808:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  lora.hSPIx = &hspi2;
 800180c:	4b35      	ldr	r3, [pc, #212]	@ (80018e4 <main+0x11c>)
 800180e:	663b      	str	r3, [r7, #96]	@ 0x60

  printf("\r\n=== LoRa SX1278 on STM32F746G-DISCO ===\r\n");
 8001810:	4835      	ldr	r0, [pc, #212]	@ (80018e8 <main+0x120>)
 8001812:	f004 ffb7 	bl	8006784 <puts>

      /* ensure CS high */
      HAL_GPIO_WritePin(lora.CS_port, lora.CS_pin, GPIO_PIN_SET);
 8001816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001818:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 800181c:	2201      	movs	r2, #1
 800181e:	4618      	mov	r0, r3
 8001820:	f001 fb68 	bl	8002ef4 <HAL_GPIO_WritePin>
      /* reset module */
      LoRa_reset(&lora);
 8001824:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fb9c 	bl	8000f66 <LoRa_reset>
      HAL_Delay(10);
 800182e:	200a      	movs	r0, #10
 8001830:	f001 f85c 	bl	80028ec <HAL_Delay>

      uint16_t rc = LoRa_init(&lora);
 8001834:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff07 	bl	800164c <LoRa_init>
 800183e:	4603      	mov	r3, r0
 8001840:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
      if(rc == LORA_OK){
 8001844:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8001848:	2bc8      	cmp	r3, #200	@ 0xc8
 800184a:	d103      	bne.n	8001854 <main+0x8c>
          printf("LoRa init: OK\r\n");
 800184c:	4827      	ldr	r0, [pc, #156]	@ (80018ec <main+0x124>)
 800184e:	f004 ff99 	bl	8006784 <puts>
 8001852:	e005      	b.n	8001860 <main+0x98>
      } else {
          printf("LoRa init: FAILED (code %u)\r\n", rc);
 8001854:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8001858:	4619      	mov	r1, r3
 800185a:	4825      	ldr	r0, [pc, #148]	@ (80018f0 <main+0x128>)
 800185c:	f004 ff2a 	bl	80066b4 <iprintf>
          // nếu cần debug -> stop hoặc tiếp tục tùy bạn
      }

      /* thử transmit 'G' */
      uint8_t msg[] = "G";
 8001860:	2347      	movs	r3, #71	@ 0x47
 8001862:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if(LoRa_transmit(&lora, msg, 1, 2000)){
 8001866:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800186a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800186e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001872:	2201      	movs	r2, #1
 8001874:	f7ff fe26 	bl	80014c4 <LoRa_transmit>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <main+0xbe>
          printf("Transmission OK: sent 'G'\r\n");
 800187e:	481d      	ldr	r0, [pc, #116]	@ (80018f4 <main+0x12c>)
 8001880:	f004 ff80 	bl	8006784 <puts>
 8001884:	e002      	b.n	800188c <main+0xc4>
      } else {
          printf("Transmission failed.\r\n");
 8001886:	481c      	ldr	r0, [pc, #112]	@ (80018f8 <main+0x130>)
 8001888:	f004 ff7c 	bl	8006784 <puts>
      }

      /* Start receiving in background (module RX continuous) */
      LoRa_startReceiving(&lora);
 800188c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fe6f 	bl	8001574 <LoRa_startReceiving>
      printf("LoRa set to RX continuous. Waiting packets...\r\n");
 8001896:	4819      	ldr	r0, [pc, #100]	@ (80018fc <main+0x134>)
 8001898:	f004 ff74 	bl	8006784 <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint8_t buf[64];
	  uint8_t n = LoRa_receive(&lora, buf, sizeof(buf));
 800189c:	1d39      	adds	r1, r7, #4
 800189e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018a2:	2240      	movs	r2, #64	@ 0x40
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fe71 	bl	800158c <LoRa_receive>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	  if(n){
 80018b0:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00d      	beq.n	80018d4 <main+0x10c>
		  buf[n] = 0;
 80018b8:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80018bc:	3378      	adds	r3, #120	@ 0x78
 80018be:	443b      	add	r3, r7
 80018c0:	2200      	movs	r2, #0
 80018c2:	f803 2c74 	strb.w	r2, [r3, #-116]
		  printf("RX (%u): %s\r\n", n, buf);
 80018c6:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80018ca:	1d3a      	adds	r2, r7, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	480c      	ldr	r0, [pc, #48]	@ (8001900 <main+0x138>)
 80018d0:	f004 fef0 	bl	80066b4 <iprintf>
	  }
	  HAL_Delay(200);
 80018d4:	20c8      	movs	r0, #200	@ 0xc8
 80018d6:	f001 f809 	bl	80028ec <HAL_Delay>
  {
 80018da:	e7df      	b.n	800189c <main+0xd4>
 80018dc:	40022000 	.word	0x40022000
 80018e0:	40020000 	.word	0x40020000
 80018e4:	200001f0 	.word	0x200001f0
 80018e8:	080086d0 	.word	0x080086d0
 80018ec:	080086fc 	.word	0x080086fc
 80018f0:	0800870c 	.word	0x0800870c
 80018f4:	0800872c 	.word	0x0800872c
 80018f8:	08008748 	.word	0x08008748
 80018fc:	08008760 	.word	0x08008760
 8001900:	08008790 	.word	0x08008790

08001904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b094      	sub	sp, #80	@ 0x50
 8001908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800190a:	f107 0320 	add.w	r3, r7, #32
 800190e:	2230      	movs	r2, #48	@ 0x30
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f005 f816 	bl	8006944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001928:	f001 fb22 	bl	8002f70 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800192c:	4b2a      	ldr	r3, [pc, #168]	@ (80019d8 <SystemClock_Config+0xd4>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	4a29      	ldr	r2, [pc, #164]	@ (80019d8 <SystemClock_Config+0xd4>)
 8001932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001936:	6413      	str	r3, [r2, #64]	@ 0x40
 8001938:	4b27      	ldr	r3, [pc, #156]	@ (80019d8 <SystemClock_Config+0xd4>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001944:	4b25      	ldr	r3, [pc, #148]	@ (80019dc <SystemClock_Config+0xd8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a24      	ldr	r2, [pc, #144]	@ (80019dc <SystemClock_Config+0xd8>)
 800194a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <SystemClock_Config+0xd8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800195c:	2302      	movs	r3, #2
 800195e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001960:	2301      	movs	r3, #1
 8001962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001964:	2310      	movs	r3, #16
 8001966:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001968:	2302      	movs	r3, #2
 800196a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800196c:	2300      	movs	r3, #0
 800196e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001970:	2308      	movs	r3, #8
 8001972:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001974:	23d8      	movs	r3, #216	@ 0xd8
 8001976:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001978:	2302      	movs	r3, #2
 800197a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800197c:	2302      	movs	r3, #2
 800197e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001980:	f107 0320 	add.w	r3, r7, #32
 8001984:	4618      	mov	r0, r3
 8001986:	f001 fb53 	bl	8003030 <HAL_RCC_OscConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001990:	f000 fcf8 	bl	8002384 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001994:	f001 fafc 	bl	8002f90 <HAL_PWREx_EnableOverDrive>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800199e:	f000 fcf1 	bl	8002384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a2:	230f      	movs	r3, #15
 80019a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a6:	2302      	movs	r3, #2
 80019a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	2107      	movs	r1, #7
 80019c0:	4618      	mov	r0, r3
 80019c2:	f001 fdd9 	bl	8003578 <HAL_RCC_ClockConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80019cc:	f000 fcda 	bl	8002384 <Error_Handler>
  }
}
 80019d0:	bf00      	nop
 80019d2:	3750      	adds	r7, #80	@ 0x50
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40007000 	.word	0x40007000

080019e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <MX_SPI2_Init+0x74>)
 80019e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a58 <MX_SPI2_Init+0x78>)
 80019e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <MX_SPI2_Init+0x74>)
 80019ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019f2:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <MX_SPI2_Init+0x74>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019f8:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <MX_SPI2_Init+0x74>)
 80019fa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80019fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a00:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <MX_SPI2_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a06:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <MX_SPI2_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <MX_SPI2_Init+0x74>)
 8001a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a12:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <MX_SPI2_Init+0x74>)
 8001a16:	2210      	movs	r2, #16
 8001a18:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <MX_SPI2_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <MX_SPI2_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <MX_SPI2_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <MX_SPI2_Init+0x74>)
 8001a2e:	2207      	movs	r2, #7
 8001a30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <MX_SPI2_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <MX_SPI2_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <MX_SPI2_Init+0x74>)
 8001a40:	f002 fb70 	bl	8004124 <HAL_SPI_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a4a:	f000 fc9b 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200001f0 	.word	0x200001f0
 8001a58:	40003800 	.word	0x40003800

08001a5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a60:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a62:	4a15      	ldr	r2, [pc, #84]	@ (8001ab8 <MX_USART1_UART_Init+0x5c>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a66:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001aa0:	f003 fbea 	bl	8005278 <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001aaa:	f000 fc6b 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000254 	.word	0x20000254
 8001ab8:	40011000 	.word	0x40011000

08001abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b090      	sub	sp, #64	@ 0x40
 8001ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ad2:	4baf      	ldr	r3, [pc, #700]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	4aae      	ldr	r2, [pc, #696]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001ad8:	f043 0310 	orr.w	r3, r3, #16
 8001adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ade:	4bac      	ldr	r3, [pc, #688]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aea:	4ba9      	ldr	r3, [pc, #676]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	4aa8      	ldr	r2, [pc, #672]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001af0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af6:	4ba6      	ldr	r3, [pc, #664]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b02:	4ba3      	ldr	r3, [pc, #652]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4aa2      	ldr	r2, [pc, #648]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4ba0      	ldr	r3, [pc, #640]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	623b      	str	r3, [r7, #32]
 8001b18:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1a:	4b9d      	ldr	r3, [pc, #628]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a9c      	ldr	r2, [pc, #624]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b9a      	ldr	r3, [pc, #616]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	4b97      	ldr	r3, [pc, #604]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	4a96      	ldr	r2, [pc, #600]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3e:	4b94      	ldr	r3, [pc, #592]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	4b91      	ldr	r3, [pc, #580]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a90      	ldr	r2, [pc, #576]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b8e      	ldr	r3, [pc, #568]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b62:	4b8b      	ldr	r3, [pc, #556]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	4a8a      	ldr	r2, [pc, #552]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6e:	4b88      	ldr	r3, [pc, #544]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b7a:	4b85      	ldr	r3, [pc, #532]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a84      	ldr	r2, [pc, #528]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b82      	ldr	r3, [pc, #520]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001b92:	4b7f      	ldr	r3, [pc, #508]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	4a7e      	ldr	r2, [pc, #504]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001b98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001baa:	4b79      	ldr	r3, [pc, #484]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	4a78      	ldr	r2, [pc, #480]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001bb0:	f043 0320 	orr.w	r3, r3, #32
 8001bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb6:	4b76      	ldr	r3, [pc, #472]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	f003 0320 	and.w	r3, r3, #32
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bc2:	4b73      	ldr	r3, [pc, #460]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a72      	ldr	r2, [pc, #456]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b70      	ldr	r3, [pc, #448]	@ (8001d90 <MX_GPIO_Init+0x2d4>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001be0:	486c      	ldr	r0, [pc, #432]	@ (8001d94 <MX_GPIO_Init+0x2d8>)
 8001be2:	f001 f987 	bl	8002ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001be6:	2201      	movs	r2, #1
 8001be8:	2120      	movs	r1, #32
 8001bea:	486b      	ldr	r0, [pc, #428]	@ (8001d98 <MX_GPIO_Init+0x2dc>)
 8001bec:	f001 f982 	bl	8002ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f241 0108 	movw	r1, #4104	@ 0x1008
 8001bf6:	4869      	ldr	r0, [pc, #420]	@ (8001d9c <MX_GPIO_Init+0x2e0>)
 8001bf8:	f001 f97c 	bl	8002ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2108      	movs	r1, #8
 8001c00:	4867      	ldr	r0, [pc, #412]	@ (8001da0 <MX_GPIO_Init+0x2e4>)
 8001c02:	f001 f977 	bl	8002ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c0c:	4865      	ldr	r0, [pc, #404]	@ (8001da4 <MX_GPIO_Init+0x2e8>)
 8001c0e:	f001 f971 	bl	8002ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	2101      	movs	r1, #1
 8001c16:	4861      	ldr	r0, [pc, #388]	@ (8001d9c <MX_GPIO_Init+0x2e0>)
 8001c18:	f001 f96c 	bl	8002ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	21c8      	movs	r1, #200	@ 0xc8
 8001c20:	4861      	ldr	r0, [pc, #388]	@ (8001da8 <MX_GPIO_Init+0x2ec>)
 8001c22:	f001 f967 	bl	8002ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001c26:	2310      	movs	r3, #16
 8001c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c36:	230e      	movs	r3, #14
 8001c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001c3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c3e:	4619      	mov	r1, r3
 8001c40:	485a      	ldr	r0, [pc, #360]	@ (8001dac <MX_GPIO_Init+0x2f0>)
 8001c42:	f000 ffab 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001c46:	2308      	movs	r3, #8
 8001c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c56:	4619      	mov	r1, r3
 8001c58:	4854      	ldr	r0, [pc, #336]	@ (8001dac <MX_GPIO_Init+0x2f0>)
 8001c5a:	f000 ff9f 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001c5e:	2304      	movs	r3, #4
 8001c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c6e:	2309      	movs	r3, #9
 8001c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001c72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c76:	4619      	mov	r1, r3
 8001c78:	484c      	ldr	r0, [pc, #304]	@ (8001dac <MX_GPIO_Init+0x2f0>)
 8001c7a:	f000 ff8f 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001c7e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c90:	230b      	movs	r3, #11
 8001c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4843      	ldr	r0, [pc, #268]	@ (8001da8 <MX_GPIO_Init+0x2ec>)
 8001c9c:	f000 ff7e 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001ca0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cb2:	230c      	movs	r3, #12
 8001cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cba:	4619      	mov	r1, r3
 8001cbc:	483b      	ldr	r0, [pc, #236]	@ (8001dac <MX_GPIO_Init+0x2f0>)
 8001cbe:	f000 ff6d 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001cc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc8:	2312      	movs	r3, #18
 8001cca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4834      	ldr	r0, [pc, #208]	@ (8001db0 <MX_GPIO_Init+0x2f4>)
 8001ce0:	f000 ff5c 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001ce4:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8001ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cf6:	230a      	movs	r3, #10
 8001cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cfe:	4619      	mov	r1, r3
 8001d00:	482b      	ldr	r0, [pc, #172]	@ (8001db0 <MX_GPIO_Init+0x2f4>)
 8001d02:	f000 ff4b 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001d06:	2310      	movs	r3, #16
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2300      	movs	r3, #0
 8001d14:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d16:	2302      	movs	r3, #2
 8001d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001d1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4823      	ldr	r0, [pc, #140]	@ (8001db0 <MX_GPIO_Init+0x2f4>)
 8001d22:	f000 ff3b 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001d26:	2380      	movs	r3, #128	@ 0x80
 8001d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001d36:	2308      	movs	r3, #8
 8001d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4815      	ldr	r0, [pc, #84]	@ (8001d98 <MX_GPIO_Init+0x2dc>)
 8001d42:	f000 ff2b 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001d46:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d58:	230c      	movs	r3, #12
 8001d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d60:	4619      	mov	r1, r3
 8001d62:	4814      	ldr	r0, [pc, #80]	@ (8001db4 <MX_GPIO_Init+0x2f8>)
 8001d64:	f000 ff1a 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8001d68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4804      	ldr	r0, [pc, #16]	@ (8001d94 <MX_GPIO_Init+0x2d8>)
 8001d82:	f000 ff0b 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001d86:	2360      	movs	r3, #96	@ 0x60
 8001d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e014      	b.n	8001db8 <MX_GPIO_Init+0x2fc>
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40022000 	.word	0x40022000
 8001da0:	40022800 	.word	0x40022800
 8001da4:	40021c00 	.word	0x40021c00
 8001da8:	40021800 	.word	0x40021800
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40020400 	.word	0x40020400
 8001db4:	40020800 	.word	0x40020800
 8001db8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001dc2:	230d      	movs	r3, #13
 8001dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dca:	4619      	mov	r1, r3
 8001dcc:	48bc      	ldr	r0, [pc, #752]	@ (80020c0 <MX_GPIO_Init+0x604>)
 8001dce:	f000 fee5 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001dd2:	2340      	movs	r3, #64	@ 0x40
 8001dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001de2:	230a      	movs	r3, #10
 8001de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001de6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dea:	4619      	mov	r1, r3
 8001dec:	48b5      	ldr	r0, [pc, #724]	@ (80020c4 <MX_GPIO_Init+0x608>)
 8001dee:	f000 fed5 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001df2:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e04:	230c      	movs	r3, #12
 8001e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	48ae      	ldr	r0, [pc, #696]	@ (80020c8 <MX_GPIO_Init+0x60c>)
 8001e10:	f000 fec4 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001e14:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e26:	230e      	movs	r3, #14
 8001e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001e2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e2e:	4619      	mov	r1, r3
 8001e30:	48a6      	ldr	r0, [pc, #664]	@ (80020cc <MX_GPIO_Init+0x610>)
 8001e32:	f000 feb3 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e48:	4619      	mov	r1, r3
 8001e4a:	48a0      	ldr	r0, [pc, #640]	@ (80020cc <MX_GPIO_Init+0x610>)
 8001e4c:	f000 fea6 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001e50:	2340      	movs	r3, #64	@ 0x40
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e54:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001e58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e62:	4619      	mov	r1, r3
 8001e64:	489a      	ldr	r0, [pc, #616]	@ (80020d0 <MX_GPIO_Init+0x614>)
 8001e66:	f000 fe99 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001e6a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e7c:	230c      	movs	r3, #12
 8001e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e84:	4619      	mov	r1, r3
 8001e86:	4892      	ldr	r0, [pc, #584]	@ (80020d0 <MX_GPIO_Init+0x614>)
 8001e88:	f000 fe88 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001e8c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e9e:	230a      	movs	r3, #10
 8001ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	488a      	ldr	r0, [pc, #552]	@ (80020d4 <MX_GPIO_Init+0x618>)
 8001eaa:	f000 fe77 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001eae:	23f0      	movs	r3, #240	@ 0xf0
 8001eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ebe:	230a      	movs	r3, #10
 8001ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ec2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4883      	ldr	r0, [pc, #524]	@ (80020d8 <MX_GPIO_Init+0x61c>)
 8001eca:	f000 fe67 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001ece:	23f7      	movs	r3, #247	@ 0xf7
 8001ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ede:	230e      	movs	r3, #14
 8001ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001ee2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	487c      	ldr	r0, [pc, #496]	@ (80020dc <MX_GPIO_Init+0x620>)
 8001eea:	f000 fe57 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001eee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f00:	2309      	movs	r3, #9
 8001f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001f04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f08:	4619      	mov	r1, r3
 8001f0a:	486f      	ldr	r0, [pc, #444]	@ (80020c8 <MX_GPIO_Init+0x60c>)
 8001f0c:	f000 fe46 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001f10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001f22:	230a      	movs	r3, #10
 8001f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4866      	ldr	r0, [pc, #408]	@ (80020c8 <MX_GPIO_Init+0x60c>)
 8001f2e:	f000 fe35 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001f32:	2320      	movs	r3, #32
 8001f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f46:	4619      	mov	r1, r3
 8001f48:	4861      	ldr	r0, [pc, #388]	@ (80020d0 <MX_GPIO_Init+0x614>)
 8001f4a:	f000 fe27 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001f4e:	2308      	movs	r3, #8
 8001f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f5e:	230d      	movs	r3, #13
 8001f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001f62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f66:	4619      	mov	r1, r3
 8001f68:	4859      	ldr	r0, [pc, #356]	@ (80020d0 <MX_GPIO_Init+0x614>)
 8001f6a:	f000 fe17 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin LCD_DISP_Pin CS_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|LCD_DISP_Pin|CS_Pin;
 8001f6e:	f241 0309 	movw	r3, #4105	@ 0x1009
 8001f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f74:	2301      	movs	r3, #1
 8001f76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f84:	4619      	mov	r1, r3
 8001f86:	4854      	ldr	r0, [pc, #336]	@ (80020d8 <MX_GPIO_Init+0x61c>)
 8001f88:	f000 fe08 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f90:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001f9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	484d      	ldr	r0, [pc, #308]	@ (80020d8 <MX_GPIO_Init+0x61c>)
 8001fa2:	f000 fdfb 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001fa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fac:	2300      	movs	r3, #0
 8001fae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001fb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4849      	ldr	r0, [pc, #292]	@ (80020e0 <MX_GPIO_Init+0x624>)
 8001fbc:	f000 fdee 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001fc0:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fd2:	230c      	movs	r3, #12
 8001fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4841      	ldr	r0, [pc, #260]	@ (80020e4 <MX_GPIO_Init+0x628>)
 8001fde:	f000 fddd 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001fe2:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ff4:	230e      	movs	r3, #14
 8001ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ff8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4836      	ldr	r0, [pc, #216]	@ (80020d8 <MX_GPIO_Init+0x61c>)
 8002000:	f000 fdcc 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002004:	2308      	movs	r3, #8
 8002006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002008:	2301      	movs	r3, #1
 800200a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002014:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002018:	4619      	mov	r1, r3
 800201a:	4830      	ldr	r0, [pc, #192]	@ (80020dc <MX_GPIO_Init+0x620>)
 800201c:	f000 fdbe 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002020:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002032:	230d      	movs	r3, #13
 8002034:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002036:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800203a:	4619      	mov	r1, r3
 800203c:	4822      	ldr	r0, [pc, #136]	@ (80020c8 <MX_GPIO_Init+0x60c>)
 800203e:	f000 fdad 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002042:	2310      	movs	r3, #16
 8002044:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002046:	2300      	movs	r3, #0
 8002048:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800204e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002052:	4619      	mov	r1, r3
 8002054:	481e      	ldr	r0, [pc, #120]	@ (80020d0 <MX_GPIO_Init+0x614>)
 8002056:	f000 fda1 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800205a:	2304      	movs	r3, #4
 800205c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800206a:	230c      	movs	r3, #12
 800206c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002072:	4619      	mov	r1, r3
 8002074:	4816      	ldr	r0, [pc, #88]	@ (80020d0 <MX_GPIO_Init+0x614>)
 8002076:	f000 fd91 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800207a:	f248 0304 	movw	r3, #32772	@ 0x8004
 800207e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002080:	2300      	movs	r3, #0
 8002082:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002088:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800208c:	4619      	mov	r1, r3
 800208e:	4816      	ldr	r0, [pc, #88]	@ (80020e8 <MX_GPIO_Init+0x62c>)
 8002090:	f000 fd84 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002094:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209a:	2301      	movs	r3, #1
 800209c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80020a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020aa:	4619      	mov	r1, r3
 80020ac:	480e      	ldr	r0, [pc, #56]	@ (80020e8 <MX_GPIO_Init+0x62c>)
 80020ae:	f000 fd75 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80020b2:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80020b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	e015      	b.n	80020ec <MX_GPIO_Init+0x630>
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40020400 	.word	0x40020400
 80020c8:	40021800 	.word	0x40021800
 80020cc:	40022400 	.word	0x40022400
 80020d0:	40020c00 	.word	0x40020c00
 80020d4:	40020000 	.word	0x40020000
 80020d8:	40022000 	.word	0x40022000
 80020dc:	40022800 	.word	0x40022800
 80020e0:	40020800 	.word	0x40020800
 80020e4:	40021400 	.word	0x40021400
 80020e8:	40021c00 	.word	0x40021c00
 80020ec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80020f2:	230d      	movs	r3, #13
 80020f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80020f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020fa:	4619      	mov	r1, r3
 80020fc:	4899      	ldr	r0, [pc, #612]	@ (8002364 <MX_GPIO_Init+0x8a8>)
 80020fe:	f000 fd4d 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002102:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002114:	2301      	movs	r3, #1
 8002116:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002118:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800211c:	4619      	mov	r1, r3
 800211e:	4892      	ldr	r0, [pc, #584]	@ (8002368 <MX_GPIO_Init+0x8ac>)
 8002120:	f000 fd3c 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002124:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800212a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800212e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002134:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002138:	4619      	mov	r1, r3
 800213a:	488c      	ldr	r0, [pc, #560]	@ (800236c <MX_GPIO_Init+0x8b0>)
 800213c:	f000 fd2e 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002140:	23c0      	movs	r3, #192	@ 0xc0
 8002142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214c:	2303      	movs	r3, #3
 800214e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002150:	2308      	movs	r3, #8
 8002152:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002154:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002158:	4619      	mov	r1, r3
 800215a:	4885      	ldr	r0, [pc, #532]	@ (8002370 <MX_GPIO_Init+0x8b4>)
 800215c:	f000 fd1e 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002160:	2310      	movs	r3, #16
 8002162:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002170:	230a      	movs	r3, #10
 8002172:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002174:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002178:	4619      	mov	r1, r3
 800217a:	487a      	ldr	r0, [pc, #488]	@ (8002364 <MX_GPIO_Init+0x8a8>)
 800217c:	f000 fd0e 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002180:	2328      	movs	r3, #40	@ 0x28
 8002182:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218c:	2303      	movs	r3, #3
 800218e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002190:	230c      	movs	r3, #12
 8002192:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002194:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002198:	4619      	mov	r1, r3
 800219a:	4872      	ldr	r0, [pc, #456]	@ (8002364 <MX_GPIO_Init+0x8a8>)
 800219c:	f000 fcfe 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80021a0:	23c8      	movs	r3, #200	@ 0xc8
 80021a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a4:	2301      	movs	r3, #1
 80021a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021b4:	4619      	mov	r1, r3
 80021b6:	486f      	ldr	r0, [pc, #444]	@ (8002374 <MX_GPIO_Init+0x8b8>)
 80021b8:	f000 fcf0 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80021bc:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80021c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021c2:	2303      	movs	r3, #3
 80021c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021ce:	4619      	mov	r1, r3
 80021d0:	4869      	ldr	r0, [pc, #420]	@ (8002378 <MX_GPIO_Init+0x8bc>)
 80021d2:	f000 fce3 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80021d6:	2308      	movs	r3, #8
 80021d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021e6:	230c      	movs	r3, #12
 80021e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80021ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021ee:	4619      	mov	r1, r3
 80021f0:	485f      	ldr	r0, [pc, #380]	@ (8002370 <MX_GPIO_Init+0x8b4>)
 80021f2:	f000 fcd3 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80021f6:	2305      	movs	r3, #5
 80021f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002202:	2303      	movs	r3, #3
 8002204:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002206:	230a      	movs	r3, #10
 8002208:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800220e:	4619      	mov	r1, r3
 8002210:	4857      	ldr	r0, [pc, #348]	@ (8002370 <MX_GPIO_Init+0x8b4>)
 8002212:	f000 fcc3 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002216:	2332      	movs	r3, #50	@ 0x32
 8002218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002226:	230b      	movs	r3, #11
 8002228:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800222e:	4619      	mov	r1, r3
 8002230:	484f      	ldr	r0, [pc, #316]	@ (8002370 <MX_GPIO_Init+0x8b4>)
 8002232:	f000 fcb3 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002236:	2304      	movs	r3, #4
 8002238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002246:	2309      	movs	r3, #9
 8002248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800224e:	4619      	mov	r1, r3
 8002250:	484a      	ldr	r0, [pc, #296]	@ (800237c <MX_GPIO_Init+0x8c0>)
 8002252:	f000 fca3 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002256:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800225a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002264:	2303      	movs	r3, #3
 8002266:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002268:	2309      	movs	r3, #9
 800226a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800226c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002270:	4619      	mov	r1, r3
 8002272:	4843      	ldr	r0, [pc, #268]	@ (8002380 <MX_GPIO_Init+0x8c4>)
 8002274:	f000 fc92 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002278:	2304      	movs	r3, #4
 800227a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227c:	2300      	movs	r3, #0
 800227e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002284:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002288:	4619      	mov	r1, r3
 800228a:	483a      	ldr	r0, [pc, #232]	@ (8002374 <MX_GPIO_Init+0x8b8>)
 800228c:	f000 fc86 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002290:	2386      	movs	r3, #134	@ 0x86
 8002292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229c:	2303      	movs	r3, #3
 800229e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022a0:	230b      	movs	r3, #11
 80022a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022a8:	4619      	mov	r1, r3
 80022aa:	482f      	ldr	r0, [pc, #188]	@ (8002368 <MX_GPIO_Init+0x8ac>)
 80022ac:	f000 fc76 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80022b0:	2301      	movs	r3, #1
 80022b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022b4:	2303      	movs	r3, #3
 80022b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022c0:	4619      	mov	r1, r3
 80022c2:	4829      	ldr	r0, [pc, #164]	@ (8002368 <MX_GPIO_Init+0x8ac>)
 80022c4:	f000 fc6a 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80022c8:	2350      	movs	r3, #80	@ 0x50
 80022ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80022d8:	230d      	movs	r3, #13
 80022da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022e0:	4619      	mov	r1, r3
 80022e2:	4821      	ldr	r0, [pc, #132]	@ (8002368 <MX_GPIO_Init+0x8ac>)
 80022e4:	f000 fc5a 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80022e8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80022ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ee:	2312      	movs	r3, #18
 80022f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f6:	2303      	movs	r3, #3
 80022f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022fa:	2304      	movs	r3, #4
 80022fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002302:	4619      	mov	r1, r3
 8002304:	4817      	ldr	r0, [pc, #92]	@ (8002364 <MX_GPIO_Init+0x8a8>)
 8002306:	f000 fc49 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800230a:	2328      	movs	r3, #40	@ 0x28
 800230c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002316:	2303      	movs	r3, #3
 8002318:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800231a:	230a      	movs	r3, #10
 800231c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002322:	4619      	mov	r1, r3
 8002324:	4810      	ldr	r0, [pc, #64]	@ (8002368 <MX_GPIO_Init+0x8ac>)
 8002326:	f000 fc39 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800232a:	2340      	movs	r3, #64	@ 0x40
 800232c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800233a:	2309      	movs	r3, #9
 800233c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800233e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002342:	4619      	mov	r1, r3
 8002344:	4807      	ldr	r0, [pc, #28]	@ (8002364 <MX_GPIO_Init+0x8a8>)
 8002346:	f000 fc29 	bl	8002b9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	2008      	movs	r0, #8
 8002350:	f000 fbcb 	bl	8002aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002354:	2008      	movs	r0, #8
 8002356:	f000 fbe4 	bl	8002b22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800235a:	bf00      	nop
 800235c:	3740      	adds	r7, #64	@ 0x40
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40021c00 	.word	0x40021c00
 8002368:	40020000 	.word	0x40020000
 800236c:	40022000 	.word	0x40022000
 8002370:	40020800 	.word	0x40020800
 8002374:	40021800 	.word	0x40021800
 8002378:	40021400 	.word	0x40021400
 800237c:	40020400 	.word	0x40020400
 8002380:	40020c00 	.word	0x40020c00

08002384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002388:	b672      	cpsid	i
}
 800238a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <Error_Handler+0x8>

08002390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4b0f      	ldr	r3, [pc, #60]	@ (80023d4 <HAL_MspInit+0x44>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	4a0e      	ldr	r2, [pc, #56]	@ (80023d4 <HAL_MspInit+0x44>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023a2:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <HAL_MspInit+0x44>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <HAL_MspInit+0x44>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	4a08      	ldr	r2, [pc, #32]	@ (80023d4 <HAL_MspInit+0x44>)
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ba:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_MspInit+0x44>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800

080023d8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	@ 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a29      	ldr	r2, [pc, #164]	@ (800249c <HAL_SPI_MspInit+0xc4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d14c      	bne.n	8002494 <HAL_SPI_MspInit+0xbc>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023fa:	4b29      	ldr	r3, [pc, #164]	@ (80024a0 <HAL_SPI_MspInit+0xc8>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	4a28      	ldr	r2, [pc, #160]	@ (80024a0 <HAL_SPI_MspInit+0xc8>)
 8002400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002404:	6413      	str	r3, [r2, #64]	@ 0x40
 8002406:	4b26      	ldr	r3, [pc, #152]	@ (80024a0 <HAL_SPI_MspInit+0xc8>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002412:	4b23      	ldr	r3, [pc, #140]	@ (80024a0 <HAL_SPI_MspInit+0xc8>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	4a22      	ldr	r2, [pc, #136]	@ (80024a0 <HAL_SPI_MspInit+0xc8>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800241c:	6313      	str	r3, [r2, #48]	@ 0x30
 800241e:	4b20      	ldr	r3, [pc, #128]	@ (80024a0 <HAL_SPI_MspInit+0xc8>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242a:	4b1d      	ldr	r3, [pc, #116]	@ (80024a0 <HAL_SPI_MspInit+0xc8>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	4a1c      	ldr	r2, [pc, #112]	@ (80024a0 <HAL_SPI_MspInit+0xc8>)
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	6313      	str	r3, [r2, #48]	@ 0x30
 8002436:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <HAL_SPI_MspInit+0xc8>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002442:	2302      	movs	r3, #2
 8002444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002452:	2305      	movs	r3, #5
 8002454:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	4811      	ldr	r0, [pc, #68]	@ (80024a4 <HAL_SPI_MspInit+0xcc>)
 800245e:	f000 fb9d 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002462:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2300      	movs	r3, #0
 8002472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002474:	2305      	movs	r3, #5
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	4619      	mov	r1, r3
 800247e:	480a      	ldr	r0, [pc, #40]	@ (80024a8 <HAL_SPI_MspInit+0xd0>)
 8002480:	f000 fb8c 	bl	8002b9c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002484:	2200      	movs	r2, #0
 8002486:	2100      	movs	r1, #0
 8002488:	2024      	movs	r0, #36	@ 0x24
 800248a:	f000 fb2e 	bl	8002aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800248e:	2024      	movs	r0, #36	@ 0x24
 8002490:	f000 fb47 	bl	8002b22 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002494:	bf00      	nop
 8002496:	3728      	adds	r7, #40	@ 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40003800 	.word	0x40003800
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40022000 	.word	0x40022000
 80024a8:	40020400 	.word	0x40020400

080024ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b0ac      	sub	sp, #176	@ 0xb0
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c4:	f107 0318 	add.w	r3, r7, #24
 80024c8:	2284      	movs	r2, #132	@ 0x84
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f004 fa39 	bl	8006944 <memset>
  if(huart->Instance==USART1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a32      	ldr	r2, [pc, #200]	@ (80025a0 <HAL_UART_MspInit+0xf4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d15c      	bne.n	8002596 <HAL_UART_MspInit+0xea>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024dc:	2340      	movs	r3, #64	@ 0x40
 80024de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024e0:	2300      	movs	r3, #0
 80024e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024e4:	f107 0318 	add.w	r3, r7, #24
 80024e8:	4618      	mov	r0, r3
 80024ea:	f001 fa2b 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024f4:	f7ff ff46 	bl	8002384 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f8:	4b2a      	ldr	r3, [pc, #168]	@ (80025a4 <HAL_UART_MspInit+0xf8>)
 80024fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fc:	4a29      	ldr	r2, [pc, #164]	@ (80025a4 <HAL_UART_MspInit+0xf8>)
 80024fe:	f043 0310 	orr.w	r3, r3, #16
 8002502:	6453      	str	r3, [r2, #68]	@ 0x44
 8002504:	4b27      	ldr	r3, [pc, #156]	@ (80025a4 <HAL_UART_MspInit+0xf8>)
 8002506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002510:	4b24      	ldr	r3, [pc, #144]	@ (80025a4 <HAL_UART_MspInit+0xf8>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	4a23      	ldr	r2, [pc, #140]	@ (80025a4 <HAL_UART_MspInit+0xf8>)
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	6313      	str	r3, [r2, #48]	@ 0x30
 800251c:	4b21      	ldr	r3, [pc, #132]	@ (80025a4 <HAL_UART_MspInit+0xf8>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002528:	4b1e      	ldr	r3, [pc, #120]	@ (80025a4 <HAL_UART_MspInit+0xf8>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252c:	4a1d      	ldr	r2, [pc, #116]	@ (80025a4 <HAL_UART_MspInit+0xf8>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6313      	str	r3, [r2, #48]	@ 0x30
 8002534:	4b1b      	ldr	r3, [pc, #108]	@ (80025a4 <HAL_UART_MspInit+0xf8>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002540:	2380      	movs	r3, #128	@ 0x80
 8002542:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002546:	2302      	movs	r3, #2
 8002548:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002558:	2307      	movs	r3, #7
 800255a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800255e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002562:	4619      	mov	r1, r3
 8002564:	4810      	ldr	r0, [pc, #64]	@ (80025a8 <HAL_UART_MspInit+0xfc>)
 8002566:	f000 fb19 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800256a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800256e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002584:	2307      	movs	r3, #7
 8002586:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800258a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800258e:	4619      	mov	r1, r3
 8002590:	4806      	ldr	r0, [pc, #24]	@ (80025ac <HAL_UART_MspInit+0x100>)
 8002592:	f000 fb03 	bl	8002b9c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002596:	bf00      	nop
 8002598:	37b0      	adds	r7, #176	@ 0xb0
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40011000 	.word	0x40011000
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020400 	.word	0x40020400
 80025ac:	40020000 	.word	0x40020000

080025b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <NMI_Handler+0x4>

080025b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <HardFault_Handler+0x4>

080025c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <MemManage_Handler+0x4>

080025c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025cc:	bf00      	nop
 80025ce:	e7fd      	b.n	80025cc <BusFault_Handler+0x4>

080025d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <UsageFault_Handler+0x4>

080025d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002606:	f000 f951 	bl	80028ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}

0800260e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8002612:	2004      	movs	r0, #4
 8002614:	f000 fc88 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}

0800261c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002620:	4802      	ldr	r0, [pc, #8]	@ (800262c <SPI2_IRQHandler+0x10>)
 8002622:	f002 faf7 	bl	8004c14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	200001f0 	.word	0x200001f0

08002630 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return 1;
 8002634:	2301      	movs	r3, #1
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <_kill>:

int _kill(int pid, int sig)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800264a:	f004 f9cd 	bl	80069e8 <__errno>
 800264e:	4603      	mov	r3, r0
 8002650:	2216      	movs	r2, #22
 8002652:	601a      	str	r2, [r3, #0]
  return -1;
 8002654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <_exit>:

void _exit (int status)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002668:	f04f 31ff 	mov.w	r1, #4294967295
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ffe7 	bl	8002640 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002672:	bf00      	nop
 8002674:	e7fd      	b.n	8002672 <_exit+0x12>

08002676 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	e00a      	b.n	800269e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002688:	f3af 8000 	nop.w
 800268c:	4601      	mov	r1, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	60ba      	str	r2, [r7, #8]
 8002694:	b2ca      	uxtb	r2, r1
 8002696:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	3301      	adds	r3, #1
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	dbf0      	blt.n	8002688 <_read+0x12>
  }

  return len;
 80026a6:	687b      	ldr	r3, [r7, #4]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	e009      	b.n	80026d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	60ba      	str	r2, [r7, #8]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff f866 	bl	800179c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3301      	adds	r3, #1
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	429a      	cmp	r2, r3
 80026dc:	dbf1      	blt.n	80026c2 <_write+0x12>
  }
  return len;
 80026de:	687b      	ldr	r3, [r7, #4]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <_close>:

int _close(int file)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002710:	605a      	str	r2, [r3, #4]
  return 0;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <_isatty>:

int _isatty(int file)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002728:	2301      	movs	r3, #1
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002736:	b480      	push	{r7}
 8002738:	b085      	sub	sp, #20
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002758:	4a14      	ldr	r2, [pc, #80]	@ (80027ac <_sbrk+0x5c>)
 800275a:	4b15      	ldr	r3, [pc, #84]	@ (80027b0 <_sbrk+0x60>)
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002764:	4b13      	ldr	r3, [pc, #76]	@ (80027b4 <_sbrk+0x64>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d102      	bne.n	8002772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800276c:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <_sbrk+0x64>)
 800276e:	4a12      	ldr	r2, [pc, #72]	@ (80027b8 <_sbrk+0x68>)
 8002770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002772:	4b10      	ldr	r3, [pc, #64]	@ (80027b4 <_sbrk+0x64>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	429a      	cmp	r2, r3
 800277e:	d207      	bcs.n	8002790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002780:	f004 f932 	bl	80069e8 <__errno>
 8002784:	4603      	mov	r3, r0
 8002786:	220c      	movs	r2, #12
 8002788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	e009      	b.n	80027a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002790:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <_sbrk+0x64>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002796:	4b07      	ldr	r3, [pc, #28]	@ (80027b4 <_sbrk+0x64>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	4a05      	ldr	r2, [pc, #20]	@ (80027b4 <_sbrk+0x64>)
 80027a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027a2:	68fb      	ldr	r3, [r7, #12]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20050000 	.word	0x20050000
 80027b0:	00000400 	.word	0x00000400
 80027b4:	200002dc 	.word	0x200002dc
 80027b8:	20000430 	.word	0x20000430

080027bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027c0:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <SystemInit+0x20>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c6:	4a05      	ldr	r2, [pc, #20]	@ (80027dc <SystemInit+0x20>)
 80027c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002818 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027e4:	f7ff ffea 	bl	80027bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027e8:	480c      	ldr	r0, [pc, #48]	@ (800281c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ea:	490d      	ldr	r1, [pc, #52]	@ (8002820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f0:	e002      	b.n	80027f8 <LoopCopyDataInit>

080027f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027f6:	3304      	adds	r3, #4

080027f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027fc:	d3f9      	bcc.n	80027f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002800:	4c0a      	ldr	r4, [pc, #40]	@ (800282c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002804:	e001      	b.n	800280a <LoopFillZerobss>

08002806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002808:	3204      	adds	r2, #4

0800280a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800280a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800280c:	d3fb      	bcc.n	8002806 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800280e:	f004 f8f1 	bl	80069f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002812:	f7fe ffd9 	bl	80017c8 <main>
  bx  lr    
 8002816:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002818:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800281c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002820:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002824:	08008b3c 	.word	0x08008b3c
  ldr r2, =_sbss
 8002828:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800282c:	20000430 	.word	0x20000430

08002830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002830:	e7fe      	b.n	8002830 <ADC_IRQHandler>

08002832 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002836:	2003      	movs	r0, #3
 8002838:	f000 f94c 	bl	8002ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800283c:	2000      	movs	r0, #0
 800283e:	f000 f805 	bl	800284c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002842:	f7ff fda5 	bl	8002390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002854:	4b12      	ldr	r3, [pc, #72]	@ (80028a0 <HAL_InitTick+0x54>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <HAL_InitTick+0x58>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	4619      	mov	r1, r3
 800285e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002862:	fbb3 f3f1 	udiv	r3, r3, r1
 8002866:	fbb2 f3f3 	udiv	r3, r2, r3
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f967 	bl	8002b3e <HAL_SYSTICK_Config>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e00e      	b.n	8002898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b0f      	cmp	r3, #15
 800287e:	d80a      	bhi.n	8002896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002880:	2200      	movs	r2, #0
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	f04f 30ff 	mov.w	r0, #4294967295
 8002888:	f000 f92f 	bl	8002aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800288c:	4a06      	ldr	r2, [pc, #24]	@ (80028a8 <HAL_InitTick+0x5c>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	e000      	b.n	8002898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
}
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000000 	.word	0x20000000
 80028a4:	20000008 	.word	0x20000008
 80028a8:	20000004 	.word	0x20000004

080028ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028b0:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <HAL_IncTick+0x20>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <HAL_IncTick+0x24>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	4a04      	ldr	r2, [pc, #16]	@ (80028d0 <HAL_IncTick+0x24>)
 80028be:	6013      	str	r3, [r2, #0]
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000008 	.word	0x20000008
 80028d0:	200002e0 	.word	0x200002e0

080028d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return uwTick;
 80028d8:	4b03      	ldr	r3, [pc, #12]	@ (80028e8 <HAL_GetTick+0x14>)
 80028da:	681b      	ldr	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	200002e0 	.word	0x200002e0

080028ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028f4:	f7ff ffee 	bl	80028d4 <HAL_GetTick>
 80028f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d005      	beq.n	8002912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002906:	4b0a      	ldr	r3, [pc, #40]	@ (8002930 <HAL_Delay+0x44>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4413      	add	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002912:	bf00      	nop
 8002914:	f7ff ffde 	bl	80028d4 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	429a      	cmp	r2, r3
 8002922:	d8f7      	bhi.n	8002914 <HAL_Delay+0x28>
  {
  }
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000008 	.word	0x20000008

08002934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002944:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <__NVIC_SetPriorityGrouping+0x40>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002950:	4013      	ands	r3, r2
 8002952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800295c:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 800295e:	4313      	orrs	r3, r2
 8002960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002962:	4a04      	ldr	r2, [pc, #16]	@ (8002974 <__NVIC_SetPriorityGrouping+0x40>)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	60d3      	str	r3, [r2, #12]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000ed00 	.word	0xe000ed00
 8002978:	05fa0000 	.word	0x05fa0000

0800297c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002980:	4b04      	ldr	r3, [pc, #16]	@ (8002994 <__NVIC_GetPriorityGrouping+0x18>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	f003 0307 	and.w	r3, r3, #7
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	db0b      	blt.n	80029c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	f003 021f 	and.w	r2, r3, #31
 80029b0:	4907      	ldr	r1, [pc, #28]	@ (80029d0 <__NVIC_EnableIRQ+0x38>)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	2001      	movs	r0, #1
 80029ba:	fa00 f202 	lsl.w	r2, r0, r2
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000e100 	.word	0xe000e100

080029d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	6039      	str	r1, [r7, #0]
 80029de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	db0a      	blt.n	80029fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	490c      	ldr	r1, [pc, #48]	@ (8002a20 <__NVIC_SetPriority+0x4c>)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	0112      	lsls	r2, r2, #4
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	440b      	add	r3, r1
 80029f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029fc:	e00a      	b.n	8002a14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4908      	ldr	r1, [pc, #32]	@ (8002a24 <__NVIC_SetPriority+0x50>)
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	3b04      	subs	r3, #4
 8002a0c:	0112      	lsls	r2, r2, #4
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	440b      	add	r3, r1
 8002a12:	761a      	strb	r2, [r3, #24]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000e100 	.word	0xe000e100
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	@ 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f1c3 0307 	rsb	r3, r3, #7
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	bf28      	it	cs
 8002a46:	2304      	movcs	r3, #4
 8002a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d902      	bls.n	8002a58 <NVIC_EncodePriority+0x30>
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3b03      	subs	r3, #3
 8002a56:	e000      	b.n	8002a5a <NVIC_EncodePriority+0x32>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	43d9      	mvns	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	4313      	orrs	r3, r2
         );
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3724      	adds	r7, #36	@ 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aa0:	d301      	bcc.n	8002aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00f      	b.n	8002ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad0 <SysTick_Config+0x40>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aae:	210f      	movs	r1, #15
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	f7ff ff8e 	bl	80029d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab8:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <SysTick_Config+0x40>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002abe:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <SysTick_Config+0x40>)
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	e000e010 	.word	0xe000e010

08002ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ff29 	bl	8002934 <__NVIC_SetPriorityGrouping>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002afc:	f7ff ff3e 	bl	800297c <__NVIC_GetPriorityGrouping>
 8002b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	6978      	ldr	r0, [r7, #20]
 8002b08:	f7ff ff8e 	bl	8002a28 <NVIC_EncodePriority>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff5d 	bl	80029d4 <__NVIC_SetPriority>
}
 8002b1a:	bf00      	nop
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff31 	bl	8002998 <__NVIC_EnableIRQ>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ffa2 	bl	8002a90 <SysTick_Config>
 8002b4c:	4603      	mov	r3, r0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d004      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2280      	movs	r2, #128	@ 0x80
 8002b6e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e00c      	b.n	8002b8e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2205      	movs	r2, #5
 8002b78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	@ 0x24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	e175      	b.n	8002ea8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	f040 8164 	bne.w	8002ea2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d005      	beq.n	8002bf2 <HAL_GPIO_Init+0x56>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d130      	bne.n	8002c54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 0201 	and.w	r2, r3, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d017      	beq.n	8002c90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d123      	bne.n	8002ce4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	08da      	lsrs	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3208      	adds	r2, #8
 8002ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	220f      	movs	r2, #15
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	08da      	lsrs	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3208      	adds	r2, #8
 8002cde:	69b9      	ldr	r1, [r7, #24]
 8002ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0203 	and.w	r2, r3, #3
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80be 	beq.w	8002ea2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d26:	4b66      	ldr	r3, [pc, #408]	@ (8002ec0 <HAL_GPIO_Init+0x324>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	4a65      	ldr	r2, [pc, #404]	@ (8002ec0 <HAL_GPIO_Init+0x324>)
 8002d2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d32:	4b63      	ldr	r3, [pc, #396]	@ (8002ec0 <HAL_GPIO_Init+0x324>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d3e:	4a61      	ldr	r2, [pc, #388]	@ (8002ec4 <HAL_GPIO_Init+0x328>)
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	3302      	adds	r3, #2
 8002d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	220f      	movs	r2, #15
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a58      	ldr	r2, [pc, #352]	@ (8002ec8 <HAL_GPIO_Init+0x32c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d037      	beq.n	8002dda <HAL_GPIO_Init+0x23e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a57      	ldr	r2, [pc, #348]	@ (8002ecc <HAL_GPIO_Init+0x330>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d031      	beq.n	8002dd6 <HAL_GPIO_Init+0x23a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a56      	ldr	r2, [pc, #344]	@ (8002ed0 <HAL_GPIO_Init+0x334>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d02b      	beq.n	8002dd2 <HAL_GPIO_Init+0x236>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a55      	ldr	r2, [pc, #340]	@ (8002ed4 <HAL_GPIO_Init+0x338>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d025      	beq.n	8002dce <HAL_GPIO_Init+0x232>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a54      	ldr	r2, [pc, #336]	@ (8002ed8 <HAL_GPIO_Init+0x33c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01f      	beq.n	8002dca <HAL_GPIO_Init+0x22e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a53      	ldr	r2, [pc, #332]	@ (8002edc <HAL_GPIO_Init+0x340>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d019      	beq.n	8002dc6 <HAL_GPIO_Init+0x22a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a52      	ldr	r2, [pc, #328]	@ (8002ee0 <HAL_GPIO_Init+0x344>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <HAL_GPIO_Init+0x226>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a51      	ldr	r2, [pc, #324]	@ (8002ee4 <HAL_GPIO_Init+0x348>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00d      	beq.n	8002dbe <HAL_GPIO_Init+0x222>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a50      	ldr	r2, [pc, #320]	@ (8002ee8 <HAL_GPIO_Init+0x34c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d007      	beq.n	8002dba <HAL_GPIO_Init+0x21e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4f      	ldr	r2, [pc, #316]	@ (8002eec <HAL_GPIO_Init+0x350>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_GPIO_Init+0x21a>
 8002db2:	2309      	movs	r3, #9
 8002db4:	e012      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002db6:	230a      	movs	r3, #10
 8002db8:	e010      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dba:	2308      	movs	r3, #8
 8002dbc:	e00e      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dbe:	2307      	movs	r3, #7
 8002dc0:	e00c      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dc2:	2306      	movs	r3, #6
 8002dc4:	e00a      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dc6:	2305      	movs	r3, #5
 8002dc8:	e008      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dca:	2304      	movs	r3, #4
 8002dcc:	e006      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e004      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e002      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	f002 0203 	and.w	r2, r2, #3
 8002de2:	0092      	lsls	r2, r2, #2
 8002de4:	4093      	lsls	r3, r2
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002dec:	4935      	ldr	r1, [pc, #212]	@ (8002ec4 <HAL_GPIO_Init+0x328>)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	3302      	adds	r3, #2
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dfa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef0 <HAL_GPIO_Init+0x354>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e1e:	4a34      	ldr	r2, [pc, #208]	@ (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e24:	4b32      	ldr	r3, [pc, #200]	@ (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e48:	4a29      	ldr	r2, [pc, #164]	@ (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e4e:	4b28      	ldr	r3, [pc, #160]	@ (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e72:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e78:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e9c:	4a14      	ldr	r2, [pc, #80]	@ (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	61fb      	str	r3, [r7, #28]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	2b0f      	cmp	r3, #15
 8002eac:	f67f ae86 	bls.w	8002bbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3724      	adds	r7, #36	@ 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40013800 	.word	0x40013800
 8002ec8:	40020000 	.word	0x40020000
 8002ecc:	40020400 	.word	0x40020400
 8002ed0:	40020800 	.word	0x40020800
 8002ed4:	40020c00 	.word	0x40020c00
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40021400 	.word	0x40021400
 8002ee0:	40021800 	.word	0x40021800
 8002ee4:	40021c00 	.word	0x40021c00
 8002ee8:	40022000 	.word	0x40022000
 8002eec:	40022400 	.word	0x40022400
 8002ef0:	40013c00 	.word	0x40013c00

08002ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	807b      	strh	r3, [r7, #2]
 8002f00:	4613      	mov	r3, r2
 8002f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f04:	787b      	ldrb	r3, [r7, #1]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f0a:	887a      	ldrh	r2, [r7, #2]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f10:	e003      	b.n	8002f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	041a      	lsls	r2, r3, #16
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	619a      	str	r2, [r3, #24]
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f32:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d006      	beq.n	8002f4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f3e:	4a05      	ldr	r2, [pc, #20]	@ (8002f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f806 	bl	8002f58 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40013c00 	.word	0x40013c00

08002f58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f74:	4b05      	ldr	r3, [pc, #20]	@ (8002f8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a04      	ldr	r2, [pc, #16]	@ (8002f8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f7e:	6013      	str	r3, [r2, #0]
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40007000 	.word	0x40007000

08002f90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	4b23      	ldr	r3, [pc, #140]	@ (8003028 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	4a22      	ldr	r2, [pc, #136]	@ (8003028 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fa6:	4b20      	ldr	r3, [pc, #128]	@ (8003028 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800302c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800302c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fbe:	f7ff fc89 	bl	80028d4 <HAL_GetTick>
 8002fc2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fc4:	e009      	b.n	8002fda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fc6:	f7ff fc85 	bl	80028d4 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fd4:	d901      	bls.n	8002fda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e022      	b.n	8003020 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fda:	4b14      	ldr	r3, [pc, #80]	@ (800302c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe6:	d1ee      	bne.n	8002fc6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002fe8:	4b10      	ldr	r3, [pc, #64]	@ (800302c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0f      	ldr	r2, [pc, #60]	@ (800302c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ff2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ff4:	f7ff fc6e 	bl	80028d4 <HAL_GetTick>
 8002ff8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ffa:	e009      	b.n	8003010 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ffc:	f7ff fc6a 	bl	80028d4 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800300a:	d901      	bls.n	8003010 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e007      	b.n	8003020 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003010:	4b06      	ldr	r3, [pc, #24]	@ (800302c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003018:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800301c:	d1ee      	bne.n	8002ffc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40023800 	.word	0x40023800
 800302c:	40007000 	.word	0x40007000

08003030 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003038:	2300      	movs	r3, #0
 800303a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e291      	b.n	800356a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8087 	beq.w	8003162 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003054:	4b96      	ldr	r3, [pc, #600]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 030c 	and.w	r3, r3, #12
 800305c:	2b04      	cmp	r3, #4
 800305e:	d00c      	beq.n	800307a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003060:	4b93      	ldr	r3, [pc, #588]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b08      	cmp	r3, #8
 800306a:	d112      	bne.n	8003092 <HAL_RCC_OscConfig+0x62>
 800306c:	4b90      	ldr	r3, [pc, #576]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003074:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003078:	d10b      	bne.n	8003092 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307a:	4b8d      	ldr	r3, [pc, #564]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d06c      	beq.n	8003160 <HAL_RCC_OscConfig+0x130>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d168      	bne.n	8003160 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e26b      	b.n	800356a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x7a>
 800309c:	4b84      	ldr	r3, [pc, #528]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a83      	ldr	r2, [pc, #524]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80030a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	e02e      	b.n	8003108 <HAL_RCC_OscConfig+0xd8>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0x9c>
 80030b2:	4b7f      	ldr	r3, [pc, #508]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a7e      	ldr	r2, [pc, #504]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80030b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b7c      	ldr	r3, [pc, #496]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7b      	ldr	r2, [pc, #492]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80030c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e01d      	b.n	8003108 <HAL_RCC_OscConfig+0xd8>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0xc0>
 80030d6:	4b76      	ldr	r3, [pc, #472]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a75      	ldr	r2, [pc, #468]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80030dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b73      	ldr	r3, [pc, #460]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a72      	ldr	r2, [pc, #456]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e00b      	b.n	8003108 <HAL_RCC_OscConfig+0xd8>
 80030f0:	4b6f      	ldr	r3, [pc, #444]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a6e      	ldr	r2, [pc, #440]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b6c      	ldr	r3, [pc, #432]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6b      	ldr	r2, [pc, #428]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 8003102:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7ff fbe0 	bl	80028d4 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003118:	f7ff fbdc 	bl	80028d4 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	@ 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e21f      	b.n	800356a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b61      	ldr	r3, [pc, #388]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0xe8>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7ff fbcc 	bl	80028d4 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7ff fbc8 	bl	80028d4 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	@ 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e20b      	b.n	800356a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003152:	4b57      	ldr	r3, [pc, #348]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x110>
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d069      	beq.n	8003242 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800316e:	4b50      	ldr	r3, [pc, #320]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317a:	4b4d      	ldr	r3, [pc, #308]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b08      	cmp	r3, #8
 8003184:	d11c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x190>
 8003186:	4b4a      	ldr	r3, [pc, #296]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d116      	bne.n	80031c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003192:	4b47      	ldr	r3, [pc, #284]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_RCC_OscConfig+0x17a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e1df      	b.n	800356a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031aa:	4b41      	ldr	r3, [pc, #260]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	493d      	ldr	r1, [pc, #244]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031be:	e040      	b.n	8003242 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d023      	beq.n	8003210 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c8:	4b39      	ldr	r3, [pc, #228]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a38      	ldr	r2, [pc, #224]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7ff fb7e 	bl	80028d4 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031dc:	f7ff fb7a 	bl	80028d4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e1bd      	b.n	800356a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ee:	4b30      	ldr	r3, [pc, #192]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fa:	4b2d      	ldr	r3, [pc, #180]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4929      	ldr	r1, [pc, #164]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]
 800320e:	e018      	b.n	8003242 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003210:	4b27      	ldr	r3, [pc, #156]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a26      	ldr	r2, [pc, #152]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7ff fb5a 	bl	80028d4 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003224:	f7ff fb56 	bl	80028d4 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e199      	b.n	800356a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003236:	4b1e      	ldr	r3, [pc, #120]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d038      	beq.n	80032c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d019      	beq.n	800328a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003256:	4b16      	ldr	r3, [pc, #88]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 8003258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800325a:	4a15      	ldr	r2, [pc, #84]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7ff fb37 	bl	80028d4 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326a:	f7ff fb33 	bl	80028d4 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e176      	b.n	800356a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327c:	4b0c      	ldr	r3, [pc, #48]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 800327e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x23a>
 8003288:	e01a      	b.n	80032c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328a:	4b09      	ldr	r3, [pc, #36]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 800328c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800328e:	4a08      	ldr	r2, [pc, #32]	@ (80032b0 <HAL_RCC_OscConfig+0x280>)
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003296:	f7ff fb1d 	bl	80028d4 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329c:	e00a      	b.n	80032b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800329e:	f7ff fb19 	bl	80028d4 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d903      	bls.n	80032b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e15c      	b.n	800356a <HAL_RCC_OscConfig+0x53a>
 80032b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	4b91      	ldr	r3, [pc, #580]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 80032b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1ee      	bne.n	800329e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80a4 	beq.w	8003416 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ce:	4b8b      	ldr	r3, [pc, #556]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10d      	bne.n	80032f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032da:	4b88      	ldr	r3, [pc, #544]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	4a87      	ldr	r2, [pc, #540]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 80032e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032e6:	4b85      	ldr	r3, [pc, #532]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f2:	2301      	movs	r3, #1
 80032f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f6:	4b82      	ldr	r3, [pc, #520]	@ (8003500 <HAL_RCC_OscConfig+0x4d0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d118      	bne.n	8003334 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003302:	4b7f      	ldr	r3, [pc, #508]	@ (8003500 <HAL_RCC_OscConfig+0x4d0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a7e      	ldr	r2, [pc, #504]	@ (8003500 <HAL_RCC_OscConfig+0x4d0>)
 8003308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800330c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330e:	f7ff fae1 	bl	80028d4 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003316:	f7ff fadd 	bl	80028d4 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b64      	cmp	r3, #100	@ 0x64
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e120      	b.n	800356a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003328:	4b75      	ldr	r3, [pc, #468]	@ (8003500 <HAL_RCC_OscConfig+0x4d0>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d106      	bne.n	800334a <HAL_RCC_OscConfig+0x31a>
 800333c:	4b6f      	ldr	r3, [pc, #444]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003340:	4a6e      	ldr	r2, [pc, #440]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6713      	str	r3, [r2, #112]	@ 0x70
 8003348:	e02d      	b.n	80033a6 <HAL_RCC_OscConfig+0x376>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10c      	bne.n	800336c <HAL_RCC_OscConfig+0x33c>
 8003352:	4b6a      	ldr	r3, [pc, #424]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003356:	4a69      	ldr	r2, [pc, #420]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	6713      	str	r3, [r2, #112]	@ 0x70
 800335e:	4b67      	ldr	r3, [pc, #412]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003362:	4a66      	ldr	r2, [pc, #408]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 8003364:	f023 0304 	bic.w	r3, r3, #4
 8003368:	6713      	str	r3, [r2, #112]	@ 0x70
 800336a:	e01c      	b.n	80033a6 <HAL_RCC_OscConfig+0x376>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b05      	cmp	r3, #5
 8003372:	d10c      	bne.n	800338e <HAL_RCC_OscConfig+0x35e>
 8003374:	4b61      	ldr	r3, [pc, #388]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003378:	4a60      	ldr	r2, [pc, #384]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 800337a:	f043 0304 	orr.w	r3, r3, #4
 800337e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003380:	4b5e      	ldr	r3, [pc, #376]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003384:	4a5d      	ldr	r2, [pc, #372]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6713      	str	r3, [r2, #112]	@ 0x70
 800338c:	e00b      	b.n	80033a6 <HAL_RCC_OscConfig+0x376>
 800338e:	4b5b      	ldr	r3, [pc, #364]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003392:	4a5a      	ldr	r2, [pc, #360]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	6713      	str	r3, [r2, #112]	@ 0x70
 800339a:	4b58      	ldr	r3, [pc, #352]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339e:	4a57      	ldr	r2, [pc, #348]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 80033a0:	f023 0304 	bic.w	r3, r3, #4
 80033a4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d015      	beq.n	80033da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ae:	f7ff fa91 	bl	80028d4 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b4:	e00a      	b.n	80033cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b6:	f7ff fa8d 	bl	80028d4 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e0ce      	b.n	800356a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033cc:	4b4b      	ldr	r3, [pc, #300]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0ee      	beq.n	80033b6 <HAL_RCC_OscConfig+0x386>
 80033d8:	e014      	b.n	8003404 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033da:	f7ff fa7b 	bl	80028d4 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e0:	e00a      	b.n	80033f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e2:	f7ff fa77 	bl	80028d4 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e0b8      	b.n	800356a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f8:	4b40      	ldr	r3, [pc, #256]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1ee      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003404:	7dfb      	ldrb	r3, [r7, #23]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d105      	bne.n	8003416 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800340a:	4b3c      	ldr	r3, [pc, #240]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	4a3b      	ldr	r2, [pc, #236]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 8003410:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003414:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 80a4 	beq.w	8003568 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003420:	4b36      	ldr	r3, [pc, #216]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 030c 	and.w	r3, r3, #12
 8003428:	2b08      	cmp	r3, #8
 800342a:	d06b      	beq.n	8003504 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d149      	bne.n	80034c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003434:	4b31      	ldr	r3, [pc, #196]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a30      	ldr	r2, [pc, #192]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 800343a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800343e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7ff fa48 	bl	80028d4 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003448:	f7ff fa44 	bl	80028d4 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e087      	b.n	800356a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	4b28      	ldr	r3, [pc, #160]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	019b      	lsls	r3, r3, #6
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	3b01      	subs	r3, #1
 8003480:	041b      	lsls	r3, r3, #16
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	4313      	orrs	r3, r2
 800348c:	4a1b      	ldr	r2, [pc, #108]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 800348e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003492:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003494:	4b19      	ldr	r3, [pc, #100]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a18      	ldr	r2, [pc, #96]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 800349a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800349e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7ff fa18 	bl	80028d4 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a8:	f7ff fa14 	bl	80028d4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e057      	b.n	800356a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ba:	4b10      	ldr	r3, [pc, #64]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x478>
 80034c6:	e04f      	b.n	8003568 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c8:	4b0c      	ldr	r3, [pc, #48]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a0b      	ldr	r2, [pc, #44]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 80034ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7ff f9fe 	bl	80028d4 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034dc:	f7ff f9fa 	bl	80028d4 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e03d      	b.n	800356a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	4b03      	ldr	r3, [pc, #12]	@ (80034fc <HAL_RCC_OscConfig+0x4cc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x4ac>
 80034fa:	e035      	b.n	8003568 <HAL_RCC_OscConfig+0x538>
 80034fc:	40023800 	.word	0x40023800
 8003500:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003504:	4b1b      	ldr	r3, [pc, #108]	@ (8003574 <HAL_RCC_OscConfig+0x544>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d028      	beq.n	8003564 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d121      	bne.n	8003564 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d11a      	bne.n	8003564 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800353a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800353c:	4293      	cmp	r3, r2
 800353e:	d111      	bne.n	8003564 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	3b01      	subs	r3, #1
 800354e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d107      	bne.n	8003564 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800

08003578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0d0      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003590:	4b6a      	ldr	r3, [pc, #424]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d910      	bls.n	80035c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b67      	ldr	r3, [pc, #412]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 020f 	bic.w	r2, r3, #15
 80035a6:	4965      	ldr	r1, [pc, #404]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b63      	ldr	r3, [pc, #396]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0b8      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d020      	beq.n	800360e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d8:	4b59      	ldr	r3, [pc, #356]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4a58      	ldr	r2, [pc, #352]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 80035de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f0:	4b53      	ldr	r3, [pc, #332]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	4a52      	ldr	r2, [pc, #328]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 80035f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035fc:	4b50      	ldr	r3, [pc, #320]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	494d      	ldr	r1, [pc, #308]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d040      	beq.n	800369c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d107      	bne.n	8003632 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	4b47      	ldr	r3, [pc, #284]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d115      	bne.n	800365a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e07f      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363a:	4b41      	ldr	r3, [pc, #260]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e073      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364a:	4b3d      	ldr	r3, [pc, #244]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06b      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800365a:	4b39      	ldr	r3, [pc, #228]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f023 0203 	bic.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4936      	ldr	r1, [pc, #216]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 8003668:	4313      	orrs	r3, r2
 800366a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366c:	f7ff f932 	bl	80028d4 <HAL_GetTick>
 8003670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003672:	e00a      	b.n	800368a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003674:	f7ff f92e 	bl	80028d4 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e053      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	4b2d      	ldr	r3, [pc, #180]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 020c 	and.w	r2, r3, #12
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	429a      	cmp	r2, r3
 800369a:	d1eb      	bne.n	8003674 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800369c:	4b27      	ldr	r3, [pc, #156]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d210      	bcs.n	80036cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b24      	ldr	r3, [pc, #144]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 020f 	bic.w	r2, r3, #15
 80036b2:	4922      	ldr	r1, [pc, #136]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b20      	ldr	r3, [pc, #128]	@ (800373c <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e032      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d8:	4b19      	ldr	r3, [pc, #100]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4916      	ldr	r1, [pc, #88]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036f6:	4b12      	ldr	r3, [pc, #72]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	490e      	ldr	r1, [pc, #56]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800370a:	f000 f821 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 800370e:	4602      	mov	r2, r0
 8003710:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	490a      	ldr	r1, [pc, #40]	@ (8003744 <HAL_RCC_ClockConfig+0x1cc>)
 800371c:	5ccb      	ldrb	r3, [r1, r3]
 800371e:	fa22 f303 	lsr.w	r3, r2, r3
 8003722:	4a09      	ldr	r2, [pc, #36]	@ (8003748 <HAL_RCC_ClockConfig+0x1d0>)
 8003724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003726:	4b09      	ldr	r3, [pc, #36]	@ (800374c <HAL_RCC_ClockConfig+0x1d4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff f88e 	bl	800284c <HAL_InitTick>

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40023c00 	.word	0x40023c00
 8003740:	40023800 	.word	0x40023800
 8003744:	080087a0 	.word	0x080087a0
 8003748:	20000000 	.word	0x20000000
 800374c:	20000004 	.word	0x20000004

08003750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003754:	b090      	sub	sp, #64	@ 0x40
 8003756:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	637b      	str	r3, [r7, #52]	@ 0x34
 800375c:	2300      	movs	r3, #0
 800375e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003760:	2300      	movs	r3, #0
 8003762:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003768:	4b59      	ldr	r3, [pc, #356]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 030c 	and.w	r3, r3, #12
 8003770:	2b08      	cmp	r3, #8
 8003772:	d00d      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x40>
 8003774:	2b08      	cmp	r3, #8
 8003776:	f200 80a1 	bhi.w	80038bc <HAL_RCC_GetSysClockFreq+0x16c>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x34>
 800377e:	2b04      	cmp	r3, #4
 8003780:	d003      	beq.n	800378a <HAL_RCC_GetSysClockFreq+0x3a>
 8003782:	e09b      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003784:	4b53      	ldr	r3, [pc, #332]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003786:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003788:	e09b      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800378a:	4b53      	ldr	r3, [pc, #332]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800378c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800378e:	e098      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003790:	4b4f      	ldr	r3, [pc, #316]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003798:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800379a:	4b4d      	ldr	r3, [pc, #308]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d028      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a6:	4b4a      	ldr	r3, [pc, #296]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	099b      	lsrs	r3, r3, #6
 80037ac:	2200      	movs	r2, #0
 80037ae:	623b      	str	r3, [r7, #32]
 80037b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037b8:	2100      	movs	r1, #0
 80037ba:	4b47      	ldr	r3, [pc, #284]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037bc:	fb03 f201 	mul.w	r2, r3, r1
 80037c0:	2300      	movs	r3, #0
 80037c2:	fb00 f303 	mul.w	r3, r0, r3
 80037c6:	4413      	add	r3, r2
 80037c8:	4a43      	ldr	r2, [pc, #268]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037ca:	fba0 1202 	umull	r1, r2, r0, r2
 80037ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037d0:	460a      	mov	r2, r1
 80037d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80037d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037d6:	4413      	add	r3, r2
 80037d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037dc:	2200      	movs	r2, #0
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	61fa      	str	r2, [r7, #28]
 80037e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80037ea:	f7fd f9fd 	bl	8000be8 <__aeabi_uldivmod>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4613      	mov	r3, r2
 80037f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037f6:	e053      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f8:	4b35      	ldr	r3, [pc, #212]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	099b      	lsrs	r3, r3, #6
 80037fe:	2200      	movs	r2, #0
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	617a      	str	r2, [r7, #20]
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800380a:	f04f 0b00 	mov.w	fp, #0
 800380e:	4652      	mov	r2, sl
 8003810:	465b      	mov	r3, fp
 8003812:	f04f 0000 	mov.w	r0, #0
 8003816:	f04f 0100 	mov.w	r1, #0
 800381a:	0159      	lsls	r1, r3, #5
 800381c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003820:	0150      	lsls	r0, r2, #5
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	ebb2 080a 	subs.w	r8, r2, sl
 800382a:	eb63 090b 	sbc.w	r9, r3, fp
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800383a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800383e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003842:	ebb2 0408 	subs.w	r4, r2, r8
 8003846:	eb63 0509 	sbc.w	r5, r3, r9
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	00eb      	lsls	r3, r5, #3
 8003854:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003858:	00e2      	lsls	r2, r4, #3
 800385a:	4614      	mov	r4, r2
 800385c:	461d      	mov	r5, r3
 800385e:	eb14 030a 	adds.w	r3, r4, sl
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	eb45 030b 	adc.w	r3, r5, fp
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003876:	4629      	mov	r1, r5
 8003878:	028b      	lsls	r3, r1, #10
 800387a:	4621      	mov	r1, r4
 800387c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003880:	4621      	mov	r1, r4
 8003882:	028a      	lsls	r2, r1, #10
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800388a:	2200      	movs	r2, #0
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	60fa      	str	r2, [r7, #12]
 8003890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003894:	f7fd f9a8 	bl	8000be8 <__aeabi_uldivmod>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4613      	mov	r3, r2
 800389e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038a0:	4b0b      	ldr	r3, [pc, #44]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	0c1b      	lsrs	r3, r3, #16
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	3301      	adds	r3, #1
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80038b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038ba:	e002      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038bc:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80038be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3740      	adds	r7, #64	@ 0x40
 80038c8:	46bd      	mov	sp, r7
 80038ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800
 80038d4:	00f42400 	.word	0x00f42400
 80038d8:	017d7840 	.word	0x017d7840

080038dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e0:	4b03      	ldr	r3, [pc, #12]	@ (80038f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000000 	.word	0x20000000

080038f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038f8:	f7ff fff0 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 80038fc:	4602      	mov	r2, r0
 80038fe:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	0a9b      	lsrs	r3, r3, #10
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	4903      	ldr	r1, [pc, #12]	@ (8003918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800390a:	5ccb      	ldrb	r3, [r1, r3]
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40023800 	.word	0x40023800
 8003918:	080087b0 	.word	0x080087b0

0800391c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003920:	f7ff ffdc 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b05      	ldr	r3, [pc, #20]	@ (800393c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	0b5b      	lsrs	r3, r3, #13
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4903      	ldr	r1, [pc, #12]	@ (8003940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40023800 	.word	0x40023800
 8003940:	080087b0 	.word	0x080087b0

08003944 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d012      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800396c:	4b69      	ldr	r3, [pc, #420]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4a68      	ldr	r2, [pc, #416]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003972:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003976:	6093      	str	r3, [r2, #8]
 8003978:	4b66      	ldr	r3, [pc, #408]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003980:	4964      	ldr	r1, [pc, #400]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800398e:	2301      	movs	r3, #1
 8003990:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d017      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800399e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039a4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ac:	4959      	ldr	r1, [pc, #356]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039bc:	d101      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80039be:	2301      	movs	r3, #1
 80039c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80039ca:	2301      	movs	r3, #1
 80039cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d017      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039da:	4b4e      	ldr	r3, [pc, #312]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	494a      	ldr	r1, [pc, #296]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039f8:	d101      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039fa:	2301      	movs	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a06:	2301      	movs	r3, #1
 8003a08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a16:	2301      	movs	r3, #1
 8003a18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 808b 	beq.w	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a28:	4b3a      	ldr	r3, [pc, #232]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	4a39      	ldr	r2, [pc, #228]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a34:	4b37      	ldr	r3, [pc, #220]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a40:	4b35      	ldr	r3, [pc, #212]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a34      	ldr	r2, [pc, #208]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4c:	f7fe ff42 	bl	80028d4 <HAL_GetTick>
 8003a50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a54:	f7fe ff3e 	bl	80028d4 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	@ 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e357      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a66:	4b2c      	ldr	r3, [pc, #176]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a72:	4b28      	ldr	r3, [pc, #160]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d035      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d02e      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a90:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ab2:	4a18      	ldr	r2, [pc, #96]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ab8:	4b16      	ldr	r3, [pc, #88]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d114      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fe ff06 	bl	80028d4 <HAL_GetTick>
 8003ac8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003acc:	f7fe ff02 	bl	80028d4 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e319      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0ee      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003afa:	d111      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003afc:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b08:	4b04      	ldr	r3, [pc, #16]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b0a:	400b      	ands	r3, r1
 8003b0c:	4901      	ldr	r1, [pc, #4]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
 8003b12:	e00b      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	0ffffcff 	.word	0x0ffffcff
 8003b20:	4baa      	ldr	r3, [pc, #680]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4aa9      	ldr	r2, [pc, #676]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b26:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003b2a:	6093      	str	r3, [r2, #8]
 8003b2c:	4ba7      	ldr	r3, [pc, #668]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b38:	49a4      	ldr	r1, [pc, #656]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d010      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b4a:	4ba0      	ldr	r3, [pc, #640]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b50:	4a9e      	ldr	r2, [pc, #632]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003b5a:	4b9c      	ldr	r3, [pc, #624]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b64:	4999      	ldr	r1, [pc, #612]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b78:	4b94      	ldr	r3, [pc, #592]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b86:	4991      	ldr	r1, [pc, #580]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b9a:	4b8c      	ldr	r3, [pc, #560]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ba8:	4988      	ldr	r1, [pc, #544]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bbc:	4b83      	ldr	r3, [pc, #524]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bca:	4980      	ldr	r1, [pc, #512]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bde:	4b7b      	ldr	r3, [pc, #492]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bec:	4977      	ldr	r1, [pc, #476]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c00:	4b72      	ldr	r3, [pc, #456]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c06:	f023 0203 	bic.w	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	496f      	ldr	r1, [pc, #444]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c22:	4b6a      	ldr	r3, [pc, #424]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c28:	f023 020c 	bic.w	r2, r3, #12
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c30:	4966      	ldr	r1, [pc, #408]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c44:	4b61      	ldr	r3, [pc, #388]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c52:	495e      	ldr	r1, [pc, #376]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c66:	4b59      	ldr	r3, [pc, #356]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c74:	4955      	ldr	r1, [pc, #340]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c88:	4b50      	ldr	r3, [pc, #320]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c96:	494d      	ldr	r1, [pc, #308]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003caa:	4b48      	ldr	r3, [pc, #288]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb8:	4944      	ldr	r1, [pc, #272]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ccc:	4b3f      	ldr	r3, [pc, #252]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cda:	493c      	ldr	r1, [pc, #240]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003cee:	4b37      	ldr	r3, [pc, #220]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfc:	4933      	ldr	r1, [pc, #204]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d10:	4b2e      	ldr	r3, [pc, #184]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d16:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d1e:	492b      	ldr	r1, [pc, #172]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d011      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d32:	4b26      	ldr	r3, [pc, #152]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d38:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d40:	4922      	ldr	r1, [pc, #136]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d50:	d101      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d52:	2301      	movs	r3, #1
 8003d54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d62:	2301      	movs	r3, #1
 8003d64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d72:	4b16      	ldr	r3, [pc, #88]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d78:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d80:	4912      	ldr	r1, [pc, #72]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00b      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d94:	4b0d      	ldr	r3, [pc, #52]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003da4:	4909      	ldr	r1, [pc, #36]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d006      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 80d9 	beq.w	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003dc0:	4b02      	ldr	r3, [pc, #8]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a01      	ldr	r2, [pc, #4]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003dca:	e001      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd2:	f7fe fd7f 	bl	80028d4 <HAL_GetTick>
 8003dd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dd8:	e008      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dda:	f7fe fd7b 	bl	80028d4 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b64      	cmp	r3, #100	@ 0x64
 8003de6:	d901      	bls.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e194      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dec:	4b6c      	ldr	r3, [pc, #432]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f0      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d021      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d11d      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e0c:	4b64      	ldr	r3, [pc, #400]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e12:	0c1b      	lsrs	r3, r3, #16
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e1a:	4b61      	ldr	r3, [pc, #388]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e20:	0e1b      	lsrs	r3, r3, #24
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	019a      	lsls	r2, r3, #6
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	041b      	lsls	r3, r3, #16
 8003e32:	431a      	orrs	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	061b      	lsls	r3, r3, #24
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	071b      	lsls	r3, r3, #28
 8003e40:	4957      	ldr	r1, [pc, #348]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d02e      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e72:	d129      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e74:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e7a:	0c1b      	lsrs	r3, r3, #16
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e82:	4b47      	ldr	r3, [pc, #284]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e88:	0f1b      	lsrs	r3, r3, #28
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	019a      	lsls	r2, r3, #6
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	041b      	lsls	r3, r3, #16
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	061b      	lsls	r3, r3, #24
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	071b      	lsls	r3, r3, #28
 8003ea8:	493d      	ldr	r1, [pc, #244]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eb6:	f023 021f 	bic.w	r2, r3, #31
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	4937      	ldr	r1, [pc, #220]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01d      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ed4:	4b32      	ldr	r3, [pc, #200]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eda:	0e1b      	lsrs	r3, r3, #24
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ee8:	0f1b      	lsrs	r3, r3, #28
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	019a      	lsls	r2, r3, #6
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	431a      	orrs	r2, r3
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	061b      	lsls	r3, r3, #24
 8003f02:	431a      	orrs	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	071b      	lsls	r3, r3, #28
 8003f08:	4925      	ldr	r1, [pc, #148]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d011      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	019a      	lsls	r2, r3, #6
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	041b      	lsls	r3, r3, #16
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	061b      	lsls	r3, r3, #24
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	071b      	lsls	r3, r3, #28
 8003f38:	4919      	ldr	r1, [pc, #100]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f40:	4b17      	ldr	r3, [pc, #92]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a16      	ldr	r2, [pc, #88]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f4c:	f7fe fcc2 	bl	80028d4 <HAL_GetTick>
 8003f50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f54:	f7fe fcbe 	bl	80028d4 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	@ 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e0d7      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f66:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	f040 80cd 	bne.w	8004114 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f7a:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a08      	ldr	r2, [pc, #32]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f86:	f7fe fca5 	bl	80028d4 <HAL_GetTick>
 8003f8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f8e:	f7fe fca1 	bl	80028d4 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b64      	cmp	r3, #100	@ 0x64
 8003f9a:	d903      	bls.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e0ba      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003fa0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fa4:	4b5e      	ldr	r3, [pc, #376]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fb0:	d0ed      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d02e      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d12a      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fda:	4b51      	ldr	r3, [pc, #324]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe0:	0c1b      	lsrs	r3, r3, #16
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fe8:	4b4d      	ldr	r3, [pc, #308]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fee:	0f1b      	lsrs	r3, r3, #28
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	019a      	lsls	r2, r3, #6
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	041b      	lsls	r3, r3, #16
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	061b      	lsls	r3, r3, #24
 8004008:	431a      	orrs	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	071b      	lsls	r3, r3, #28
 800400e:	4944      	ldr	r1, [pc, #272]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004016:	4b42      	ldr	r3, [pc, #264]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800401c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004024:	3b01      	subs	r3, #1
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	493d      	ldr	r1, [pc, #244]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d022      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004040:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004044:	d11d      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004046:	4b36      	ldr	r3, [pc, #216]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404c:	0e1b      	lsrs	r3, r3, #24
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004054:	4b32      	ldr	r3, [pc, #200]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405a:	0f1b      	lsrs	r3, r3, #28
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	019a      	lsls	r2, r3, #6
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	041b      	lsls	r3, r3, #16
 800406e:	431a      	orrs	r2, r3
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	061b      	lsls	r3, r3, #24
 8004074:	431a      	orrs	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	071b      	lsls	r3, r3, #28
 800407a:	4929      	ldr	r1, [pc, #164]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d028      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800408e:	4b24      	ldr	r3, [pc, #144]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004094:	0e1b      	lsrs	r3, r3, #24
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800409c:	4b20      	ldr	r3, [pc, #128]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a2:	0c1b      	lsrs	r3, r3, #16
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	019a      	lsls	r2, r3, #6
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	041b      	lsls	r3, r3, #16
 80040b4:	431a      	orrs	r2, r3
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	061b      	lsls	r3, r3, #24
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	071b      	lsls	r3, r3, #28
 80040c2:	4917      	ldr	r1, [pc, #92]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80040ca:	4b15      	ldr	r3, [pc, #84]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	4911      	ldr	r1, [pc, #68]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a0e      	ldr	r2, [pc, #56]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ec:	f7fe fbf2 	bl	80028d4 <HAL_GetTick>
 80040f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040f4:	f7fe fbee 	bl	80028d4 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	@ 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e007      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004106:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800410e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004112:	d1ef      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3720      	adds	r7, #32
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800

08004124 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e09d      	b.n	8004272 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413a:	2b00      	cmp	r3, #0
 800413c:	d108      	bne.n	8004150 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004146:	d009      	beq.n	800415c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	61da      	str	r2, [r3, #28]
 800414e:	e005      	b.n	800415c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fe f92e 	bl	80023d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004192:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800419c:	d902      	bls.n	80041a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e002      	b.n	80041aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80041b2:	d007      	beq.n	80041c4 <HAL_SPI_Init+0xa0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041bc:	d002      	beq.n	80041c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004206:	ea42 0103 	orr.w	r1, r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	0c1b      	lsrs	r3, r3, #16
 8004220:	f003 0204 	and.w	r2, r3, #4
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004240:	ea42 0103 	orr.w	r1, r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69da      	ldr	r2, [r3, #28]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004260:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b088      	sub	sp, #32
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800428a:	f7fe fb23 	bl	80028d4 <HAL_GetTick>
 800428e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004290:	88fb      	ldrh	r3, [r7, #6]
 8004292:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d001      	beq.n	80042a4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80042a0:	2302      	movs	r3, #2
 80042a2:	e15c      	b.n	800455e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_SPI_Transmit+0x36>
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e154      	b.n	800455e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_SPI_Transmit+0x48>
 80042be:	2302      	movs	r3, #2
 80042c0:	e14d      	b.n	800455e <HAL_SPI_Transmit+0x2e4>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2203      	movs	r2, #3
 80042ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	88fa      	ldrh	r2, [r7, #6]
 80042e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	88fa      	ldrh	r2, [r7, #6]
 80042e8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004314:	d10f      	bne.n	8004336 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004324:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004334:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004340:	2b40      	cmp	r3, #64	@ 0x40
 8004342:	d007      	beq.n	8004354 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004352:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800435c:	d952      	bls.n	8004404 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_SPI_Transmit+0xf2>
 8004366:	8b7b      	ldrh	r3, [r7, #26]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d145      	bne.n	80043f8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004370:	881a      	ldrh	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437c:	1c9a      	adds	r2, r3, #2
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004390:	e032      	b.n	80043f8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b02      	cmp	r3, #2
 800439e:	d112      	bne.n	80043c6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a4:	881a      	ldrh	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b0:	1c9a      	adds	r2, r3, #2
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043c4:	e018      	b.n	80043f8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043c6:	f7fe fa85 	bl	80028d4 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d803      	bhi.n	80043de <HAL_SPI_Transmit+0x164>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d102      	bne.n	80043e4 <HAL_SPI_Transmit+0x16a>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d109      	bne.n	80043f8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e0b2      	b.n	800455e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1c7      	bne.n	8004392 <HAL_SPI_Transmit+0x118>
 8004402:	e083      	b.n	800450c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_SPI_Transmit+0x198>
 800440c:	8b7b      	ldrh	r3, [r7, #26]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d177      	bne.n	8004502 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d912      	bls.n	8004442 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004420:	881a      	ldrh	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442c:	1c9a      	adds	r2, r3, #2
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b02      	subs	r3, #2
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004440:	e05f      	b.n	8004502 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	7812      	ldrb	r2, [r2, #0]
 800444e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004468:	e04b      	b.n	8004502 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b02      	cmp	r3, #2
 8004476:	d12b      	bne.n	80044d0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	d912      	bls.n	80044a8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004486:	881a      	ldrh	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004492:	1c9a      	adds	r2, r3, #2
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b02      	subs	r3, #2
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044a6:	e02c      	b.n	8004502 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	7812      	ldrb	r2, [r2, #0]
 80044b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044ce:	e018      	b.n	8004502 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044d0:	f7fe fa00 	bl	80028d4 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d803      	bhi.n	80044e8 <HAL_SPI_Transmit+0x26e>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e6:	d102      	bne.n	80044ee <HAL_SPI_Transmit+0x274>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e02d      	b.n	800455e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1ae      	bne.n	800446a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	6839      	ldr	r1, [r7, #0]
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 fe47 	bl	80051a4 <SPI_EndRxTxTransaction>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10a      	bne.n	8004540 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800455c:	2300      	movs	r3, #0
  }
}
 800455e:	4618      	mov	r0, r3
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b088      	sub	sp, #32
 800456a:	af02      	add	r7, sp, #8
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	4613      	mov	r3, r2
 8004574:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b01      	cmp	r3, #1
 8004580:	d001      	beq.n	8004586 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004582:	2302      	movs	r3, #2
 8004584:	e123      	b.n	80047ce <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_SPI_Receive+0x2c>
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e11b      	b.n	80047ce <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800459e:	d112      	bne.n	80045c6 <HAL_SPI_Receive+0x60>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10e      	bne.n	80045c6 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2204      	movs	r2, #4
 80045ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045b0:	88fa      	ldrh	r2, [r7, #6]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	4613      	mov	r3, r2
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f90a 	bl	80047d6 <HAL_SPI_TransmitReceive>
 80045c2:	4603      	mov	r3, r0
 80045c4:	e103      	b.n	80047ce <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045c6:	f7fe f985 	bl	80028d4 <HAL_GetTick>
 80045ca:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_SPI_Receive+0x74>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e0f9      	b.n	80047ce <HAL_SPI_Receive+0x268>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2204      	movs	r2, #4
 80045e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	88fa      	ldrh	r2, [r7, #6]
 80045fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	88fa      	ldrh	r2, [r7, #6]
 8004602:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800462c:	d908      	bls.n	8004640 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800463c:	605a      	str	r2, [r3, #4]
 800463e:	e007      	b.n	8004650 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800464e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004658:	d10f      	bne.n	800467a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004668:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004678:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004684:	2b40      	cmp	r3, #64	@ 0x40
 8004686:	d007      	beq.n	8004698 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004696:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046a0:	d875      	bhi.n	800478e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046a2:	e037      	b.n	8004714 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d117      	bne.n	80046e2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f103 020c 	add.w	r2, r3, #12
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046be:	7812      	ldrb	r2, [r2, #0]
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80046e0:	e018      	b.n	8004714 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046e2:	f7fe f8f7 	bl	80028d4 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d803      	bhi.n	80046fa <HAL_SPI_Receive+0x194>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d102      	bne.n	8004700 <HAL_SPI_Receive+0x19a>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d109      	bne.n	8004714 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e05c      	b.n	80047ce <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1c1      	bne.n	80046a4 <HAL_SPI_Receive+0x13e>
 8004720:	e03b      	b.n	800479a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b01      	cmp	r3, #1
 800472e:	d115      	bne.n	800475c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	b292      	uxth	r2, r2
 800473c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	1c9a      	adds	r2, r3, #2
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800475a:	e018      	b.n	800478e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800475c:	f7fe f8ba 	bl	80028d4 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d803      	bhi.n	8004774 <HAL_SPI_Receive+0x20e>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004772:	d102      	bne.n	800477a <HAL_SPI_Receive+0x214>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e01f      	b.n	80047ce <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1c3      	bne.n	8004722 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 fc84 	bl	80050ac <SPI_EndRxTransaction>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2220      	movs	r2, #32
 80047ae:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80047cc:	2300      	movs	r3, #0
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b08a      	sub	sp, #40	@ 0x28
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047e4:	2301      	movs	r3, #1
 80047e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047e8:	f7fe f874 	bl	80028d4 <HAL_GetTick>
 80047ec:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047f4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80047fc:	887b      	ldrh	r3, [r7, #2]
 80047fe:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004800:	887b      	ldrh	r3, [r7, #2]
 8004802:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004804:	7ffb      	ldrb	r3, [r7, #31]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d00c      	beq.n	8004824 <HAL_SPI_TransmitReceive+0x4e>
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004810:	d106      	bne.n	8004820 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d102      	bne.n	8004820 <HAL_SPI_TransmitReceive+0x4a>
 800481a:	7ffb      	ldrb	r3, [r7, #31]
 800481c:	2b04      	cmp	r3, #4
 800481e:	d001      	beq.n	8004824 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004820:	2302      	movs	r3, #2
 8004822:	e1f3      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <HAL_SPI_TransmitReceive+0x60>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <HAL_SPI_TransmitReceive+0x60>
 8004830:	887b      	ldrh	r3, [r7, #2]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e1e8      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_SPI_TransmitReceive+0x72>
 8004844:	2302      	movs	r3, #2
 8004846:	e1e1      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x436>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b04      	cmp	r3, #4
 800485a:	d003      	beq.n	8004864 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2205      	movs	r2, #5
 8004860:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	887a      	ldrh	r2, [r7, #2]
 8004874:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	887a      	ldrh	r2, [r7, #2]
 800488a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048a6:	d802      	bhi.n	80048ae <HAL_SPI_TransmitReceive+0xd8>
 80048a8:	8abb      	ldrh	r3, [r7, #20]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d908      	bls.n	80048c0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	e007      	b.n	80048d0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048ce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048da:	2b40      	cmp	r3, #64	@ 0x40
 80048dc:	d007      	beq.n	80048ee <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048f6:	f240 8083 	bls.w	8004a00 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <HAL_SPI_TransmitReceive+0x132>
 8004902:	8afb      	ldrh	r3, [r7, #22]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d16f      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490c:	881a      	ldrh	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004918:	1c9a      	adds	r2, r3, #2
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800492c:	e05c      	b.n	80049e8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b02      	cmp	r3, #2
 800493a:	d11b      	bne.n	8004974 <HAL_SPI_TransmitReceive+0x19e>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d016      	beq.n	8004974 <HAL_SPI_TransmitReceive+0x19e>
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	2b01      	cmp	r3, #1
 800494a:	d113      	bne.n	8004974 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004950:	881a      	ldrh	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495c:	1c9a      	adds	r2, r3, #2
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b01      	cmp	r3, #1
 8004980:	d11c      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x1e6>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d016      	beq.n	80049bc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	b292      	uxth	r2, r2
 800499a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a0:	1c9a      	adds	r2, r3, #2
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049b8:	2301      	movs	r3, #1
 80049ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049bc:	f7fd ff8a 	bl	80028d4 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d80d      	bhi.n	80049e8 <HAL_SPI_TransmitReceive+0x212>
 80049cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d2:	d009      	beq.n	80049e8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e111      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d19d      	bne.n	800492e <HAL_SPI_TransmitReceive+0x158>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d197      	bne.n	800492e <HAL_SPI_TransmitReceive+0x158>
 80049fe:	e0e5      	b.n	8004bcc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_SPI_TransmitReceive+0x23a>
 8004a08:	8afb      	ldrh	r3, [r7, #22]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	f040 80d1 	bne.w	8004bb2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d912      	bls.n	8004a40 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1e:	881a      	ldrh	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2a:	1c9a      	adds	r2, r3, #2
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3b02      	subs	r3, #2
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a3e:	e0b8      	b.n	8004bb2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	7812      	ldrb	r2, [r2, #0]
 8004a4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a66:	e0a4      	b.n	8004bb2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d134      	bne.n	8004ae0 <HAL_SPI_TransmitReceive+0x30a>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d02f      	beq.n	8004ae0 <HAL_SPI_TransmitReceive+0x30a>
 8004a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d12c      	bne.n	8004ae0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d912      	bls.n	8004ab6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a94:	881a      	ldrh	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa0:	1c9a      	adds	r2, r3, #2
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b02      	subs	r3, #2
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ab4:	e012      	b.n	8004adc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	330c      	adds	r3, #12
 8004ac0:	7812      	ldrb	r2, [r2, #0]
 8004ac2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d148      	bne.n	8004b80 <HAL_SPI_TransmitReceive+0x3aa>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d042      	beq.n	8004b80 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d923      	bls.n	8004b4e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b10:	b292      	uxth	r2, r2
 8004b12:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b18:	1c9a      	adds	r2, r3, #2
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b02      	subs	r3, #2
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d81f      	bhi.n	8004b7c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b4a:	605a      	str	r2, [r3, #4]
 8004b4c:	e016      	b.n	8004b7c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f103 020c 	add.w	r2, r3, #12
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	7812      	ldrb	r2, [r2, #0]
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b80:	f7fd fea8 	bl	80028d4 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d803      	bhi.n	8004b98 <HAL_SPI_TransmitReceive+0x3c2>
 8004b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b96:	d102      	bne.n	8004b9e <HAL_SPI_TransmitReceive+0x3c8>
 8004b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e02c      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f47f af55 	bne.w	8004a68 <HAL_SPI_TransmitReceive+0x292>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f47f af4e 	bne.w	8004a68 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bcc:	6a3a      	ldr	r2, [r7, #32]
 8004bce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 fae7 	bl	80051a4 <SPI_EndRxTxTransaction>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2220      	movs	r2, #32
 8004be0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e00e      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
  }
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3728      	adds	r7, #40	@ 0x28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	099b      	lsrs	r3, r3, #6
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10f      	bne.n	8004c58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	099b      	lsrs	r3, r3, #6
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d004      	beq.n	8004c58 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	4798      	blx	r3
    return;
 8004c56:	e0d7      	b.n	8004e08 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	085b      	lsrs	r3, r3, #1
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <HAL_SPI_IRQHandler+0x66>
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	09db      	lsrs	r3, r3, #7
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d004      	beq.n	8004c7a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	4798      	blx	r3
    return;
 8004c78:	e0c6      	b.n	8004e08 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10c      	bne.n	8004ca0 <HAL_SPI_IRQHandler+0x8c>
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	099b      	lsrs	r3, r3, #6
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	0a1b      	lsrs	r3, r3, #8
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 80b4 	beq.w	8004e08 <HAL_SPI_IRQHandler+0x1f4>
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80ad 	beq.w	8004e08 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	099b      	lsrs	r3, r3, #6
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d023      	beq.n	8004d02 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d011      	beq.n	8004cea <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cca:	f043 0204 	orr.w	r2, r3, #4
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	e00b      	b.n	8004d02 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	693b      	ldr	r3, [r7, #16]
        return;
 8004d00:	e082      	b.n	8004e08 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d014      	beq.n	8004d38 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d12:	f043 0201 	orr.w	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	0a1b      	lsrs	r3, r3, #8
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00c      	beq.n	8004d5e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d48:	f043 0208 	orr.w	r2, r3, #8
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004d50:	2300      	movs	r3, #0
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d04f      	beq.n	8004e06 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d74:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d104      	bne.n	8004d92 <HAL_SPI_IRQHandler+0x17e>
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d034      	beq.n	8004dfc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0203 	bic.w	r2, r2, #3
 8004da0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d011      	beq.n	8004dce <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dae:	4a18      	ldr	r2, [pc, #96]	@ (8004e10 <HAL_SPI_IRQHandler+0x1fc>)
 8004db0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fd fecd 	bl	8002b56 <HAL_DMA_Abort_IT>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d016      	beq.n	8004e04 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dda:	4a0d      	ldr	r2, [pc, #52]	@ (8004e10 <HAL_SPI_IRQHandler+0x1fc>)
 8004ddc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fd feb7 	bl	8002b56 <HAL_DMA_Abort_IT>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004dfa:	e003      	b.n	8004e04 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f809 	bl	8004e14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e02:	e000      	b.n	8004e06 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004e04:	bf00      	nop
    return;
 8004e06:	bf00      	nop
  }
}
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	08004e45 	.word	0x08004e45

08004e14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e36:	b2db      	uxtb	r3, r3
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e50:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f7ff ffd7 	bl	8004e14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e80:	f7fd fd28 	bl	80028d4 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e88:	1a9b      	subs	r3, r3, r2
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e90:	f7fd fd20 	bl	80028d4 <HAL_GetTick>
 8004e94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e96:	4b39      	ldr	r3, [pc, #228]	@ (8004f7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	015b      	lsls	r3, r3, #5
 8004e9c:	0d1b      	lsrs	r3, r3, #20
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	fb02 f303 	mul.w	r3, r2, r3
 8004ea4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ea6:	e055      	b.n	8004f54 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d051      	beq.n	8004f54 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004eb0:	f7fd fd10 	bl	80028d4 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d902      	bls.n	8004ec6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d13d      	bne.n	8004f42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ed4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ede:	d111      	bne.n	8004f04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ee8:	d004      	beq.n	8004ef4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ef2:	d107      	bne.n	8004f04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f0c:	d10f      	bne.n	8004f2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e018      	b.n	8004f74 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d102      	bne.n	8004f4e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	e002      	b.n	8004f54 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	bf0c      	ite	eq
 8004f64:	2301      	moveq	r3, #1
 8004f66:	2300      	movne	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	79fb      	ldrb	r3, [r7, #7]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d19a      	bne.n	8004ea8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3720      	adds	r7, #32
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000000 	.word	0x20000000

08004f80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	@ 0x28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f92:	f7fd fc9f 	bl	80028d4 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9a:	1a9b      	subs	r3, r3, r2
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004fa2:	f7fd fc97 	bl	80028d4 <HAL_GetTick>
 8004fa6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	330c      	adds	r3, #12
 8004fae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fb0:	4b3d      	ldr	r3, [pc, #244]	@ (80050a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	00da      	lsls	r2, r3, #3
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	0d1b      	lsrs	r3, r3, #20
 8004fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc2:	fb02 f303 	mul.w	r3, r2, r3
 8004fc6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004fc8:	e061      	b.n	800508e <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004fd0:	d107      	bne.n	8004fe2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d104      	bne.n	8004fe2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d051      	beq.n	800508e <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fea:	f7fd fc73 	bl	80028d4 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d902      	bls.n	8005000 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d13d      	bne.n	800507c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800500e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005018:	d111      	bne.n	800503e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005022:	d004      	beq.n	800502e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800502c:	d107      	bne.n	800503e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800503c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005042:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005046:	d10f      	bne.n	8005068 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005066:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e011      	b.n	80050a0 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d102      	bne.n	8005088 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	627b      	str	r3, [r7, #36]	@ 0x24
 8005086:	e002      	b.n	800508e <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	3b01      	subs	r3, #1
 800508c:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	4013      	ands	r3, r2
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	429a      	cmp	r2, r3
 800509c:	d195      	bne.n	8004fca <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3728      	adds	r7, #40	@ 0x28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	20000000 	.word	0x20000000

080050ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050c0:	d111      	bne.n	80050e6 <SPI_EndRxTransaction+0x3a>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ca:	d004      	beq.n	80050d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d4:	d107      	bne.n	80050e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050ee:	d112      	bne.n	8005116 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2200      	movs	r2, #0
 80050f8:	2180      	movs	r1, #128	@ 0x80
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f7ff feb8 	bl	8004e70 <SPI_WaitFlagStateUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d021      	beq.n	800514a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800510a:	f043 0220 	orr.w	r2, r3, #32
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e03d      	b.n	8005192 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005116:	4b21      	ldr	r3, [pc, #132]	@ (800519c <SPI_EndRxTransaction+0xf0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a21      	ldr	r2, [pc, #132]	@ (80051a0 <SPI_EndRxTransaction+0xf4>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	0d5b      	lsrs	r3, r3, #21
 8005122:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005126:	fb02 f303 	mul.w	r3, r2, r3
 800512a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	3b01      	subs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005142:	2b80      	cmp	r3, #128	@ 0x80
 8005144:	d0f2      	beq.n	800512c <SPI_EndRxTransaction+0x80>
 8005146:	e000      	b.n	800514a <SPI_EndRxTransaction+0x9e>
        break;
 8005148:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005152:	d11d      	bne.n	8005190 <SPI_EndRxTransaction+0xe4>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800515c:	d004      	beq.n	8005168 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005166:	d113      	bne.n	8005190 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2200      	movs	r2, #0
 8005170:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7ff ff03 	bl	8004f80 <SPI_WaitFifoStateUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d007      	beq.n	8005190 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005184:	f043 0220 	orr.w	r2, r3, #32
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e000      	b.n	8005192 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20000000 	.word	0x20000000
 80051a0:	165e9f81 	.word	0x165e9f81

080051a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7ff fedf 	bl	8004f80 <SPI_WaitFifoStateUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d007      	beq.n	80051d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051cc:	f043 0220 	orr.w	r2, r3, #32
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e046      	b.n	8005266 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051d8:	4b25      	ldr	r3, [pc, #148]	@ (8005270 <SPI_EndRxTxTransaction+0xcc>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a25      	ldr	r2, [pc, #148]	@ (8005274 <SPI_EndRxTxTransaction+0xd0>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	0d5b      	lsrs	r3, r3, #21
 80051e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80051e8:	fb02 f303 	mul.w	r3, r2, r3
 80051ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051f6:	d112      	bne.n	800521e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2200      	movs	r2, #0
 8005200:	2180      	movs	r1, #128	@ 0x80
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7ff fe34 	bl	8004e70 <SPI_WaitFlagStateUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d016      	beq.n	800523c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005212:	f043 0220 	orr.w	r2, r3, #32
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e023      	b.n	8005266 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	3b01      	subs	r3, #1
 8005228:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005234:	2b80      	cmp	r3, #128	@ 0x80
 8005236:	d0f2      	beq.n	800521e <SPI_EndRxTxTransaction+0x7a>
 8005238:	e000      	b.n	800523c <SPI_EndRxTxTransaction+0x98>
        break;
 800523a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2200      	movs	r2, #0
 8005244:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f7ff fe99 	bl	8004f80 <SPI_WaitFifoStateUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005258:	f043 0220 	orr.w	r2, r3, #32
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e000      	b.n	8005266 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20000000 	.word	0x20000000
 8005274:	165e9f81 	.word	0x165e9f81

08005278 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e040      	b.n	800530c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7fd f906 	bl	80024ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2224      	movs	r2, #36	@ 0x24
 80052a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0201 	bic.w	r2, r2, #1
 80052b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fb16 	bl	80058f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f8af 	bl	8005428 <UART_SetConfig>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e01b      	b.n	800530c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fb95 	bl	8005a34 <UART_CheckIdleState>
 800530a:	4603      	mov	r3, r0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08a      	sub	sp, #40	@ 0x28
 8005318:	af02      	add	r7, sp, #8
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	603b      	str	r3, [r7, #0]
 8005320:	4613      	mov	r3, r2
 8005322:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005328:	2b20      	cmp	r3, #32
 800532a:	d177      	bne.n	800541c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <HAL_UART_Transmit+0x24>
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e070      	b.n	800541e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2221      	movs	r2, #33	@ 0x21
 8005348:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800534a:	f7fd fac3 	bl	80028d4 <HAL_GetTick>
 800534e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	88fa      	ldrh	r2, [r7, #6]
 8005354:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	88fa      	ldrh	r2, [r7, #6]
 800535c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005368:	d108      	bne.n	800537c <HAL_UART_Transmit+0x68>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d104      	bne.n	800537c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	e003      	b.n	8005384 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005380:	2300      	movs	r3, #0
 8005382:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005384:	e02f      	b.n	80053e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2200      	movs	r2, #0
 800538e:	2180      	movs	r1, #128	@ 0x80
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 fba6 	bl	8005ae2 <UART_WaitOnFlagUntilTimeout>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d004      	beq.n	80053a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2220      	movs	r2, #32
 80053a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e03b      	b.n	800541e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10b      	bne.n	80053c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	3302      	adds	r3, #2
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	e007      	b.n	80053d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	781a      	ldrb	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	3301      	adds	r3, #1
 80053d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1c9      	bne.n	8005386 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2200      	movs	r2, #0
 80053fa:	2140      	movs	r1, #64	@ 0x40
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 fb70 	bl	8005ae2 <UART_WaitOnFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d004      	beq.n	8005412 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2220      	movs	r2, #32
 800540c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e005      	b.n	800541e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2220      	movs	r2, #32
 8005416:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	e000      	b.n	800541e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800541c:	2302      	movs	r3, #2
  }
}
 800541e:	4618      	mov	r0, r3
 8005420:	3720      	adds	r7, #32
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	4ba6      	ldr	r3, [pc, #664]	@ (80056ec <UART_SetConfig+0x2c4>)
 8005454:	4013      	ands	r3, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	6979      	ldr	r1, [r7, #20]
 800545c:	430b      	orrs	r3, r1
 800545e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	430a      	orrs	r2, r1
 8005498:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a94      	ldr	r2, [pc, #592]	@ (80056f0 <UART_SetConfig+0x2c8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d120      	bne.n	80054e6 <UART_SetConfig+0xbe>
 80054a4:	4b93      	ldr	r3, [pc, #588]	@ (80056f4 <UART_SetConfig+0x2cc>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d816      	bhi.n	80054e0 <UART_SetConfig+0xb8>
 80054b2:	a201      	add	r2, pc, #4	@ (adr r2, 80054b8 <UART_SetConfig+0x90>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	080054c9 	.word	0x080054c9
 80054bc:	080054d5 	.word	0x080054d5
 80054c0:	080054cf 	.word	0x080054cf
 80054c4:	080054db 	.word	0x080054db
 80054c8:	2301      	movs	r3, #1
 80054ca:	77fb      	strb	r3, [r7, #31]
 80054cc:	e150      	b.n	8005770 <UART_SetConfig+0x348>
 80054ce:	2302      	movs	r3, #2
 80054d0:	77fb      	strb	r3, [r7, #31]
 80054d2:	e14d      	b.n	8005770 <UART_SetConfig+0x348>
 80054d4:	2304      	movs	r3, #4
 80054d6:	77fb      	strb	r3, [r7, #31]
 80054d8:	e14a      	b.n	8005770 <UART_SetConfig+0x348>
 80054da:	2308      	movs	r3, #8
 80054dc:	77fb      	strb	r3, [r7, #31]
 80054de:	e147      	b.n	8005770 <UART_SetConfig+0x348>
 80054e0:	2310      	movs	r3, #16
 80054e2:	77fb      	strb	r3, [r7, #31]
 80054e4:	e144      	b.n	8005770 <UART_SetConfig+0x348>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a83      	ldr	r2, [pc, #524]	@ (80056f8 <UART_SetConfig+0x2d0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d132      	bne.n	8005556 <UART_SetConfig+0x12e>
 80054f0:	4b80      	ldr	r3, [pc, #512]	@ (80056f4 <UART_SetConfig+0x2cc>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f6:	f003 030c 	and.w	r3, r3, #12
 80054fa:	2b0c      	cmp	r3, #12
 80054fc:	d828      	bhi.n	8005550 <UART_SetConfig+0x128>
 80054fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005504 <UART_SetConfig+0xdc>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	08005539 	.word	0x08005539
 8005508:	08005551 	.word	0x08005551
 800550c:	08005551 	.word	0x08005551
 8005510:	08005551 	.word	0x08005551
 8005514:	08005545 	.word	0x08005545
 8005518:	08005551 	.word	0x08005551
 800551c:	08005551 	.word	0x08005551
 8005520:	08005551 	.word	0x08005551
 8005524:	0800553f 	.word	0x0800553f
 8005528:	08005551 	.word	0x08005551
 800552c:	08005551 	.word	0x08005551
 8005530:	08005551 	.word	0x08005551
 8005534:	0800554b 	.word	0x0800554b
 8005538:	2300      	movs	r3, #0
 800553a:	77fb      	strb	r3, [r7, #31]
 800553c:	e118      	b.n	8005770 <UART_SetConfig+0x348>
 800553e:	2302      	movs	r3, #2
 8005540:	77fb      	strb	r3, [r7, #31]
 8005542:	e115      	b.n	8005770 <UART_SetConfig+0x348>
 8005544:	2304      	movs	r3, #4
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	e112      	b.n	8005770 <UART_SetConfig+0x348>
 800554a:	2308      	movs	r3, #8
 800554c:	77fb      	strb	r3, [r7, #31]
 800554e:	e10f      	b.n	8005770 <UART_SetConfig+0x348>
 8005550:	2310      	movs	r3, #16
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e10c      	b.n	8005770 <UART_SetConfig+0x348>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a68      	ldr	r2, [pc, #416]	@ (80056fc <UART_SetConfig+0x2d4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d120      	bne.n	80055a2 <UART_SetConfig+0x17a>
 8005560:	4b64      	ldr	r3, [pc, #400]	@ (80056f4 <UART_SetConfig+0x2cc>)
 8005562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005566:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800556a:	2b30      	cmp	r3, #48	@ 0x30
 800556c:	d013      	beq.n	8005596 <UART_SetConfig+0x16e>
 800556e:	2b30      	cmp	r3, #48	@ 0x30
 8005570:	d814      	bhi.n	800559c <UART_SetConfig+0x174>
 8005572:	2b20      	cmp	r3, #32
 8005574:	d009      	beq.n	800558a <UART_SetConfig+0x162>
 8005576:	2b20      	cmp	r3, #32
 8005578:	d810      	bhi.n	800559c <UART_SetConfig+0x174>
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <UART_SetConfig+0x15c>
 800557e:	2b10      	cmp	r3, #16
 8005580:	d006      	beq.n	8005590 <UART_SetConfig+0x168>
 8005582:	e00b      	b.n	800559c <UART_SetConfig+0x174>
 8005584:	2300      	movs	r3, #0
 8005586:	77fb      	strb	r3, [r7, #31]
 8005588:	e0f2      	b.n	8005770 <UART_SetConfig+0x348>
 800558a:	2302      	movs	r3, #2
 800558c:	77fb      	strb	r3, [r7, #31]
 800558e:	e0ef      	b.n	8005770 <UART_SetConfig+0x348>
 8005590:	2304      	movs	r3, #4
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e0ec      	b.n	8005770 <UART_SetConfig+0x348>
 8005596:	2308      	movs	r3, #8
 8005598:	77fb      	strb	r3, [r7, #31]
 800559a:	e0e9      	b.n	8005770 <UART_SetConfig+0x348>
 800559c:	2310      	movs	r3, #16
 800559e:	77fb      	strb	r3, [r7, #31]
 80055a0:	e0e6      	b.n	8005770 <UART_SetConfig+0x348>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a56      	ldr	r2, [pc, #344]	@ (8005700 <UART_SetConfig+0x2d8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d120      	bne.n	80055ee <UART_SetConfig+0x1c6>
 80055ac:	4b51      	ldr	r3, [pc, #324]	@ (80056f4 <UART_SetConfig+0x2cc>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80055b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80055b8:	d013      	beq.n	80055e2 <UART_SetConfig+0x1ba>
 80055ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80055bc:	d814      	bhi.n	80055e8 <UART_SetConfig+0x1c0>
 80055be:	2b80      	cmp	r3, #128	@ 0x80
 80055c0:	d009      	beq.n	80055d6 <UART_SetConfig+0x1ae>
 80055c2:	2b80      	cmp	r3, #128	@ 0x80
 80055c4:	d810      	bhi.n	80055e8 <UART_SetConfig+0x1c0>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <UART_SetConfig+0x1a8>
 80055ca:	2b40      	cmp	r3, #64	@ 0x40
 80055cc:	d006      	beq.n	80055dc <UART_SetConfig+0x1b4>
 80055ce:	e00b      	b.n	80055e8 <UART_SetConfig+0x1c0>
 80055d0:	2300      	movs	r3, #0
 80055d2:	77fb      	strb	r3, [r7, #31]
 80055d4:	e0cc      	b.n	8005770 <UART_SetConfig+0x348>
 80055d6:	2302      	movs	r3, #2
 80055d8:	77fb      	strb	r3, [r7, #31]
 80055da:	e0c9      	b.n	8005770 <UART_SetConfig+0x348>
 80055dc:	2304      	movs	r3, #4
 80055de:	77fb      	strb	r3, [r7, #31]
 80055e0:	e0c6      	b.n	8005770 <UART_SetConfig+0x348>
 80055e2:	2308      	movs	r3, #8
 80055e4:	77fb      	strb	r3, [r7, #31]
 80055e6:	e0c3      	b.n	8005770 <UART_SetConfig+0x348>
 80055e8:	2310      	movs	r3, #16
 80055ea:	77fb      	strb	r3, [r7, #31]
 80055ec:	e0c0      	b.n	8005770 <UART_SetConfig+0x348>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a44      	ldr	r2, [pc, #272]	@ (8005704 <UART_SetConfig+0x2dc>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d125      	bne.n	8005644 <UART_SetConfig+0x21c>
 80055f8:	4b3e      	ldr	r3, [pc, #248]	@ (80056f4 <UART_SetConfig+0x2cc>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005606:	d017      	beq.n	8005638 <UART_SetConfig+0x210>
 8005608:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800560c:	d817      	bhi.n	800563e <UART_SetConfig+0x216>
 800560e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005612:	d00b      	beq.n	800562c <UART_SetConfig+0x204>
 8005614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005618:	d811      	bhi.n	800563e <UART_SetConfig+0x216>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <UART_SetConfig+0x1fe>
 800561e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005622:	d006      	beq.n	8005632 <UART_SetConfig+0x20a>
 8005624:	e00b      	b.n	800563e <UART_SetConfig+0x216>
 8005626:	2300      	movs	r3, #0
 8005628:	77fb      	strb	r3, [r7, #31]
 800562a:	e0a1      	b.n	8005770 <UART_SetConfig+0x348>
 800562c:	2302      	movs	r3, #2
 800562e:	77fb      	strb	r3, [r7, #31]
 8005630:	e09e      	b.n	8005770 <UART_SetConfig+0x348>
 8005632:	2304      	movs	r3, #4
 8005634:	77fb      	strb	r3, [r7, #31]
 8005636:	e09b      	b.n	8005770 <UART_SetConfig+0x348>
 8005638:	2308      	movs	r3, #8
 800563a:	77fb      	strb	r3, [r7, #31]
 800563c:	e098      	b.n	8005770 <UART_SetConfig+0x348>
 800563e:	2310      	movs	r3, #16
 8005640:	77fb      	strb	r3, [r7, #31]
 8005642:	e095      	b.n	8005770 <UART_SetConfig+0x348>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a2f      	ldr	r2, [pc, #188]	@ (8005708 <UART_SetConfig+0x2e0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d125      	bne.n	800569a <UART_SetConfig+0x272>
 800564e:	4b29      	ldr	r3, [pc, #164]	@ (80056f4 <UART_SetConfig+0x2cc>)
 8005650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005654:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005658:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800565c:	d017      	beq.n	800568e <UART_SetConfig+0x266>
 800565e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005662:	d817      	bhi.n	8005694 <UART_SetConfig+0x26c>
 8005664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005668:	d00b      	beq.n	8005682 <UART_SetConfig+0x25a>
 800566a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800566e:	d811      	bhi.n	8005694 <UART_SetConfig+0x26c>
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <UART_SetConfig+0x254>
 8005674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005678:	d006      	beq.n	8005688 <UART_SetConfig+0x260>
 800567a:	e00b      	b.n	8005694 <UART_SetConfig+0x26c>
 800567c:	2301      	movs	r3, #1
 800567e:	77fb      	strb	r3, [r7, #31]
 8005680:	e076      	b.n	8005770 <UART_SetConfig+0x348>
 8005682:	2302      	movs	r3, #2
 8005684:	77fb      	strb	r3, [r7, #31]
 8005686:	e073      	b.n	8005770 <UART_SetConfig+0x348>
 8005688:	2304      	movs	r3, #4
 800568a:	77fb      	strb	r3, [r7, #31]
 800568c:	e070      	b.n	8005770 <UART_SetConfig+0x348>
 800568e:	2308      	movs	r3, #8
 8005690:	77fb      	strb	r3, [r7, #31]
 8005692:	e06d      	b.n	8005770 <UART_SetConfig+0x348>
 8005694:	2310      	movs	r3, #16
 8005696:	77fb      	strb	r3, [r7, #31]
 8005698:	e06a      	b.n	8005770 <UART_SetConfig+0x348>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a1b      	ldr	r2, [pc, #108]	@ (800570c <UART_SetConfig+0x2e4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d138      	bne.n	8005716 <UART_SetConfig+0x2ee>
 80056a4:	4b13      	ldr	r3, [pc, #76]	@ (80056f4 <UART_SetConfig+0x2cc>)
 80056a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80056ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056b2:	d017      	beq.n	80056e4 <UART_SetConfig+0x2bc>
 80056b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056b8:	d82a      	bhi.n	8005710 <UART_SetConfig+0x2e8>
 80056ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056be:	d00b      	beq.n	80056d8 <UART_SetConfig+0x2b0>
 80056c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056c4:	d824      	bhi.n	8005710 <UART_SetConfig+0x2e8>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <UART_SetConfig+0x2aa>
 80056ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ce:	d006      	beq.n	80056de <UART_SetConfig+0x2b6>
 80056d0:	e01e      	b.n	8005710 <UART_SetConfig+0x2e8>
 80056d2:	2300      	movs	r3, #0
 80056d4:	77fb      	strb	r3, [r7, #31]
 80056d6:	e04b      	b.n	8005770 <UART_SetConfig+0x348>
 80056d8:	2302      	movs	r3, #2
 80056da:	77fb      	strb	r3, [r7, #31]
 80056dc:	e048      	b.n	8005770 <UART_SetConfig+0x348>
 80056de:	2304      	movs	r3, #4
 80056e0:	77fb      	strb	r3, [r7, #31]
 80056e2:	e045      	b.n	8005770 <UART_SetConfig+0x348>
 80056e4:	2308      	movs	r3, #8
 80056e6:	77fb      	strb	r3, [r7, #31]
 80056e8:	e042      	b.n	8005770 <UART_SetConfig+0x348>
 80056ea:	bf00      	nop
 80056ec:	efff69f3 	.word	0xefff69f3
 80056f0:	40011000 	.word	0x40011000
 80056f4:	40023800 	.word	0x40023800
 80056f8:	40004400 	.word	0x40004400
 80056fc:	40004800 	.word	0x40004800
 8005700:	40004c00 	.word	0x40004c00
 8005704:	40005000 	.word	0x40005000
 8005708:	40011400 	.word	0x40011400
 800570c:	40007800 	.word	0x40007800
 8005710:	2310      	movs	r3, #16
 8005712:	77fb      	strb	r3, [r7, #31]
 8005714:	e02c      	b.n	8005770 <UART_SetConfig+0x348>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a72      	ldr	r2, [pc, #456]	@ (80058e4 <UART_SetConfig+0x4bc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d125      	bne.n	800576c <UART_SetConfig+0x344>
 8005720:	4b71      	ldr	r3, [pc, #452]	@ (80058e8 <UART_SetConfig+0x4c0>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005726:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800572a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800572e:	d017      	beq.n	8005760 <UART_SetConfig+0x338>
 8005730:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005734:	d817      	bhi.n	8005766 <UART_SetConfig+0x33e>
 8005736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800573a:	d00b      	beq.n	8005754 <UART_SetConfig+0x32c>
 800573c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005740:	d811      	bhi.n	8005766 <UART_SetConfig+0x33e>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <UART_SetConfig+0x326>
 8005746:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800574a:	d006      	beq.n	800575a <UART_SetConfig+0x332>
 800574c:	e00b      	b.n	8005766 <UART_SetConfig+0x33e>
 800574e:	2300      	movs	r3, #0
 8005750:	77fb      	strb	r3, [r7, #31]
 8005752:	e00d      	b.n	8005770 <UART_SetConfig+0x348>
 8005754:	2302      	movs	r3, #2
 8005756:	77fb      	strb	r3, [r7, #31]
 8005758:	e00a      	b.n	8005770 <UART_SetConfig+0x348>
 800575a:	2304      	movs	r3, #4
 800575c:	77fb      	strb	r3, [r7, #31]
 800575e:	e007      	b.n	8005770 <UART_SetConfig+0x348>
 8005760:	2308      	movs	r3, #8
 8005762:	77fb      	strb	r3, [r7, #31]
 8005764:	e004      	b.n	8005770 <UART_SetConfig+0x348>
 8005766:	2310      	movs	r3, #16
 8005768:	77fb      	strb	r3, [r7, #31]
 800576a:	e001      	b.n	8005770 <UART_SetConfig+0x348>
 800576c:	2310      	movs	r3, #16
 800576e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005778:	d15b      	bne.n	8005832 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800577a:	7ffb      	ldrb	r3, [r7, #31]
 800577c:	2b08      	cmp	r3, #8
 800577e:	d828      	bhi.n	80057d2 <UART_SetConfig+0x3aa>
 8005780:	a201      	add	r2, pc, #4	@ (adr r2, 8005788 <UART_SetConfig+0x360>)
 8005782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005786:	bf00      	nop
 8005788:	080057ad 	.word	0x080057ad
 800578c:	080057b5 	.word	0x080057b5
 8005790:	080057bd 	.word	0x080057bd
 8005794:	080057d3 	.word	0x080057d3
 8005798:	080057c3 	.word	0x080057c3
 800579c:	080057d3 	.word	0x080057d3
 80057a0:	080057d3 	.word	0x080057d3
 80057a4:	080057d3 	.word	0x080057d3
 80057a8:	080057cb 	.word	0x080057cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057ac:	f7fe f8a2 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 80057b0:	61b8      	str	r0, [r7, #24]
        break;
 80057b2:	e013      	b.n	80057dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057b4:	f7fe f8b2 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 80057b8:	61b8      	str	r0, [r7, #24]
        break;
 80057ba:	e00f      	b.n	80057dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057bc:	4b4b      	ldr	r3, [pc, #300]	@ (80058ec <UART_SetConfig+0x4c4>)
 80057be:	61bb      	str	r3, [r7, #24]
        break;
 80057c0:	e00c      	b.n	80057dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057c2:	f7fd ffc5 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 80057c6:	61b8      	str	r0, [r7, #24]
        break;
 80057c8:	e008      	b.n	80057dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ce:	61bb      	str	r3, [r7, #24]
        break;
 80057d0:	e004      	b.n	80057dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	77bb      	strb	r3, [r7, #30]
        break;
 80057da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d074      	beq.n	80058cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	005a      	lsls	r2, r3, #1
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	085b      	lsrs	r3, r3, #1
 80057ec:	441a      	add	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b0f      	cmp	r3, #15
 80057fc:	d916      	bls.n	800582c <UART_SetConfig+0x404>
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005804:	d212      	bcs.n	800582c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	b29b      	uxth	r3, r3
 800580a:	f023 030f 	bic.w	r3, r3, #15
 800580e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	b29b      	uxth	r3, r3
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	b29a      	uxth	r2, r3
 800581c:	89fb      	ldrh	r3, [r7, #14]
 800581e:	4313      	orrs	r3, r2
 8005820:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	89fa      	ldrh	r2, [r7, #14]
 8005828:	60da      	str	r2, [r3, #12]
 800582a:	e04f      	b.n	80058cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	77bb      	strb	r3, [r7, #30]
 8005830:	e04c      	b.n	80058cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005832:	7ffb      	ldrb	r3, [r7, #31]
 8005834:	2b08      	cmp	r3, #8
 8005836:	d828      	bhi.n	800588a <UART_SetConfig+0x462>
 8005838:	a201      	add	r2, pc, #4	@ (adr r2, 8005840 <UART_SetConfig+0x418>)
 800583a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583e:	bf00      	nop
 8005840:	08005865 	.word	0x08005865
 8005844:	0800586d 	.word	0x0800586d
 8005848:	08005875 	.word	0x08005875
 800584c:	0800588b 	.word	0x0800588b
 8005850:	0800587b 	.word	0x0800587b
 8005854:	0800588b 	.word	0x0800588b
 8005858:	0800588b 	.word	0x0800588b
 800585c:	0800588b 	.word	0x0800588b
 8005860:	08005883 	.word	0x08005883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005864:	f7fe f846 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8005868:	61b8      	str	r0, [r7, #24]
        break;
 800586a:	e013      	b.n	8005894 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800586c:	f7fe f856 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 8005870:	61b8      	str	r0, [r7, #24]
        break;
 8005872:	e00f      	b.n	8005894 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005874:	4b1d      	ldr	r3, [pc, #116]	@ (80058ec <UART_SetConfig+0x4c4>)
 8005876:	61bb      	str	r3, [r7, #24]
        break;
 8005878:	e00c      	b.n	8005894 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800587a:	f7fd ff69 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 800587e:	61b8      	str	r0, [r7, #24]
        break;
 8005880:	e008      	b.n	8005894 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005886:	61bb      	str	r3, [r7, #24]
        break;
 8005888:	e004      	b.n	8005894 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	77bb      	strb	r3, [r7, #30]
        break;
 8005892:	bf00      	nop
    }

    if (pclk != 0U)
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d018      	beq.n	80058cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	085a      	lsrs	r2, r3, #1
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	441a      	add	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b0f      	cmp	r3, #15
 80058b2:	d909      	bls.n	80058c8 <UART_SetConfig+0x4a0>
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058ba:	d205      	bcs.n	80058c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	b29a      	uxth	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60da      	str	r2, [r3, #12]
 80058c6:	e001      	b.n	80058cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80058d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3720      	adds	r7, #32
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40007c00 	.word	0x40007c00
 80058e8:	40023800 	.word	0x40023800
 80058ec:	00f42400 	.word	0x00f42400

080058f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005984:	f003 0310 	and.w	r3, r3, #16
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00a      	beq.n	80059a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d01a      	beq.n	8005a06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ee:	d10a      	bne.n	8005a06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]
  }
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08c      	sub	sp, #48	@ 0x30
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a44:	f7fc ff46 	bl	80028d4 <HAL_GetTick>
 8005a48:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d12e      	bne.n	8005ab6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	2200      	movs	r2, #0
 8005a62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f83b 	bl	8005ae2 <UART_WaitOnFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d021      	beq.n	8005ab6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a86:	623b      	str	r3, [r7, #32]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	69b9      	ldr	r1, [r7, #24]
 8005a96:	69fa      	ldr	r2, [r7, #28]
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e6      	bne.n	8005a72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e011      	b.n	8005ada <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3728      	adds	r7, #40	@ 0x28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	603b      	str	r3, [r7, #0]
 8005aee:	4613      	mov	r3, r2
 8005af0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af2:	e04f      	b.n	8005b94 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afa:	d04b      	beq.n	8005b94 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afc:	f7fc feea 	bl	80028d4 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d302      	bcc.n	8005b12 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e04e      	b.n	8005bb4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d037      	beq.n	8005b94 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b80      	cmp	r3, #128	@ 0x80
 8005b28:	d034      	beq.n	8005b94 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b40      	cmp	r3, #64	@ 0x40
 8005b2e:	d031      	beq.n	8005b94 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d110      	bne.n	8005b60 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2208      	movs	r2, #8
 8005b44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f838 	bl	8005bbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2208      	movs	r2, #8
 8005b50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e029      	b.n	8005bb4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b6e:	d111      	bne.n	8005b94 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b78:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f81e 	bl	8005bbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e00f      	b.n	8005bb4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69da      	ldr	r2, [r3, #28]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	bf0c      	ite	eq
 8005ba4:	2301      	moveq	r3, #1
 8005ba6:	2300      	movne	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	461a      	mov	r2, r3
 8005bac:	79fb      	ldrb	r3, [r7, #7]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d0a0      	beq.n	8005af4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b095      	sub	sp, #84	@ 0x54
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005be4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005be8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e6      	bne.n	8005bc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3308      	adds	r3, #8
 8005c14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e5      	bne.n	8005bf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d118      	bne.n	8005c64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	e853 3f00 	ldrex	r3, [r3]
 8005c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f023 0310 	bic.w	r3, r3, #16
 8005c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c50:	61bb      	str	r3, [r7, #24]
 8005c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6979      	ldr	r1, [r7, #20]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	e841 2300 	strex	r3, r2, [r1]
 8005c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e6      	bne.n	8005c32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c78:	bf00      	nop
 8005c7a:	3754      	adds	r7, #84	@ 0x54
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <__cvt>:
 8005c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c88:	ec57 6b10 	vmov	r6, r7, d0
 8005c8c:	2f00      	cmp	r7, #0
 8005c8e:	460c      	mov	r4, r1
 8005c90:	4619      	mov	r1, r3
 8005c92:	463b      	mov	r3, r7
 8005c94:	bfbb      	ittet	lt
 8005c96:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005c9a:	461f      	movlt	r7, r3
 8005c9c:	2300      	movge	r3, #0
 8005c9e:	232d      	movlt	r3, #45	@ 0x2d
 8005ca0:	700b      	strb	r3, [r1, #0]
 8005ca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ca4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005ca8:	4691      	mov	r9, r2
 8005caa:	f023 0820 	bic.w	r8, r3, #32
 8005cae:	bfbc      	itt	lt
 8005cb0:	4632      	movlt	r2, r6
 8005cb2:	4616      	movlt	r6, r2
 8005cb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005cb8:	d005      	beq.n	8005cc6 <__cvt+0x42>
 8005cba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005cbe:	d100      	bne.n	8005cc2 <__cvt+0x3e>
 8005cc0:	3401      	adds	r4, #1
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	e000      	b.n	8005cc8 <__cvt+0x44>
 8005cc6:	2103      	movs	r1, #3
 8005cc8:	ab03      	add	r3, sp, #12
 8005cca:	9301      	str	r3, [sp, #4]
 8005ccc:	ab02      	add	r3, sp, #8
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	ec47 6b10 	vmov	d0, r6, r7
 8005cd4:	4653      	mov	r3, sl
 8005cd6:	4622      	mov	r2, r4
 8005cd8:	f000 ff4a 	bl	8006b70 <_dtoa_r>
 8005cdc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	d119      	bne.n	8005d18 <__cvt+0x94>
 8005ce4:	f019 0f01 	tst.w	r9, #1
 8005ce8:	d00e      	beq.n	8005d08 <__cvt+0x84>
 8005cea:	eb00 0904 	add.w	r9, r0, r4
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	4639      	mov	r1, r7
 8005cf6:	f7fa ff07 	bl	8000b08 <__aeabi_dcmpeq>
 8005cfa:	b108      	cbz	r0, 8005d00 <__cvt+0x7c>
 8005cfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d00:	2230      	movs	r2, #48	@ 0x30
 8005d02:	9b03      	ldr	r3, [sp, #12]
 8005d04:	454b      	cmp	r3, r9
 8005d06:	d31e      	bcc.n	8005d46 <__cvt+0xc2>
 8005d08:	9b03      	ldr	r3, [sp, #12]
 8005d0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d0c:	1b5b      	subs	r3, r3, r5
 8005d0e:	4628      	mov	r0, r5
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	b004      	add	sp, #16
 8005d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d1c:	eb00 0904 	add.w	r9, r0, r4
 8005d20:	d1e5      	bne.n	8005cee <__cvt+0x6a>
 8005d22:	7803      	ldrb	r3, [r0, #0]
 8005d24:	2b30      	cmp	r3, #48	@ 0x30
 8005d26:	d10a      	bne.n	8005d3e <__cvt+0xba>
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	4639      	mov	r1, r7
 8005d30:	f7fa feea 	bl	8000b08 <__aeabi_dcmpeq>
 8005d34:	b918      	cbnz	r0, 8005d3e <__cvt+0xba>
 8005d36:	f1c4 0401 	rsb	r4, r4, #1
 8005d3a:	f8ca 4000 	str.w	r4, [sl]
 8005d3e:	f8da 3000 	ldr.w	r3, [sl]
 8005d42:	4499      	add	r9, r3
 8005d44:	e7d3      	b.n	8005cee <__cvt+0x6a>
 8005d46:	1c59      	adds	r1, r3, #1
 8005d48:	9103      	str	r1, [sp, #12]
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e7d9      	b.n	8005d02 <__cvt+0x7e>

08005d4e <__exponent>:
 8005d4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d50:	2900      	cmp	r1, #0
 8005d52:	bfba      	itte	lt
 8005d54:	4249      	neglt	r1, r1
 8005d56:	232d      	movlt	r3, #45	@ 0x2d
 8005d58:	232b      	movge	r3, #43	@ 0x2b
 8005d5a:	2909      	cmp	r1, #9
 8005d5c:	7002      	strb	r2, [r0, #0]
 8005d5e:	7043      	strb	r3, [r0, #1]
 8005d60:	dd29      	ble.n	8005db6 <__exponent+0x68>
 8005d62:	f10d 0307 	add.w	r3, sp, #7
 8005d66:	461d      	mov	r5, r3
 8005d68:	270a      	movs	r7, #10
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005d70:	fb07 1416 	mls	r4, r7, r6, r1
 8005d74:	3430      	adds	r4, #48	@ 0x30
 8005d76:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	2c63      	cmp	r4, #99	@ 0x63
 8005d7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d82:	4631      	mov	r1, r6
 8005d84:	dcf1      	bgt.n	8005d6a <__exponent+0x1c>
 8005d86:	3130      	adds	r1, #48	@ 0x30
 8005d88:	1e94      	subs	r4, r2, #2
 8005d8a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d8e:	1c41      	adds	r1, r0, #1
 8005d90:	4623      	mov	r3, r4
 8005d92:	42ab      	cmp	r3, r5
 8005d94:	d30a      	bcc.n	8005dac <__exponent+0x5e>
 8005d96:	f10d 0309 	add.w	r3, sp, #9
 8005d9a:	1a9b      	subs	r3, r3, r2
 8005d9c:	42ac      	cmp	r4, r5
 8005d9e:	bf88      	it	hi
 8005da0:	2300      	movhi	r3, #0
 8005da2:	3302      	adds	r3, #2
 8005da4:	4403      	add	r3, r0
 8005da6:	1a18      	subs	r0, r3, r0
 8005da8:	b003      	add	sp, #12
 8005daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dac:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005db0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005db4:	e7ed      	b.n	8005d92 <__exponent+0x44>
 8005db6:	2330      	movs	r3, #48	@ 0x30
 8005db8:	3130      	adds	r1, #48	@ 0x30
 8005dba:	7083      	strb	r3, [r0, #2]
 8005dbc:	70c1      	strb	r1, [r0, #3]
 8005dbe:	1d03      	adds	r3, r0, #4
 8005dc0:	e7f1      	b.n	8005da6 <__exponent+0x58>
	...

08005dc4 <_printf_float>:
 8005dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc8:	b08d      	sub	sp, #52	@ 0x34
 8005dca:	460c      	mov	r4, r1
 8005dcc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005dd0:	4616      	mov	r6, r2
 8005dd2:	461f      	mov	r7, r3
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	f000 fdbd 	bl	8006954 <_localeconv_r>
 8005dda:	6803      	ldr	r3, [r0, #0]
 8005ddc:	9304      	str	r3, [sp, #16]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fa fa66 	bl	80002b0 <strlen>
 8005de4:	2300      	movs	r3, #0
 8005de6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005de8:	f8d8 3000 	ldr.w	r3, [r8]
 8005dec:	9005      	str	r0, [sp, #20]
 8005dee:	3307      	adds	r3, #7
 8005df0:	f023 0307 	bic.w	r3, r3, #7
 8005df4:	f103 0208 	add.w	r2, r3, #8
 8005df8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005dfc:	f8d4 b000 	ldr.w	fp, [r4]
 8005e00:	f8c8 2000 	str.w	r2, [r8]
 8005e04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005e0c:	9307      	str	r3, [sp, #28]
 8005e0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005e16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e1a:	4b9c      	ldr	r3, [pc, #624]	@ (800608c <_printf_float+0x2c8>)
 8005e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e20:	f7fa fea4 	bl	8000b6c <__aeabi_dcmpun>
 8005e24:	bb70      	cbnz	r0, 8005e84 <_printf_float+0xc0>
 8005e26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e2a:	4b98      	ldr	r3, [pc, #608]	@ (800608c <_printf_float+0x2c8>)
 8005e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e30:	f7fa fe7e 	bl	8000b30 <__aeabi_dcmple>
 8005e34:	bb30      	cbnz	r0, 8005e84 <_printf_float+0xc0>
 8005e36:	2200      	movs	r2, #0
 8005e38:	2300      	movs	r3, #0
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	f7fa fe6d 	bl	8000b1c <__aeabi_dcmplt>
 8005e42:	b110      	cbz	r0, 8005e4a <_printf_float+0x86>
 8005e44:	232d      	movs	r3, #45	@ 0x2d
 8005e46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e4a:	4a91      	ldr	r2, [pc, #580]	@ (8006090 <_printf_float+0x2cc>)
 8005e4c:	4b91      	ldr	r3, [pc, #580]	@ (8006094 <_printf_float+0x2d0>)
 8005e4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005e52:	bf8c      	ite	hi
 8005e54:	4690      	movhi	r8, r2
 8005e56:	4698      	movls	r8, r3
 8005e58:	2303      	movs	r3, #3
 8005e5a:	6123      	str	r3, [r4, #16]
 8005e5c:	f02b 0304 	bic.w	r3, fp, #4
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	f04f 0900 	mov.w	r9, #0
 8005e66:	9700      	str	r7, [sp, #0]
 8005e68:	4633      	mov	r3, r6
 8005e6a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f000 f9d2 	bl	8006218 <_printf_common>
 8005e74:	3001      	adds	r0, #1
 8005e76:	f040 808d 	bne.w	8005f94 <_printf_float+0x1d0>
 8005e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7e:	b00d      	add	sp, #52	@ 0x34
 8005e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e84:	4642      	mov	r2, r8
 8005e86:	464b      	mov	r3, r9
 8005e88:	4640      	mov	r0, r8
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	f7fa fe6e 	bl	8000b6c <__aeabi_dcmpun>
 8005e90:	b140      	cbz	r0, 8005ea4 <_printf_float+0xe0>
 8005e92:	464b      	mov	r3, r9
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bfbc      	itt	lt
 8005e98:	232d      	movlt	r3, #45	@ 0x2d
 8005e9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005e9e:	4a7e      	ldr	r2, [pc, #504]	@ (8006098 <_printf_float+0x2d4>)
 8005ea0:	4b7e      	ldr	r3, [pc, #504]	@ (800609c <_printf_float+0x2d8>)
 8005ea2:	e7d4      	b.n	8005e4e <_printf_float+0x8a>
 8005ea4:	6863      	ldr	r3, [r4, #4]
 8005ea6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005eaa:	9206      	str	r2, [sp, #24]
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	d13b      	bne.n	8005f28 <_printf_float+0x164>
 8005eb0:	2306      	movs	r3, #6
 8005eb2:	6063      	str	r3, [r4, #4]
 8005eb4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005eb8:	2300      	movs	r3, #0
 8005eba:	6022      	str	r2, [r4, #0]
 8005ebc:	9303      	str	r3, [sp, #12]
 8005ebe:	ab0a      	add	r3, sp, #40	@ 0x28
 8005ec0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005ec4:	ab09      	add	r3, sp, #36	@ 0x24
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	6861      	ldr	r1, [r4, #4]
 8005eca:	ec49 8b10 	vmov	d0, r8, r9
 8005ece:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f7ff fed6 	bl	8005c84 <__cvt>
 8005ed8:	9b06      	ldr	r3, [sp, #24]
 8005eda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005edc:	2b47      	cmp	r3, #71	@ 0x47
 8005ede:	4680      	mov	r8, r0
 8005ee0:	d129      	bne.n	8005f36 <_printf_float+0x172>
 8005ee2:	1cc8      	adds	r0, r1, #3
 8005ee4:	db02      	blt.n	8005eec <_printf_float+0x128>
 8005ee6:	6863      	ldr	r3, [r4, #4]
 8005ee8:	4299      	cmp	r1, r3
 8005eea:	dd41      	ble.n	8005f70 <_printf_float+0x1ac>
 8005eec:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ef0:	fa5f fa8a 	uxtb.w	sl, sl
 8005ef4:	3901      	subs	r1, #1
 8005ef6:	4652      	mov	r2, sl
 8005ef8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005efc:	9109      	str	r1, [sp, #36]	@ 0x24
 8005efe:	f7ff ff26 	bl	8005d4e <__exponent>
 8005f02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f04:	1813      	adds	r3, r2, r0
 8005f06:	2a01      	cmp	r2, #1
 8005f08:	4681      	mov	r9, r0
 8005f0a:	6123      	str	r3, [r4, #16]
 8005f0c:	dc02      	bgt.n	8005f14 <_printf_float+0x150>
 8005f0e:	6822      	ldr	r2, [r4, #0]
 8005f10:	07d2      	lsls	r2, r2, #31
 8005f12:	d501      	bpl.n	8005f18 <_printf_float+0x154>
 8005f14:	3301      	adds	r3, #1
 8005f16:	6123      	str	r3, [r4, #16]
 8005f18:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0a2      	beq.n	8005e66 <_printf_float+0xa2>
 8005f20:	232d      	movs	r3, #45	@ 0x2d
 8005f22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f26:	e79e      	b.n	8005e66 <_printf_float+0xa2>
 8005f28:	9a06      	ldr	r2, [sp, #24]
 8005f2a:	2a47      	cmp	r2, #71	@ 0x47
 8005f2c:	d1c2      	bne.n	8005eb4 <_printf_float+0xf0>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1c0      	bne.n	8005eb4 <_printf_float+0xf0>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e7bd      	b.n	8005eb2 <_printf_float+0xee>
 8005f36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f3a:	d9db      	bls.n	8005ef4 <_printf_float+0x130>
 8005f3c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005f40:	d118      	bne.n	8005f74 <_printf_float+0x1b0>
 8005f42:	2900      	cmp	r1, #0
 8005f44:	6863      	ldr	r3, [r4, #4]
 8005f46:	dd0b      	ble.n	8005f60 <_printf_float+0x19c>
 8005f48:	6121      	str	r1, [r4, #16]
 8005f4a:	b913      	cbnz	r3, 8005f52 <_printf_float+0x18e>
 8005f4c:	6822      	ldr	r2, [r4, #0]
 8005f4e:	07d0      	lsls	r0, r2, #31
 8005f50:	d502      	bpl.n	8005f58 <_printf_float+0x194>
 8005f52:	3301      	adds	r3, #1
 8005f54:	440b      	add	r3, r1
 8005f56:	6123      	str	r3, [r4, #16]
 8005f58:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005f5a:	f04f 0900 	mov.w	r9, #0
 8005f5e:	e7db      	b.n	8005f18 <_printf_float+0x154>
 8005f60:	b913      	cbnz	r3, 8005f68 <_printf_float+0x1a4>
 8005f62:	6822      	ldr	r2, [r4, #0]
 8005f64:	07d2      	lsls	r2, r2, #31
 8005f66:	d501      	bpl.n	8005f6c <_printf_float+0x1a8>
 8005f68:	3302      	adds	r3, #2
 8005f6a:	e7f4      	b.n	8005f56 <_printf_float+0x192>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e7f2      	b.n	8005f56 <_printf_float+0x192>
 8005f70:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f76:	4299      	cmp	r1, r3
 8005f78:	db05      	blt.n	8005f86 <_printf_float+0x1c2>
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	6121      	str	r1, [r4, #16]
 8005f7e:	07d8      	lsls	r0, r3, #31
 8005f80:	d5ea      	bpl.n	8005f58 <_printf_float+0x194>
 8005f82:	1c4b      	adds	r3, r1, #1
 8005f84:	e7e7      	b.n	8005f56 <_printf_float+0x192>
 8005f86:	2900      	cmp	r1, #0
 8005f88:	bfd4      	ite	le
 8005f8a:	f1c1 0202 	rsble	r2, r1, #2
 8005f8e:	2201      	movgt	r2, #1
 8005f90:	4413      	add	r3, r2
 8005f92:	e7e0      	b.n	8005f56 <_printf_float+0x192>
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	055a      	lsls	r2, r3, #21
 8005f98:	d407      	bmi.n	8005faa <_printf_float+0x1e6>
 8005f9a:	6923      	ldr	r3, [r4, #16]
 8005f9c:	4642      	mov	r2, r8
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	47b8      	blx	r7
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d12b      	bne.n	8006000 <_printf_float+0x23c>
 8005fa8:	e767      	b.n	8005e7a <_printf_float+0xb6>
 8005faa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005fae:	f240 80dd 	bls.w	800616c <_printf_float+0x3a8>
 8005fb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f7fa fda5 	bl	8000b08 <__aeabi_dcmpeq>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d033      	beq.n	800602a <_printf_float+0x266>
 8005fc2:	4a37      	ldr	r2, [pc, #220]	@ (80060a0 <_printf_float+0x2dc>)
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4628      	mov	r0, r5
 8005fca:	47b8      	blx	r7
 8005fcc:	3001      	adds	r0, #1
 8005fce:	f43f af54 	beq.w	8005e7a <_printf_float+0xb6>
 8005fd2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005fd6:	4543      	cmp	r3, r8
 8005fd8:	db02      	blt.n	8005fe0 <_printf_float+0x21c>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	07d8      	lsls	r0, r3, #31
 8005fde:	d50f      	bpl.n	8006000 <_printf_float+0x23c>
 8005fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fe4:	4631      	mov	r1, r6
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	47b8      	blx	r7
 8005fea:	3001      	adds	r0, #1
 8005fec:	f43f af45 	beq.w	8005e7a <_printf_float+0xb6>
 8005ff0:	f04f 0900 	mov.w	r9, #0
 8005ff4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ff8:	f104 0a1a 	add.w	sl, r4, #26
 8005ffc:	45c8      	cmp	r8, r9
 8005ffe:	dc09      	bgt.n	8006014 <_printf_float+0x250>
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	079b      	lsls	r3, r3, #30
 8006004:	f100 8103 	bmi.w	800620e <_printf_float+0x44a>
 8006008:	68e0      	ldr	r0, [r4, #12]
 800600a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800600c:	4298      	cmp	r0, r3
 800600e:	bfb8      	it	lt
 8006010:	4618      	movlt	r0, r3
 8006012:	e734      	b.n	8005e7e <_printf_float+0xba>
 8006014:	2301      	movs	r3, #1
 8006016:	4652      	mov	r2, sl
 8006018:	4631      	mov	r1, r6
 800601a:	4628      	mov	r0, r5
 800601c:	47b8      	blx	r7
 800601e:	3001      	adds	r0, #1
 8006020:	f43f af2b 	beq.w	8005e7a <_printf_float+0xb6>
 8006024:	f109 0901 	add.w	r9, r9, #1
 8006028:	e7e8      	b.n	8005ffc <_printf_float+0x238>
 800602a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800602c:	2b00      	cmp	r3, #0
 800602e:	dc39      	bgt.n	80060a4 <_printf_float+0x2e0>
 8006030:	4a1b      	ldr	r2, [pc, #108]	@ (80060a0 <_printf_float+0x2dc>)
 8006032:	2301      	movs	r3, #1
 8006034:	4631      	mov	r1, r6
 8006036:	4628      	mov	r0, r5
 8006038:	47b8      	blx	r7
 800603a:	3001      	adds	r0, #1
 800603c:	f43f af1d 	beq.w	8005e7a <_printf_float+0xb6>
 8006040:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006044:	ea59 0303 	orrs.w	r3, r9, r3
 8006048:	d102      	bne.n	8006050 <_printf_float+0x28c>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	07d9      	lsls	r1, r3, #31
 800604e:	d5d7      	bpl.n	8006000 <_printf_float+0x23c>
 8006050:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006054:	4631      	mov	r1, r6
 8006056:	4628      	mov	r0, r5
 8006058:	47b8      	blx	r7
 800605a:	3001      	adds	r0, #1
 800605c:	f43f af0d 	beq.w	8005e7a <_printf_float+0xb6>
 8006060:	f04f 0a00 	mov.w	sl, #0
 8006064:	f104 0b1a 	add.w	fp, r4, #26
 8006068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800606a:	425b      	negs	r3, r3
 800606c:	4553      	cmp	r3, sl
 800606e:	dc01      	bgt.n	8006074 <_printf_float+0x2b0>
 8006070:	464b      	mov	r3, r9
 8006072:	e793      	b.n	8005f9c <_printf_float+0x1d8>
 8006074:	2301      	movs	r3, #1
 8006076:	465a      	mov	r2, fp
 8006078:	4631      	mov	r1, r6
 800607a:	4628      	mov	r0, r5
 800607c:	47b8      	blx	r7
 800607e:	3001      	adds	r0, #1
 8006080:	f43f aefb 	beq.w	8005e7a <_printf_float+0xb6>
 8006084:	f10a 0a01 	add.w	sl, sl, #1
 8006088:	e7ee      	b.n	8006068 <_printf_float+0x2a4>
 800608a:	bf00      	nop
 800608c:	7fefffff 	.word	0x7fefffff
 8006090:	080087bc 	.word	0x080087bc
 8006094:	080087b8 	.word	0x080087b8
 8006098:	080087c4 	.word	0x080087c4
 800609c:	080087c0 	.word	0x080087c0
 80060a0:	080087c8 	.word	0x080087c8
 80060a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80060aa:	4553      	cmp	r3, sl
 80060ac:	bfa8      	it	ge
 80060ae:	4653      	movge	r3, sl
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	4699      	mov	r9, r3
 80060b4:	dc36      	bgt.n	8006124 <_printf_float+0x360>
 80060b6:	f04f 0b00 	mov.w	fp, #0
 80060ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060be:	f104 021a 	add.w	r2, r4, #26
 80060c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060c4:	9306      	str	r3, [sp, #24]
 80060c6:	eba3 0309 	sub.w	r3, r3, r9
 80060ca:	455b      	cmp	r3, fp
 80060cc:	dc31      	bgt.n	8006132 <_printf_float+0x36e>
 80060ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060d0:	459a      	cmp	sl, r3
 80060d2:	dc3a      	bgt.n	800614a <_printf_float+0x386>
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	07da      	lsls	r2, r3, #31
 80060d8:	d437      	bmi.n	800614a <_printf_float+0x386>
 80060da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060dc:	ebaa 0903 	sub.w	r9, sl, r3
 80060e0:	9b06      	ldr	r3, [sp, #24]
 80060e2:	ebaa 0303 	sub.w	r3, sl, r3
 80060e6:	4599      	cmp	r9, r3
 80060e8:	bfa8      	it	ge
 80060ea:	4699      	movge	r9, r3
 80060ec:	f1b9 0f00 	cmp.w	r9, #0
 80060f0:	dc33      	bgt.n	800615a <_printf_float+0x396>
 80060f2:	f04f 0800 	mov.w	r8, #0
 80060f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060fa:	f104 0b1a 	add.w	fp, r4, #26
 80060fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006100:	ebaa 0303 	sub.w	r3, sl, r3
 8006104:	eba3 0309 	sub.w	r3, r3, r9
 8006108:	4543      	cmp	r3, r8
 800610a:	f77f af79 	ble.w	8006000 <_printf_float+0x23c>
 800610e:	2301      	movs	r3, #1
 8006110:	465a      	mov	r2, fp
 8006112:	4631      	mov	r1, r6
 8006114:	4628      	mov	r0, r5
 8006116:	47b8      	blx	r7
 8006118:	3001      	adds	r0, #1
 800611a:	f43f aeae 	beq.w	8005e7a <_printf_float+0xb6>
 800611e:	f108 0801 	add.w	r8, r8, #1
 8006122:	e7ec      	b.n	80060fe <_printf_float+0x33a>
 8006124:	4642      	mov	r2, r8
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	d1c2      	bne.n	80060b6 <_printf_float+0x2f2>
 8006130:	e6a3      	b.n	8005e7a <_printf_float+0xb6>
 8006132:	2301      	movs	r3, #1
 8006134:	4631      	mov	r1, r6
 8006136:	4628      	mov	r0, r5
 8006138:	9206      	str	r2, [sp, #24]
 800613a:	47b8      	blx	r7
 800613c:	3001      	adds	r0, #1
 800613e:	f43f ae9c 	beq.w	8005e7a <_printf_float+0xb6>
 8006142:	9a06      	ldr	r2, [sp, #24]
 8006144:	f10b 0b01 	add.w	fp, fp, #1
 8006148:	e7bb      	b.n	80060c2 <_printf_float+0x2fe>
 800614a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800614e:	4631      	mov	r1, r6
 8006150:	4628      	mov	r0, r5
 8006152:	47b8      	blx	r7
 8006154:	3001      	adds	r0, #1
 8006156:	d1c0      	bne.n	80060da <_printf_float+0x316>
 8006158:	e68f      	b.n	8005e7a <_printf_float+0xb6>
 800615a:	9a06      	ldr	r2, [sp, #24]
 800615c:	464b      	mov	r3, r9
 800615e:	4442      	add	r2, r8
 8006160:	4631      	mov	r1, r6
 8006162:	4628      	mov	r0, r5
 8006164:	47b8      	blx	r7
 8006166:	3001      	adds	r0, #1
 8006168:	d1c3      	bne.n	80060f2 <_printf_float+0x32e>
 800616a:	e686      	b.n	8005e7a <_printf_float+0xb6>
 800616c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006170:	f1ba 0f01 	cmp.w	sl, #1
 8006174:	dc01      	bgt.n	800617a <_printf_float+0x3b6>
 8006176:	07db      	lsls	r3, r3, #31
 8006178:	d536      	bpl.n	80061e8 <_printf_float+0x424>
 800617a:	2301      	movs	r3, #1
 800617c:	4642      	mov	r2, r8
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	f43f ae78 	beq.w	8005e7a <_printf_float+0xb6>
 800618a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800618e:	4631      	mov	r1, r6
 8006190:	4628      	mov	r0, r5
 8006192:	47b8      	blx	r7
 8006194:	3001      	adds	r0, #1
 8006196:	f43f ae70 	beq.w	8005e7a <_printf_float+0xb6>
 800619a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800619e:	2200      	movs	r2, #0
 80061a0:	2300      	movs	r3, #0
 80061a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061a6:	f7fa fcaf 	bl	8000b08 <__aeabi_dcmpeq>
 80061aa:	b9c0      	cbnz	r0, 80061de <_printf_float+0x41a>
 80061ac:	4653      	mov	r3, sl
 80061ae:	f108 0201 	add.w	r2, r8, #1
 80061b2:	4631      	mov	r1, r6
 80061b4:	4628      	mov	r0, r5
 80061b6:	47b8      	blx	r7
 80061b8:	3001      	adds	r0, #1
 80061ba:	d10c      	bne.n	80061d6 <_printf_float+0x412>
 80061bc:	e65d      	b.n	8005e7a <_printf_float+0xb6>
 80061be:	2301      	movs	r3, #1
 80061c0:	465a      	mov	r2, fp
 80061c2:	4631      	mov	r1, r6
 80061c4:	4628      	mov	r0, r5
 80061c6:	47b8      	blx	r7
 80061c8:	3001      	adds	r0, #1
 80061ca:	f43f ae56 	beq.w	8005e7a <_printf_float+0xb6>
 80061ce:	f108 0801 	add.w	r8, r8, #1
 80061d2:	45d0      	cmp	r8, sl
 80061d4:	dbf3      	blt.n	80061be <_printf_float+0x3fa>
 80061d6:	464b      	mov	r3, r9
 80061d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80061dc:	e6df      	b.n	8005f9e <_printf_float+0x1da>
 80061de:	f04f 0800 	mov.w	r8, #0
 80061e2:	f104 0b1a 	add.w	fp, r4, #26
 80061e6:	e7f4      	b.n	80061d2 <_printf_float+0x40e>
 80061e8:	2301      	movs	r3, #1
 80061ea:	4642      	mov	r2, r8
 80061ec:	e7e1      	b.n	80061b2 <_printf_float+0x3ee>
 80061ee:	2301      	movs	r3, #1
 80061f0:	464a      	mov	r2, r9
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	f43f ae3e 	beq.w	8005e7a <_printf_float+0xb6>
 80061fe:	f108 0801 	add.w	r8, r8, #1
 8006202:	68e3      	ldr	r3, [r4, #12]
 8006204:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006206:	1a5b      	subs	r3, r3, r1
 8006208:	4543      	cmp	r3, r8
 800620a:	dcf0      	bgt.n	80061ee <_printf_float+0x42a>
 800620c:	e6fc      	b.n	8006008 <_printf_float+0x244>
 800620e:	f04f 0800 	mov.w	r8, #0
 8006212:	f104 0919 	add.w	r9, r4, #25
 8006216:	e7f4      	b.n	8006202 <_printf_float+0x43e>

08006218 <_printf_common>:
 8006218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800621c:	4616      	mov	r6, r2
 800621e:	4698      	mov	r8, r3
 8006220:	688a      	ldr	r2, [r1, #8]
 8006222:	690b      	ldr	r3, [r1, #16]
 8006224:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006228:	4293      	cmp	r3, r2
 800622a:	bfb8      	it	lt
 800622c:	4613      	movlt	r3, r2
 800622e:	6033      	str	r3, [r6, #0]
 8006230:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006234:	4607      	mov	r7, r0
 8006236:	460c      	mov	r4, r1
 8006238:	b10a      	cbz	r2, 800623e <_printf_common+0x26>
 800623a:	3301      	adds	r3, #1
 800623c:	6033      	str	r3, [r6, #0]
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	0699      	lsls	r1, r3, #26
 8006242:	bf42      	ittt	mi
 8006244:	6833      	ldrmi	r3, [r6, #0]
 8006246:	3302      	addmi	r3, #2
 8006248:	6033      	strmi	r3, [r6, #0]
 800624a:	6825      	ldr	r5, [r4, #0]
 800624c:	f015 0506 	ands.w	r5, r5, #6
 8006250:	d106      	bne.n	8006260 <_printf_common+0x48>
 8006252:	f104 0a19 	add.w	sl, r4, #25
 8006256:	68e3      	ldr	r3, [r4, #12]
 8006258:	6832      	ldr	r2, [r6, #0]
 800625a:	1a9b      	subs	r3, r3, r2
 800625c:	42ab      	cmp	r3, r5
 800625e:	dc26      	bgt.n	80062ae <_printf_common+0x96>
 8006260:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006264:	6822      	ldr	r2, [r4, #0]
 8006266:	3b00      	subs	r3, #0
 8006268:	bf18      	it	ne
 800626a:	2301      	movne	r3, #1
 800626c:	0692      	lsls	r2, r2, #26
 800626e:	d42b      	bmi.n	80062c8 <_printf_common+0xb0>
 8006270:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006274:	4641      	mov	r1, r8
 8006276:	4638      	mov	r0, r7
 8006278:	47c8      	blx	r9
 800627a:	3001      	adds	r0, #1
 800627c:	d01e      	beq.n	80062bc <_printf_common+0xa4>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	6922      	ldr	r2, [r4, #16]
 8006282:	f003 0306 	and.w	r3, r3, #6
 8006286:	2b04      	cmp	r3, #4
 8006288:	bf02      	ittt	eq
 800628a:	68e5      	ldreq	r5, [r4, #12]
 800628c:	6833      	ldreq	r3, [r6, #0]
 800628e:	1aed      	subeq	r5, r5, r3
 8006290:	68a3      	ldr	r3, [r4, #8]
 8006292:	bf0c      	ite	eq
 8006294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006298:	2500      	movne	r5, #0
 800629a:	4293      	cmp	r3, r2
 800629c:	bfc4      	itt	gt
 800629e:	1a9b      	subgt	r3, r3, r2
 80062a0:	18ed      	addgt	r5, r5, r3
 80062a2:	2600      	movs	r6, #0
 80062a4:	341a      	adds	r4, #26
 80062a6:	42b5      	cmp	r5, r6
 80062a8:	d11a      	bne.n	80062e0 <_printf_common+0xc8>
 80062aa:	2000      	movs	r0, #0
 80062ac:	e008      	b.n	80062c0 <_printf_common+0xa8>
 80062ae:	2301      	movs	r3, #1
 80062b0:	4652      	mov	r2, sl
 80062b2:	4641      	mov	r1, r8
 80062b4:	4638      	mov	r0, r7
 80062b6:	47c8      	blx	r9
 80062b8:	3001      	adds	r0, #1
 80062ba:	d103      	bne.n	80062c4 <_printf_common+0xac>
 80062bc:	f04f 30ff 	mov.w	r0, #4294967295
 80062c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c4:	3501      	adds	r5, #1
 80062c6:	e7c6      	b.n	8006256 <_printf_common+0x3e>
 80062c8:	18e1      	adds	r1, r4, r3
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	2030      	movs	r0, #48	@ 0x30
 80062ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062d2:	4422      	add	r2, r4
 80062d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062dc:	3302      	adds	r3, #2
 80062de:	e7c7      	b.n	8006270 <_printf_common+0x58>
 80062e0:	2301      	movs	r3, #1
 80062e2:	4622      	mov	r2, r4
 80062e4:	4641      	mov	r1, r8
 80062e6:	4638      	mov	r0, r7
 80062e8:	47c8      	blx	r9
 80062ea:	3001      	adds	r0, #1
 80062ec:	d0e6      	beq.n	80062bc <_printf_common+0xa4>
 80062ee:	3601      	adds	r6, #1
 80062f0:	e7d9      	b.n	80062a6 <_printf_common+0x8e>
	...

080062f4 <_printf_i>:
 80062f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062f8:	7e0f      	ldrb	r7, [r1, #24]
 80062fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062fc:	2f78      	cmp	r7, #120	@ 0x78
 80062fe:	4691      	mov	r9, r2
 8006300:	4680      	mov	r8, r0
 8006302:	460c      	mov	r4, r1
 8006304:	469a      	mov	sl, r3
 8006306:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800630a:	d807      	bhi.n	800631c <_printf_i+0x28>
 800630c:	2f62      	cmp	r7, #98	@ 0x62
 800630e:	d80a      	bhi.n	8006326 <_printf_i+0x32>
 8006310:	2f00      	cmp	r7, #0
 8006312:	f000 80d1 	beq.w	80064b8 <_printf_i+0x1c4>
 8006316:	2f58      	cmp	r7, #88	@ 0x58
 8006318:	f000 80b8 	beq.w	800648c <_printf_i+0x198>
 800631c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006320:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006324:	e03a      	b.n	800639c <_printf_i+0xa8>
 8006326:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800632a:	2b15      	cmp	r3, #21
 800632c:	d8f6      	bhi.n	800631c <_printf_i+0x28>
 800632e:	a101      	add	r1, pc, #4	@ (adr r1, 8006334 <_printf_i+0x40>)
 8006330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006334:	0800638d 	.word	0x0800638d
 8006338:	080063a1 	.word	0x080063a1
 800633c:	0800631d 	.word	0x0800631d
 8006340:	0800631d 	.word	0x0800631d
 8006344:	0800631d 	.word	0x0800631d
 8006348:	0800631d 	.word	0x0800631d
 800634c:	080063a1 	.word	0x080063a1
 8006350:	0800631d 	.word	0x0800631d
 8006354:	0800631d 	.word	0x0800631d
 8006358:	0800631d 	.word	0x0800631d
 800635c:	0800631d 	.word	0x0800631d
 8006360:	0800649f 	.word	0x0800649f
 8006364:	080063cb 	.word	0x080063cb
 8006368:	08006459 	.word	0x08006459
 800636c:	0800631d 	.word	0x0800631d
 8006370:	0800631d 	.word	0x0800631d
 8006374:	080064c1 	.word	0x080064c1
 8006378:	0800631d 	.word	0x0800631d
 800637c:	080063cb 	.word	0x080063cb
 8006380:	0800631d 	.word	0x0800631d
 8006384:	0800631d 	.word	0x0800631d
 8006388:	08006461 	.word	0x08006461
 800638c:	6833      	ldr	r3, [r6, #0]
 800638e:	1d1a      	adds	r2, r3, #4
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6032      	str	r2, [r6, #0]
 8006394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006398:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800639c:	2301      	movs	r3, #1
 800639e:	e09c      	b.n	80064da <_printf_i+0x1e6>
 80063a0:	6833      	ldr	r3, [r6, #0]
 80063a2:	6820      	ldr	r0, [r4, #0]
 80063a4:	1d19      	adds	r1, r3, #4
 80063a6:	6031      	str	r1, [r6, #0]
 80063a8:	0606      	lsls	r6, r0, #24
 80063aa:	d501      	bpl.n	80063b0 <_printf_i+0xbc>
 80063ac:	681d      	ldr	r5, [r3, #0]
 80063ae:	e003      	b.n	80063b8 <_printf_i+0xc4>
 80063b0:	0645      	lsls	r5, r0, #25
 80063b2:	d5fb      	bpl.n	80063ac <_printf_i+0xb8>
 80063b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	da03      	bge.n	80063c4 <_printf_i+0xd0>
 80063bc:	232d      	movs	r3, #45	@ 0x2d
 80063be:	426d      	negs	r5, r5
 80063c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063c4:	4858      	ldr	r0, [pc, #352]	@ (8006528 <_printf_i+0x234>)
 80063c6:	230a      	movs	r3, #10
 80063c8:	e011      	b.n	80063ee <_printf_i+0xfa>
 80063ca:	6821      	ldr	r1, [r4, #0]
 80063cc:	6833      	ldr	r3, [r6, #0]
 80063ce:	0608      	lsls	r0, r1, #24
 80063d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80063d4:	d402      	bmi.n	80063dc <_printf_i+0xe8>
 80063d6:	0649      	lsls	r1, r1, #25
 80063d8:	bf48      	it	mi
 80063da:	b2ad      	uxthmi	r5, r5
 80063dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80063de:	4852      	ldr	r0, [pc, #328]	@ (8006528 <_printf_i+0x234>)
 80063e0:	6033      	str	r3, [r6, #0]
 80063e2:	bf14      	ite	ne
 80063e4:	230a      	movne	r3, #10
 80063e6:	2308      	moveq	r3, #8
 80063e8:	2100      	movs	r1, #0
 80063ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063ee:	6866      	ldr	r6, [r4, #4]
 80063f0:	60a6      	str	r6, [r4, #8]
 80063f2:	2e00      	cmp	r6, #0
 80063f4:	db05      	blt.n	8006402 <_printf_i+0x10e>
 80063f6:	6821      	ldr	r1, [r4, #0]
 80063f8:	432e      	orrs	r6, r5
 80063fa:	f021 0104 	bic.w	r1, r1, #4
 80063fe:	6021      	str	r1, [r4, #0]
 8006400:	d04b      	beq.n	800649a <_printf_i+0x1a6>
 8006402:	4616      	mov	r6, r2
 8006404:	fbb5 f1f3 	udiv	r1, r5, r3
 8006408:	fb03 5711 	mls	r7, r3, r1, r5
 800640c:	5dc7      	ldrb	r7, [r0, r7]
 800640e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006412:	462f      	mov	r7, r5
 8006414:	42bb      	cmp	r3, r7
 8006416:	460d      	mov	r5, r1
 8006418:	d9f4      	bls.n	8006404 <_printf_i+0x110>
 800641a:	2b08      	cmp	r3, #8
 800641c:	d10b      	bne.n	8006436 <_printf_i+0x142>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	07df      	lsls	r7, r3, #31
 8006422:	d508      	bpl.n	8006436 <_printf_i+0x142>
 8006424:	6923      	ldr	r3, [r4, #16]
 8006426:	6861      	ldr	r1, [r4, #4]
 8006428:	4299      	cmp	r1, r3
 800642a:	bfde      	ittt	le
 800642c:	2330      	movle	r3, #48	@ 0x30
 800642e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006432:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006436:	1b92      	subs	r2, r2, r6
 8006438:	6122      	str	r2, [r4, #16]
 800643a:	f8cd a000 	str.w	sl, [sp]
 800643e:	464b      	mov	r3, r9
 8006440:	aa03      	add	r2, sp, #12
 8006442:	4621      	mov	r1, r4
 8006444:	4640      	mov	r0, r8
 8006446:	f7ff fee7 	bl	8006218 <_printf_common>
 800644a:	3001      	adds	r0, #1
 800644c:	d14a      	bne.n	80064e4 <_printf_i+0x1f0>
 800644e:	f04f 30ff 	mov.w	r0, #4294967295
 8006452:	b004      	add	sp, #16
 8006454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	f043 0320 	orr.w	r3, r3, #32
 800645e:	6023      	str	r3, [r4, #0]
 8006460:	4832      	ldr	r0, [pc, #200]	@ (800652c <_printf_i+0x238>)
 8006462:	2778      	movs	r7, #120	@ 0x78
 8006464:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	6831      	ldr	r1, [r6, #0]
 800646c:	061f      	lsls	r7, r3, #24
 800646e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006472:	d402      	bmi.n	800647a <_printf_i+0x186>
 8006474:	065f      	lsls	r7, r3, #25
 8006476:	bf48      	it	mi
 8006478:	b2ad      	uxthmi	r5, r5
 800647a:	6031      	str	r1, [r6, #0]
 800647c:	07d9      	lsls	r1, r3, #31
 800647e:	bf44      	itt	mi
 8006480:	f043 0320 	orrmi.w	r3, r3, #32
 8006484:	6023      	strmi	r3, [r4, #0]
 8006486:	b11d      	cbz	r5, 8006490 <_printf_i+0x19c>
 8006488:	2310      	movs	r3, #16
 800648a:	e7ad      	b.n	80063e8 <_printf_i+0xf4>
 800648c:	4826      	ldr	r0, [pc, #152]	@ (8006528 <_printf_i+0x234>)
 800648e:	e7e9      	b.n	8006464 <_printf_i+0x170>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	f023 0320 	bic.w	r3, r3, #32
 8006496:	6023      	str	r3, [r4, #0]
 8006498:	e7f6      	b.n	8006488 <_printf_i+0x194>
 800649a:	4616      	mov	r6, r2
 800649c:	e7bd      	b.n	800641a <_printf_i+0x126>
 800649e:	6833      	ldr	r3, [r6, #0]
 80064a0:	6825      	ldr	r5, [r4, #0]
 80064a2:	6961      	ldr	r1, [r4, #20]
 80064a4:	1d18      	adds	r0, r3, #4
 80064a6:	6030      	str	r0, [r6, #0]
 80064a8:	062e      	lsls	r6, r5, #24
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	d501      	bpl.n	80064b2 <_printf_i+0x1be>
 80064ae:	6019      	str	r1, [r3, #0]
 80064b0:	e002      	b.n	80064b8 <_printf_i+0x1c4>
 80064b2:	0668      	lsls	r0, r5, #25
 80064b4:	d5fb      	bpl.n	80064ae <_printf_i+0x1ba>
 80064b6:	8019      	strh	r1, [r3, #0]
 80064b8:	2300      	movs	r3, #0
 80064ba:	6123      	str	r3, [r4, #16]
 80064bc:	4616      	mov	r6, r2
 80064be:	e7bc      	b.n	800643a <_printf_i+0x146>
 80064c0:	6833      	ldr	r3, [r6, #0]
 80064c2:	1d1a      	adds	r2, r3, #4
 80064c4:	6032      	str	r2, [r6, #0]
 80064c6:	681e      	ldr	r6, [r3, #0]
 80064c8:	6862      	ldr	r2, [r4, #4]
 80064ca:	2100      	movs	r1, #0
 80064cc:	4630      	mov	r0, r6
 80064ce:	f7f9 fe9f 	bl	8000210 <memchr>
 80064d2:	b108      	cbz	r0, 80064d8 <_printf_i+0x1e4>
 80064d4:	1b80      	subs	r0, r0, r6
 80064d6:	6060      	str	r0, [r4, #4]
 80064d8:	6863      	ldr	r3, [r4, #4]
 80064da:	6123      	str	r3, [r4, #16]
 80064dc:	2300      	movs	r3, #0
 80064de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064e2:	e7aa      	b.n	800643a <_printf_i+0x146>
 80064e4:	6923      	ldr	r3, [r4, #16]
 80064e6:	4632      	mov	r2, r6
 80064e8:	4649      	mov	r1, r9
 80064ea:	4640      	mov	r0, r8
 80064ec:	47d0      	blx	sl
 80064ee:	3001      	adds	r0, #1
 80064f0:	d0ad      	beq.n	800644e <_printf_i+0x15a>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	079b      	lsls	r3, r3, #30
 80064f6:	d413      	bmi.n	8006520 <_printf_i+0x22c>
 80064f8:	68e0      	ldr	r0, [r4, #12]
 80064fa:	9b03      	ldr	r3, [sp, #12]
 80064fc:	4298      	cmp	r0, r3
 80064fe:	bfb8      	it	lt
 8006500:	4618      	movlt	r0, r3
 8006502:	e7a6      	b.n	8006452 <_printf_i+0x15e>
 8006504:	2301      	movs	r3, #1
 8006506:	4632      	mov	r2, r6
 8006508:	4649      	mov	r1, r9
 800650a:	4640      	mov	r0, r8
 800650c:	47d0      	blx	sl
 800650e:	3001      	adds	r0, #1
 8006510:	d09d      	beq.n	800644e <_printf_i+0x15a>
 8006512:	3501      	adds	r5, #1
 8006514:	68e3      	ldr	r3, [r4, #12]
 8006516:	9903      	ldr	r1, [sp, #12]
 8006518:	1a5b      	subs	r3, r3, r1
 800651a:	42ab      	cmp	r3, r5
 800651c:	dcf2      	bgt.n	8006504 <_printf_i+0x210>
 800651e:	e7eb      	b.n	80064f8 <_printf_i+0x204>
 8006520:	2500      	movs	r5, #0
 8006522:	f104 0619 	add.w	r6, r4, #25
 8006526:	e7f5      	b.n	8006514 <_printf_i+0x220>
 8006528:	080087ca 	.word	0x080087ca
 800652c:	080087db 	.word	0x080087db

08006530 <std>:
 8006530:	2300      	movs	r3, #0
 8006532:	b510      	push	{r4, lr}
 8006534:	4604      	mov	r4, r0
 8006536:	e9c0 3300 	strd	r3, r3, [r0]
 800653a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800653e:	6083      	str	r3, [r0, #8]
 8006540:	8181      	strh	r1, [r0, #12]
 8006542:	6643      	str	r3, [r0, #100]	@ 0x64
 8006544:	81c2      	strh	r2, [r0, #14]
 8006546:	6183      	str	r3, [r0, #24]
 8006548:	4619      	mov	r1, r3
 800654a:	2208      	movs	r2, #8
 800654c:	305c      	adds	r0, #92	@ 0x5c
 800654e:	f000 f9f9 	bl	8006944 <memset>
 8006552:	4b0d      	ldr	r3, [pc, #52]	@ (8006588 <std+0x58>)
 8006554:	6263      	str	r3, [r4, #36]	@ 0x24
 8006556:	4b0d      	ldr	r3, [pc, #52]	@ (800658c <std+0x5c>)
 8006558:	62a3      	str	r3, [r4, #40]	@ 0x28
 800655a:	4b0d      	ldr	r3, [pc, #52]	@ (8006590 <std+0x60>)
 800655c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800655e:	4b0d      	ldr	r3, [pc, #52]	@ (8006594 <std+0x64>)
 8006560:	6323      	str	r3, [r4, #48]	@ 0x30
 8006562:	4b0d      	ldr	r3, [pc, #52]	@ (8006598 <std+0x68>)
 8006564:	6224      	str	r4, [r4, #32]
 8006566:	429c      	cmp	r4, r3
 8006568:	d006      	beq.n	8006578 <std+0x48>
 800656a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800656e:	4294      	cmp	r4, r2
 8006570:	d002      	beq.n	8006578 <std+0x48>
 8006572:	33d0      	adds	r3, #208	@ 0xd0
 8006574:	429c      	cmp	r4, r3
 8006576:	d105      	bne.n	8006584 <std+0x54>
 8006578:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800657c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006580:	f000 ba5c 	b.w	8006a3c <__retarget_lock_init_recursive>
 8006584:	bd10      	pop	{r4, pc}
 8006586:	bf00      	nop
 8006588:	08006795 	.word	0x08006795
 800658c:	080067b7 	.word	0x080067b7
 8006590:	080067ef 	.word	0x080067ef
 8006594:	08006813 	.word	0x08006813
 8006598:	200002e4 	.word	0x200002e4

0800659c <stdio_exit_handler>:
 800659c:	4a02      	ldr	r2, [pc, #8]	@ (80065a8 <stdio_exit_handler+0xc>)
 800659e:	4903      	ldr	r1, [pc, #12]	@ (80065ac <stdio_exit_handler+0x10>)
 80065a0:	4803      	ldr	r0, [pc, #12]	@ (80065b0 <stdio_exit_handler+0x14>)
 80065a2:	f000 b869 	b.w	8006678 <_fwalk_sglue>
 80065a6:	bf00      	nop
 80065a8:	2000000c 	.word	0x2000000c
 80065ac:	08008391 	.word	0x08008391
 80065b0:	2000001c 	.word	0x2000001c

080065b4 <cleanup_stdio>:
 80065b4:	6841      	ldr	r1, [r0, #4]
 80065b6:	4b0c      	ldr	r3, [pc, #48]	@ (80065e8 <cleanup_stdio+0x34>)
 80065b8:	4299      	cmp	r1, r3
 80065ba:	b510      	push	{r4, lr}
 80065bc:	4604      	mov	r4, r0
 80065be:	d001      	beq.n	80065c4 <cleanup_stdio+0x10>
 80065c0:	f001 fee6 	bl	8008390 <_fflush_r>
 80065c4:	68a1      	ldr	r1, [r4, #8]
 80065c6:	4b09      	ldr	r3, [pc, #36]	@ (80065ec <cleanup_stdio+0x38>)
 80065c8:	4299      	cmp	r1, r3
 80065ca:	d002      	beq.n	80065d2 <cleanup_stdio+0x1e>
 80065cc:	4620      	mov	r0, r4
 80065ce:	f001 fedf 	bl	8008390 <_fflush_r>
 80065d2:	68e1      	ldr	r1, [r4, #12]
 80065d4:	4b06      	ldr	r3, [pc, #24]	@ (80065f0 <cleanup_stdio+0x3c>)
 80065d6:	4299      	cmp	r1, r3
 80065d8:	d004      	beq.n	80065e4 <cleanup_stdio+0x30>
 80065da:	4620      	mov	r0, r4
 80065dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e0:	f001 bed6 	b.w	8008390 <_fflush_r>
 80065e4:	bd10      	pop	{r4, pc}
 80065e6:	bf00      	nop
 80065e8:	200002e4 	.word	0x200002e4
 80065ec:	2000034c 	.word	0x2000034c
 80065f0:	200003b4 	.word	0x200003b4

080065f4 <global_stdio_init.part.0>:
 80065f4:	b510      	push	{r4, lr}
 80065f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006624 <global_stdio_init.part.0+0x30>)
 80065f8:	4c0b      	ldr	r4, [pc, #44]	@ (8006628 <global_stdio_init.part.0+0x34>)
 80065fa:	4a0c      	ldr	r2, [pc, #48]	@ (800662c <global_stdio_init.part.0+0x38>)
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	4620      	mov	r0, r4
 8006600:	2200      	movs	r2, #0
 8006602:	2104      	movs	r1, #4
 8006604:	f7ff ff94 	bl	8006530 <std>
 8006608:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800660c:	2201      	movs	r2, #1
 800660e:	2109      	movs	r1, #9
 8006610:	f7ff ff8e 	bl	8006530 <std>
 8006614:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006618:	2202      	movs	r2, #2
 800661a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800661e:	2112      	movs	r1, #18
 8006620:	f7ff bf86 	b.w	8006530 <std>
 8006624:	2000041c 	.word	0x2000041c
 8006628:	200002e4 	.word	0x200002e4
 800662c:	0800659d 	.word	0x0800659d

08006630 <__sfp_lock_acquire>:
 8006630:	4801      	ldr	r0, [pc, #4]	@ (8006638 <__sfp_lock_acquire+0x8>)
 8006632:	f000 ba04 	b.w	8006a3e <__retarget_lock_acquire_recursive>
 8006636:	bf00      	nop
 8006638:	20000425 	.word	0x20000425

0800663c <__sfp_lock_release>:
 800663c:	4801      	ldr	r0, [pc, #4]	@ (8006644 <__sfp_lock_release+0x8>)
 800663e:	f000 b9ff 	b.w	8006a40 <__retarget_lock_release_recursive>
 8006642:	bf00      	nop
 8006644:	20000425 	.word	0x20000425

08006648 <__sinit>:
 8006648:	b510      	push	{r4, lr}
 800664a:	4604      	mov	r4, r0
 800664c:	f7ff fff0 	bl	8006630 <__sfp_lock_acquire>
 8006650:	6a23      	ldr	r3, [r4, #32]
 8006652:	b11b      	cbz	r3, 800665c <__sinit+0x14>
 8006654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006658:	f7ff bff0 	b.w	800663c <__sfp_lock_release>
 800665c:	4b04      	ldr	r3, [pc, #16]	@ (8006670 <__sinit+0x28>)
 800665e:	6223      	str	r3, [r4, #32]
 8006660:	4b04      	ldr	r3, [pc, #16]	@ (8006674 <__sinit+0x2c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1f5      	bne.n	8006654 <__sinit+0xc>
 8006668:	f7ff ffc4 	bl	80065f4 <global_stdio_init.part.0>
 800666c:	e7f2      	b.n	8006654 <__sinit+0xc>
 800666e:	bf00      	nop
 8006670:	080065b5 	.word	0x080065b5
 8006674:	2000041c 	.word	0x2000041c

08006678 <_fwalk_sglue>:
 8006678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800667c:	4607      	mov	r7, r0
 800667e:	4688      	mov	r8, r1
 8006680:	4614      	mov	r4, r2
 8006682:	2600      	movs	r6, #0
 8006684:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006688:	f1b9 0901 	subs.w	r9, r9, #1
 800668c:	d505      	bpl.n	800669a <_fwalk_sglue+0x22>
 800668e:	6824      	ldr	r4, [r4, #0]
 8006690:	2c00      	cmp	r4, #0
 8006692:	d1f7      	bne.n	8006684 <_fwalk_sglue+0xc>
 8006694:	4630      	mov	r0, r6
 8006696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800669a:	89ab      	ldrh	r3, [r5, #12]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d907      	bls.n	80066b0 <_fwalk_sglue+0x38>
 80066a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066a4:	3301      	adds	r3, #1
 80066a6:	d003      	beq.n	80066b0 <_fwalk_sglue+0x38>
 80066a8:	4629      	mov	r1, r5
 80066aa:	4638      	mov	r0, r7
 80066ac:	47c0      	blx	r8
 80066ae:	4306      	orrs	r6, r0
 80066b0:	3568      	adds	r5, #104	@ 0x68
 80066b2:	e7e9      	b.n	8006688 <_fwalk_sglue+0x10>

080066b4 <iprintf>:
 80066b4:	b40f      	push	{r0, r1, r2, r3}
 80066b6:	b507      	push	{r0, r1, r2, lr}
 80066b8:	4906      	ldr	r1, [pc, #24]	@ (80066d4 <iprintf+0x20>)
 80066ba:	ab04      	add	r3, sp, #16
 80066bc:	6808      	ldr	r0, [r1, #0]
 80066be:	f853 2b04 	ldr.w	r2, [r3], #4
 80066c2:	6881      	ldr	r1, [r0, #8]
 80066c4:	9301      	str	r3, [sp, #4]
 80066c6:	f001 fcc7 	bl	8008058 <_vfiprintf_r>
 80066ca:	b003      	add	sp, #12
 80066cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80066d0:	b004      	add	sp, #16
 80066d2:	4770      	bx	lr
 80066d4:	20000018 	.word	0x20000018

080066d8 <_puts_r>:
 80066d8:	6a03      	ldr	r3, [r0, #32]
 80066da:	b570      	push	{r4, r5, r6, lr}
 80066dc:	6884      	ldr	r4, [r0, #8]
 80066de:	4605      	mov	r5, r0
 80066e0:	460e      	mov	r6, r1
 80066e2:	b90b      	cbnz	r3, 80066e8 <_puts_r+0x10>
 80066e4:	f7ff ffb0 	bl	8006648 <__sinit>
 80066e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066ea:	07db      	lsls	r3, r3, #31
 80066ec:	d405      	bmi.n	80066fa <_puts_r+0x22>
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	0598      	lsls	r0, r3, #22
 80066f2:	d402      	bmi.n	80066fa <_puts_r+0x22>
 80066f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066f6:	f000 f9a2 	bl	8006a3e <__retarget_lock_acquire_recursive>
 80066fa:	89a3      	ldrh	r3, [r4, #12]
 80066fc:	0719      	lsls	r1, r3, #28
 80066fe:	d502      	bpl.n	8006706 <_puts_r+0x2e>
 8006700:	6923      	ldr	r3, [r4, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d135      	bne.n	8006772 <_puts_r+0x9a>
 8006706:	4621      	mov	r1, r4
 8006708:	4628      	mov	r0, r5
 800670a:	f000 f8c5 	bl	8006898 <__swsetup_r>
 800670e:	b380      	cbz	r0, 8006772 <_puts_r+0x9a>
 8006710:	f04f 35ff 	mov.w	r5, #4294967295
 8006714:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006716:	07da      	lsls	r2, r3, #31
 8006718:	d405      	bmi.n	8006726 <_puts_r+0x4e>
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	059b      	lsls	r3, r3, #22
 800671e:	d402      	bmi.n	8006726 <_puts_r+0x4e>
 8006720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006722:	f000 f98d 	bl	8006a40 <__retarget_lock_release_recursive>
 8006726:	4628      	mov	r0, r5
 8006728:	bd70      	pop	{r4, r5, r6, pc}
 800672a:	2b00      	cmp	r3, #0
 800672c:	da04      	bge.n	8006738 <_puts_r+0x60>
 800672e:	69a2      	ldr	r2, [r4, #24]
 8006730:	429a      	cmp	r2, r3
 8006732:	dc17      	bgt.n	8006764 <_puts_r+0x8c>
 8006734:	290a      	cmp	r1, #10
 8006736:	d015      	beq.n	8006764 <_puts_r+0x8c>
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	6022      	str	r2, [r4, #0]
 800673e:	7019      	strb	r1, [r3, #0]
 8006740:	68a3      	ldr	r3, [r4, #8]
 8006742:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006746:	3b01      	subs	r3, #1
 8006748:	60a3      	str	r3, [r4, #8]
 800674a:	2900      	cmp	r1, #0
 800674c:	d1ed      	bne.n	800672a <_puts_r+0x52>
 800674e:	2b00      	cmp	r3, #0
 8006750:	da11      	bge.n	8006776 <_puts_r+0x9e>
 8006752:	4622      	mov	r2, r4
 8006754:	210a      	movs	r1, #10
 8006756:	4628      	mov	r0, r5
 8006758:	f000 f85f 	bl	800681a <__swbuf_r>
 800675c:	3001      	adds	r0, #1
 800675e:	d0d7      	beq.n	8006710 <_puts_r+0x38>
 8006760:	250a      	movs	r5, #10
 8006762:	e7d7      	b.n	8006714 <_puts_r+0x3c>
 8006764:	4622      	mov	r2, r4
 8006766:	4628      	mov	r0, r5
 8006768:	f000 f857 	bl	800681a <__swbuf_r>
 800676c:	3001      	adds	r0, #1
 800676e:	d1e7      	bne.n	8006740 <_puts_r+0x68>
 8006770:	e7ce      	b.n	8006710 <_puts_r+0x38>
 8006772:	3e01      	subs	r6, #1
 8006774:	e7e4      	b.n	8006740 <_puts_r+0x68>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	6022      	str	r2, [r4, #0]
 800677c:	220a      	movs	r2, #10
 800677e:	701a      	strb	r2, [r3, #0]
 8006780:	e7ee      	b.n	8006760 <_puts_r+0x88>
	...

08006784 <puts>:
 8006784:	4b02      	ldr	r3, [pc, #8]	@ (8006790 <puts+0xc>)
 8006786:	4601      	mov	r1, r0
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	f7ff bfa5 	b.w	80066d8 <_puts_r>
 800678e:	bf00      	nop
 8006790:	20000018 	.word	0x20000018

08006794 <__sread>:
 8006794:	b510      	push	{r4, lr}
 8006796:	460c      	mov	r4, r1
 8006798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800679c:	f000 f900 	bl	80069a0 <_read_r>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	bfab      	itete	ge
 80067a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067a6:	89a3      	ldrhlt	r3, [r4, #12]
 80067a8:	181b      	addge	r3, r3, r0
 80067aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067ae:	bfac      	ite	ge
 80067b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067b2:	81a3      	strhlt	r3, [r4, #12]
 80067b4:	bd10      	pop	{r4, pc}

080067b6 <__swrite>:
 80067b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ba:	461f      	mov	r7, r3
 80067bc:	898b      	ldrh	r3, [r1, #12]
 80067be:	05db      	lsls	r3, r3, #23
 80067c0:	4605      	mov	r5, r0
 80067c2:	460c      	mov	r4, r1
 80067c4:	4616      	mov	r6, r2
 80067c6:	d505      	bpl.n	80067d4 <__swrite+0x1e>
 80067c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067cc:	2302      	movs	r3, #2
 80067ce:	2200      	movs	r2, #0
 80067d0:	f000 f8d4 	bl	800697c <_lseek_r>
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067de:	81a3      	strh	r3, [r4, #12]
 80067e0:	4632      	mov	r2, r6
 80067e2:	463b      	mov	r3, r7
 80067e4:	4628      	mov	r0, r5
 80067e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067ea:	f000 b8eb 	b.w	80069c4 <_write_r>

080067ee <__sseek>:
 80067ee:	b510      	push	{r4, lr}
 80067f0:	460c      	mov	r4, r1
 80067f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f6:	f000 f8c1 	bl	800697c <_lseek_r>
 80067fa:	1c43      	adds	r3, r0, #1
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	bf15      	itete	ne
 8006800:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006802:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006806:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800680a:	81a3      	strheq	r3, [r4, #12]
 800680c:	bf18      	it	ne
 800680e:	81a3      	strhne	r3, [r4, #12]
 8006810:	bd10      	pop	{r4, pc}

08006812 <__sclose>:
 8006812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006816:	f000 b8a1 	b.w	800695c <_close_r>

0800681a <__swbuf_r>:
 800681a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681c:	460e      	mov	r6, r1
 800681e:	4614      	mov	r4, r2
 8006820:	4605      	mov	r5, r0
 8006822:	b118      	cbz	r0, 800682c <__swbuf_r+0x12>
 8006824:	6a03      	ldr	r3, [r0, #32]
 8006826:	b90b      	cbnz	r3, 800682c <__swbuf_r+0x12>
 8006828:	f7ff ff0e 	bl	8006648 <__sinit>
 800682c:	69a3      	ldr	r3, [r4, #24]
 800682e:	60a3      	str	r3, [r4, #8]
 8006830:	89a3      	ldrh	r3, [r4, #12]
 8006832:	071a      	lsls	r2, r3, #28
 8006834:	d501      	bpl.n	800683a <__swbuf_r+0x20>
 8006836:	6923      	ldr	r3, [r4, #16]
 8006838:	b943      	cbnz	r3, 800684c <__swbuf_r+0x32>
 800683a:	4621      	mov	r1, r4
 800683c:	4628      	mov	r0, r5
 800683e:	f000 f82b 	bl	8006898 <__swsetup_r>
 8006842:	b118      	cbz	r0, 800684c <__swbuf_r+0x32>
 8006844:	f04f 37ff 	mov.w	r7, #4294967295
 8006848:	4638      	mov	r0, r7
 800684a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	6922      	ldr	r2, [r4, #16]
 8006850:	1a98      	subs	r0, r3, r2
 8006852:	6963      	ldr	r3, [r4, #20]
 8006854:	b2f6      	uxtb	r6, r6
 8006856:	4283      	cmp	r3, r0
 8006858:	4637      	mov	r7, r6
 800685a:	dc05      	bgt.n	8006868 <__swbuf_r+0x4e>
 800685c:	4621      	mov	r1, r4
 800685e:	4628      	mov	r0, r5
 8006860:	f001 fd96 	bl	8008390 <_fflush_r>
 8006864:	2800      	cmp	r0, #0
 8006866:	d1ed      	bne.n	8006844 <__swbuf_r+0x2a>
 8006868:	68a3      	ldr	r3, [r4, #8]
 800686a:	3b01      	subs	r3, #1
 800686c:	60a3      	str	r3, [r4, #8]
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	6022      	str	r2, [r4, #0]
 8006874:	701e      	strb	r6, [r3, #0]
 8006876:	6962      	ldr	r2, [r4, #20]
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	429a      	cmp	r2, r3
 800687c:	d004      	beq.n	8006888 <__swbuf_r+0x6e>
 800687e:	89a3      	ldrh	r3, [r4, #12]
 8006880:	07db      	lsls	r3, r3, #31
 8006882:	d5e1      	bpl.n	8006848 <__swbuf_r+0x2e>
 8006884:	2e0a      	cmp	r6, #10
 8006886:	d1df      	bne.n	8006848 <__swbuf_r+0x2e>
 8006888:	4621      	mov	r1, r4
 800688a:	4628      	mov	r0, r5
 800688c:	f001 fd80 	bl	8008390 <_fflush_r>
 8006890:	2800      	cmp	r0, #0
 8006892:	d0d9      	beq.n	8006848 <__swbuf_r+0x2e>
 8006894:	e7d6      	b.n	8006844 <__swbuf_r+0x2a>
	...

08006898 <__swsetup_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4b29      	ldr	r3, [pc, #164]	@ (8006940 <__swsetup_r+0xa8>)
 800689c:	4605      	mov	r5, r0
 800689e:	6818      	ldr	r0, [r3, #0]
 80068a0:	460c      	mov	r4, r1
 80068a2:	b118      	cbz	r0, 80068ac <__swsetup_r+0x14>
 80068a4:	6a03      	ldr	r3, [r0, #32]
 80068a6:	b90b      	cbnz	r3, 80068ac <__swsetup_r+0x14>
 80068a8:	f7ff fece 	bl	8006648 <__sinit>
 80068ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068b0:	0719      	lsls	r1, r3, #28
 80068b2:	d422      	bmi.n	80068fa <__swsetup_r+0x62>
 80068b4:	06da      	lsls	r2, r3, #27
 80068b6:	d407      	bmi.n	80068c8 <__swsetup_r+0x30>
 80068b8:	2209      	movs	r2, #9
 80068ba:	602a      	str	r2, [r5, #0]
 80068bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068c0:	81a3      	strh	r3, [r4, #12]
 80068c2:	f04f 30ff 	mov.w	r0, #4294967295
 80068c6:	e033      	b.n	8006930 <__swsetup_r+0x98>
 80068c8:	0758      	lsls	r0, r3, #29
 80068ca:	d512      	bpl.n	80068f2 <__swsetup_r+0x5a>
 80068cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068ce:	b141      	cbz	r1, 80068e2 <__swsetup_r+0x4a>
 80068d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068d4:	4299      	cmp	r1, r3
 80068d6:	d002      	beq.n	80068de <__swsetup_r+0x46>
 80068d8:	4628      	mov	r0, r5
 80068da:	f000 ff19 	bl	8007710 <_free_r>
 80068de:	2300      	movs	r3, #0
 80068e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80068e2:	89a3      	ldrh	r3, [r4, #12]
 80068e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80068e8:	81a3      	strh	r3, [r4, #12]
 80068ea:	2300      	movs	r3, #0
 80068ec:	6063      	str	r3, [r4, #4]
 80068ee:	6923      	ldr	r3, [r4, #16]
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	89a3      	ldrh	r3, [r4, #12]
 80068f4:	f043 0308 	orr.w	r3, r3, #8
 80068f8:	81a3      	strh	r3, [r4, #12]
 80068fa:	6923      	ldr	r3, [r4, #16]
 80068fc:	b94b      	cbnz	r3, 8006912 <__swsetup_r+0x7a>
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006908:	d003      	beq.n	8006912 <__swsetup_r+0x7a>
 800690a:	4621      	mov	r1, r4
 800690c:	4628      	mov	r0, r5
 800690e:	f001 fd8d 	bl	800842c <__smakebuf_r>
 8006912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006916:	f013 0201 	ands.w	r2, r3, #1
 800691a:	d00a      	beq.n	8006932 <__swsetup_r+0x9a>
 800691c:	2200      	movs	r2, #0
 800691e:	60a2      	str	r2, [r4, #8]
 8006920:	6962      	ldr	r2, [r4, #20]
 8006922:	4252      	negs	r2, r2
 8006924:	61a2      	str	r2, [r4, #24]
 8006926:	6922      	ldr	r2, [r4, #16]
 8006928:	b942      	cbnz	r2, 800693c <__swsetup_r+0xa4>
 800692a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800692e:	d1c5      	bne.n	80068bc <__swsetup_r+0x24>
 8006930:	bd38      	pop	{r3, r4, r5, pc}
 8006932:	0799      	lsls	r1, r3, #30
 8006934:	bf58      	it	pl
 8006936:	6962      	ldrpl	r2, [r4, #20]
 8006938:	60a2      	str	r2, [r4, #8]
 800693a:	e7f4      	b.n	8006926 <__swsetup_r+0x8e>
 800693c:	2000      	movs	r0, #0
 800693e:	e7f7      	b.n	8006930 <__swsetup_r+0x98>
 8006940:	20000018 	.word	0x20000018

08006944 <memset>:
 8006944:	4402      	add	r2, r0
 8006946:	4603      	mov	r3, r0
 8006948:	4293      	cmp	r3, r2
 800694a:	d100      	bne.n	800694e <memset+0xa>
 800694c:	4770      	bx	lr
 800694e:	f803 1b01 	strb.w	r1, [r3], #1
 8006952:	e7f9      	b.n	8006948 <memset+0x4>

08006954 <_localeconv_r>:
 8006954:	4800      	ldr	r0, [pc, #0]	@ (8006958 <_localeconv_r+0x4>)
 8006956:	4770      	bx	lr
 8006958:	20000158 	.word	0x20000158

0800695c <_close_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4d06      	ldr	r5, [pc, #24]	@ (8006978 <_close_r+0x1c>)
 8006960:	2300      	movs	r3, #0
 8006962:	4604      	mov	r4, r0
 8006964:	4608      	mov	r0, r1
 8006966:	602b      	str	r3, [r5, #0]
 8006968:	f7fb febe 	bl	80026e8 <_close>
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	d102      	bne.n	8006976 <_close_r+0x1a>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	b103      	cbz	r3, 8006976 <_close_r+0x1a>
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	bd38      	pop	{r3, r4, r5, pc}
 8006978:	20000420 	.word	0x20000420

0800697c <_lseek_r>:
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	4d07      	ldr	r5, [pc, #28]	@ (800699c <_lseek_r+0x20>)
 8006980:	4604      	mov	r4, r0
 8006982:	4608      	mov	r0, r1
 8006984:	4611      	mov	r1, r2
 8006986:	2200      	movs	r2, #0
 8006988:	602a      	str	r2, [r5, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	f7fb fed3 	bl	8002736 <_lseek>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d102      	bne.n	800699a <_lseek_r+0x1e>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	b103      	cbz	r3, 800699a <_lseek_r+0x1e>
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	20000420 	.word	0x20000420

080069a0 <_read_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	4d07      	ldr	r5, [pc, #28]	@ (80069c0 <_read_r+0x20>)
 80069a4:	4604      	mov	r4, r0
 80069a6:	4608      	mov	r0, r1
 80069a8:	4611      	mov	r1, r2
 80069aa:	2200      	movs	r2, #0
 80069ac:	602a      	str	r2, [r5, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f7fb fe61 	bl	8002676 <_read>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	d102      	bne.n	80069be <_read_r+0x1e>
 80069b8:	682b      	ldr	r3, [r5, #0]
 80069ba:	b103      	cbz	r3, 80069be <_read_r+0x1e>
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	bd38      	pop	{r3, r4, r5, pc}
 80069c0:	20000420 	.word	0x20000420

080069c4 <_write_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	4d07      	ldr	r5, [pc, #28]	@ (80069e4 <_write_r+0x20>)
 80069c8:	4604      	mov	r4, r0
 80069ca:	4608      	mov	r0, r1
 80069cc:	4611      	mov	r1, r2
 80069ce:	2200      	movs	r2, #0
 80069d0:	602a      	str	r2, [r5, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	f7fb fe6c 	bl	80026b0 <_write>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	d102      	bne.n	80069e2 <_write_r+0x1e>
 80069dc:	682b      	ldr	r3, [r5, #0]
 80069de:	b103      	cbz	r3, 80069e2 <_write_r+0x1e>
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	bd38      	pop	{r3, r4, r5, pc}
 80069e4:	20000420 	.word	0x20000420

080069e8 <__errno>:
 80069e8:	4b01      	ldr	r3, [pc, #4]	@ (80069f0 <__errno+0x8>)
 80069ea:	6818      	ldr	r0, [r3, #0]
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20000018 	.word	0x20000018

080069f4 <__libc_init_array>:
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	4d0d      	ldr	r5, [pc, #52]	@ (8006a2c <__libc_init_array+0x38>)
 80069f8:	4c0d      	ldr	r4, [pc, #52]	@ (8006a30 <__libc_init_array+0x3c>)
 80069fa:	1b64      	subs	r4, r4, r5
 80069fc:	10a4      	asrs	r4, r4, #2
 80069fe:	2600      	movs	r6, #0
 8006a00:	42a6      	cmp	r6, r4
 8006a02:	d109      	bne.n	8006a18 <__libc_init_array+0x24>
 8006a04:	4d0b      	ldr	r5, [pc, #44]	@ (8006a34 <__libc_init_array+0x40>)
 8006a06:	4c0c      	ldr	r4, [pc, #48]	@ (8006a38 <__libc_init_array+0x44>)
 8006a08:	f001 fe2e 	bl	8008668 <_init>
 8006a0c:	1b64      	subs	r4, r4, r5
 8006a0e:	10a4      	asrs	r4, r4, #2
 8006a10:	2600      	movs	r6, #0
 8006a12:	42a6      	cmp	r6, r4
 8006a14:	d105      	bne.n	8006a22 <__libc_init_array+0x2e>
 8006a16:	bd70      	pop	{r4, r5, r6, pc}
 8006a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a1c:	4798      	blx	r3
 8006a1e:	3601      	adds	r6, #1
 8006a20:	e7ee      	b.n	8006a00 <__libc_init_array+0xc>
 8006a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a26:	4798      	blx	r3
 8006a28:	3601      	adds	r6, #1
 8006a2a:	e7f2      	b.n	8006a12 <__libc_init_array+0x1e>
 8006a2c:	08008b34 	.word	0x08008b34
 8006a30:	08008b34 	.word	0x08008b34
 8006a34:	08008b34 	.word	0x08008b34
 8006a38:	08008b38 	.word	0x08008b38

08006a3c <__retarget_lock_init_recursive>:
 8006a3c:	4770      	bx	lr

08006a3e <__retarget_lock_acquire_recursive>:
 8006a3e:	4770      	bx	lr

08006a40 <__retarget_lock_release_recursive>:
 8006a40:	4770      	bx	lr

08006a42 <memcpy>:
 8006a42:	440a      	add	r2, r1
 8006a44:	4291      	cmp	r1, r2
 8006a46:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a4a:	d100      	bne.n	8006a4e <memcpy+0xc>
 8006a4c:	4770      	bx	lr
 8006a4e:	b510      	push	{r4, lr}
 8006a50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a58:	4291      	cmp	r1, r2
 8006a5a:	d1f9      	bne.n	8006a50 <memcpy+0xe>
 8006a5c:	bd10      	pop	{r4, pc}

08006a5e <quorem>:
 8006a5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a62:	6903      	ldr	r3, [r0, #16]
 8006a64:	690c      	ldr	r4, [r1, #16]
 8006a66:	42a3      	cmp	r3, r4
 8006a68:	4607      	mov	r7, r0
 8006a6a:	db7e      	blt.n	8006b6a <quorem+0x10c>
 8006a6c:	3c01      	subs	r4, #1
 8006a6e:	f101 0814 	add.w	r8, r1, #20
 8006a72:	00a3      	lsls	r3, r4, #2
 8006a74:	f100 0514 	add.w	r5, r0, #20
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a7e:	9301      	str	r3, [sp, #4]
 8006a80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a90:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a94:	d32e      	bcc.n	8006af4 <quorem+0x96>
 8006a96:	f04f 0a00 	mov.w	sl, #0
 8006a9a:	46c4      	mov	ip, r8
 8006a9c:	46ae      	mov	lr, r5
 8006a9e:	46d3      	mov	fp, sl
 8006aa0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006aa4:	b298      	uxth	r0, r3
 8006aa6:	fb06 a000 	mla	r0, r6, r0, sl
 8006aaa:	0c02      	lsrs	r2, r0, #16
 8006aac:	0c1b      	lsrs	r3, r3, #16
 8006aae:	fb06 2303 	mla	r3, r6, r3, r2
 8006ab2:	f8de 2000 	ldr.w	r2, [lr]
 8006ab6:	b280      	uxth	r0, r0
 8006ab8:	b292      	uxth	r2, r2
 8006aba:	1a12      	subs	r2, r2, r0
 8006abc:	445a      	add	r2, fp
 8006abe:	f8de 0000 	ldr.w	r0, [lr]
 8006ac2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006acc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ad0:	b292      	uxth	r2, r2
 8006ad2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ad6:	45e1      	cmp	r9, ip
 8006ad8:	f84e 2b04 	str.w	r2, [lr], #4
 8006adc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006ae0:	d2de      	bcs.n	8006aa0 <quorem+0x42>
 8006ae2:	9b00      	ldr	r3, [sp, #0]
 8006ae4:	58eb      	ldr	r3, [r5, r3]
 8006ae6:	b92b      	cbnz	r3, 8006af4 <quorem+0x96>
 8006ae8:	9b01      	ldr	r3, [sp, #4]
 8006aea:	3b04      	subs	r3, #4
 8006aec:	429d      	cmp	r5, r3
 8006aee:	461a      	mov	r2, r3
 8006af0:	d32f      	bcc.n	8006b52 <quorem+0xf4>
 8006af2:	613c      	str	r4, [r7, #16]
 8006af4:	4638      	mov	r0, r7
 8006af6:	f001 f97d 	bl	8007df4 <__mcmp>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	db25      	blt.n	8006b4a <quorem+0xec>
 8006afe:	4629      	mov	r1, r5
 8006b00:	2000      	movs	r0, #0
 8006b02:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b06:	f8d1 c000 	ldr.w	ip, [r1]
 8006b0a:	fa1f fe82 	uxth.w	lr, r2
 8006b0e:	fa1f f38c 	uxth.w	r3, ip
 8006b12:	eba3 030e 	sub.w	r3, r3, lr
 8006b16:	4403      	add	r3, r0
 8006b18:	0c12      	lsrs	r2, r2, #16
 8006b1a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006b1e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b28:	45c1      	cmp	r9, r8
 8006b2a:	f841 3b04 	str.w	r3, [r1], #4
 8006b2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b32:	d2e6      	bcs.n	8006b02 <quorem+0xa4>
 8006b34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b3c:	b922      	cbnz	r2, 8006b48 <quorem+0xea>
 8006b3e:	3b04      	subs	r3, #4
 8006b40:	429d      	cmp	r5, r3
 8006b42:	461a      	mov	r2, r3
 8006b44:	d30b      	bcc.n	8006b5e <quorem+0x100>
 8006b46:	613c      	str	r4, [r7, #16]
 8006b48:	3601      	adds	r6, #1
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	b003      	add	sp, #12
 8006b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b52:	6812      	ldr	r2, [r2, #0]
 8006b54:	3b04      	subs	r3, #4
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	d1cb      	bne.n	8006af2 <quorem+0x94>
 8006b5a:	3c01      	subs	r4, #1
 8006b5c:	e7c6      	b.n	8006aec <quorem+0x8e>
 8006b5e:	6812      	ldr	r2, [r2, #0]
 8006b60:	3b04      	subs	r3, #4
 8006b62:	2a00      	cmp	r2, #0
 8006b64:	d1ef      	bne.n	8006b46 <quorem+0xe8>
 8006b66:	3c01      	subs	r4, #1
 8006b68:	e7ea      	b.n	8006b40 <quorem+0xe2>
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	e7ee      	b.n	8006b4c <quorem+0xee>
	...

08006b70 <_dtoa_r>:
 8006b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b74:	69c7      	ldr	r7, [r0, #28]
 8006b76:	b097      	sub	sp, #92	@ 0x5c
 8006b78:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006b7c:	ec55 4b10 	vmov	r4, r5, d0
 8006b80:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006b82:	9107      	str	r1, [sp, #28]
 8006b84:	4681      	mov	r9, r0
 8006b86:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b88:	9311      	str	r3, [sp, #68]	@ 0x44
 8006b8a:	b97f      	cbnz	r7, 8006bac <_dtoa_r+0x3c>
 8006b8c:	2010      	movs	r0, #16
 8006b8e:	f000 fe09 	bl	80077a4 <malloc>
 8006b92:	4602      	mov	r2, r0
 8006b94:	f8c9 001c 	str.w	r0, [r9, #28]
 8006b98:	b920      	cbnz	r0, 8006ba4 <_dtoa_r+0x34>
 8006b9a:	4ba9      	ldr	r3, [pc, #676]	@ (8006e40 <_dtoa_r+0x2d0>)
 8006b9c:	21ef      	movs	r1, #239	@ 0xef
 8006b9e:	48a9      	ldr	r0, [pc, #676]	@ (8006e44 <_dtoa_r+0x2d4>)
 8006ba0:	f001 fcb2 	bl	8008508 <__assert_func>
 8006ba4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006ba8:	6007      	str	r7, [r0, #0]
 8006baa:	60c7      	str	r7, [r0, #12]
 8006bac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006bb0:	6819      	ldr	r1, [r3, #0]
 8006bb2:	b159      	cbz	r1, 8006bcc <_dtoa_r+0x5c>
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	604a      	str	r2, [r1, #4]
 8006bb8:	2301      	movs	r3, #1
 8006bba:	4093      	lsls	r3, r2
 8006bbc:	608b      	str	r3, [r1, #8]
 8006bbe:	4648      	mov	r0, r9
 8006bc0:	f000 fee6 	bl	8007990 <_Bfree>
 8006bc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	1e2b      	subs	r3, r5, #0
 8006bce:	bfb9      	ittee	lt
 8006bd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006bd4:	9305      	strlt	r3, [sp, #20]
 8006bd6:	2300      	movge	r3, #0
 8006bd8:	6033      	strge	r3, [r6, #0]
 8006bda:	9f05      	ldr	r7, [sp, #20]
 8006bdc:	4b9a      	ldr	r3, [pc, #616]	@ (8006e48 <_dtoa_r+0x2d8>)
 8006bde:	bfbc      	itt	lt
 8006be0:	2201      	movlt	r2, #1
 8006be2:	6032      	strlt	r2, [r6, #0]
 8006be4:	43bb      	bics	r3, r7
 8006be6:	d112      	bne.n	8006c0e <_dtoa_r+0x9e>
 8006be8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006bea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006bf4:	4323      	orrs	r3, r4
 8006bf6:	f000 855a 	beq.w	80076ae <_dtoa_r+0xb3e>
 8006bfa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006bfc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006e5c <_dtoa_r+0x2ec>
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 855c 	beq.w	80076be <_dtoa_r+0xb4e>
 8006c06:	f10a 0303 	add.w	r3, sl, #3
 8006c0a:	f000 bd56 	b.w	80076ba <_dtoa_r+0xb4a>
 8006c0e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006c12:	2200      	movs	r2, #0
 8006c14:	ec51 0b17 	vmov	r0, r1, d7
 8006c18:	2300      	movs	r3, #0
 8006c1a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006c1e:	f7f9 ff73 	bl	8000b08 <__aeabi_dcmpeq>
 8006c22:	4680      	mov	r8, r0
 8006c24:	b158      	cbz	r0, 8006c3e <_dtoa_r+0xce>
 8006c26:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006c28:	2301      	movs	r3, #1
 8006c2a:	6013      	str	r3, [r2, #0]
 8006c2c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c2e:	b113      	cbz	r3, 8006c36 <_dtoa_r+0xc6>
 8006c30:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006c32:	4b86      	ldr	r3, [pc, #536]	@ (8006e4c <_dtoa_r+0x2dc>)
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006e60 <_dtoa_r+0x2f0>
 8006c3a:	f000 bd40 	b.w	80076be <_dtoa_r+0xb4e>
 8006c3e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006c42:	aa14      	add	r2, sp, #80	@ 0x50
 8006c44:	a915      	add	r1, sp, #84	@ 0x54
 8006c46:	4648      	mov	r0, r9
 8006c48:	f001 f984 	bl	8007f54 <__d2b>
 8006c4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006c50:	9002      	str	r0, [sp, #8]
 8006c52:	2e00      	cmp	r6, #0
 8006c54:	d078      	beq.n	8006d48 <_dtoa_r+0x1d8>
 8006c56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c58:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006c68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006c6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006c70:	4619      	mov	r1, r3
 8006c72:	2200      	movs	r2, #0
 8006c74:	4b76      	ldr	r3, [pc, #472]	@ (8006e50 <_dtoa_r+0x2e0>)
 8006c76:	f7f9 fb27 	bl	80002c8 <__aeabi_dsub>
 8006c7a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006e28 <_dtoa_r+0x2b8>)
 8006c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c80:	f7f9 fcda 	bl	8000638 <__aeabi_dmul>
 8006c84:	a36a      	add	r3, pc, #424	@ (adr r3, 8006e30 <_dtoa_r+0x2c0>)
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f7f9 fb1f 	bl	80002cc <__adddf3>
 8006c8e:	4604      	mov	r4, r0
 8006c90:	4630      	mov	r0, r6
 8006c92:	460d      	mov	r5, r1
 8006c94:	f7f9 fc66 	bl	8000564 <__aeabi_i2d>
 8006c98:	a367      	add	r3, pc, #412	@ (adr r3, 8006e38 <_dtoa_r+0x2c8>)
 8006c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9e:	f7f9 fccb 	bl	8000638 <__aeabi_dmul>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	4629      	mov	r1, r5
 8006caa:	f7f9 fb0f 	bl	80002cc <__adddf3>
 8006cae:	4604      	mov	r4, r0
 8006cb0:	460d      	mov	r5, r1
 8006cb2:	f7f9 ff71 	bl	8000b98 <__aeabi_d2iz>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	4607      	mov	r7, r0
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	f7f9 ff2c 	bl	8000b1c <__aeabi_dcmplt>
 8006cc4:	b140      	cbz	r0, 8006cd8 <_dtoa_r+0x168>
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	f7f9 fc4c 	bl	8000564 <__aeabi_i2d>
 8006ccc:	4622      	mov	r2, r4
 8006cce:	462b      	mov	r3, r5
 8006cd0:	f7f9 ff1a 	bl	8000b08 <__aeabi_dcmpeq>
 8006cd4:	b900      	cbnz	r0, 8006cd8 <_dtoa_r+0x168>
 8006cd6:	3f01      	subs	r7, #1
 8006cd8:	2f16      	cmp	r7, #22
 8006cda:	d852      	bhi.n	8006d82 <_dtoa_r+0x212>
 8006cdc:	4b5d      	ldr	r3, [pc, #372]	@ (8006e54 <_dtoa_r+0x2e4>)
 8006cde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006cea:	f7f9 ff17 	bl	8000b1c <__aeabi_dcmplt>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d049      	beq.n	8006d86 <_dtoa_r+0x216>
 8006cf2:	3f01      	subs	r7, #1
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006cf8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006cfa:	1b9b      	subs	r3, r3, r6
 8006cfc:	1e5a      	subs	r2, r3, #1
 8006cfe:	bf45      	ittet	mi
 8006d00:	f1c3 0301 	rsbmi	r3, r3, #1
 8006d04:	9300      	strmi	r3, [sp, #0]
 8006d06:	2300      	movpl	r3, #0
 8006d08:	2300      	movmi	r3, #0
 8006d0a:	9206      	str	r2, [sp, #24]
 8006d0c:	bf54      	ite	pl
 8006d0e:	9300      	strpl	r3, [sp, #0]
 8006d10:	9306      	strmi	r3, [sp, #24]
 8006d12:	2f00      	cmp	r7, #0
 8006d14:	db39      	blt.n	8006d8a <_dtoa_r+0x21a>
 8006d16:	9b06      	ldr	r3, [sp, #24]
 8006d18:	970d      	str	r7, [sp, #52]	@ 0x34
 8006d1a:	443b      	add	r3, r7
 8006d1c:	9306      	str	r3, [sp, #24]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	9308      	str	r3, [sp, #32]
 8006d22:	9b07      	ldr	r3, [sp, #28]
 8006d24:	2b09      	cmp	r3, #9
 8006d26:	d863      	bhi.n	8006df0 <_dtoa_r+0x280>
 8006d28:	2b05      	cmp	r3, #5
 8006d2a:	bfc4      	itt	gt
 8006d2c:	3b04      	subgt	r3, #4
 8006d2e:	9307      	strgt	r3, [sp, #28]
 8006d30:	9b07      	ldr	r3, [sp, #28]
 8006d32:	f1a3 0302 	sub.w	r3, r3, #2
 8006d36:	bfcc      	ite	gt
 8006d38:	2400      	movgt	r4, #0
 8006d3a:	2401      	movle	r4, #1
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d863      	bhi.n	8006e08 <_dtoa_r+0x298>
 8006d40:	e8df f003 	tbb	[pc, r3]
 8006d44:	2b375452 	.word	0x2b375452
 8006d48:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006d4c:	441e      	add	r6, r3
 8006d4e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006d52:	2b20      	cmp	r3, #32
 8006d54:	bfc1      	itttt	gt
 8006d56:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006d5a:	409f      	lslgt	r7, r3
 8006d5c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006d60:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006d64:	bfd6      	itet	le
 8006d66:	f1c3 0320 	rsble	r3, r3, #32
 8006d6a:	ea47 0003 	orrgt.w	r0, r7, r3
 8006d6e:	fa04 f003 	lslle.w	r0, r4, r3
 8006d72:	f7f9 fbe7 	bl	8000544 <__aeabi_ui2d>
 8006d76:	2201      	movs	r2, #1
 8006d78:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006d7c:	3e01      	subs	r6, #1
 8006d7e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006d80:	e776      	b.n	8006c70 <_dtoa_r+0x100>
 8006d82:	2301      	movs	r3, #1
 8006d84:	e7b7      	b.n	8006cf6 <_dtoa_r+0x186>
 8006d86:	9010      	str	r0, [sp, #64]	@ 0x40
 8006d88:	e7b6      	b.n	8006cf8 <_dtoa_r+0x188>
 8006d8a:	9b00      	ldr	r3, [sp, #0]
 8006d8c:	1bdb      	subs	r3, r3, r7
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	427b      	negs	r3, r7
 8006d92:	9308      	str	r3, [sp, #32]
 8006d94:	2300      	movs	r3, #0
 8006d96:	930d      	str	r3, [sp, #52]	@ 0x34
 8006d98:	e7c3      	b.n	8006d22 <_dtoa_r+0x1b2>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006da0:	eb07 0b03 	add.w	fp, r7, r3
 8006da4:	f10b 0301 	add.w	r3, fp, #1
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	9303      	str	r3, [sp, #12]
 8006dac:	bfb8      	it	lt
 8006dae:	2301      	movlt	r3, #1
 8006db0:	e006      	b.n	8006dc0 <_dtoa_r+0x250>
 8006db2:	2301      	movs	r3, #1
 8006db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006db6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	dd28      	ble.n	8006e0e <_dtoa_r+0x29e>
 8006dbc:	469b      	mov	fp, r3
 8006dbe:	9303      	str	r3, [sp, #12]
 8006dc0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	2204      	movs	r2, #4
 8006dc8:	f102 0514 	add.w	r5, r2, #20
 8006dcc:	429d      	cmp	r5, r3
 8006dce:	d926      	bls.n	8006e1e <_dtoa_r+0x2ae>
 8006dd0:	6041      	str	r1, [r0, #4]
 8006dd2:	4648      	mov	r0, r9
 8006dd4:	f000 fd9c 	bl	8007910 <_Balloc>
 8006dd8:	4682      	mov	sl, r0
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	d142      	bne.n	8006e64 <_dtoa_r+0x2f4>
 8006dde:	4b1e      	ldr	r3, [pc, #120]	@ (8006e58 <_dtoa_r+0x2e8>)
 8006de0:	4602      	mov	r2, r0
 8006de2:	f240 11af 	movw	r1, #431	@ 0x1af
 8006de6:	e6da      	b.n	8006b9e <_dtoa_r+0x2e>
 8006de8:	2300      	movs	r3, #0
 8006dea:	e7e3      	b.n	8006db4 <_dtoa_r+0x244>
 8006dec:	2300      	movs	r3, #0
 8006dee:	e7d5      	b.n	8006d9c <_dtoa_r+0x22c>
 8006df0:	2401      	movs	r4, #1
 8006df2:	2300      	movs	r3, #0
 8006df4:	9307      	str	r3, [sp, #28]
 8006df6:	9409      	str	r4, [sp, #36]	@ 0x24
 8006df8:	f04f 3bff 	mov.w	fp, #4294967295
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f8cd b00c 	str.w	fp, [sp, #12]
 8006e02:	2312      	movs	r3, #18
 8006e04:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e06:	e7db      	b.n	8006dc0 <_dtoa_r+0x250>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e0c:	e7f4      	b.n	8006df8 <_dtoa_r+0x288>
 8006e0e:	f04f 0b01 	mov.w	fp, #1
 8006e12:	f8cd b00c 	str.w	fp, [sp, #12]
 8006e16:	465b      	mov	r3, fp
 8006e18:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006e1c:	e7d0      	b.n	8006dc0 <_dtoa_r+0x250>
 8006e1e:	3101      	adds	r1, #1
 8006e20:	0052      	lsls	r2, r2, #1
 8006e22:	e7d1      	b.n	8006dc8 <_dtoa_r+0x258>
 8006e24:	f3af 8000 	nop.w
 8006e28:	636f4361 	.word	0x636f4361
 8006e2c:	3fd287a7 	.word	0x3fd287a7
 8006e30:	8b60c8b3 	.word	0x8b60c8b3
 8006e34:	3fc68a28 	.word	0x3fc68a28
 8006e38:	509f79fb 	.word	0x509f79fb
 8006e3c:	3fd34413 	.word	0x3fd34413
 8006e40:	080087f9 	.word	0x080087f9
 8006e44:	08008810 	.word	0x08008810
 8006e48:	7ff00000 	.word	0x7ff00000
 8006e4c:	080087c9 	.word	0x080087c9
 8006e50:	3ff80000 	.word	0x3ff80000
 8006e54:	08008960 	.word	0x08008960
 8006e58:	08008868 	.word	0x08008868
 8006e5c:	080087f5 	.word	0x080087f5
 8006e60:	080087c8 	.word	0x080087c8
 8006e64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006e68:	6018      	str	r0, [r3, #0]
 8006e6a:	9b03      	ldr	r3, [sp, #12]
 8006e6c:	2b0e      	cmp	r3, #14
 8006e6e:	f200 80a1 	bhi.w	8006fb4 <_dtoa_r+0x444>
 8006e72:	2c00      	cmp	r4, #0
 8006e74:	f000 809e 	beq.w	8006fb4 <_dtoa_r+0x444>
 8006e78:	2f00      	cmp	r7, #0
 8006e7a:	dd33      	ble.n	8006ee4 <_dtoa_r+0x374>
 8006e7c:	4b9c      	ldr	r3, [pc, #624]	@ (80070f0 <_dtoa_r+0x580>)
 8006e7e:	f007 020f 	and.w	r2, r7, #15
 8006e82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e86:	ed93 7b00 	vldr	d7, [r3]
 8006e8a:	05f8      	lsls	r0, r7, #23
 8006e8c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006e90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006e94:	d516      	bpl.n	8006ec4 <_dtoa_r+0x354>
 8006e96:	4b97      	ldr	r3, [pc, #604]	@ (80070f4 <_dtoa_r+0x584>)
 8006e98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006e9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ea0:	f7f9 fcf4 	bl	800088c <__aeabi_ddiv>
 8006ea4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ea8:	f004 040f 	and.w	r4, r4, #15
 8006eac:	2603      	movs	r6, #3
 8006eae:	4d91      	ldr	r5, [pc, #580]	@ (80070f4 <_dtoa_r+0x584>)
 8006eb0:	b954      	cbnz	r4, 8006ec8 <_dtoa_r+0x358>
 8006eb2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006eb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eba:	f7f9 fce7 	bl	800088c <__aeabi_ddiv>
 8006ebe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ec2:	e028      	b.n	8006f16 <_dtoa_r+0x3a6>
 8006ec4:	2602      	movs	r6, #2
 8006ec6:	e7f2      	b.n	8006eae <_dtoa_r+0x33e>
 8006ec8:	07e1      	lsls	r1, r4, #31
 8006eca:	d508      	bpl.n	8006ede <_dtoa_r+0x36e>
 8006ecc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006ed0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ed4:	f7f9 fbb0 	bl	8000638 <__aeabi_dmul>
 8006ed8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006edc:	3601      	adds	r6, #1
 8006ede:	1064      	asrs	r4, r4, #1
 8006ee0:	3508      	adds	r5, #8
 8006ee2:	e7e5      	b.n	8006eb0 <_dtoa_r+0x340>
 8006ee4:	f000 80af 	beq.w	8007046 <_dtoa_r+0x4d6>
 8006ee8:	427c      	negs	r4, r7
 8006eea:	4b81      	ldr	r3, [pc, #516]	@ (80070f0 <_dtoa_r+0x580>)
 8006eec:	4d81      	ldr	r5, [pc, #516]	@ (80070f4 <_dtoa_r+0x584>)
 8006eee:	f004 020f 	and.w	r2, r4, #15
 8006ef2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006efe:	f7f9 fb9b 	bl	8000638 <__aeabi_dmul>
 8006f02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f06:	1124      	asrs	r4, r4, #4
 8006f08:	2300      	movs	r3, #0
 8006f0a:	2602      	movs	r6, #2
 8006f0c:	2c00      	cmp	r4, #0
 8006f0e:	f040 808f 	bne.w	8007030 <_dtoa_r+0x4c0>
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1d3      	bne.n	8006ebe <_dtoa_r+0x34e>
 8006f16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f18:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8094 	beq.w	800704a <_dtoa_r+0x4da>
 8006f22:	4b75      	ldr	r3, [pc, #468]	@ (80070f8 <_dtoa_r+0x588>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	4620      	mov	r0, r4
 8006f28:	4629      	mov	r1, r5
 8006f2a:	f7f9 fdf7 	bl	8000b1c <__aeabi_dcmplt>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	f000 808b 	beq.w	800704a <_dtoa_r+0x4da>
 8006f34:	9b03      	ldr	r3, [sp, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f000 8087 	beq.w	800704a <_dtoa_r+0x4da>
 8006f3c:	f1bb 0f00 	cmp.w	fp, #0
 8006f40:	dd34      	ble.n	8006fac <_dtoa_r+0x43c>
 8006f42:	4620      	mov	r0, r4
 8006f44:	4b6d      	ldr	r3, [pc, #436]	@ (80070fc <_dtoa_r+0x58c>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	4629      	mov	r1, r5
 8006f4a:	f7f9 fb75 	bl	8000638 <__aeabi_dmul>
 8006f4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f52:	f107 38ff 	add.w	r8, r7, #4294967295
 8006f56:	3601      	adds	r6, #1
 8006f58:	465c      	mov	r4, fp
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f7f9 fb02 	bl	8000564 <__aeabi_i2d>
 8006f60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f64:	f7f9 fb68 	bl	8000638 <__aeabi_dmul>
 8006f68:	4b65      	ldr	r3, [pc, #404]	@ (8007100 <_dtoa_r+0x590>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f7f9 f9ae 	bl	80002cc <__adddf3>
 8006f70:	4605      	mov	r5, r0
 8006f72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006f76:	2c00      	cmp	r4, #0
 8006f78:	d16a      	bne.n	8007050 <_dtoa_r+0x4e0>
 8006f7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f7e:	4b61      	ldr	r3, [pc, #388]	@ (8007104 <_dtoa_r+0x594>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	f7f9 f9a1 	bl	80002c8 <__aeabi_dsub>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f8e:	462a      	mov	r2, r5
 8006f90:	4633      	mov	r3, r6
 8006f92:	f7f9 fde1 	bl	8000b58 <__aeabi_dcmpgt>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f040 8298 	bne.w	80074cc <_dtoa_r+0x95c>
 8006f9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fa0:	462a      	mov	r2, r5
 8006fa2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006fa6:	f7f9 fdb9 	bl	8000b1c <__aeabi_dcmplt>
 8006faa:	bb38      	cbnz	r0, 8006ffc <_dtoa_r+0x48c>
 8006fac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006fb0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006fb4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f2c0 8157 	blt.w	800726a <_dtoa_r+0x6fa>
 8006fbc:	2f0e      	cmp	r7, #14
 8006fbe:	f300 8154 	bgt.w	800726a <_dtoa_r+0x6fa>
 8006fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80070f0 <_dtoa_r+0x580>)
 8006fc4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006fc8:	ed93 7b00 	vldr	d7, [r3]
 8006fcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	ed8d 7b00 	vstr	d7, [sp]
 8006fd4:	f280 80e5 	bge.w	80071a2 <_dtoa_r+0x632>
 8006fd8:	9b03      	ldr	r3, [sp, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f300 80e1 	bgt.w	80071a2 <_dtoa_r+0x632>
 8006fe0:	d10c      	bne.n	8006ffc <_dtoa_r+0x48c>
 8006fe2:	4b48      	ldr	r3, [pc, #288]	@ (8007104 <_dtoa_r+0x594>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	ec51 0b17 	vmov	r0, r1, d7
 8006fea:	f7f9 fb25 	bl	8000638 <__aeabi_dmul>
 8006fee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ff2:	f7f9 fda7 	bl	8000b44 <__aeabi_dcmpge>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f000 8266 	beq.w	80074c8 <_dtoa_r+0x958>
 8006ffc:	2400      	movs	r4, #0
 8006ffe:	4625      	mov	r5, r4
 8007000:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007002:	4656      	mov	r6, sl
 8007004:	ea6f 0803 	mvn.w	r8, r3
 8007008:	2700      	movs	r7, #0
 800700a:	4621      	mov	r1, r4
 800700c:	4648      	mov	r0, r9
 800700e:	f000 fcbf 	bl	8007990 <_Bfree>
 8007012:	2d00      	cmp	r5, #0
 8007014:	f000 80bd 	beq.w	8007192 <_dtoa_r+0x622>
 8007018:	b12f      	cbz	r7, 8007026 <_dtoa_r+0x4b6>
 800701a:	42af      	cmp	r7, r5
 800701c:	d003      	beq.n	8007026 <_dtoa_r+0x4b6>
 800701e:	4639      	mov	r1, r7
 8007020:	4648      	mov	r0, r9
 8007022:	f000 fcb5 	bl	8007990 <_Bfree>
 8007026:	4629      	mov	r1, r5
 8007028:	4648      	mov	r0, r9
 800702a:	f000 fcb1 	bl	8007990 <_Bfree>
 800702e:	e0b0      	b.n	8007192 <_dtoa_r+0x622>
 8007030:	07e2      	lsls	r2, r4, #31
 8007032:	d505      	bpl.n	8007040 <_dtoa_r+0x4d0>
 8007034:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007038:	f7f9 fafe 	bl	8000638 <__aeabi_dmul>
 800703c:	3601      	adds	r6, #1
 800703e:	2301      	movs	r3, #1
 8007040:	1064      	asrs	r4, r4, #1
 8007042:	3508      	adds	r5, #8
 8007044:	e762      	b.n	8006f0c <_dtoa_r+0x39c>
 8007046:	2602      	movs	r6, #2
 8007048:	e765      	b.n	8006f16 <_dtoa_r+0x3a6>
 800704a:	9c03      	ldr	r4, [sp, #12]
 800704c:	46b8      	mov	r8, r7
 800704e:	e784      	b.n	8006f5a <_dtoa_r+0x3ea>
 8007050:	4b27      	ldr	r3, [pc, #156]	@ (80070f0 <_dtoa_r+0x580>)
 8007052:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007054:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007058:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800705c:	4454      	add	r4, sl
 800705e:	2900      	cmp	r1, #0
 8007060:	d054      	beq.n	800710c <_dtoa_r+0x59c>
 8007062:	4929      	ldr	r1, [pc, #164]	@ (8007108 <_dtoa_r+0x598>)
 8007064:	2000      	movs	r0, #0
 8007066:	f7f9 fc11 	bl	800088c <__aeabi_ddiv>
 800706a:	4633      	mov	r3, r6
 800706c:	462a      	mov	r2, r5
 800706e:	f7f9 f92b 	bl	80002c8 <__aeabi_dsub>
 8007072:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007076:	4656      	mov	r6, sl
 8007078:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800707c:	f7f9 fd8c 	bl	8000b98 <__aeabi_d2iz>
 8007080:	4605      	mov	r5, r0
 8007082:	f7f9 fa6f 	bl	8000564 <__aeabi_i2d>
 8007086:	4602      	mov	r2, r0
 8007088:	460b      	mov	r3, r1
 800708a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800708e:	f7f9 f91b 	bl	80002c8 <__aeabi_dsub>
 8007092:	3530      	adds	r5, #48	@ 0x30
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800709c:	f806 5b01 	strb.w	r5, [r6], #1
 80070a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80070a4:	f7f9 fd3a 	bl	8000b1c <__aeabi_dcmplt>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d172      	bne.n	8007192 <_dtoa_r+0x622>
 80070ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070b0:	4911      	ldr	r1, [pc, #68]	@ (80070f8 <_dtoa_r+0x588>)
 80070b2:	2000      	movs	r0, #0
 80070b4:	f7f9 f908 	bl	80002c8 <__aeabi_dsub>
 80070b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80070bc:	f7f9 fd2e 	bl	8000b1c <__aeabi_dcmplt>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	f040 80b4 	bne.w	800722e <_dtoa_r+0x6be>
 80070c6:	42a6      	cmp	r6, r4
 80070c8:	f43f af70 	beq.w	8006fac <_dtoa_r+0x43c>
 80070cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80070d0:	4b0a      	ldr	r3, [pc, #40]	@ (80070fc <_dtoa_r+0x58c>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	f7f9 fab0 	bl	8000638 <__aeabi_dmul>
 80070d8:	4b08      	ldr	r3, [pc, #32]	@ (80070fc <_dtoa_r+0x58c>)
 80070da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80070de:	2200      	movs	r2, #0
 80070e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070e4:	f7f9 faa8 	bl	8000638 <__aeabi_dmul>
 80070e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070ec:	e7c4      	b.n	8007078 <_dtoa_r+0x508>
 80070ee:	bf00      	nop
 80070f0:	08008960 	.word	0x08008960
 80070f4:	08008938 	.word	0x08008938
 80070f8:	3ff00000 	.word	0x3ff00000
 80070fc:	40240000 	.word	0x40240000
 8007100:	401c0000 	.word	0x401c0000
 8007104:	40140000 	.word	0x40140000
 8007108:	3fe00000 	.word	0x3fe00000
 800710c:	4631      	mov	r1, r6
 800710e:	4628      	mov	r0, r5
 8007110:	f7f9 fa92 	bl	8000638 <__aeabi_dmul>
 8007114:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007118:	9413      	str	r4, [sp, #76]	@ 0x4c
 800711a:	4656      	mov	r6, sl
 800711c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007120:	f7f9 fd3a 	bl	8000b98 <__aeabi_d2iz>
 8007124:	4605      	mov	r5, r0
 8007126:	f7f9 fa1d 	bl	8000564 <__aeabi_i2d>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007132:	f7f9 f8c9 	bl	80002c8 <__aeabi_dsub>
 8007136:	3530      	adds	r5, #48	@ 0x30
 8007138:	f806 5b01 	strb.w	r5, [r6], #1
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	42a6      	cmp	r6, r4
 8007142:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007146:	f04f 0200 	mov.w	r2, #0
 800714a:	d124      	bne.n	8007196 <_dtoa_r+0x626>
 800714c:	4baf      	ldr	r3, [pc, #700]	@ (800740c <_dtoa_r+0x89c>)
 800714e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007152:	f7f9 f8bb 	bl	80002cc <__adddf3>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800715e:	f7f9 fcfb 	bl	8000b58 <__aeabi_dcmpgt>
 8007162:	2800      	cmp	r0, #0
 8007164:	d163      	bne.n	800722e <_dtoa_r+0x6be>
 8007166:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800716a:	49a8      	ldr	r1, [pc, #672]	@ (800740c <_dtoa_r+0x89c>)
 800716c:	2000      	movs	r0, #0
 800716e:	f7f9 f8ab 	bl	80002c8 <__aeabi_dsub>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800717a:	f7f9 fccf 	bl	8000b1c <__aeabi_dcmplt>
 800717e:	2800      	cmp	r0, #0
 8007180:	f43f af14 	beq.w	8006fac <_dtoa_r+0x43c>
 8007184:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007186:	1e73      	subs	r3, r6, #1
 8007188:	9313      	str	r3, [sp, #76]	@ 0x4c
 800718a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800718e:	2b30      	cmp	r3, #48	@ 0x30
 8007190:	d0f8      	beq.n	8007184 <_dtoa_r+0x614>
 8007192:	4647      	mov	r7, r8
 8007194:	e03b      	b.n	800720e <_dtoa_r+0x69e>
 8007196:	4b9e      	ldr	r3, [pc, #632]	@ (8007410 <_dtoa_r+0x8a0>)
 8007198:	f7f9 fa4e 	bl	8000638 <__aeabi_dmul>
 800719c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071a0:	e7bc      	b.n	800711c <_dtoa_r+0x5ac>
 80071a2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80071a6:	4656      	mov	r6, sl
 80071a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071ac:	4620      	mov	r0, r4
 80071ae:	4629      	mov	r1, r5
 80071b0:	f7f9 fb6c 	bl	800088c <__aeabi_ddiv>
 80071b4:	f7f9 fcf0 	bl	8000b98 <__aeabi_d2iz>
 80071b8:	4680      	mov	r8, r0
 80071ba:	f7f9 f9d3 	bl	8000564 <__aeabi_i2d>
 80071be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071c2:	f7f9 fa39 	bl	8000638 <__aeabi_dmul>
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	4620      	mov	r0, r4
 80071cc:	4629      	mov	r1, r5
 80071ce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80071d2:	f7f9 f879 	bl	80002c8 <__aeabi_dsub>
 80071d6:	f806 4b01 	strb.w	r4, [r6], #1
 80071da:	9d03      	ldr	r5, [sp, #12]
 80071dc:	eba6 040a 	sub.w	r4, r6, sl
 80071e0:	42a5      	cmp	r5, r4
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	d133      	bne.n	8007250 <_dtoa_r+0x6e0>
 80071e8:	f7f9 f870 	bl	80002cc <__adddf3>
 80071ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071f0:	4604      	mov	r4, r0
 80071f2:	460d      	mov	r5, r1
 80071f4:	f7f9 fcb0 	bl	8000b58 <__aeabi_dcmpgt>
 80071f8:	b9c0      	cbnz	r0, 800722c <_dtoa_r+0x6bc>
 80071fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071fe:	4620      	mov	r0, r4
 8007200:	4629      	mov	r1, r5
 8007202:	f7f9 fc81 	bl	8000b08 <__aeabi_dcmpeq>
 8007206:	b110      	cbz	r0, 800720e <_dtoa_r+0x69e>
 8007208:	f018 0f01 	tst.w	r8, #1
 800720c:	d10e      	bne.n	800722c <_dtoa_r+0x6bc>
 800720e:	9902      	ldr	r1, [sp, #8]
 8007210:	4648      	mov	r0, r9
 8007212:	f000 fbbd 	bl	8007990 <_Bfree>
 8007216:	2300      	movs	r3, #0
 8007218:	7033      	strb	r3, [r6, #0]
 800721a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800721c:	3701      	adds	r7, #1
 800721e:	601f      	str	r7, [r3, #0]
 8007220:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 824b 	beq.w	80076be <_dtoa_r+0xb4e>
 8007228:	601e      	str	r6, [r3, #0]
 800722a:	e248      	b.n	80076be <_dtoa_r+0xb4e>
 800722c:	46b8      	mov	r8, r7
 800722e:	4633      	mov	r3, r6
 8007230:	461e      	mov	r6, r3
 8007232:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007236:	2a39      	cmp	r2, #57	@ 0x39
 8007238:	d106      	bne.n	8007248 <_dtoa_r+0x6d8>
 800723a:	459a      	cmp	sl, r3
 800723c:	d1f8      	bne.n	8007230 <_dtoa_r+0x6c0>
 800723e:	2230      	movs	r2, #48	@ 0x30
 8007240:	f108 0801 	add.w	r8, r8, #1
 8007244:	f88a 2000 	strb.w	r2, [sl]
 8007248:	781a      	ldrb	r2, [r3, #0]
 800724a:	3201      	adds	r2, #1
 800724c:	701a      	strb	r2, [r3, #0]
 800724e:	e7a0      	b.n	8007192 <_dtoa_r+0x622>
 8007250:	4b6f      	ldr	r3, [pc, #444]	@ (8007410 <_dtoa_r+0x8a0>)
 8007252:	2200      	movs	r2, #0
 8007254:	f7f9 f9f0 	bl	8000638 <__aeabi_dmul>
 8007258:	2200      	movs	r2, #0
 800725a:	2300      	movs	r3, #0
 800725c:	4604      	mov	r4, r0
 800725e:	460d      	mov	r5, r1
 8007260:	f7f9 fc52 	bl	8000b08 <__aeabi_dcmpeq>
 8007264:	2800      	cmp	r0, #0
 8007266:	d09f      	beq.n	80071a8 <_dtoa_r+0x638>
 8007268:	e7d1      	b.n	800720e <_dtoa_r+0x69e>
 800726a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800726c:	2a00      	cmp	r2, #0
 800726e:	f000 80ea 	beq.w	8007446 <_dtoa_r+0x8d6>
 8007272:	9a07      	ldr	r2, [sp, #28]
 8007274:	2a01      	cmp	r2, #1
 8007276:	f300 80cd 	bgt.w	8007414 <_dtoa_r+0x8a4>
 800727a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800727c:	2a00      	cmp	r2, #0
 800727e:	f000 80c1 	beq.w	8007404 <_dtoa_r+0x894>
 8007282:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007286:	9c08      	ldr	r4, [sp, #32]
 8007288:	9e00      	ldr	r6, [sp, #0]
 800728a:	9a00      	ldr	r2, [sp, #0]
 800728c:	441a      	add	r2, r3
 800728e:	9200      	str	r2, [sp, #0]
 8007290:	9a06      	ldr	r2, [sp, #24]
 8007292:	2101      	movs	r1, #1
 8007294:	441a      	add	r2, r3
 8007296:	4648      	mov	r0, r9
 8007298:	9206      	str	r2, [sp, #24]
 800729a:	f000 fc2d 	bl	8007af8 <__i2b>
 800729e:	4605      	mov	r5, r0
 80072a0:	b166      	cbz	r6, 80072bc <_dtoa_r+0x74c>
 80072a2:	9b06      	ldr	r3, [sp, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	dd09      	ble.n	80072bc <_dtoa_r+0x74c>
 80072a8:	42b3      	cmp	r3, r6
 80072aa:	9a00      	ldr	r2, [sp, #0]
 80072ac:	bfa8      	it	ge
 80072ae:	4633      	movge	r3, r6
 80072b0:	1ad2      	subs	r2, r2, r3
 80072b2:	9200      	str	r2, [sp, #0]
 80072b4:	9a06      	ldr	r2, [sp, #24]
 80072b6:	1af6      	subs	r6, r6, r3
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	9306      	str	r3, [sp, #24]
 80072bc:	9b08      	ldr	r3, [sp, #32]
 80072be:	b30b      	cbz	r3, 8007304 <_dtoa_r+0x794>
 80072c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 80c6 	beq.w	8007454 <_dtoa_r+0x8e4>
 80072c8:	2c00      	cmp	r4, #0
 80072ca:	f000 80c0 	beq.w	800744e <_dtoa_r+0x8de>
 80072ce:	4629      	mov	r1, r5
 80072d0:	4622      	mov	r2, r4
 80072d2:	4648      	mov	r0, r9
 80072d4:	f000 fcc8 	bl	8007c68 <__pow5mult>
 80072d8:	9a02      	ldr	r2, [sp, #8]
 80072da:	4601      	mov	r1, r0
 80072dc:	4605      	mov	r5, r0
 80072de:	4648      	mov	r0, r9
 80072e0:	f000 fc20 	bl	8007b24 <__multiply>
 80072e4:	9902      	ldr	r1, [sp, #8]
 80072e6:	4680      	mov	r8, r0
 80072e8:	4648      	mov	r0, r9
 80072ea:	f000 fb51 	bl	8007990 <_Bfree>
 80072ee:	9b08      	ldr	r3, [sp, #32]
 80072f0:	1b1b      	subs	r3, r3, r4
 80072f2:	9308      	str	r3, [sp, #32]
 80072f4:	f000 80b1 	beq.w	800745a <_dtoa_r+0x8ea>
 80072f8:	9a08      	ldr	r2, [sp, #32]
 80072fa:	4641      	mov	r1, r8
 80072fc:	4648      	mov	r0, r9
 80072fe:	f000 fcb3 	bl	8007c68 <__pow5mult>
 8007302:	9002      	str	r0, [sp, #8]
 8007304:	2101      	movs	r1, #1
 8007306:	4648      	mov	r0, r9
 8007308:	f000 fbf6 	bl	8007af8 <__i2b>
 800730c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800730e:	4604      	mov	r4, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 81d8 	beq.w	80076c6 <_dtoa_r+0xb56>
 8007316:	461a      	mov	r2, r3
 8007318:	4601      	mov	r1, r0
 800731a:	4648      	mov	r0, r9
 800731c:	f000 fca4 	bl	8007c68 <__pow5mult>
 8007320:	9b07      	ldr	r3, [sp, #28]
 8007322:	2b01      	cmp	r3, #1
 8007324:	4604      	mov	r4, r0
 8007326:	f300 809f 	bgt.w	8007468 <_dtoa_r+0x8f8>
 800732a:	9b04      	ldr	r3, [sp, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	f040 8097 	bne.w	8007460 <_dtoa_r+0x8f0>
 8007332:	9b05      	ldr	r3, [sp, #20]
 8007334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007338:	2b00      	cmp	r3, #0
 800733a:	f040 8093 	bne.w	8007464 <_dtoa_r+0x8f4>
 800733e:	9b05      	ldr	r3, [sp, #20]
 8007340:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007344:	0d1b      	lsrs	r3, r3, #20
 8007346:	051b      	lsls	r3, r3, #20
 8007348:	b133      	cbz	r3, 8007358 <_dtoa_r+0x7e8>
 800734a:	9b00      	ldr	r3, [sp, #0]
 800734c:	3301      	adds	r3, #1
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	9b06      	ldr	r3, [sp, #24]
 8007352:	3301      	adds	r3, #1
 8007354:	9306      	str	r3, [sp, #24]
 8007356:	2301      	movs	r3, #1
 8007358:	9308      	str	r3, [sp, #32]
 800735a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 81b8 	beq.w	80076d2 <_dtoa_r+0xb62>
 8007362:	6923      	ldr	r3, [r4, #16]
 8007364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007368:	6918      	ldr	r0, [r3, #16]
 800736a:	f000 fb79 	bl	8007a60 <__hi0bits>
 800736e:	f1c0 0020 	rsb	r0, r0, #32
 8007372:	9b06      	ldr	r3, [sp, #24]
 8007374:	4418      	add	r0, r3
 8007376:	f010 001f 	ands.w	r0, r0, #31
 800737a:	f000 8082 	beq.w	8007482 <_dtoa_r+0x912>
 800737e:	f1c0 0320 	rsb	r3, r0, #32
 8007382:	2b04      	cmp	r3, #4
 8007384:	dd73      	ble.n	800746e <_dtoa_r+0x8fe>
 8007386:	9b00      	ldr	r3, [sp, #0]
 8007388:	f1c0 001c 	rsb	r0, r0, #28
 800738c:	4403      	add	r3, r0
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	9b06      	ldr	r3, [sp, #24]
 8007392:	4403      	add	r3, r0
 8007394:	4406      	add	r6, r0
 8007396:	9306      	str	r3, [sp, #24]
 8007398:	9b00      	ldr	r3, [sp, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	dd05      	ble.n	80073aa <_dtoa_r+0x83a>
 800739e:	9902      	ldr	r1, [sp, #8]
 80073a0:	461a      	mov	r2, r3
 80073a2:	4648      	mov	r0, r9
 80073a4:	f000 fcba 	bl	8007d1c <__lshift>
 80073a8:	9002      	str	r0, [sp, #8]
 80073aa:	9b06      	ldr	r3, [sp, #24]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	dd05      	ble.n	80073bc <_dtoa_r+0x84c>
 80073b0:	4621      	mov	r1, r4
 80073b2:	461a      	mov	r2, r3
 80073b4:	4648      	mov	r0, r9
 80073b6:	f000 fcb1 	bl	8007d1c <__lshift>
 80073ba:	4604      	mov	r4, r0
 80073bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d061      	beq.n	8007486 <_dtoa_r+0x916>
 80073c2:	9802      	ldr	r0, [sp, #8]
 80073c4:	4621      	mov	r1, r4
 80073c6:	f000 fd15 	bl	8007df4 <__mcmp>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	da5b      	bge.n	8007486 <_dtoa_r+0x916>
 80073ce:	2300      	movs	r3, #0
 80073d0:	9902      	ldr	r1, [sp, #8]
 80073d2:	220a      	movs	r2, #10
 80073d4:	4648      	mov	r0, r9
 80073d6:	f000 fafd 	bl	80079d4 <__multadd>
 80073da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073dc:	9002      	str	r0, [sp, #8]
 80073de:	f107 38ff 	add.w	r8, r7, #4294967295
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 8177 	beq.w	80076d6 <_dtoa_r+0xb66>
 80073e8:	4629      	mov	r1, r5
 80073ea:	2300      	movs	r3, #0
 80073ec:	220a      	movs	r2, #10
 80073ee:	4648      	mov	r0, r9
 80073f0:	f000 faf0 	bl	80079d4 <__multadd>
 80073f4:	f1bb 0f00 	cmp.w	fp, #0
 80073f8:	4605      	mov	r5, r0
 80073fa:	dc6f      	bgt.n	80074dc <_dtoa_r+0x96c>
 80073fc:	9b07      	ldr	r3, [sp, #28]
 80073fe:	2b02      	cmp	r3, #2
 8007400:	dc49      	bgt.n	8007496 <_dtoa_r+0x926>
 8007402:	e06b      	b.n	80074dc <_dtoa_r+0x96c>
 8007404:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007406:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800740a:	e73c      	b.n	8007286 <_dtoa_r+0x716>
 800740c:	3fe00000 	.word	0x3fe00000
 8007410:	40240000 	.word	0x40240000
 8007414:	9b03      	ldr	r3, [sp, #12]
 8007416:	1e5c      	subs	r4, r3, #1
 8007418:	9b08      	ldr	r3, [sp, #32]
 800741a:	42a3      	cmp	r3, r4
 800741c:	db09      	blt.n	8007432 <_dtoa_r+0x8c2>
 800741e:	1b1c      	subs	r4, r3, r4
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	f6bf af30 	bge.w	8007288 <_dtoa_r+0x718>
 8007428:	9b00      	ldr	r3, [sp, #0]
 800742a:	9a03      	ldr	r2, [sp, #12]
 800742c:	1a9e      	subs	r6, r3, r2
 800742e:	2300      	movs	r3, #0
 8007430:	e72b      	b.n	800728a <_dtoa_r+0x71a>
 8007432:	9b08      	ldr	r3, [sp, #32]
 8007434:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007436:	9408      	str	r4, [sp, #32]
 8007438:	1ae3      	subs	r3, r4, r3
 800743a:	441a      	add	r2, r3
 800743c:	9e00      	ldr	r6, [sp, #0]
 800743e:	9b03      	ldr	r3, [sp, #12]
 8007440:	920d      	str	r2, [sp, #52]	@ 0x34
 8007442:	2400      	movs	r4, #0
 8007444:	e721      	b.n	800728a <_dtoa_r+0x71a>
 8007446:	9c08      	ldr	r4, [sp, #32]
 8007448:	9e00      	ldr	r6, [sp, #0]
 800744a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800744c:	e728      	b.n	80072a0 <_dtoa_r+0x730>
 800744e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007452:	e751      	b.n	80072f8 <_dtoa_r+0x788>
 8007454:	9a08      	ldr	r2, [sp, #32]
 8007456:	9902      	ldr	r1, [sp, #8]
 8007458:	e750      	b.n	80072fc <_dtoa_r+0x78c>
 800745a:	f8cd 8008 	str.w	r8, [sp, #8]
 800745e:	e751      	b.n	8007304 <_dtoa_r+0x794>
 8007460:	2300      	movs	r3, #0
 8007462:	e779      	b.n	8007358 <_dtoa_r+0x7e8>
 8007464:	9b04      	ldr	r3, [sp, #16]
 8007466:	e777      	b.n	8007358 <_dtoa_r+0x7e8>
 8007468:	2300      	movs	r3, #0
 800746a:	9308      	str	r3, [sp, #32]
 800746c:	e779      	b.n	8007362 <_dtoa_r+0x7f2>
 800746e:	d093      	beq.n	8007398 <_dtoa_r+0x828>
 8007470:	9a00      	ldr	r2, [sp, #0]
 8007472:	331c      	adds	r3, #28
 8007474:	441a      	add	r2, r3
 8007476:	9200      	str	r2, [sp, #0]
 8007478:	9a06      	ldr	r2, [sp, #24]
 800747a:	441a      	add	r2, r3
 800747c:	441e      	add	r6, r3
 800747e:	9206      	str	r2, [sp, #24]
 8007480:	e78a      	b.n	8007398 <_dtoa_r+0x828>
 8007482:	4603      	mov	r3, r0
 8007484:	e7f4      	b.n	8007470 <_dtoa_r+0x900>
 8007486:	9b03      	ldr	r3, [sp, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	46b8      	mov	r8, r7
 800748c:	dc20      	bgt.n	80074d0 <_dtoa_r+0x960>
 800748e:	469b      	mov	fp, r3
 8007490:	9b07      	ldr	r3, [sp, #28]
 8007492:	2b02      	cmp	r3, #2
 8007494:	dd1e      	ble.n	80074d4 <_dtoa_r+0x964>
 8007496:	f1bb 0f00 	cmp.w	fp, #0
 800749a:	f47f adb1 	bne.w	8007000 <_dtoa_r+0x490>
 800749e:	4621      	mov	r1, r4
 80074a0:	465b      	mov	r3, fp
 80074a2:	2205      	movs	r2, #5
 80074a4:	4648      	mov	r0, r9
 80074a6:	f000 fa95 	bl	80079d4 <__multadd>
 80074aa:	4601      	mov	r1, r0
 80074ac:	4604      	mov	r4, r0
 80074ae:	9802      	ldr	r0, [sp, #8]
 80074b0:	f000 fca0 	bl	8007df4 <__mcmp>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	f77f ada3 	ble.w	8007000 <_dtoa_r+0x490>
 80074ba:	4656      	mov	r6, sl
 80074bc:	2331      	movs	r3, #49	@ 0x31
 80074be:	f806 3b01 	strb.w	r3, [r6], #1
 80074c2:	f108 0801 	add.w	r8, r8, #1
 80074c6:	e59f      	b.n	8007008 <_dtoa_r+0x498>
 80074c8:	9c03      	ldr	r4, [sp, #12]
 80074ca:	46b8      	mov	r8, r7
 80074cc:	4625      	mov	r5, r4
 80074ce:	e7f4      	b.n	80074ba <_dtoa_r+0x94a>
 80074d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80074d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 8101 	beq.w	80076de <_dtoa_r+0xb6e>
 80074dc:	2e00      	cmp	r6, #0
 80074de:	dd05      	ble.n	80074ec <_dtoa_r+0x97c>
 80074e0:	4629      	mov	r1, r5
 80074e2:	4632      	mov	r2, r6
 80074e4:	4648      	mov	r0, r9
 80074e6:	f000 fc19 	bl	8007d1c <__lshift>
 80074ea:	4605      	mov	r5, r0
 80074ec:	9b08      	ldr	r3, [sp, #32]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d05c      	beq.n	80075ac <_dtoa_r+0xa3c>
 80074f2:	6869      	ldr	r1, [r5, #4]
 80074f4:	4648      	mov	r0, r9
 80074f6:	f000 fa0b 	bl	8007910 <_Balloc>
 80074fa:	4606      	mov	r6, r0
 80074fc:	b928      	cbnz	r0, 800750a <_dtoa_r+0x99a>
 80074fe:	4b82      	ldr	r3, [pc, #520]	@ (8007708 <_dtoa_r+0xb98>)
 8007500:	4602      	mov	r2, r0
 8007502:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007506:	f7ff bb4a 	b.w	8006b9e <_dtoa_r+0x2e>
 800750a:	692a      	ldr	r2, [r5, #16]
 800750c:	3202      	adds	r2, #2
 800750e:	0092      	lsls	r2, r2, #2
 8007510:	f105 010c 	add.w	r1, r5, #12
 8007514:	300c      	adds	r0, #12
 8007516:	f7ff fa94 	bl	8006a42 <memcpy>
 800751a:	2201      	movs	r2, #1
 800751c:	4631      	mov	r1, r6
 800751e:	4648      	mov	r0, r9
 8007520:	f000 fbfc 	bl	8007d1c <__lshift>
 8007524:	f10a 0301 	add.w	r3, sl, #1
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	eb0a 030b 	add.w	r3, sl, fp
 800752e:	9308      	str	r3, [sp, #32]
 8007530:	9b04      	ldr	r3, [sp, #16]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	462f      	mov	r7, r5
 8007538:	9306      	str	r3, [sp, #24]
 800753a:	4605      	mov	r5, r0
 800753c:	9b00      	ldr	r3, [sp, #0]
 800753e:	9802      	ldr	r0, [sp, #8]
 8007540:	4621      	mov	r1, r4
 8007542:	f103 3bff 	add.w	fp, r3, #4294967295
 8007546:	f7ff fa8a 	bl	8006a5e <quorem>
 800754a:	4603      	mov	r3, r0
 800754c:	3330      	adds	r3, #48	@ 0x30
 800754e:	9003      	str	r0, [sp, #12]
 8007550:	4639      	mov	r1, r7
 8007552:	9802      	ldr	r0, [sp, #8]
 8007554:	9309      	str	r3, [sp, #36]	@ 0x24
 8007556:	f000 fc4d 	bl	8007df4 <__mcmp>
 800755a:	462a      	mov	r2, r5
 800755c:	9004      	str	r0, [sp, #16]
 800755e:	4621      	mov	r1, r4
 8007560:	4648      	mov	r0, r9
 8007562:	f000 fc63 	bl	8007e2c <__mdiff>
 8007566:	68c2      	ldr	r2, [r0, #12]
 8007568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800756a:	4606      	mov	r6, r0
 800756c:	bb02      	cbnz	r2, 80075b0 <_dtoa_r+0xa40>
 800756e:	4601      	mov	r1, r0
 8007570:	9802      	ldr	r0, [sp, #8]
 8007572:	f000 fc3f 	bl	8007df4 <__mcmp>
 8007576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007578:	4602      	mov	r2, r0
 800757a:	4631      	mov	r1, r6
 800757c:	4648      	mov	r0, r9
 800757e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007580:	9309      	str	r3, [sp, #36]	@ 0x24
 8007582:	f000 fa05 	bl	8007990 <_Bfree>
 8007586:	9b07      	ldr	r3, [sp, #28]
 8007588:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800758a:	9e00      	ldr	r6, [sp, #0]
 800758c:	ea42 0103 	orr.w	r1, r2, r3
 8007590:	9b06      	ldr	r3, [sp, #24]
 8007592:	4319      	orrs	r1, r3
 8007594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007596:	d10d      	bne.n	80075b4 <_dtoa_r+0xa44>
 8007598:	2b39      	cmp	r3, #57	@ 0x39
 800759a:	d027      	beq.n	80075ec <_dtoa_r+0xa7c>
 800759c:	9a04      	ldr	r2, [sp, #16]
 800759e:	2a00      	cmp	r2, #0
 80075a0:	dd01      	ble.n	80075a6 <_dtoa_r+0xa36>
 80075a2:	9b03      	ldr	r3, [sp, #12]
 80075a4:	3331      	adds	r3, #49	@ 0x31
 80075a6:	f88b 3000 	strb.w	r3, [fp]
 80075aa:	e52e      	b.n	800700a <_dtoa_r+0x49a>
 80075ac:	4628      	mov	r0, r5
 80075ae:	e7b9      	b.n	8007524 <_dtoa_r+0x9b4>
 80075b0:	2201      	movs	r2, #1
 80075b2:	e7e2      	b.n	800757a <_dtoa_r+0xa0a>
 80075b4:	9904      	ldr	r1, [sp, #16]
 80075b6:	2900      	cmp	r1, #0
 80075b8:	db04      	blt.n	80075c4 <_dtoa_r+0xa54>
 80075ba:	9807      	ldr	r0, [sp, #28]
 80075bc:	4301      	orrs	r1, r0
 80075be:	9806      	ldr	r0, [sp, #24]
 80075c0:	4301      	orrs	r1, r0
 80075c2:	d120      	bne.n	8007606 <_dtoa_r+0xa96>
 80075c4:	2a00      	cmp	r2, #0
 80075c6:	ddee      	ble.n	80075a6 <_dtoa_r+0xa36>
 80075c8:	9902      	ldr	r1, [sp, #8]
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	2201      	movs	r2, #1
 80075ce:	4648      	mov	r0, r9
 80075d0:	f000 fba4 	bl	8007d1c <__lshift>
 80075d4:	4621      	mov	r1, r4
 80075d6:	9002      	str	r0, [sp, #8]
 80075d8:	f000 fc0c 	bl	8007df4 <__mcmp>
 80075dc:	2800      	cmp	r0, #0
 80075de:	9b00      	ldr	r3, [sp, #0]
 80075e0:	dc02      	bgt.n	80075e8 <_dtoa_r+0xa78>
 80075e2:	d1e0      	bne.n	80075a6 <_dtoa_r+0xa36>
 80075e4:	07da      	lsls	r2, r3, #31
 80075e6:	d5de      	bpl.n	80075a6 <_dtoa_r+0xa36>
 80075e8:	2b39      	cmp	r3, #57	@ 0x39
 80075ea:	d1da      	bne.n	80075a2 <_dtoa_r+0xa32>
 80075ec:	2339      	movs	r3, #57	@ 0x39
 80075ee:	f88b 3000 	strb.w	r3, [fp]
 80075f2:	4633      	mov	r3, r6
 80075f4:	461e      	mov	r6, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80075fc:	2a39      	cmp	r2, #57	@ 0x39
 80075fe:	d04e      	beq.n	800769e <_dtoa_r+0xb2e>
 8007600:	3201      	adds	r2, #1
 8007602:	701a      	strb	r2, [r3, #0]
 8007604:	e501      	b.n	800700a <_dtoa_r+0x49a>
 8007606:	2a00      	cmp	r2, #0
 8007608:	dd03      	ble.n	8007612 <_dtoa_r+0xaa2>
 800760a:	2b39      	cmp	r3, #57	@ 0x39
 800760c:	d0ee      	beq.n	80075ec <_dtoa_r+0xa7c>
 800760e:	3301      	adds	r3, #1
 8007610:	e7c9      	b.n	80075a6 <_dtoa_r+0xa36>
 8007612:	9a00      	ldr	r2, [sp, #0]
 8007614:	9908      	ldr	r1, [sp, #32]
 8007616:	f802 3c01 	strb.w	r3, [r2, #-1]
 800761a:	428a      	cmp	r2, r1
 800761c:	d028      	beq.n	8007670 <_dtoa_r+0xb00>
 800761e:	9902      	ldr	r1, [sp, #8]
 8007620:	2300      	movs	r3, #0
 8007622:	220a      	movs	r2, #10
 8007624:	4648      	mov	r0, r9
 8007626:	f000 f9d5 	bl	80079d4 <__multadd>
 800762a:	42af      	cmp	r7, r5
 800762c:	9002      	str	r0, [sp, #8]
 800762e:	f04f 0300 	mov.w	r3, #0
 8007632:	f04f 020a 	mov.w	r2, #10
 8007636:	4639      	mov	r1, r7
 8007638:	4648      	mov	r0, r9
 800763a:	d107      	bne.n	800764c <_dtoa_r+0xadc>
 800763c:	f000 f9ca 	bl	80079d4 <__multadd>
 8007640:	4607      	mov	r7, r0
 8007642:	4605      	mov	r5, r0
 8007644:	9b00      	ldr	r3, [sp, #0]
 8007646:	3301      	adds	r3, #1
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	e777      	b.n	800753c <_dtoa_r+0x9cc>
 800764c:	f000 f9c2 	bl	80079d4 <__multadd>
 8007650:	4629      	mov	r1, r5
 8007652:	4607      	mov	r7, r0
 8007654:	2300      	movs	r3, #0
 8007656:	220a      	movs	r2, #10
 8007658:	4648      	mov	r0, r9
 800765a:	f000 f9bb 	bl	80079d4 <__multadd>
 800765e:	4605      	mov	r5, r0
 8007660:	e7f0      	b.n	8007644 <_dtoa_r+0xad4>
 8007662:	f1bb 0f00 	cmp.w	fp, #0
 8007666:	bfcc      	ite	gt
 8007668:	465e      	movgt	r6, fp
 800766a:	2601      	movle	r6, #1
 800766c:	4456      	add	r6, sl
 800766e:	2700      	movs	r7, #0
 8007670:	9902      	ldr	r1, [sp, #8]
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	2201      	movs	r2, #1
 8007676:	4648      	mov	r0, r9
 8007678:	f000 fb50 	bl	8007d1c <__lshift>
 800767c:	4621      	mov	r1, r4
 800767e:	9002      	str	r0, [sp, #8]
 8007680:	f000 fbb8 	bl	8007df4 <__mcmp>
 8007684:	2800      	cmp	r0, #0
 8007686:	dcb4      	bgt.n	80075f2 <_dtoa_r+0xa82>
 8007688:	d102      	bne.n	8007690 <_dtoa_r+0xb20>
 800768a:	9b00      	ldr	r3, [sp, #0]
 800768c:	07db      	lsls	r3, r3, #31
 800768e:	d4b0      	bmi.n	80075f2 <_dtoa_r+0xa82>
 8007690:	4633      	mov	r3, r6
 8007692:	461e      	mov	r6, r3
 8007694:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007698:	2a30      	cmp	r2, #48	@ 0x30
 800769a:	d0fa      	beq.n	8007692 <_dtoa_r+0xb22>
 800769c:	e4b5      	b.n	800700a <_dtoa_r+0x49a>
 800769e:	459a      	cmp	sl, r3
 80076a0:	d1a8      	bne.n	80075f4 <_dtoa_r+0xa84>
 80076a2:	2331      	movs	r3, #49	@ 0x31
 80076a4:	f108 0801 	add.w	r8, r8, #1
 80076a8:	f88a 3000 	strb.w	r3, [sl]
 80076ac:	e4ad      	b.n	800700a <_dtoa_r+0x49a>
 80076ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80076b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800770c <_dtoa_r+0xb9c>
 80076b4:	b11b      	cbz	r3, 80076be <_dtoa_r+0xb4e>
 80076b6:	f10a 0308 	add.w	r3, sl, #8
 80076ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80076bc:	6013      	str	r3, [r2, #0]
 80076be:	4650      	mov	r0, sl
 80076c0:	b017      	add	sp, #92	@ 0x5c
 80076c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c6:	9b07      	ldr	r3, [sp, #28]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	f77f ae2e 	ble.w	800732a <_dtoa_r+0x7ba>
 80076ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076d0:	9308      	str	r3, [sp, #32]
 80076d2:	2001      	movs	r0, #1
 80076d4:	e64d      	b.n	8007372 <_dtoa_r+0x802>
 80076d6:	f1bb 0f00 	cmp.w	fp, #0
 80076da:	f77f aed9 	ble.w	8007490 <_dtoa_r+0x920>
 80076de:	4656      	mov	r6, sl
 80076e0:	9802      	ldr	r0, [sp, #8]
 80076e2:	4621      	mov	r1, r4
 80076e4:	f7ff f9bb 	bl	8006a5e <quorem>
 80076e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80076ec:	f806 3b01 	strb.w	r3, [r6], #1
 80076f0:	eba6 020a 	sub.w	r2, r6, sl
 80076f4:	4593      	cmp	fp, r2
 80076f6:	ddb4      	ble.n	8007662 <_dtoa_r+0xaf2>
 80076f8:	9902      	ldr	r1, [sp, #8]
 80076fa:	2300      	movs	r3, #0
 80076fc:	220a      	movs	r2, #10
 80076fe:	4648      	mov	r0, r9
 8007700:	f000 f968 	bl	80079d4 <__multadd>
 8007704:	9002      	str	r0, [sp, #8]
 8007706:	e7eb      	b.n	80076e0 <_dtoa_r+0xb70>
 8007708:	08008868 	.word	0x08008868
 800770c:	080087ec 	.word	0x080087ec

08007710 <_free_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4605      	mov	r5, r0
 8007714:	2900      	cmp	r1, #0
 8007716:	d041      	beq.n	800779c <_free_r+0x8c>
 8007718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800771c:	1f0c      	subs	r4, r1, #4
 800771e:	2b00      	cmp	r3, #0
 8007720:	bfb8      	it	lt
 8007722:	18e4      	addlt	r4, r4, r3
 8007724:	f000 f8e8 	bl	80078f8 <__malloc_lock>
 8007728:	4a1d      	ldr	r2, [pc, #116]	@ (80077a0 <_free_r+0x90>)
 800772a:	6813      	ldr	r3, [r2, #0]
 800772c:	b933      	cbnz	r3, 800773c <_free_r+0x2c>
 800772e:	6063      	str	r3, [r4, #4]
 8007730:	6014      	str	r4, [r2, #0]
 8007732:	4628      	mov	r0, r5
 8007734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007738:	f000 b8e4 	b.w	8007904 <__malloc_unlock>
 800773c:	42a3      	cmp	r3, r4
 800773e:	d908      	bls.n	8007752 <_free_r+0x42>
 8007740:	6820      	ldr	r0, [r4, #0]
 8007742:	1821      	adds	r1, r4, r0
 8007744:	428b      	cmp	r3, r1
 8007746:	bf01      	itttt	eq
 8007748:	6819      	ldreq	r1, [r3, #0]
 800774a:	685b      	ldreq	r3, [r3, #4]
 800774c:	1809      	addeq	r1, r1, r0
 800774e:	6021      	streq	r1, [r4, #0]
 8007750:	e7ed      	b.n	800772e <_free_r+0x1e>
 8007752:	461a      	mov	r2, r3
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	b10b      	cbz	r3, 800775c <_free_r+0x4c>
 8007758:	42a3      	cmp	r3, r4
 800775a:	d9fa      	bls.n	8007752 <_free_r+0x42>
 800775c:	6811      	ldr	r1, [r2, #0]
 800775e:	1850      	adds	r0, r2, r1
 8007760:	42a0      	cmp	r0, r4
 8007762:	d10b      	bne.n	800777c <_free_r+0x6c>
 8007764:	6820      	ldr	r0, [r4, #0]
 8007766:	4401      	add	r1, r0
 8007768:	1850      	adds	r0, r2, r1
 800776a:	4283      	cmp	r3, r0
 800776c:	6011      	str	r1, [r2, #0]
 800776e:	d1e0      	bne.n	8007732 <_free_r+0x22>
 8007770:	6818      	ldr	r0, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	6053      	str	r3, [r2, #4]
 8007776:	4408      	add	r0, r1
 8007778:	6010      	str	r0, [r2, #0]
 800777a:	e7da      	b.n	8007732 <_free_r+0x22>
 800777c:	d902      	bls.n	8007784 <_free_r+0x74>
 800777e:	230c      	movs	r3, #12
 8007780:	602b      	str	r3, [r5, #0]
 8007782:	e7d6      	b.n	8007732 <_free_r+0x22>
 8007784:	6820      	ldr	r0, [r4, #0]
 8007786:	1821      	adds	r1, r4, r0
 8007788:	428b      	cmp	r3, r1
 800778a:	bf04      	itt	eq
 800778c:	6819      	ldreq	r1, [r3, #0]
 800778e:	685b      	ldreq	r3, [r3, #4]
 8007790:	6063      	str	r3, [r4, #4]
 8007792:	bf04      	itt	eq
 8007794:	1809      	addeq	r1, r1, r0
 8007796:	6021      	streq	r1, [r4, #0]
 8007798:	6054      	str	r4, [r2, #4]
 800779a:	e7ca      	b.n	8007732 <_free_r+0x22>
 800779c:	bd38      	pop	{r3, r4, r5, pc}
 800779e:	bf00      	nop
 80077a0:	2000042c 	.word	0x2000042c

080077a4 <malloc>:
 80077a4:	4b02      	ldr	r3, [pc, #8]	@ (80077b0 <malloc+0xc>)
 80077a6:	4601      	mov	r1, r0
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f000 b825 	b.w	80077f8 <_malloc_r>
 80077ae:	bf00      	nop
 80077b0:	20000018 	.word	0x20000018

080077b4 <sbrk_aligned>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	4e0f      	ldr	r6, [pc, #60]	@ (80077f4 <sbrk_aligned+0x40>)
 80077b8:	460c      	mov	r4, r1
 80077ba:	6831      	ldr	r1, [r6, #0]
 80077bc:	4605      	mov	r5, r0
 80077be:	b911      	cbnz	r1, 80077c6 <sbrk_aligned+0x12>
 80077c0:	f000 fe92 	bl	80084e8 <_sbrk_r>
 80077c4:	6030      	str	r0, [r6, #0]
 80077c6:	4621      	mov	r1, r4
 80077c8:	4628      	mov	r0, r5
 80077ca:	f000 fe8d 	bl	80084e8 <_sbrk_r>
 80077ce:	1c43      	adds	r3, r0, #1
 80077d0:	d103      	bne.n	80077da <sbrk_aligned+0x26>
 80077d2:	f04f 34ff 	mov.w	r4, #4294967295
 80077d6:	4620      	mov	r0, r4
 80077d8:	bd70      	pop	{r4, r5, r6, pc}
 80077da:	1cc4      	adds	r4, r0, #3
 80077dc:	f024 0403 	bic.w	r4, r4, #3
 80077e0:	42a0      	cmp	r0, r4
 80077e2:	d0f8      	beq.n	80077d6 <sbrk_aligned+0x22>
 80077e4:	1a21      	subs	r1, r4, r0
 80077e6:	4628      	mov	r0, r5
 80077e8:	f000 fe7e 	bl	80084e8 <_sbrk_r>
 80077ec:	3001      	adds	r0, #1
 80077ee:	d1f2      	bne.n	80077d6 <sbrk_aligned+0x22>
 80077f0:	e7ef      	b.n	80077d2 <sbrk_aligned+0x1e>
 80077f2:	bf00      	nop
 80077f4:	20000428 	.word	0x20000428

080077f8 <_malloc_r>:
 80077f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077fc:	1ccd      	adds	r5, r1, #3
 80077fe:	f025 0503 	bic.w	r5, r5, #3
 8007802:	3508      	adds	r5, #8
 8007804:	2d0c      	cmp	r5, #12
 8007806:	bf38      	it	cc
 8007808:	250c      	movcc	r5, #12
 800780a:	2d00      	cmp	r5, #0
 800780c:	4606      	mov	r6, r0
 800780e:	db01      	blt.n	8007814 <_malloc_r+0x1c>
 8007810:	42a9      	cmp	r1, r5
 8007812:	d904      	bls.n	800781e <_malloc_r+0x26>
 8007814:	230c      	movs	r3, #12
 8007816:	6033      	str	r3, [r6, #0]
 8007818:	2000      	movs	r0, #0
 800781a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800781e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078f4 <_malloc_r+0xfc>
 8007822:	f000 f869 	bl	80078f8 <__malloc_lock>
 8007826:	f8d8 3000 	ldr.w	r3, [r8]
 800782a:	461c      	mov	r4, r3
 800782c:	bb44      	cbnz	r4, 8007880 <_malloc_r+0x88>
 800782e:	4629      	mov	r1, r5
 8007830:	4630      	mov	r0, r6
 8007832:	f7ff ffbf 	bl	80077b4 <sbrk_aligned>
 8007836:	1c43      	adds	r3, r0, #1
 8007838:	4604      	mov	r4, r0
 800783a:	d158      	bne.n	80078ee <_malloc_r+0xf6>
 800783c:	f8d8 4000 	ldr.w	r4, [r8]
 8007840:	4627      	mov	r7, r4
 8007842:	2f00      	cmp	r7, #0
 8007844:	d143      	bne.n	80078ce <_malloc_r+0xd6>
 8007846:	2c00      	cmp	r4, #0
 8007848:	d04b      	beq.n	80078e2 <_malloc_r+0xea>
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	4639      	mov	r1, r7
 800784e:	4630      	mov	r0, r6
 8007850:	eb04 0903 	add.w	r9, r4, r3
 8007854:	f000 fe48 	bl	80084e8 <_sbrk_r>
 8007858:	4581      	cmp	r9, r0
 800785a:	d142      	bne.n	80078e2 <_malloc_r+0xea>
 800785c:	6821      	ldr	r1, [r4, #0]
 800785e:	1a6d      	subs	r5, r5, r1
 8007860:	4629      	mov	r1, r5
 8007862:	4630      	mov	r0, r6
 8007864:	f7ff ffa6 	bl	80077b4 <sbrk_aligned>
 8007868:	3001      	adds	r0, #1
 800786a:	d03a      	beq.n	80078e2 <_malloc_r+0xea>
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	442b      	add	r3, r5
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	f8d8 3000 	ldr.w	r3, [r8]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	bb62      	cbnz	r2, 80078d4 <_malloc_r+0xdc>
 800787a:	f8c8 7000 	str.w	r7, [r8]
 800787e:	e00f      	b.n	80078a0 <_malloc_r+0xa8>
 8007880:	6822      	ldr	r2, [r4, #0]
 8007882:	1b52      	subs	r2, r2, r5
 8007884:	d420      	bmi.n	80078c8 <_malloc_r+0xd0>
 8007886:	2a0b      	cmp	r2, #11
 8007888:	d917      	bls.n	80078ba <_malloc_r+0xc2>
 800788a:	1961      	adds	r1, r4, r5
 800788c:	42a3      	cmp	r3, r4
 800788e:	6025      	str	r5, [r4, #0]
 8007890:	bf18      	it	ne
 8007892:	6059      	strne	r1, [r3, #4]
 8007894:	6863      	ldr	r3, [r4, #4]
 8007896:	bf08      	it	eq
 8007898:	f8c8 1000 	streq.w	r1, [r8]
 800789c:	5162      	str	r2, [r4, r5]
 800789e:	604b      	str	r3, [r1, #4]
 80078a0:	4630      	mov	r0, r6
 80078a2:	f000 f82f 	bl	8007904 <__malloc_unlock>
 80078a6:	f104 000b 	add.w	r0, r4, #11
 80078aa:	1d23      	adds	r3, r4, #4
 80078ac:	f020 0007 	bic.w	r0, r0, #7
 80078b0:	1ac2      	subs	r2, r0, r3
 80078b2:	bf1c      	itt	ne
 80078b4:	1a1b      	subne	r3, r3, r0
 80078b6:	50a3      	strne	r3, [r4, r2]
 80078b8:	e7af      	b.n	800781a <_malloc_r+0x22>
 80078ba:	6862      	ldr	r2, [r4, #4]
 80078bc:	42a3      	cmp	r3, r4
 80078be:	bf0c      	ite	eq
 80078c0:	f8c8 2000 	streq.w	r2, [r8]
 80078c4:	605a      	strne	r2, [r3, #4]
 80078c6:	e7eb      	b.n	80078a0 <_malloc_r+0xa8>
 80078c8:	4623      	mov	r3, r4
 80078ca:	6864      	ldr	r4, [r4, #4]
 80078cc:	e7ae      	b.n	800782c <_malloc_r+0x34>
 80078ce:	463c      	mov	r4, r7
 80078d0:	687f      	ldr	r7, [r7, #4]
 80078d2:	e7b6      	b.n	8007842 <_malloc_r+0x4a>
 80078d4:	461a      	mov	r2, r3
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	42a3      	cmp	r3, r4
 80078da:	d1fb      	bne.n	80078d4 <_malloc_r+0xdc>
 80078dc:	2300      	movs	r3, #0
 80078de:	6053      	str	r3, [r2, #4]
 80078e0:	e7de      	b.n	80078a0 <_malloc_r+0xa8>
 80078e2:	230c      	movs	r3, #12
 80078e4:	6033      	str	r3, [r6, #0]
 80078e6:	4630      	mov	r0, r6
 80078e8:	f000 f80c 	bl	8007904 <__malloc_unlock>
 80078ec:	e794      	b.n	8007818 <_malloc_r+0x20>
 80078ee:	6005      	str	r5, [r0, #0]
 80078f0:	e7d6      	b.n	80078a0 <_malloc_r+0xa8>
 80078f2:	bf00      	nop
 80078f4:	2000042c 	.word	0x2000042c

080078f8 <__malloc_lock>:
 80078f8:	4801      	ldr	r0, [pc, #4]	@ (8007900 <__malloc_lock+0x8>)
 80078fa:	f7ff b8a0 	b.w	8006a3e <__retarget_lock_acquire_recursive>
 80078fe:	bf00      	nop
 8007900:	20000424 	.word	0x20000424

08007904 <__malloc_unlock>:
 8007904:	4801      	ldr	r0, [pc, #4]	@ (800790c <__malloc_unlock+0x8>)
 8007906:	f7ff b89b 	b.w	8006a40 <__retarget_lock_release_recursive>
 800790a:	bf00      	nop
 800790c:	20000424 	.word	0x20000424

08007910 <_Balloc>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	69c6      	ldr	r6, [r0, #28]
 8007914:	4604      	mov	r4, r0
 8007916:	460d      	mov	r5, r1
 8007918:	b976      	cbnz	r6, 8007938 <_Balloc+0x28>
 800791a:	2010      	movs	r0, #16
 800791c:	f7ff ff42 	bl	80077a4 <malloc>
 8007920:	4602      	mov	r2, r0
 8007922:	61e0      	str	r0, [r4, #28]
 8007924:	b920      	cbnz	r0, 8007930 <_Balloc+0x20>
 8007926:	4b18      	ldr	r3, [pc, #96]	@ (8007988 <_Balloc+0x78>)
 8007928:	4818      	ldr	r0, [pc, #96]	@ (800798c <_Balloc+0x7c>)
 800792a:	216b      	movs	r1, #107	@ 0x6b
 800792c:	f000 fdec 	bl	8008508 <__assert_func>
 8007930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007934:	6006      	str	r6, [r0, #0]
 8007936:	60c6      	str	r6, [r0, #12]
 8007938:	69e6      	ldr	r6, [r4, #28]
 800793a:	68f3      	ldr	r3, [r6, #12]
 800793c:	b183      	cbz	r3, 8007960 <_Balloc+0x50>
 800793e:	69e3      	ldr	r3, [r4, #28]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007946:	b9b8      	cbnz	r0, 8007978 <_Balloc+0x68>
 8007948:	2101      	movs	r1, #1
 800794a:	fa01 f605 	lsl.w	r6, r1, r5
 800794e:	1d72      	adds	r2, r6, #5
 8007950:	0092      	lsls	r2, r2, #2
 8007952:	4620      	mov	r0, r4
 8007954:	f000 fdf6 	bl	8008544 <_calloc_r>
 8007958:	b160      	cbz	r0, 8007974 <_Balloc+0x64>
 800795a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800795e:	e00e      	b.n	800797e <_Balloc+0x6e>
 8007960:	2221      	movs	r2, #33	@ 0x21
 8007962:	2104      	movs	r1, #4
 8007964:	4620      	mov	r0, r4
 8007966:	f000 fded 	bl	8008544 <_calloc_r>
 800796a:	69e3      	ldr	r3, [r4, #28]
 800796c:	60f0      	str	r0, [r6, #12]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e4      	bne.n	800793e <_Balloc+0x2e>
 8007974:	2000      	movs	r0, #0
 8007976:	bd70      	pop	{r4, r5, r6, pc}
 8007978:	6802      	ldr	r2, [r0, #0]
 800797a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800797e:	2300      	movs	r3, #0
 8007980:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007984:	e7f7      	b.n	8007976 <_Balloc+0x66>
 8007986:	bf00      	nop
 8007988:	080087f9 	.word	0x080087f9
 800798c:	08008879 	.word	0x08008879

08007990 <_Bfree>:
 8007990:	b570      	push	{r4, r5, r6, lr}
 8007992:	69c6      	ldr	r6, [r0, #28]
 8007994:	4605      	mov	r5, r0
 8007996:	460c      	mov	r4, r1
 8007998:	b976      	cbnz	r6, 80079b8 <_Bfree+0x28>
 800799a:	2010      	movs	r0, #16
 800799c:	f7ff ff02 	bl	80077a4 <malloc>
 80079a0:	4602      	mov	r2, r0
 80079a2:	61e8      	str	r0, [r5, #28]
 80079a4:	b920      	cbnz	r0, 80079b0 <_Bfree+0x20>
 80079a6:	4b09      	ldr	r3, [pc, #36]	@ (80079cc <_Bfree+0x3c>)
 80079a8:	4809      	ldr	r0, [pc, #36]	@ (80079d0 <_Bfree+0x40>)
 80079aa:	218f      	movs	r1, #143	@ 0x8f
 80079ac:	f000 fdac 	bl	8008508 <__assert_func>
 80079b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079b4:	6006      	str	r6, [r0, #0]
 80079b6:	60c6      	str	r6, [r0, #12]
 80079b8:	b13c      	cbz	r4, 80079ca <_Bfree+0x3a>
 80079ba:	69eb      	ldr	r3, [r5, #28]
 80079bc:	6862      	ldr	r2, [r4, #4]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079c4:	6021      	str	r1, [r4, #0]
 80079c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079ca:	bd70      	pop	{r4, r5, r6, pc}
 80079cc:	080087f9 	.word	0x080087f9
 80079d0:	08008879 	.word	0x08008879

080079d4 <__multadd>:
 80079d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d8:	690d      	ldr	r5, [r1, #16]
 80079da:	4607      	mov	r7, r0
 80079dc:	460c      	mov	r4, r1
 80079de:	461e      	mov	r6, r3
 80079e0:	f101 0c14 	add.w	ip, r1, #20
 80079e4:	2000      	movs	r0, #0
 80079e6:	f8dc 3000 	ldr.w	r3, [ip]
 80079ea:	b299      	uxth	r1, r3
 80079ec:	fb02 6101 	mla	r1, r2, r1, r6
 80079f0:	0c1e      	lsrs	r6, r3, #16
 80079f2:	0c0b      	lsrs	r3, r1, #16
 80079f4:	fb02 3306 	mla	r3, r2, r6, r3
 80079f8:	b289      	uxth	r1, r1
 80079fa:	3001      	adds	r0, #1
 80079fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a00:	4285      	cmp	r5, r0
 8007a02:	f84c 1b04 	str.w	r1, [ip], #4
 8007a06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a0a:	dcec      	bgt.n	80079e6 <__multadd+0x12>
 8007a0c:	b30e      	cbz	r6, 8007a52 <__multadd+0x7e>
 8007a0e:	68a3      	ldr	r3, [r4, #8]
 8007a10:	42ab      	cmp	r3, r5
 8007a12:	dc19      	bgt.n	8007a48 <__multadd+0x74>
 8007a14:	6861      	ldr	r1, [r4, #4]
 8007a16:	4638      	mov	r0, r7
 8007a18:	3101      	adds	r1, #1
 8007a1a:	f7ff ff79 	bl	8007910 <_Balloc>
 8007a1e:	4680      	mov	r8, r0
 8007a20:	b928      	cbnz	r0, 8007a2e <__multadd+0x5a>
 8007a22:	4602      	mov	r2, r0
 8007a24:	4b0c      	ldr	r3, [pc, #48]	@ (8007a58 <__multadd+0x84>)
 8007a26:	480d      	ldr	r0, [pc, #52]	@ (8007a5c <__multadd+0x88>)
 8007a28:	21ba      	movs	r1, #186	@ 0xba
 8007a2a:	f000 fd6d 	bl	8008508 <__assert_func>
 8007a2e:	6922      	ldr	r2, [r4, #16]
 8007a30:	3202      	adds	r2, #2
 8007a32:	f104 010c 	add.w	r1, r4, #12
 8007a36:	0092      	lsls	r2, r2, #2
 8007a38:	300c      	adds	r0, #12
 8007a3a:	f7ff f802 	bl	8006a42 <memcpy>
 8007a3e:	4621      	mov	r1, r4
 8007a40:	4638      	mov	r0, r7
 8007a42:	f7ff ffa5 	bl	8007990 <_Bfree>
 8007a46:	4644      	mov	r4, r8
 8007a48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a4c:	3501      	adds	r5, #1
 8007a4e:	615e      	str	r6, [r3, #20]
 8007a50:	6125      	str	r5, [r4, #16]
 8007a52:	4620      	mov	r0, r4
 8007a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a58:	08008868 	.word	0x08008868
 8007a5c:	08008879 	.word	0x08008879

08007a60 <__hi0bits>:
 8007a60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007a64:	4603      	mov	r3, r0
 8007a66:	bf36      	itet	cc
 8007a68:	0403      	lslcc	r3, r0, #16
 8007a6a:	2000      	movcs	r0, #0
 8007a6c:	2010      	movcc	r0, #16
 8007a6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a72:	bf3c      	itt	cc
 8007a74:	021b      	lslcc	r3, r3, #8
 8007a76:	3008      	addcc	r0, #8
 8007a78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a7c:	bf3c      	itt	cc
 8007a7e:	011b      	lslcc	r3, r3, #4
 8007a80:	3004      	addcc	r0, #4
 8007a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a86:	bf3c      	itt	cc
 8007a88:	009b      	lslcc	r3, r3, #2
 8007a8a:	3002      	addcc	r0, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	db05      	blt.n	8007a9c <__hi0bits+0x3c>
 8007a90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a94:	f100 0001 	add.w	r0, r0, #1
 8007a98:	bf08      	it	eq
 8007a9a:	2020      	moveq	r0, #32
 8007a9c:	4770      	bx	lr

08007a9e <__lo0bits>:
 8007a9e:	6803      	ldr	r3, [r0, #0]
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	f013 0007 	ands.w	r0, r3, #7
 8007aa6:	d00b      	beq.n	8007ac0 <__lo0bits+0x22>
 8007aa8:	07d9      	lsls	r1, r3, #31
 8007aaa:	d421      	bmi.n	8007af0 <__lo0bits+0x52>
 8007aac:	0798      	lsls	r0, r3, #30
 8007aae:	bf49      	itett	mi
 8007ab0:	085b      	lsrmi	r3, r3, #1
 8007ab2:	089b      	lsrpl	r3, r3, #2
 8007ab4:	2001      	movmi	r0, #1
 8007ab6:	6013      	strmi	r3, [r2, #0]
 8007ab8:	bf5c      	itt	pl
 8007aba:	6013      	strpl	r3, [r2, #0]
 8007abc:	2002      	movpl	r0, #2
 8007abe:	4770      	bx	lr
 8007ac0:	b299      	uxth	r1, r3
 8007ac2:	b909      	cbnz	r1, 8007ac8 <__lo0bits+0x2a>
 8007ac4:	0c1b      	lsrs	r3, r3, #16
 8007ac6:	2010      	movs	r0, #16
 8007ac8:	b2d9      	uxtb	r1, r3
 8007aca:	b909      	cbnz	r1, 8007ad0 <__lo0bits+0x32>
 8007acc:	3008      	adds	r0, #8
 8007ace:	0a1b      	lsrs	r3, r3, #8
 8007ad0:	0719      	lsls	r1, r3, #28
 8007ad2:	bf04      	itt	eq
 8007ad4:	091b      	lsreq	r3, r3, #4
 8007ad6:	3004      	addeq	r0, #4
 8007ad8:	0799      	lsls	r1, r3, #30
 8007ada:	bf04      	itt	eq
 8007adc:	089b      	lsreq	r3, r3, #2
 8007ade:	3002      	addeq	r0, #2
 8007ae0:	07d9      	lsls	r1, r3, #31
 8007ae2:	d403      	bmi.n	8007aec <__lo0bits+0x4e>
 8007ae4:	085b      	lsrs	r3, r3, #1
 8007ae6:	f100 0001 	add.w	r0, r0, #1
 8007aea:	d003      	beq.n	8007af4 <__lo0bits+0x56>
 8007aec:	6013      	str	r3, [r2, #0]
 8007aee:	4770      	bx	lr
 8007af0:	2000      	movs	r0, #0
 8007af2:	4770      	bx	lr
 8007af4:	2020      	movs	r0, #32
 8007af6:	4770      	bx	lr

08007af8 <__i2b>:
 8007af8:	b510      	push	{r4, lr}
 8007afa:	460c      	mov	r4, r1
 8007afc:	2101      	movs	r1, #1
 8007afe:	f7ff ff07 	bl	8007910 <_Balloc>
 8007b02:	4602      	mov	r2, r0
 8007b04:	b928      	cbnz	r0, 8007b12 <__i2b+0x1a>
 8007b06:	4b05      	ldr	r3, [pc, #20]	@ (8007b1c <__i2b+0x24>)
 8007b08:	4805      	ldr	r0, [pc, #20]	@ (8007b20 <__i2b+0x28>)
 8007b0a:	f240 1145 	movw	r1, #325	@ 0x145
 8007b0e:	f000 fcfb 	bl	8008508 <__assert_func>
 8007b12:	2301      	movs	r3, #1
 8007b14:	6144      	str	r4, [r0, #20]
 8007b16:	6103      	str	r3, [r0, #16]
 8007b18:	bd10      	pop	{r4, pc}
 8007b1a:	bf00      	nop
 8007b1c:	08008868 	.word	0x08008868
 8007b20:	08008879 	.word	0x08008879

08007b24 <__multiply>:
 8007b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b28:	4617      	mov	r7, r2
 8007b2a:	690a      	ldr	r2, [r1, #16]
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	bfa8      	it	ge
 8007b32:	463b      	movge	r3, r7
 8007b34:	4689      	mov	r9, r1
 8007b36:	bfa4      	itt	ge
 8007b38:	460f      	movge	r7, r1
 8007b3a:	4699      	movge	r9, r3
 8007b3c:	693d      	ldr	r5, [r7, #16]
 8007b3e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	6879      	ldr	r1, [r7, #4]
 8007b46:	eb05 060a 	add.w	r6, r5, sl
 8007b4a:	42b3      	cmp	r3, r6
 8007b4c:	b085      	sub	sp, #20
 8007b4e:	bfb8      	it	lt
 8007b50:	3101      	addlt	r1, #1
 8007b52:	f7ff fedd 	bl	8007910 <_Balloc>
 8007b56:	b930      	cbnz	r0, 8007b66 <__multiply+0x42>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	4b41      	ldr	r3, [pc, #260]	@ (8007c60 <__multiply+0x13c>)
 8007b5c:	4841      	ldr	r0, [pc, #260]	@ (8007c64 <__multiply+0x140>)
 8007b5e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007b62:	f000 fcd1 	bl	8008508 <__assert_func>
 8007b66:	f100 0414 	add.w	r4, r0, #20
 8007b6a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007b6e:	4623      	mov	r3, r4
 8007b70:	2200      	movs	r2, #0
 8007b72:	4573      	cmp	r3, lr
 8007b74:	d320      	bcc.n	8007bb8 <__multiply+0x94>
 8007b76:	f107 0814 	add.w	r8, r7, #20
 8007b7a:	f109 0114 	add.w	r1, r9, #20
 8007b7e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007b82:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007b86:	9302      	str	r3, [sp, #8]
 8007b88:	1beb      	subs	r3, r5, r7
 8007b8a:	3b15      	subs	r3, #21
 8007b8c:	f023 0303 	bic.w	r3, r3, #3
 8007b90:	3304      	adds	r3, #4
 8007b92:	3715      	adds	r7, #21
 8007b94:	42bd      	cmp	r5, r7
 8007b96:	bf38      	it	cc
 8007b98:	2304      	movcc	r3, #4
 8007b9a:	9301      	str	r3, [sp, #4]
 8007b9c:	9b02      	ldr	r3, [sp, #8]
 8007b9e:	9103      	str	r1, [sp, #12]
 8007ba0:	428b      	cmp	r3, r1
 8007ba2:	d80c      	bhi.n	8007bbe <__multiply+0x9a>
 8007ba4:	2e00      	cmp	r6, #0
 8007ba6:	dd03      	ble.n	8007bb0 <__multiply+0x8c>
 8007ba8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d055      	beq.n	8007c5c <__multiply+0x138>
 8007bb0:	6106      	str	r6, [r0, #16]
 8007bb2:	b005      	add	sp, #20
 8007bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb8:	f843 2b04 	str.w	r2, [r3], #4
 8007bbc:	e7d9      	b.n	8007b72 <__multiply+0x4e>
 8007bbe:	f8b1 a000 	ldrh.w	sl, [r1]
 8007bc2:	f1ba 0f00 	cmp.w	sl, #0
 8007bc6:	d01f      	beq.n	8007c08 <__multiply+0xe4>
 8007bc8:	46c4      	mov	ip, r8
 8007bca:	46a1      	mov	r9, r4
 8007bcc:	2700      	movs	r7, #0
 8007bce:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007bd2:	f8d9 3000 	ldr.w	r3, [r9]
 8007bd6:	fa1f fb82 	uxth.w	fp, r2
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	fb0a 330b 	mla	r3, sl, fp, r3
 8007be0:	443b      	add	r3, r7
 8007be2:	f8d9 7000 	ldr.w	r7, [r9]
 8007be6:	0c12      	lsrs	r2, r2, #16
 8007be8:	0c3f      	lsrs	r7, r7, #16
 8007bea:	fb0a 7202 	mla	r2, sl, r2, r7
 8007bee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bf8:	4565      	cmp	r5, ip
 8007bfa:	f849 3b04 	str.w	r3, [r9], #4
 8007bfe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007c02:	d8e4      	bhi.n	8007bce <__multiply+0xaa>
 8007c04:	9b01      	ldr	r3, [sp, #4]
 8007c06:	50e7      	str	r7, [r4, r3]
 8007c08:	9b03      	ldr	r3, [sp, #12]
 8007c0a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007c0e:	3104      	adds	r1, #4
 8007c10:	f1b9 0f00 	cmp.w	r9, #0
 8007c14:	d020      	beq.n	8007c58 <__multiply+0x134>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	4647      	mov	r7, r8
 8007c1a:	46a4      	mov	ip, r4
 8007c1c:	f04f 0a00 	mov.w	sl, #0
 8007c20:	f8b7 b000 	ldrh.w	fp, [r7]
 8007c24:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007c28:	fb09 220b 	mla	r2, r9, fp, r2
 8007c2c:	4452      	add	r2, sl
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c34:	f84c 3b04 	str.w	r3, [ip], #4
 8007c38:	f857 3b04 	ldr.w	r3, [r7], #4
 8007c3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c40:	f8bc 3000 	ldrh.w	r3, [ip]
 8007c44:	fb09 330a 	mla	r3, r9, sl, r3
 8007c48:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007c4c:	42bd      	cmp	r5, r7
 8007c4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c52:	d8e5      	bhi.n	8007c20 <__multiply+0xfc>
 8007c54:	9a01      	ldr	r2, [sp, #4]
 8007c56:	50a3      	str	r3, [r4, r2]
 8007c58:	3404      	adds	r4, #4
 8007c5a:	e79f      	b.n	8007b9c <__multiply+0x78>
 8007c5c:	3e01      	subs	r6, #1
 8007c5e:	e7a1      	b.n	8007ba4 <__multiply+0x80>
 8007c60:	08008868 	.word	0x08008868
 8007c64:	08008879 	.word	0x08008879

08007c68 <__pow5mult>:
 8007c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c6c:	4615      	mov	r5, r2
 8007c6e:	f012 0203 	ands.w	r2, r2, #3
 8007c72:	4607      	mov	r7, r0
 8007c74:	460e      	mov	r6, r1
 8007c76:	d007      	beq.n	8007c88 <__pow5mult+0x20>
 8007c78:	4c25      	ldr	r4, [pc, #148]	@ (8007d10 <__pow5mult+0xa8>)
 8007c7a:	3a01      	subs	r2, #1
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c82:	f7ff fea7 	bl	80079d4 <__multadd>
 8007c86:	4606      	mov	r6, r0
 8007c88:	10ad      	asrs	r5, r5, #2
 8007c8a:	d03d      	beq.n	8007d08 <__pow5mult+0xa0>
 8007c8c:	69fc      	ldr	r4, [r7, #28]
 8007c8e:	b97c      	cbnz	r4, 8007cb0 <__pow5mult+0x48>
 8007c90:	2010      	movs	r0, #16
 8007c92:	f7ff fd87 	bl	80077a4 <malloc>
 8007c96:	4602      	mov	r2, r0
 8007c98:	61f8      	str	r0, [r7, #28]
 8007c9a:	b928      	cbnz	r0, 8007ca8 <__pow5mult+0x40>
 8007c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8007d14 <__pow5mult+0xac>)
 8007c9e:	481e      	ldr	r0, [pc, #120]	@ (8007d18 <__pow5mult+0xb0>)
 8007ca0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ca4:	f000 fc30 	bl	8008508 <__assert_func>
 8007ca8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cac:	6004      	str	r4, [r0, #0]
 8007cae:	60c4      	str	r4, [r0, #12]
 8007cb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007cb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007cb8:	b94c      	cbnz	r4, 8007cce <__pow5mult+0x66>
 8007cba:	f240 2171 	movw	r1, #625	@ 0x271
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	f7ff ff1a 	bl	8007af8 <__i2b>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cca:	4604      	mov	r4, r0
 8007ccc:	6003      	str	r3, [r0, #0]
 8007cce:	f04f 0900 	mov.w	r9, #0
 8007cd2:	07eb      	lsls	r3, r5, #31
 8007cd4:	d50a      	bpl.n	8007cec <__pow5mult+0x84>
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	4622      	mov	r2, r4
 8007cda:	4638      	mov	r0, r7
 8007cdc:	f7ff ff22 	bl	8007b24 <__multiply>
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4680      	mov	r8, r0
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	f7ff fe53 	bl	8007990 <_Bfree>
 8007cea:	4646      	mov	r6, r8
 8007cec:	106d      	asrs	r5, r5, #1
 8007cee:	d00b      	beq.n	8007d08 <__pow5mult+0xa0>
 8007cf0:	6820      	ldr	r0, [r4, #0]
 8007cf2:	b938      	cbnz	r0, 8007d04 <__pow5mult+0x9c>
 8007cf4:	4622      	mov	r2, r4
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	f7ff ff13 	bl	8007b24 <__multiply>
 8007cfe:	6020      	str	r0, [r4, #0]
 8007d00:	f8c0 9000 	str.w	r9, [r0]
 8007d04:	4604      	mov	r4, r0
 8007d06:	e7e4      	b.n	8007cd2 <__pow5mult+0x6a>
 8007d08:	4630      	mov	r0, r6
 8007d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d0e:	bf00      	nop
 8007d10:	0800892c 	.word	0x0800892c
 8007d14:	080087f9 	.word	0x080087f9
 8007d18:	08008879 	.word	0x08008879

08007d1c <__lshift>:
 8007d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d20:	460c      	mov	r4, r1
 8007d22:	6849      	ldr	r1, [r1, #4]
 8007d24:	6923      	ldr	r3, [r4, #16]
 8007d26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d2a:	68a3      	ldr	r3, [r4, #8]
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	4691      	mov	r9, r2
 8007d30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d34:	f108 0601 	add.w	r6, r8, #1
 8007d38:	42b3      	cmp	r3, r6
 8007d3a:	db0b      	blt.n	8007d54 <__lshift+0x38>
 8007d3c:	4638      	mov	r0, r7
 8007d3e:	f7ff fde7 	bl	8007910 <_Balloc>
 8007d42:	4605      	mov	r5, r0
 8007d44:	b948      	cbnz	r0, 8007d5a <__lshift+0x3e>
 8007d46:	4602      	mov	r2, r0
 8007d48:	4b28      	ldr	r3, [pc, #160]	@ (8007dec <__lshift+0xd0>)
 8007d4a:	4829      	ldr	r0, [pc, #164]	@ (8007df0 <__lshift+0xd4>)
 8007d4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007d50:	f000 fbda 	bl	8008508 <__assert_func>
 8007d54:	3101      	adds	r1, #1
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	e7ee      	b.n	8007d38 <__lshift+0x1c>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f100 0114 	add.w	r1, r0, #20
 8007d60:	f100 0210 	add.w	r2, r0, #16
 8007d64:	4618      	mov	r0, r3
 8007d66:	4553      	cmp	r3, sl
 8007d68:	db33      	blt.n	8007dd2 <__lshift+0xb6>
 8007d6a:	6920      	ldr	r0, [r4, #16]
 8007d6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d70:	f104 0314 	add.w	r3, r4, #20
 8007d74:	f019 091f 	ands.w	r9, r9, #31
 8007d78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d80:	d02b      	beq.n	8007dda <__lshift+0xbe>
 8007d82:	f1c9 0e20 	rsb	lr, r9, #32
 8007d86:	468a      	mov	sl, r1
 8007d88:	2200      	movs	r2, #0
 8007d8a:	6818      	ldr	r0, [r3, #0]
 8007d8c:	fa00 f009 	lsl.w	r0, r0, r9
 8007d90:	4310      	orrs	r0, r2
 8007d92:	f84a 0b04 	str.w	r0, [sl], #4
 8007d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d9a:	459c      	cmp	ip, r3
 8007d9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007da0:	d8f3      	bhi.n	8007d8a <__lshift+0x6e>
 8007da2:	ebac 0304 	sub.w	r3, ip, r4
 8007da6:	3b15      	subs	r3, #21
 8007da8:	f023 0303 	bic.w	r3, r3, #3
 8007dac:	3304      	adds	r3, #4
 8007dae:	f104 0015 	add.w	r0, r4, #21
 8007db2:	4560      	cmp	r0, ip
 8007db4:	bf88      	it	hi
 8007db6:	2304      	movhi	r3, #4
 8007db8:	50ca      	str	r2, [r1, r3]
 8007dba:	b10a      	cbz	r2, 8007dc0 <__lshift+0xa4>
 8007dbc:	f108 0602 	add.w	r6, r8, #2
 8007dc0:	3e01      	subs	r6, #1
 8007dc2:	4638      	mov	r0, r7
 8007dc4:	612e      	str	r6, [r5, #16]
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	f7ff fde2 	bl	8007990 <_Bfree>
 8007dcc:	4628      	mov	r0, r5
 8007dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	e7c5      	b.n	8007d66 <__lshift+0x4a>
 8007dda:	3904      	subs	r1, #4
 8007ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007de0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007de4:	459c      	cmp	ip, r3
 8007de6:	d8f9      	bhi.n	8007ddc <__lshift+0xc0>
 8007de8:	e7ea      	b.n	8007dc0 <__lshift+0xa4>
 8007dea:	bf00      	nop
 8007dec:	08008868 	.word	0x08008868
 8007df0:	08008879 	.word	0x08008879

08007df4 <__mcmp>:
 8007df4:	690a      	ldr	r2, [r1, #16]
 8007df6:	4603      	mov	r3, r0
 8007df8:	6900      	ldr	r0, [r0, #16]
 8007dfa:	1a80      	subs	r0, r0, r2
 8007dfc:	b530      	push	{r4, r5, lr}
 8007dfe:	d10e      	bne.n	8007e1e <__mcmp+0x2a>
 8007e00:	3314      	adds	r3, #20
 8007e02:	3114      	adds	r1, #20
 8007e04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e14:	4295      	cmp	r5, r2
 8007e16:	d003      	beq.n	8007e20 <__mcmp+0x2c>
 8007e18:	d205      	bcs.n	8007e26 <__mcmp+0x32>
 8007e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1e:	bd30      	pop	{r4, r5, pc}
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	d3f3      	bcc.n	8007e0c <__mcmp+0x18>
 8007e24:	e7fb      	b.n	8007e1e <__mcmp+0x2a>
 8007e26:	2001      	movs	r0, #1
 8007e28:	e7f9      	b.n	8007e1e <__mcmp+0x2a>
	...

08007e2c <__mdiff>:
 8007e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e30:	4689      	mov	r9, r1
 8007e32:	4606      	mov	r6, r0
 8007e34:	4611      	mov	r1, r2
 8007e36:	4648      	mov	r0, r9
 8007e38:	4614      	mov	r4, r2
 8007e3a:	f7ff ffdb 	bl	8007df4 <__mcmp>
 8007e3e:	1e05      	subs	r5, r0, #0
 8007e40:	d112      	bne.n	8007e68 <__mdiff+0x3c>
 8007e42:	4629      	mov	r1, r5
 8007e44:	4630      	mov	r0, r6
 8007e46:	f7ff fd63 	bl	8007910 <_Balloc>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	b928      	cbnz	r0, 8007e5a <__mdiff+0x2e>
 8007e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8007f4c <__mdiff+0x120>)
 8007e50:	f240 2137 	movw	r1, #567	@ 0x237
 8007e54:	483e      	ldr	r0, [pc, #248]	@ (8007f50 <__mdiff+0x124>)
 8007e56:	f000 fb57 	bl	8008508 <__assert_func>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e60:	4610      	mov	r0, r2
 8007e62:	b003      	add	sp, #12
 8007e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e68:	bfbc      	itt	lt
 8007e6a:	464b      	movlt	r3, r9
 8007e6c:	46a1      	movlt	r9, r4
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e74:	bfba      	itte	lt
 8007e76:	461c      	movlt	r4, r3
 8007e78:	2501      	movlt	r5, #1
 8007e7a:	2500      	movge	r5, #0
 8007e7c:	f7ff fd48 	bl	8007910 <_Balloc>
 8007e80:	4602      	mov	r2, r0
 8007e82:	b918      	cbnz	r0, 8007e8c <__mdiff+0x60>
 8007e84:	4b31      	ldr	r3, [pc, #196]	@ (8007f4c <__mdiff+0x120>)
 8007e86:	f240 2145 	movw	r1, #581	@ 0x245
 8007e8a:	e7e3      	b.n	8007e54 <__mdiff+0x28>
 8007e8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e90:	6926      	ldr	r6, [r4, #16]
 8007e92:	60c5      	str	r5, [r0, #12]
 8007e94:	f109 0310 	add.w	r3, r9, #16
 8007e98:	f109 0514 	add.w	r5, r9, #20
 8007e9c:	f104 0e14 	add.w	lr, r4, #20
 8007ea0:	f100 0b14 	add.w	fp, r0, #20
 8007ea4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007ea8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	46d9      	mov	r9, fp
 8007eb0:	f04f 0c00 	mov.w	ip, #0
 8007eb4:	9b01      	ldr	r3, [sp, #4]
 8007eb6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007eba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	fa1f f38a 	uxth.w	r3, sl
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	b283      	uxth	r3, r0
 8007ec8:	1acb      	subs	r3, r1, r3
 8007eca:	0c00      	lsrs	r0, r0, #16
 8007ecc:	4463      	add	r3, ip
 8007ece:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007ed2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007edc:	4576      	cmp	r6, lr
 8007ede:	f849 3b04 	str.w	r3, [r9], #4
 8007ee2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ee6:	d8e5      	bhi.n	8007eb4 <__mdiff+0x88>
 8007ee8:	1b33      	subs	r3, r6, r4
 8007eea:	3b15      	subs	r3, #21
 8007eec:	f023 0303 	bic.w	r3, r3, #3
 8007ef0:	3415      	adds	r4, #21
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	42a6      	cmp	r6, r4
 8007ef6:	bf38      	it	cc
 8007ef8:	2304      	movcc	r3, #4
 8007efa:	441d      	add	r5, r3
 8007efc:	445b      	add	r3, fp
 8007efe:	461e      	mov	r6, r3
 8007f00:	462c      	mov	r4, r5
 8007f02:	4544      	cmp	r4, r8
 8007f04:	d30e      	bcc.n	8007f24 <__mdiff+0xf8>
 8007f06:	f108 0103 	add.w	r1, r8, #3
 8007f0a:	1b49      	subs	r1, r1, r5
 8007f0c:	f021 0103 	bic.w	r1, r1, #3
 8007f10:	3d03      	subs	r5, #3
 8007f12:	45a8      	cmp	r8, r5
 8007f14:	bf38      	it	cc
 8007f16:	2100      	movcc	r1, #0
 8007f18:	440b      	add	r3, r1
 8007f1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f1e:	b191      	cbz	r1, 8007f46 <__mdiff+0x11a>
 8007f20:	6117      	str	r7, [r2, #16]
 8007f22:	e79d      	b.n	8007e60 <__mdiff+0x34>
 8007f24:	f854 1b04 	ldr.w	r1, [r4], #4
 8007f28:	46e6      	mov	lr, ip
 8007f2a:	0c08      	lsrs	r0, r1, #16
 8007f2c:	fa1c fc81 	uxtah	ip, ip, r1
 8007f30:	4471      	add	r1, lr
 8007f32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007f36:	b289      	uxth	r1, r1
 8007f38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007f3c:	f846 1b04 	str.w	r1, [r6], #4
 8007f40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f44:	e7dd      	b.n	8007f02 <__mdiff+0xd6>
 8007f46:	3f01      	subs	r7, #1
 8007f48:	e7e7      	b.n	8007f1a <__mdiff+0xee>
 8007f4a:	bf00      	nop
 8007f4c:	08008868 	.word	0x08008868
 8007f50:	08008879 	.word	0x08008879

08007f54 <__d2b>:
 8007f54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f58:	460f      	mov	r7, r1
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	ec59 8b10 	vmov	r8, r9, d0
 8007f60:	4616      	mov	r6, r2
 8007f62:	f7ff fcd5 	bl	8007910 <_Balloc>
 8007f66:	4604      	mov	r4, r0
 8007f68:	b930      	cbnz	r0, 8007f78 <__d2b+0x24>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	4b23      	ldr	r3, [pc, #140]	@ (8007ffc <__d2b+0xa8>)
 8007f6e:	4824      	ldr	r0, [pc, #144]	@ (8008000 <__d2b+0xac>)
 8007f70:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f74:	f000 fac8 	bl	8008508 <__assert_func>
 8007f78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f80:	b10d      	cbz	r5, 8007f86 <__d2b+0x32>
 8007f82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	f1b8 0300 	subs.w	r3, r8, #0
 8007f8c:	d023      	beq.n	8007fd6 <__d2b+0x82>
 8007f8e:	4668      	mov	r0, sp
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	f7ff fd84 	bl	8007a9e <__lo0bits>
 8007f96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f9a:	b1d0      	cbz	r0, 8007fd2 <__d2b+0x7e>
 8007f9c:	f1c0 0320 	rsb	r3, r0, #32
 8007fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	40c2      	lsrs	r2, r0
 8007fa8:	6163      	str	r3, [r4, #20]
 8007faa:	9201      	str	r2, [sp, #4]
 8007fac:	9b01      	ldr	r3, [sp, #4]
 8007fae:	61a3      	str	r3, [r4, #24]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	bf0c      	ite	eq
 8007fb4:	2201      	moveq	r2, #1
 8007fb6:	2202      	movne	r2, #2
 8007fb8:	6122      	str	r2, [r4, #16]
 8007fba:	b1a5      	cbz	r5, 8007fe6 <__d2b+0x92>
 8007fbc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007fc0:	4405      	add	r5, r0
 8007fc2:	603d      	str	r5, [r7, #0]
 8007fc4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007fc8:	6030      	str	r0, [r6, #0]
 8007fca:	4620      	mov	r0, r4
 8007fcc:	b003      	add	sp, #12
 8007fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fd2:	6161      	str	r1, [r4, #20]
 8007fd4:	e7ea      	b.n	8007fac <__d2b+0x58>
 8007fd6:	a801      	add	r0, sp, #4
 8007fd8:	f7ff fd61 	bl	8007a9e <__lo0bits>
 8007fdc:	9b01      	ldr	r3, [sp, #4]
 8007fde:	6163      	str	r3, [r4, #20]
 8007fe0:	3020      	adds	r0, #32
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	e7e8      	b.n	8007fb8 <__d2b+0x64>
 8007fe6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007fee:	6038      	str	r0, [r7, #0]
 8007ff0:	6918      	ldr	r0, [r3, #16]
 8007ff2:	f7ff fd35 	bl	8007a60 <__hi0bits>
 8007ff6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ffa:	e7e5      	b.n	8007fc8 <__d2b+0x74>
 8007ffc:	08008868 	.word	0x08008868
 8008000:	08008879 	.word	0x08008879

08008004 <__sfputc_r>:
 8008004:	6893      	ldr	r3, [r2, #8]
 8008006:	3b01      	subs	r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	b410      	push	{r4}
 800800c:	6093      	str	r3, [r2, #8]
 800800e:	da08      	bge.n	8008022 <__sfputc_r+0x1e>
 8008010:	6994      	ldr	r4, [r2, #24]
 8008012:	42a3      	cmp	r3, r4
 8008014:	db01      	blt.n	800801a <__sfputc_r+0x16>
 8008016:	290a      	cmp	r1, #10
 8008018:	d103      	bne.n	8008022 <__sfputc_r+0x1e>
 800801a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800801e:	f7fe bbfc 	b.w	800681a <__swbuf_r>
 8008022:	6813      	ldr	r3, [r2, #0]
 8008024:	1c58      	adds	r0, r3, #1
 8008026:	6010      	str	r0, [r2, #0]
 8008028:	7019      	strb	r1, [r3, #0]
 800802a:	4608      	mov	r0, r1
 800802c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008030:	4770      	bx	lr

08008032 <__sfputs_r>:
 8008032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008034:	4606      	mov	r6, r0
 8008036:	460f      	mov	r7, r1
 8008038:	4614      	mov	r4, r2
 800803a:	18d5      	adds	r5, r2, r3
 800803c:	42ac      	cmp	r4, r5
 800803e:	d101      	bne.n	8008044 <__sfputs_r+0x12>
 8008040:	2000      	movs	r0, #0
 8008042:	e007      	b.n	8008054 <__sfputs_r+0x22>
 8008044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008048:	463a      	mov	r2, r7
 800804a:	4630      	mov	r0, r6
 800804c:	f7ff ffda 	bl	8008004 <__sfputc_r>
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	d1f3      	bne.n	800803c <__sfputs_r+0xa>
 8008054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008058 <_vfiprintf_r>:
 8008058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805c:	460d      	mov	r5, r1
 800805e:	b09d      	sub	sp, #116	@ 0x74
 8008060:	4614      	mov	r4, r2
 8008062:	4698      	mov	r8, r3
 8008064:	4606      	mov	r6, r0
 8008066:	b118      	cbz	r0, 8008070 <_vfiprintf_r+0x18>
 8008068:	6a03      	ldr	r3, [r0, #32]
 800806a:	b90b      	cbnz	r3, 8008070 <_vfiprintf_r+0x18>
 800806c:	f7fe faec 	bl	8006648 <__sinit>
 8008070:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008072:	07d9      	lsls	r1, r3, #31
 8008074:	d405      	bmi.n	8008082 <_vfiprintf_r+0x2a>
 8008076:	89ab      	ldrh	r3, [r5, #12]
 8008078:	059a      	lsls	r2, r3, #22
 800807a:	d402      	bmi.n	8008082 <_vfiprintf_r+0x2a>
 800807c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800807e:	f7fe fcde 	bl	8006a3e <__retarget_lock_acquire_recursive>
 8008082:	89ab      	ldrh	r3, [r5, #12]
 8008084:	071b      	lsls	r3, r3, #28
 8008086:	d501      	bpl.n	800808c <_vfiprintf_r+0x34>
 8008088:	692b      	ldr	r3, [r5, #16]
 800808a:	b99b      	cbnz	r3, 80080b4 <_vfiprintf_r+0x5c>
 800808c:	4629      	mov	r1, r5
 800808e:	4630      	mov	r0, r6
 8008090:	f7fe fc02 	bl	8006898 <__swsetup_r>
 8008094:	b170      	cbz	r0, 80080b4 <_vfiprintf_r+0x5c>
 8008096:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008098:	07dc      	lsls	r4, r3, #31
 800809a:	d504      	bpl.n	80080a6 <_vfiprintf_r+0x4e>
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	b01d      	add	sp, #116	@ 0x74
 80080a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a6:	89ab      	ldrh	r3, [r5, #12]
 80080a8:	0598      	lsls	r0, r3, #22
 80080aa:	d4f7      	bmi.n	800809c <_vfiprintf_r+0x44>
 80080ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080ae:	f7fe fcc7 	bl	8006a40 <__retarget_lock_release_recursive>
 80080b2:	e7f3      	b.n	800809c <_vfiprintf_r+0x44>
 80080b4:	2300      	movs	r3, #0
 80080b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80080b8:	2320      	movs	r3, #32
 80080ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080be:	f8cd 800c 	str.w	r8, [sp, #12]
 80080c2:	2330      	movs	r3, #48	@ 0x30
 80080c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008274 <_vfiprintf_r+0x21c>
 80080c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080cc:	f04f 0901 	mov.w	r9, #1
 80080d0:	4623      	mov	r3, r4
 80080d2:	469a      	mov	sl, r3
 80080d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080d8:	b10a      	cbz	r2, 80080de <_vfiprintf_r+0x86>
 80080da:	2a25      	cmp	r2, #37	@ 0x25
 80080dc:	d1f9      	bne.n	80080d2 <_vfiprintf_r+0x7a>
 80080de:	ebba 0b04 	subs.w	fp, sl, r4
 80080e2:	d00b      	beq.n	80080fc <_vfiprintf_r+0xa4>
 80080e4:	465b      	mov	r3, fp
 80080e6:	4622      	mov	r2, r4
 80080e8:	4629      	mov	r1, r5
 80080ea:	4630      	mov	r0, r6
 80080ec:	f7ff ffa1 	bl	8008032 <__sfputs_r>
 80080f0:	3001      	adds	r0, #1
 80080f2:	f000 80a7 	beq.w	8008244 <_vfiprintf_r+0x1ec>
 80080f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080f8:	445a      	add	r2, fp
 80080fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80080fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 809f 	beq.w	8008244 <_vfiprintf_r+0x1ec>
 8008106:	2300      	movs	r3, #0
 8008108:	f04f 32ff 	mov.w	r2, #4294967295
 800810c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008110:	f10a 0a01 	add.w	sl, sl, #1
 8008114:	9304      	str	r3, [sp, #16]
 8008116:	9307      	str	r3, [sp, #28]
 8008118:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800811c:	931a      	str	r3, [sp, #104]	@ 0x68
 800811e:	4654      	mov	r4, sl
 8008120:	2205      	movs	r2, #5
 8008122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008126:	4853      	ldr	r0, [pc, #332]	@ (8008274 <_vfiprintf_r+0x21c>)
 8008128:	f7f8 f872 	bl	8000210 <memchr>
 800812c:	9a04      	ldr	r2, [sp, #16]
 800812e:	b9d8      	cbnz	r0, 8008168 <_vfiprintf_r+0x110>
 8008130:	06d1      	lsls	r1, r2, #27
 8008132:	bf44      	itt	mi
 8008134:	2320      	movmi	r3, #32
 8008136:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800813a:	0713      	lsls	r3, r2, #28
 800813c:	bf44      	itt	mi
 800813e:	232b      	movmi	r3, #43	@ 0x2b
 8008140:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008144:	f89a 3000 	ldrb.w	r3, [sl]
 8008148:	2b2a      	cmp	r3, #42	@ 0x2a
 800814a:	d015      	beq.n	8008178 <_vfiprintf_r+0x120>
 800814c:	9a07      	ldr	r2, [sp, #28]
 800814e:	4654      	mov	r4, sl
 8008150:	2000      	movs	r0, #0
 8008152:	f04f 0c0a 	mov.w	ip, #10
 8008156:	4621      	mov	r1, r4
 8008158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800815c:	3b30      	subs	r3, #48	@ 0x30
 800815e:	2b09      	cmp	r3, #9
 8008160:	d94b      	bls.n	80081fa <_vfiprintf_r+0x1a2>
 8008162:	b1b0      	cbz	r0, 8008192 <_vfiprintf_r+0x13a>
 8008164:	9207      	str	r2, [sp, #28]
 8008166:	e014      	b.n	8008192 <_vfiprintf_r+0x13a>
 8008168:	eba0 0308 	sub.w	r3, r0, r8
 800816c:	fa09 f303 	lsl.w	r3, r9, r3
 8008170:	4313      	orrs	r3, r2
 8008172:	9304      	str	r3, [sp, #16]
 8008174:	46a2      	mov	sl, r4
 8008176:	e7d2      	b.n	800811e <_vfiprintf_r+0xc6>
 8008178:	9b03      	ldr	r3, [sp, #12]
 800817a:	1d19      	adds	r1, r3, #4
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	9103      	str	r1, [sp, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	bfbb      	ittet	lt
 8008184:	425b      	neglt	r3, r3
 8008186:	f042 0202 	orrlt.w	r2, r2, #2
 800818a:	9307      	strge	r3, [sp, #28]
 800818c:	9307      	strlt	r3, [sp, #28]
 800818e:	bfb8      	it	lt
 8008190:	9204      	strlt	r2, [sp, #16]
 8008192:	7823      	ldrb	r3, [r4, #0]
 8008194:	2b2e      	cmp	r3, #46	@ 0x2e
 8008196:	d10a      	bne.n	80081ae <_vfiprintf_r+0x156>
 8008198:	7863      	ldrb	r3, [r4, #1]
 800819a:	2b2a      	cmp	r3, #42	@ 0x2a
 800819c:	d132      	bne.n	8008204 <_vfiprintf_r+0x1ac>
 800819e:	9b03      	ldr	r3, [sp, #12]
 80081a0:	1d1a      	adds	r2, r3, #4
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	9203      	str	r2, [sp, #12]
 80081a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081aa:	3402      	adds	r4, #2
 80081ac:	9305      	str	r3, [sp, #20]
 80081ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008284 <_vfiprintf_r+0x22c>
 80081b2:	7821      	ldrb	r1, [r4, #0]
 80081b4:	2203      	movs	r2, #3
 80081b6:	4650      	mov	r0, sl
 80081b8:	f7f8 f82a 	bl	8000210 <memchr>
 80081bc:	b138      	cbz	r0, 80081ce <_vfiprintf_r+0x176>
 80081be:	9b04      	ldr	r3, [sp, #16]
 80081c0:	eba0 000a 	sub.w	r0, r0, sl
 80081c4:	2240      	movs	r2, #64	@ 0x40
 80081c6:	4082      	lsls	r2, r0
 80081c8:	4313      	orrs	r3, r2
 80081ca:	3401      	adds	r4, #1
 80081cc:	9304      	str	r3, [sp, #16]
 80081ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d2:	4829      	ldr	r0, [pc, #164]	@ (8008278 <_vfiprintf_r+0x220>)
 80081d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081d8:	2206      	movs	r2, #6
 80081da:	f7f8 f819 	bl	8000210 <memchr>
 80081de:	2800      	cmp	r0, #0
 80081e0:	d03f      	beq.n	8008262 <_vfiprintf_r+0x20a>
 80081e2:	4b26      	ldr	r3, [pc, #152]	@ (800827c <_vfiprintf_r+0x224>)
 80081e4:	bb1b      	cbnz	r3, 800822e <_vfiprintf_r+0x1d6>
 80081e6:	9b03      	ldr	r3, [sp, #12]
 80081e8:	3307      	adds	r3, #7
 80081ea:	f023 0307 	bic.w	r3, r3, #7
 80081ee:	3308      	adds	r3, #8
 80081f0:	9303      	str	r3, [sp, #12]
 80081f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f4:	443b      	add	r3, r7
 80081f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80081f8:	e76a      	b.n	80080d0 <_vfiprintf_r+0x78>
 80081fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80081fe:	460c      	mov	r4, r1
 8008200:	2001      	movs	r0, #1
 8008202:	e7a8      	b.n	8008156 <_vfiprintf_r+0xfe>
 8008204:	2300      	movs	r3, #0
 8008206:	3401      	adds	r4, #1
 8008208:	9305      	str	r3, [sp, #20]
 800820a:	4619      	mov	r1, r3
 800820c:	f04f 0c0a 	mov.w	ip, #10
 8008210:	4620      	mov	r0, r4
 8008212:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008216:	3a30      	subs	r2, #48	@ 0x30
 8008218:	2a09      	cmp	r2, #9
 800821a:	d903      	bls.n	8008224 <_vfiprintf_r+0x1cc>
 800821c:	2b00      	cmp	r3, #0
 800821e:	d0c6      	beq.n	80081ae <_vfiprintf_r+0x156>
 8008220:	9105      	str	r1, [sp, #20]
 8008222:	e7c4      	b.n	80081ae <_vfiprintf_r+0x156>
 8008224:	fb0c 2101 	mla	r1, ip, r1, r2
 8008228:	4604      	mov	r4, r0
 800822a:	2301      	movs	r3, #1
 800822c:	e7f0      	b.n	8008210 <_vfiprintf_r+0x1b8>
 800822e:	ab03      	add	r3, sp, #12
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	462a      	mov	r2, r5
 8008234:	4b12      	ldr	r3, [pc, #72]	@ (8008280 <_vfiprintf_r+0x228>)
 8008236:	a904      	add	r1, sp, #16
 8008238:	4630      	mov	r0, r6
 800823a:	f7fd fdc3 	bl	8005dc4 <_printf_float>
 800823e:	4607      	mov	r7, r0
 8008240:	1c78      	adds	r0, r7, #1
 8008242:	d1d6      	bne.n	80081f2 <_vfiprintf_r+0x19a>
 8008244:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008246:	07d9      	lsls	r1, r3, #31
 8008248:	d405      	bmi.n	8008256 <_vfiprintf_r+0x1fe>
 800824a:	89ab      	ldrh	r3, [r5, #12]
 800824c:	059a      	lsls	r2, r3, #22
 800824e:	d402      	bmi.n	8008256 <_vfiprintf_r+0x1fe>
 8008250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008252:	f7fe fbf5 	bl	8006a40 <__retarget_lock_release_recursive>
 8008256:	89ab      	ldrh	r3, [r5, #12]
 8008258:	065b      	lsls	r3, r3, #25
 800825a:	f53f af1f 	bmi.w	800809c <_vfiprintf_r+0x44>
 800825e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008260:	e71e      	b.n	80080a0 <_vfiprintf_r+0x48>
 8008262:	ab03      	add	r3, sp, #12
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	462a      	mov	r2, r5
 8008268:	4b05      	ldr	r3, [pc, #20]	@ (8008280 <_vfiprintf_r+0x228>)
 800826a:	a904      	add	r1, sp, #16
 800826c:	4630      	mov	r0, r6
 800826e:	f7fe f841 	bl	80062f4 <_printf_i>
 8008272:	e7e4      	b.n	800823e <_vfiprintf_r+0x1e6>
 8008274:	080088d2 	.word	0x080088d2
 8008278:	080088dc 	.word	0x080088dc
 800827c:	08005dc5 	.word	0x08005dc5
 8008280:	08008033 	.word	0x08008033
 8008284:	080088d8 	.word	0x080088d8

08008288 <__sflush_r>:
 8008288:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800828c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008290:	0716      	lsls	r6, r2, #28
 8008292:	4605      	mov	r5, r0
 8008294:	460c      	mov	r4, r1
 8008296:	d454      	bmi.n	8008342 <__sflush_r+0xba>
 8008298:	684b      	ldr	r3, [r1, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	dc02      	bgt.n	80082a4 <__sflush_r+0x1c>
 800829e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	dd48      	ble.n	8008336 <__sflush_r+0xae>
 80082a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082a6:	2e00      	cmp	r6, #0
 80082a8:	d045      	beq.n	8008336 <__sflush_r+0xae>
 80082aa:	2300      	movs	r3, #0
 80082ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082b0:	682f      	ldr	r7, [r5, #0]
 80082b2:	6a21      	ldr	r1, [r4, #32]
 80082b4:	602b      	str	r3, [r5, #0]
 80082b6:	d030      	beq.n	800831a <__sflush_r+0x92>
 80082b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	0759      	lsls	r1, r3, #29
 80082be:	d505      	bpl.n	80082cc <__sflush_r+0x44>
 80082c0:	6863      	ldr	r3, [r4, #4]
 80082c2:	1ad2      	subs	r2, r2, r3
 80082c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082c6:	b10b      	cbz	r3, 80082cc <__sflush_r+0x44>
 80082c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082ca:	1ad2      	subs	r2, r2, r3
 80082cc:	2300      	movs	r3, #0
 80082ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082d0:	6a21      	ldr	r1, [r4, #32]
 80082d2:	4628      	mov	r0, r5
 80082d4:	47b0      	blx	r6
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	d106      	bne.n	80082ea <__sflush_r+0x62>
 80082dc:	6829      	ldr	r1, [r5, #0]
 80082de:	291d      	cmp	r1, #29
 80082e0:	d82b      	bhi.n	800833a <__sflush_r+0xb2>
 80082e2:	4a2a      	ldr	r2, [pc, #168]	@ (800838c <__sflush_r+0x104>)
 80082e4:	40ca      	lsrs	r2, r1
 80082e6:	07d6      	lsls	r6, r2, #31
 80082e8:	d527      	bpl.n	800833a <__sflush_r+0xb2>
 80082ea:	2200      	movs	r2, #0
 80082ec:	6062      	str	r2, [r4, #4]
 80082ee:	04d9      	lsls	r1, r3, #19
 80082f0:	6922      	ldr	r2, [r4, #16]
 80082f2:	6022      	str	r2, [r4, #0]
 80082f4:	d504      	bpl.n	8008300 <__sflush_r+0x78>
 80082f6:	1c42      	adds	r2, r0, #1
 80082f8:	d101      	bne.n	80082fe <__sflush_r+0x76>
 80082fa:	682b      	ldr	r3, [r5, #0]
 80082fc:	b903      	cbnz	r3, 8008300 <__sflush_r+0x78>
 80082fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8008300:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008302:	602f      	str	r7, [r5, #0]
 8008304:	b1b9      	cbz	r1, 8008336 <__sflush_r+0xae>
 8008306:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800830a:	4299      	cmp	r1, r3
 800830c:	d002      	beq.n	8008314 <__sflush_r+0x8c>
 800830e:	4628      	mov	r0, r5
 8008310:	f7ff f9fe 	bl	8007710 <_free_r>
 8008314:	2300      	movs	r3, #0
 8008316:	6363      	str	r3, [r4, #52]	@ 0x34
 8008318:	e00d      	b.n	8008336 <__sflush_r+0xae>
 800831a:	2301      	movs	r3, #1
 800831c:	4628      	mov	r0, r5
 800831e:	47b0      	blx	r6
 8008320:	4602      	mov	r2, r0
 8008322:	1c50      	adds	r0, r2, #1
 8008324:	d1c9      	bne.n	80082ba <__sflush_r+0x32>
 8008326:	682b      	ldr	r3, [r5, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d0c6      	beq.n	80082ba <__sflush_r+0x32>
 800832c:	2b1d      	cmp	r3, #29
 800832e:	d001      	beq.n	8008334 <__sflush_r+0xac>
 8008330:	2b16      	cmp	r3, #22
 8008332:	d11e      	bne.n	8008372 <__sflush_r+0xea>
 8008334:	602f      	str	r7, [r5, #0]
 8008336:	2000      	movs	r0, #0
 8008338:	e022      	b.n	8008380 <__sflush_r+0xf8>
 800833a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800833e:	b21b      	sxth	r3, r3
 8008340:	e01b      	b.n	800837a <__sflush_r+0xf2>
 8008342:	690f      	ldr	r7, [r1, #16]
 8008344:	2f00      	cmp	r7, #0
 8008346:	d0f6      	beq.n	8008336 <__sflush_r+0xae>
 8008348:	0793      	lsls	r3, r2, #30
 800834a:	680e      	ldr	r6, [r1, #0]
 800834c:	bf08      	it	eq
 800834e:	694b      	ldreq	r3, [r1, #20]
 8008350:	600f      	str	r7, [r1, #0]
 8008352:	bf18      	it	ne
 8008354:	2300      	movne	r3, #0
 8008356:	eba6 0807 	sub.w	r8, r6, r7
 800835a:	608b      	str	r3, [r1, #8]
 800835c:	f1b8 0f00 	cmp.w	r8, #0
 8008360:	dde9      	ble.n	8008336 <__sflush_r+0xae>
 8008362:	6a21      	ldr	r1, [r4, #32]
 8008364:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008366:	4643      	mov	r3, r8
 8008368:	463a      	mov	r2, r7
 800836a:	4628      	mov	r0, r5
 800836c:	47b0      	blx	r6
 800836e:	2800      	cmp	r0, #0
 8008370:	dc08      	bgt.n	8008384 <__sflush_r+0xfc>
 8008372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	f04f 30ff 	mov.w	r0, #4294967295
 8008380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008384:	4407      	add	r7, r0
 8008386:	eba8 0800 	sub.w	r8, r8, r0
 800838a:	e7e7      	b.n	800835c <__sflush_r+0xd4>
 800838c:	20400001 	.word	0x20400001

08008390 <_fflush_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	690b      	ldr	r3, [r1, #16]
 8008394:	4605      	mov	r5, r0
 8008396:	460c      	mov	r4, r1
 8008398:	b913      	cbnz	r3, 80083a0 <_fflush_r+0x10>
 800839a:	2500      	movs	r5, #0
 800839c:	4628      	mov	r0, r5
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	b118      	cbz	r0, 80083aa <_fflush_r+0x1a>
 80083a2:	6a03      	ldr	r3, [r0, #32]
 80083a4:	b90b      	cbnz	r3, 80083aa <_fflush_r+0x1a>
 80083a6:	f7fe f94f 	bl	8006648 <__sinit>
 80083aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d0f3      	beq.n	800839a <_fflush_r+0xa>
 80083b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083b4:	07d0      	lsls	r0, r2, #31
 80083b6:	d404      	bmi.n	80083c2 <_fflush_r+0x32>
 80083b8:	0599      	lsls	r1, r3, #22
 80083ba:	d402      	bmi.n	80083c2 <_fflush_r+0x32>
 80083bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083be:	f7fe fb3e 	bl	8006a3e <__retarget_lock_acquire_recursive>
 80083c2:	4628      	mov	r0, r5
 80083c4:	4621      	mov	r1, r4
 80083c6:	f7ff ff5f 	bl	8008288 <__sflush_r>
 80083ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083cc:	07da      	lsls	r2, r3, #31
 80083ce:	4605      	mov	r5, r0
 80083d0:	d4e4      	bmi.n	800839c <_fflush_r+0xc>
 80083d2:	89a3      	ldrh	r3, [r4, #12]
 80083d4:	059b      	lsls	r3, r3, #22
 80083d6:	d4e1      	bmi.n	800839c <_fflush_r+0xc>
 80083d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083da:	f7fe fb31 	bl	8006a40 <__retarget_lock_release_recursive>
 80083de:	e7dd      	b.n	800839c <_fflush_r+0xc>

080083e0 <__swhatbuf_r>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	460c      	mov	r4, r1
 80083e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e8:	2900      	cmp	r1, #0
 80083ea:	b096      	sub	sp, #88	@ 0x58
 80083ec:	4615      	mov	r5, r2
 80083ee:	461e      	mov	r6, r3
 80083f0:	da0d      	bge.n	800840e <__swhatbuf_r+0x2e>
 80083f2:	89a3      	ldrh	r3, [r4, #12]
 80083f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083f8:	f04f 0100 	mov.w	r1, #0
 80083fc:	bf14      	ite	ne
 80083fe:	2340      	movne	r3, #64	@ 0x40
 8008400:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008404:	2000      	movs	r0, #0
 8008406:	6031      	str	r1, [r6, #0]
 8008408:	602b      	str	r3, [r5, #0]
 800840a:	b016      	add	sp, #88	@ 0x58
 800840c:	bd70      	pop	{r4, r5, r6, pc}
 800840e:	466a      	mov	r2, sp
 8008410:	f000 f848 	bl	80084a4 <_fstat_r>
 8008414:	2800      	cmp	r0, #0
 8008416:	dbec      	blt.n	80083f2 <__swhatbuf_r+0x12>
 8008418:	9901      	ldr	r1, [sp, #4]
 800841a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800841e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008422:	4259      	negs	r1, r3
 8008424:	4159      	adcs	r1, r3
 8008426:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800842a:	e7eb      	b.n	8008404 <__swhatbuf_r+0x24>

0800842c <__smakebuf_r>:
 800842c:	898b      	ldrh	r3, [r1, #12]
 800842e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008430:	079d      	lsls	r5, r3, #30
 8008432:	4606      	mov	r6, r0
 8008434:	460c      	mov	r4, r1
 8008436:	d507      	bpl.n	8008448 <__smakebuf_r+0x1c>
 8008438:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	6123      	str	r3, [r4, #16]
 8008440:	2301      	movs	r3, #1
 8008442:	6163      	str	r3, [r4, #20]
 8008444:	b003      	add	sp, #12
 8008446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008448:	ab01      	add	r3, sp, #4
 800844a:	466a      	mov	r2, sp
 800844c:	f7ff ffc8 	bl	80083e0 <__swhatbuf_r>
 8008450:	9f00      	ldr	r7, [sp, #0]
 8008452:	4605      	mov	r5, r0
 8008454:	4639      	mov	r1, r7
 8008456:	4630      	mov	r0, r6
 8008458:	f7ff f9ce 	bl	80077f8 <_malloc_r>
 800845c:	b948      	cbnz	r0, 8008472 <__smakebuf_r+0x46>
 800845e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008462:	059a      	lsls	r2, r3, #22
 8008464:	d4ee      	bmi.n	8008444 <__smakebuf_r+0x18>
 8008466:	f023 0303 	bic.w	r3, r3, #3
 800846a:	f043 0302 	orr.w	r3, r3, #2
 800846e:	81a3      	strh	r3, [r4, #12]
 8008470:	e7e2      	b.n	8008438 <__smakebuf_r+0xc>
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	6020      	str	r0, [r4, #0]
 8008476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800847a:	81a3      	strh	r3, [r4, #12]
 800847c:	9b01      	ldr	r3, [sp, #4]
 800847e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008482:	b15b      	cbz	r3, 800849c <__smakebuf_r+0x70>
 8008484:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008488:	4630      	mov	r0, r6
 800848a:	f000 f81d 	bl	80084c8 <_isatty_r>
 800848e:	b128      	cbz	r0, 800849c <__smakebuf_r+0x70>
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	f023 0303 	bic.w	r3, r3, #3
 8008496:	f043 0301 	orr.w	r3, r3, #1
 800849a:	81a3      	strh	r3, [r4, #12]
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	431d      	orrs	r5, r3
 80084a0:	81a5      	strh	r5, [r4, #12]
 80084a2:	e7cf      	b.n	8008444 <__smakebuf_r+0x18>

080084a4 <_fstat_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	4d07      	ldr	r5, [pc, #28]	@ (80084c4 <_fstat_r+0x20>)
 80084a8:	2300      	movs	r3, #0
 80084aa:	4604      	mov	r4, r0
 80084ac:	4608      	mov	r0, r1
 80084ae:	4611      	mov	r1, r2
 80084b0:	602b      	str	r3, [r5, #0]
 80084b2:	f7fa f925 	bl	8002700 <_fstat>
 80084b6:	1c43      	adds	r3, r0, #1
 80084b8:	d102      	bne.n	80084c0 <_fstat_r+0x1c>
 80084ba:	682b      	ldr	r3, [r5, #0]
 80084bc:	b103      	cbz	r3, 80084c0 <_fstat_r+0x1c>
 80084be:	6023      	str	r3, [r4, #0]
 80084c0:	bd38      	pop	{r3, r4, r5, pc}
 80084c2:	bf00      	nop
 80084c4:	20000420 	.word	0x20000420

080084c8 <_isatty_r>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	4d06      	ldr	r5, [pc, #24]	@ (80084e4 <_isatty_r+0x1c>)
 80084cc:	2300      	movs	r3, #0
 80084ce:	4604      	mov	r4, r0
 80084d0:	4608      	mov	r0, r1
 80084d2:	602b      	str	r3, [r5, #0]
 80084d4:	f7fa f924 	bl	8002720 <_isatty>
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	d102      	bne.n	80084e2 <_isatty_r+0x1a>
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	b103      	cbz	r3, 80084e2 <_isatty_r+0x1a>
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	bd38      	pop	{r3, r4, r5, pc}
 80084e4:	20000420 	.word	0x20000420

080084e8 <_sbrk_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4d06      	ldr	r5, [pc, #24]	@ (8008504 <_sbrk_r+0x1c>)
 80084ec:	2300      	movs	r3, #0
 80084ee:	4604      	mov	r4, r0
 80084f0:	4608      	mov	r0, r1
 80084f2:	602b      	str	r3, [r5, #0]
 80084f4:	f7fa f92c 	bl	8002750 <_sbrk>
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	d102      	bne.n	8008502 <_sbrk_r+0x1a>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	b103      	cbz	r3, 8008502 <_sbrk_r+0x1a>
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	bd38      	pop	{r3, r4, r5, pc}
 8008504:	20000420 	.word	0x20000420

08008508 <__assert_func>:
 8008508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800850a:	4614      	mov	r4, r2
 800850c:	461a      	mov	r2, r3
 800850e:	4b09      	ldr	r3, [pc, #36]	@ (8008534 <__assert_func+0x2c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4605      	mov	r5, r0
 8008514:	68d8      	ldr	r0, [r3, #12]
 8008516:	b14c      	cbz	r4, 800852c <__assert_func+0x24>
 8008518:	4b07      	ldr	r3, [pc, #28]	@ (8008538 <__assert_func+0x30>)
 800851a:	9100      	str	r1, [sp, #0]
 800851c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008520:	4906      	ldr	r1, [pc, #24]	@ (800853c <__assert_func+0x34>)
 8008522:	462b      	mov	r3, r5
 8008524:	f000 f842 	bl	80085ac <fiprintf>
 8008528:	f000 f852 	bl	80085d0 <abort>
 800852c:	4b04      	ldr	r3, [pc, #16]	@ (8008540 <__assert_func+0x38>)
 800852e:	461c      	mov	r4, r3
 8008530:	e7f3      	b.n	800851a <__assert_func+0x12>
 8008532:	bf00      	nop
 8008534:	20000018 	.word	0x20000018
 8008538:	080088ed 	.word	0x080088ed
 800853c:	080088fa 	.word	0x080088fa
 8008540:	08008928 	.word	0x08008928

08008544 <_calloc_r>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	fba1 5402 	umull	r5, r4, r1, r2
 800854a:	b934      	cbnz	r4, 800855a <_calloc_r+0x16>
 800854c:	4629      	mov	r1, r5
 800854e:	f7ff f953 	bl	80077f8 <_malloc_r>
 8008552:	4606      	mov	r6, r0
 8008554:	b928      	cbnz	r0, 8008562 <_calloc_r+0x1e>
 8008556:	4630      	mov	r0, r6
 8008558:	bd70      	pop	{r4, r5, r6, pc}
 800855a:	220c      	movs	r2, #12
 800855c:	6002      	str	r2, [r0, #0]
 800855e:	2600      	movs	r6, #0
 8008560:	e7f9      	b.n	8008556 <_calloc_r+0x12>
 8008562:	462a      	mov	r2, r5
 8008564:	4621      	mov	r1, r4
 8008566:	f7fe f9ed 	bl	8006944 <memset>
 800856a:	e7f4      	b.n	8008556 <_calloc_r+0x12>

0800856c <__ascii_mbtowc>:
 800856c:	b082      	sub	sp, #8
 800856e:	b901      	cbnz	r1, 8008572 <__ascii_mbtowc+0x6>
 8008570:	a901      	add	r1, sp, #4
 8008572:	b142      	cbz	r2, 8008586 <__ascii_mbtowc+0x1a>
 8008574:	b14b      	cbz	r3, 800858a <__ascii_mbtowc+0x1e>
 8008576:	7813      	ldrb	r3, [r2, #0]
 8008578:	600b      	str	r3, [r1, #0]
 800857a:	7812      	ldrb	r2, [r2, #0]
 800857c:	1e10      	subs	r0, r2, #0
 800857e:	bf18      	it	ne
 8008580:	2001      	movne	r0, #1
 8008582:	b002      	add	sp, #8
 8008584:	4770      	bx	lr
 8008586:	4610      	mov	r0, r2
 8008588:	e7fb      	b.n	8008582 <__ascii_mbtowc+0x16>
 800858a:	f06f 0001 	mvn.w	r0, #1
 800858e:	e7f8      	b.n	8008582 <__ascii_mbtowc+0x16>

08008590 <__ascii_wctomb>:
 8008590:	4603      	mov	r3, r0
 8008592:	4608      	mov	r0, r1
 8008594:	b141      	cbz	r1, 80085a8 <__ascii_wctomb+0x18>
 8008596:	2aff      	cmp	r2, #255	@ 0xff
 8008598:	d904      	bls.n	80085a4 <__ascii_wctomb+0x14>
 800859a:	228a      	movs	r2, #138	@ 0x8a
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	f04f 30ff 	mov.w	r0, #4294967295
 80085a2:	4770      	bx	lr
 80085a4:	700a      	strb	r2, [r1, #0]
 80085a6:	2001      	movs	r0, #1
 80085a8:	4770      	bx	lr
	...

080085ac <fiprintf>:
 80085ac:	b40e      	push	{r1, r2, r3}
 80085ae:	b503      	push	{r0, r1, lr}
 80085b0:	4601      	mov	r1, r0
 80085b2:	ab03      	add	r3, sp, #12
 80085b4:	4805      	ldr	r0, [pc, #20]	@ (80085cc <fiprintf+0x20>)
 80085b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ba:	6800      	ldr	r0, [r0, #0]
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	f7ff fd4b 	bl	8008058 <_vfiprintf_r>
 80085c2:	b002      	add	sp, #8
 80085c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80085c8:	b003      	add	sp, #12
 80085ca:	4770      	bx	lr
 80085cc:	20000018 	.word	0x20000018

080085d0 <abort>:
 80085d0:	b508      	push	{r3, lr}
 80085d2:	2006      	movs	r0, #6
 80085d4:	f000 f82c 	bl	8008630 <raise>
 80085d8:	2001      	movs	r0, #1
 80085da:	f7fa f841 	bl	8002660 <_exit>

080085de <_raise_r>:
 80085de:	291f      	cmp	r1, #31
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4605      	mov	r5, r0
 80085e4:	460c      	mov	r4, r1
 80085e6:	d904      	bls.n	80085f2 <_raise_r+0x14>
 80085e8:	2316      	movs	r3, #22
 80085ea:	6003      	str	r3, [r0, #0]
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295
 80085f0:	bd38      	pop	{r3, r4, r5, pc}
 80085f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80085f4:	b112      	cbz	r2, 80085fc <_raise_r+0x1e>
 80085f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085fa:	b94b      	cbnz	r3, 8008610 <_raise_r+0x32>
 80085fc:	4628      	mov	r0, r5
 80085fe:	f000 f831 	bl	8008664 <_getpid_r>
 8008602:	4622      	mov	r2, r4
 8008604:	4601      	mov	r1, r0
 8008606:	4628      	mov	r0, r5
 8008608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800860c:	f000 b818 	b.w	8008640 <_kill_r>
 8008610:	2b01      	cmp	r3, #1
 8008612:	d00a      	beq.n	800862a <_raise_r+0x4c>
 8008614:	1c59      	adds	r1, r3, #1
 8008616:	d103      	bne.n	8008620 <_raise_r+0x42>
 8008618:	2316      	movs	r3, #22
 800861a:	6003      	str	r3, [r0, #0]
 800861c:	2001      	movs	r0, #1
 800861e:	e7e7      	b.n	80085f0 <_raise_r+0x12>
 8008620:	2100      	movs	r1, #0
 8008622:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008626:	4620      	mov	r0, r4
 8008628:	4798      	blx	r3
 800862a:	2000      	movs	r0, #0
 800862c:	e7e0      	b.n	80085f0 <_raise_r+0x12>
	...

08008630 <raise>:
 8008630:	4b02      	ldr	r3, [pc, #8]	@ (800863c <raise+0xc>)
 8008632:	4601      	mov	r1, r0
 8008634:	6818      	ldr	r0, [r3, #0]
 8008636:	f7ff bfd2 	b.w	80085de <_raise_r>
 800863a:	bf00      	nop
 800863c:	20000018 	.word	0x20000018

08008640 <_kill_r>:
 8008640:	b538      	push	{r3, r4, r5, lr}
 8008642:	4d07      	ldr	r5, [pc, #28]	@ (8008660 <_kill_r+0x20>)
 8008644:	2300      	movs	r3, #0
 8008646:	4604      	mov	r4, r0
 8008648:	4608      	mov	r0, r1
 800864a:	4611      	mov	r1, r2
 800864c:	602b      	str	r3, [r5, #0]
 800864e:	f7f9 fff7 	bl	8002640 <_kill>
 8008652:	1c43      	adds	r3, r0, #1
 8008654:	d102      	bne.n	800865c <_kill_r+0x1c>
 8008656:	682b      	ldr	r3, [r5, #0]
 8008658:	b103      	cbz	r3, 800865c <_kill_r+0x1c>
 800865a:	6023      	str	r3, [r4, #0]
 800865c:	bd38      	pop	{r3, r4, r5, pc}
 800865e:	bf00      	nop
 8008660:	20000420 	.word	0x20000420

08008664 <_getpid_r>:
 8008664:	f7f9 bfe4 	b.w	8002630 <_getpid>

08008668 <_init>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	bf00      	nop
 800866c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866e:	bc08      	pop	{r3}
 8008670:	469e      	mov	lr, r3
 8008672:	4770      	bx	lr

08008674 <_fini>:
 8008674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008676:	bf00      	nop
 8008678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800867a:	bc08      	pop	{r3}
 800867c:	469e      	mov	lr, r3
 800867e:	4770      	bx	lr
