
ads1115.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  080071b8  080071b8  000081b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800759c  0800759c  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800759c  0800759c  0000859c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075a4  080075a4  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075a4  080075a4  000085a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075a8  080075a8  000085a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080075ac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001d4  08007780  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08007780  00009420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df02  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9f  00000000  00000000  00017106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  000190a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ba  00000000  00000000  00019bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263b1  00000000  00000000  0001a4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001017a  00000000  00000000  00040863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e90b0  00000000  00000000  000509dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139a8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e68  00000000  00000000  00139ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0013d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800719c 	.word	0x0800719c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800719c 	.word	0x0800719c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <dr_to_delay_ms>:

#define ADS_I2C_ADDR  ADS1115_I2C_ADDR

// internal delays: minimal wait derived from data rate
static uint32_t dr_to_delay_ms(ADS1115_DR_t dr)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
    switch(dr) {
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b07      	cmp	r3, #7
 8000f22:	d823      	bhi.n	8000f6c <dr_to_delay_ms+0x58>
 8000f24:	a201      	add	r2, pc, #4	@ (adr r2, 8000f2c <dr_to_delay_ms+0x18>)
 8000f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2a:	bf00      	nop
 8000f2c:	08000f4d 	.word	0x08000f4d
 8000f30:	08000f51 	.word	0x08000f51
 8000f34:	08000f55 	.word	0x08000f55
 8000f38:	08000f59 	.word	0x08000f59
 8000f3c:	08000f5d 	.word	0x08000f5d
 8000f40:	08000f61 	.word	0x08000f61
 8000f44:	08000f65 	.word	0x08000f65
 8000f48:	08000f69 	.word	0x08000f69
        case ADS_DR_8SPS: return 125;   // 125ms
 8000f4c:	237d      	movs	r3, #125	@ 0x7d
 8000f4e:	e00e      	b.n	8000f6e <dr_to_delay_ms+0x5a>
        case ADS_DR_16SPS: return 63;
 8000f50:	233f      	movs	r3, #63	@ 0x3f
 8000f52:	e00c      	b.n	8000f6e <dr_to_delay_ms+0x5a>
        case ADS_DR_32SPS: return 32;
 8000f54:	2320      	movs	r3, #32
 8000f56:	e00a      	b.n	8000f6e <dr_to_delay_ms+0x5a>
        case ADS_DR_64SPS: return 16;
 8000f58:	2310      	movs	r3, #16
 8000f5a:	e008      	b.n	8000f6e <dr_to_delay_ms+0x5a>
        case ADS_DR_128SPS: return 8;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	e006      	b.n	8000f6e <dr_to_delay_ms+0x5a>
        case ADS_DR_250SPS: return 4;
 8000f60:	2304      	movs	r3, #4
 8000f62:	e004      	b.n	8000f6e <dr_to_delay_ms+0x5a>
        case ADS_DR_475SPS: return 3;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e002      	b.n	8000f6e <dr_to_delay_ms+0x5a>
        case ADS_DR_860SPS: return 2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e000      	b.n	8000f6e <dr_to_delay_ms+0x5a>
        default: return 10;
 8000f6c:	230a      	movs	r3, #10
    }
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <ADS1115_Init>:

void ADS1115_Init(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
    // nothing required; hi2c1 must be initialized by CubeMX
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <ADS1115_readRegister>:

// Low-level register access (16-bit registers big-endian)
uint16_t ADS1115_readRegister(uint8_t reg)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af04      	add	r7, sp, #16
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[2] = {0};
 8000f96:	2300      	movs	r3, #0
 8000f98:	81bb      	strh	r3, [r7, #12]
    if (HAL_I2C_Mem_Read(&hi2c1, ADS_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, buf, 2, 1000) != HAL_OK) {
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	2190      	movs	r1, #144	@ 0x90
 8000fb2:	480a      	ldr	r0, [pc, #40]	@ (8000fdc <ADS1115_readRegister+0x50>)
 8000fb4:	f001 f9bc 	bl	8002330 <HAL_I2C_Mem_Read>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <ADS1115_readRegister+0x36>
        return 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e008      	b.n	8000fd4 <ADS1115_readRegister+0x48>
    }
    return (uint16_t)((buf[0] << 8) | buf[1]);
 8000fc2:	7b3b      	ldrb	r3, [r7, #12]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	021b      	lsls	r3, r3, #8
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	7b7b      	ldrb	r3, [r7, #13]
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	b29b      	uxth	r3, r3
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200001f0 	.word	0x200001f0

08000fe0 <ADS1115_writeRegister>:

void ADS1115_writeRegister(uint8_t reg, uint16_t value)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af04      	add	r7, sp, #16
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[2];
    buf[0] = (uint8_t)(value >> 8);
 8000ff0:	88bb      	ldrh	r3, [r7, #4]
 8000ff2:	0a1b      	lsrs	r3, r3, #8
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t)(value & 0xFF);
 8000ffa:	88bb      	ldrh	r3, [r7, #4]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Mem_Write(&hi2c1, ADS_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, buf, 2, 1000);
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	b29a      	uxth	r2, r3
 8001004:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	2302      	movs	r3, #2
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2301      	movs	r3, #1
 8001016:	2190      	movs	r1, #144	@ 0x90
 8001018:	4803      	ldr	r0, [pc, #12]	@ (8001028 <ADS1115_writeRegister+0x48>)
 800101a:	f001 f875 	bl	8002108 <HAL_I2C_Mem_Write>
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001f0 	.word	0x200001f0

0800102c <ADS1115_readConversionRegister>:

int16_t ADS1115_readConversionRegister(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
    uint16_t raw = ADS1115_readRegister(ADS1115_REG_CONVERSION);
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff ffaa 	bl	8000f8c <ADS1115_readRegister>
 8001038:	4603      	mov	r3, r0
 800103a:	80fb      	strh	r3, [r7, #6]
    return (int16_t)raw;
 800103c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <ADS1115_startSingleShot>:

// Build config bits and start single-shot conversion
static void ADS1115_startSingleShot(uint16_t config)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]
    // write config (start single conversion by setting OS=1)
    ADS1115_writeRegister(ADS1115_REG_CONFIG, config);
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	4619      	mov	r1, r3
 8001056:	2001      	movs	r0, #1
 8001058:	f7ff ffc2 	bl	8000fe0 <ADS1115_writeRegister>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <ADS1115_waitForConversion>:

// Utility to wait until OS bit (bit 15) is set in config (conversion complete)
static int ADS1115_waitForConversion(uint32_t timeout_ms)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    uint32_t t0 = HAL_GetTick();
 800106c:	f000 fcee 	bl	8001a4c <HAL_GetTick>
 8001070:	60f8      	str	r0, [r7, #12]
    while ((HAL_GetTick() - t0) < timeout_ms) {
 8001072:	e00d      	b.n	8001090 <ADS1115_waitForConversion+0x2c>
        uint16_t cfg = ADS1115_readRegister(ADS1115_REG_CONFIG);
 8001074:	2001      	movs	r0, #1
 8001076:	f7ff ff89 	bl	8000f8c <ADS1115_readRegister>
 800107a:	4603      	mov	r3, r0
 800107c:	817b      	strh	r3, [r7, #10]
        // OS bit (bit15) = 1 when conversion complete (for single-shot)
        if (cfg & 0x8000) return 0;
 800107e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001082:	2b00      	cmp	r3, #0
 8001084:	da01      	bge.n	800108a <ADS1115_waitForConversion+0x26>
 8001086:	2300      	movs	r3, #0
 8001088:	e00c      	b.n	80010a4 <ADS1115_waitForConversion+0x40>
        HAL_Delay(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f000 fcea 	bl	8001a64 <HAL_Delay>
    while ((HAL_GetTick() - t0) < timeout_ms) {
 8001090:	f000 fcdc 	bl	8001a4c <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	429a      	cmp	r2, r3
 800109e:	d8e9      	bhi.n	8001074 <ADS1115_waitForConversion+0x10>
    }
    return -1; // timeout
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <ADS1115_readSingleEnded>:

// channel: 0..3 single ended, pga: see enum, dr: data rate
int16_t ADS1115_readSingleEnded(uint8_t channel, ADS1115_PGA_t pga, ADS1115_DR_t dr, uint32_t timeout_ms)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	460b      	mov	r3, r1
 80010ba:	71bb      	strb	r3, [r7, #6]
 80010bc:	4613      	mov	r3, r2
 80010be:	717b      	strb	r3, [r7, #5]
    if (channel > 3) return 0;
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d901      	bls.n	80010ca <ADS1115_readSingleEnded+0x1e>
 80010c6:	2300      	movs	r3, #0
 80010c8:	e063      	b.n	8001192 <ADS1115_readSingleEnded+0xe6>
    // MUX for single-ended:
    // 100: AIN0-GND ; 101: AIN1-GND ; 110: AIN2-GND ; 111: AIN3-GND
    uint16_t mux;
    switch (channel) {
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d00c      	beq.n	80010ea <ADS1115_readSingleEnded+0x3e>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	dc0d      	bgt.n	80010f0 <ADS1115_readSingleEnded+0x44>
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <ADS1115_readSingleEnded+0x32>
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d003      	beq.n	80010e4 <ADS1115_readSingleEnded+0x38>
 80010dc:	e008      	b.n	80010f0 <ADS1115_readSingleEnded+0x44>
        case 0: mux = 0x4; break;
 80010de:	2304      	movs	r3, #4
 80010e0:	82fb      	strh	r3, [r7, #22]
 80010e2:	e008      	b.n	80010f6 <ADS1115_readSingleEnded+0x4a>
        case 1: mux = 0x5; break;
 80010e4:	2305      	movs	r3, #5
 80010e6:	82fb      	strh	r3, [r7, #22]
 80010e8:	e005      	b.n	80010f6 <ADS1115_readSingleEnded+0x4a>
        case 2: mux = 0x6; break;
 80010ea:	2306      	movs	r3, #6
 80010ec:	82fb      	strh	r3, [r7, #22]
 80010ee:	e002      	b.n	80010f6 <ADS1115_readSingleEnded+0x4a>
        default: mux = 0x7; break;
 80010f0:	2307      	movs	r3, #7
 80010f2:	82fb      	strh	r3, [r7, #22]
 80010f4:	bf00      	nop
    }

    // config: OS=1 (start), MUX[14:12] = mux, PGA[11:9] = pga, MODE[8]=1 (single-shot),
    // DR[7:5]=dr, comparator disable bits = 000
    uint16_t config = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	82bb      	strh	r3, [r7, #20]
    config |= (1 << 15);           // OS = 1 -> start single conversion
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001104:	82bb      	strh	r3, [r7, #20]
    config |= (mux & 0x7) << 12;   // MUX
 8001106:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800110a:	031b      	lsls	r3, r3, #12
 800110c:	b21b      	sxth	r3, r3
 800110e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001112:	b21a      	sxth	r2, r3
 8001114:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001118:	4313      	orrs	r3, r2
 800111a:	b21b      	sxth	r3, r3
 800111c:	82bb      	strh	r3, [r7, #20]
    config |= ( ( (uint16_t)pga & 0x7) << 9 );
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	b21b      	sxth	r3, r3
 8001122:	025b      	lsls	r3, r3, #9
 8001124:	b21b      	sxth	r3, r3
 8001126:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800112a:	b21a      	sxth	r2, r3
 800112c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001130:	4313      	orrs	r3, r2
 8001132:	b21b      	sxth	r3, r3
 8001134:	82bb      	strh	r3, [r7, #20]
    config |= (1 << 8);            // MODE = single-shot
 8001136:	8abb      	ldrh	r3, [r7, #20]
 8001138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800113c:	82bb      	strh	r3, [r7, #20]
    config |= ( ( (uint16_t)dr & 0x7 ) << 5 );
 800113e:	797b      	ldrb	r3, [r7, #5]
 8001140:	b21b      	sxth	r3, r3
 8001142:	015b      	lsls	r3, r3, #5
 8001144:	b21b      	sxth	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	b21a      	sxth	r2, r3
 800114a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800114e:	4313      	orrs	r3, r2
 8001150:	b21b      	sxth	r3, r3
 8001152:	82bb      	strh	r3, [r7, #20]
    // comparator off (bits [4:0] -> 00011? choose disable: COMP_QUE = 11 to disable)
    config |= 0x0003; // COMP_QUE = 11 (disable comparator)
 8001154:	8abb      	ldrh	r3, [r7, #20]
 8001156:	f043 0303 	orr.w	r3, r3, #3
 800115a:	82bb      	strh	r3, [r7, #20]

    ADS1115_startSingleShot(config);
 800115c:	8abb      	ldrh	r3, [r7, #20]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff72 	bl	8001048 <ADS1115_startSingleShot>

    // wait for conversion
    uint32_t delay_ms = dr_to_delay_ms(dr) + 2;
 8001164:	797b      	ldrb	r3, [r7, #5]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fed4 	bl	8000f14 <dr_to_delay_ms>
 800116c:	4603      	mov	r3, r0
 800116e:	3302      	adds	r3, #2
 8001170:	613b      	str	r3, [r7, #16]
    if (timeout_ms < delay_ms) timeout_ms = delay_ms + 10;
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	429a      	cmp	r2, r3
 8001178:	d202      	bcs.n	8001180 <ADS1115_readSingleEnded+0xd4>
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	330a      	adds	r3, #10
 800117e:	603b      	str	r3, [r7, #0]
    if (ADS1115_waitForConversion(timeout_ms) != 0) {
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f7ff ff6f 	bl	8001064 <ADS1115_waitForConversion>
        // timeout, but attempt to read raw anyway
    }

    int16_t raw = ADS1115_readConversionRegister();
 8001186:	f7ff ff51 	bl	800102c <ADS1115_readConversionRegister>
 800118a:	4603      	mov	r3, r0
 800118c:	81fb      	strh	r3, [r7, #14]
    return raw;
 800118e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <ADS1115_rawToVoltage>:
    int16_t raw = ADS1115_readConversionRegister();
    return raw;
}

float ADS1115_rawToVoltage(int16_t raw, ADS1115_PGA_t pga)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	460a      	mov	r2, r1
 80011a6:	80fb      	strh	r3, [r7, #6]
 80011a8:	4613      	mov	r3, r2
 80011aa:	717b      	strb	r3, [r7, #5]
    float fs = 2.048f; // default
 80011ac:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <ADS1115_rawToVoltage+0x90>)
 80011ae:	60fb      	str	r3, [r7, #12]
    switch (pga) {
 80011b0:	797b      	ldrb	r3, [r7, #5]
 80011b2:	2b05      	cmp	r3, #5
 80011b4:	d820      	bhi.n	80011f8 <ADS1115_rawToVoltage+0x5c>
 80011b6:	a201      	add	r2, pc, #4	@ (adr r2, 80011bc <ADS1115_rawToVoltage+0x20>)
 80011b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011bc:	080011d5 	.word	0x080011d5
 80011c0:	080011db 	.word	0x080011db
 80011c4:	080011e1 	.word	0x080011e1
 80011c8:	080011e7 	.word	0x080011e7
 80011cc:	080011ed 	.word	0x080011ed
 80011d0:	080011f3 	.word	0x080011f3
        case ADS_PGA_6_144: fs = 6.144f; break;
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <ADS1115_rawToVoltage+0x94>)
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	e00e      	b.n	80011f8 <ADS1115_rawToVoltage+0x5c>
        case ADS_PGA_4_096: fs = 4.096f; break;
 80011da:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <ADS1115_rawToVoltage+0x98>)
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	e00b      	b.n	80011f8 <ADS1115_rawToVoltage+0x5c>
        case ADS_PGA_2_048: fs = 2.048f; break;
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <ADS1115_rawToVoltage+0x90>)
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	e008      	b.n	80011f8 <ADS1115_rawToVoltage+0x5c>
        case ADS_PGA_1_024: fs = 1.024f; break;
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <ADS1115_rawToVoltage+0x9c>)
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	e005      	b.n	80011f8 <ADS1115_rawToVoltage+0x5c>
        case ADS_PGA_0_512: fs = 0.512f; break;
 80011ec:	4b13      	ldr	r3, [pc, #76]	@ (800123c <ADS1115_rawToVoltage+0xa0>)
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	e002      	b.n	80011f8 <ADS1115_rawToVoltage+0x5c>
        case ADS_PGA_0_256: fs = 0.256f; break;
 80011f2:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <ADS1115_rawToVoltage+0xa4>)
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	bf00      	nop
    }
    // ADS1115 conversion outputs signed integer -32768..32767 representing -FS..+FS (approx)
    float lsb = fs / 32768.0f;
 80011f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011fc:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001244 <ADS1115_rawToVoltage+0xa8>
 8001200:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001204:	edc7 7a02 	vstr	s15, [r7, #8]
    return (float)raw * lsb;
 8001208:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001214:	edd7 7a02 	vldr	s15, [r7, #8]
 8001218:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800121c:	eeb0 0a67 	vmov.f32	s0, s15
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	4003126f 	.word	0x4003126f
 8001230:	40c49ba6 	.word	0x40c49ba6
 8001234:	4083126f 	.word	0x4083126f
 8001238:	3f83126f 	.word	0x3f83126f
 800123c:	3f03126f 	.word	0x3f03126f
 8001240:	3e83126f 	.word	0x3e83126f
 8001244:	47000000 	.word	0x47000000

08001248 <__io_putchar>:
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
int __io_putchar(int ch){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	uint8_t c = (uint8_t)ch;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &c, 1, HAL_MAX_DELAY);
 8001256:	f107 010f 	add.w	r1, r7, #15
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	2201      	movs	r2, #1
 8001260:	4803      	ldr	r0, [pc, #12]	@ (8001270 <__io_putchar+0x28>)
 8001262:	f002 fdf1 	bl	8003e48 <HAL_UART_Transmit>
	return ch;
 8001266:	687b      	ldr	r3, [r7, #4]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000244 	.word	0x20000244

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001276:	b087      	sub	sp, #28
 8001278:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127a:	f000 fb96 	bl	80019aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127e:	f000 f849 	bl	8001314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001282:	f000 f925 	bl	80014d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001286:	f000 f8b3 	bl	80013f0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800128a:	f000 f8f1 	bl	8001470 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n--- ADS1115 example on STM32F746G-DISCO ---\r\n");
 800128e:	481e      	ldr	r0, [pc, #120]	@ (8001308 <main+0x94>)
 8001290:	f004 f812 	bl	80052b8 <puts>

  ADS1115_Init();
 8001294:	f7ff fe72 	bl	8000f7c <ADS1115_Init>

  //Choose PGA
  ADS1115_PGA_t pga = ADS_PGA_2_048;
 8001298:	2302      	movs	r3, #2
 800129a:	73fb      	strb	r3, [r7, #15]
  ADS1115_DR_t dr = ADS_DR_250SPS;
 800129c:	2305      	movs	r3, #5
 800129e:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  int16_t raw = ADS1115_readSingleEnded(0, pga, dr, 1000);
 80012a0:	7bba      	ldrb	r2, [r7, #14]
 80012a2:	7bf9      	ldrb	r1, [r7, #15]
 80012a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff feff 	bl	80010ac <ADS1115_readSingleEnded>
 80012ae:	4603      	mov	r3, r0
 80012b0:	81bb      	strh	r3, [r7, #12]
	  float volts = ADS1115_rawToVoltage(raw, pga);
 80012b2:	7bfa      	ldrb	r2, [r7, #15]
 80012b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff6e 	bl	800119c <ADS1115_rawToVoltage>
 80012c0:	ed87 0a02 	vstr	s0, [r7, #8]
	  float ac = volts - (3.3f / 2.0f);
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800130c <main+0x98>
 80012cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012d0:	edc7 7a01 	vstr	s15, [r7, #4]
	  printf("raw=%6d  Vraw=%.6f V  AC=%.6f V\r\n", raw, volts, ac);
 80012d4:	f9b7 600c 	ldrsh.w	r6, [r7, #12]
 80012d8:	68b8      	ldr	r0, [r7, #8]
 80012da:	f7ff f955 	bl	8000588 <__aeabi_f2d>
 80012de:	4604      	mov	r4, r0
 80012e0:	460d      	mov	r5, r1
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff f950 	bl	8000588 <__aeabi_f2d>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	e9cd 2300 	strd	r2, r3, [sp]
 80012f0:	4622      	mov	r2, r4
 80012f2:	462b      	mov	r3, r5
 80012f4:	4631      	mov	r1, r6
 80012f6:	4806      	ldr	r0, [pc, #24]	@ (8001310 <main+0x9c>)
 80012f8:	f003 ff76 	bl	80051e8 <iprintf>
	  HAL_Delay(200);
 80012fc:	20c8      	movs	r0, #200	@ 0xc8
 80012fe:	f000 fbb1 	bl	8001a64 <HAL_Delay>
  {
 8001302:	bf00      	nop
 8001304:	e7cc      	b.n	80012a0 <main+0x2c>
 8001306:	bf00      	nop
 8001308:	080071b8 	.word	0x080071b8
 800130c:	3fd33333 	.word	0x3fd33333
 8001310:	080071e8 	.word	0x080071e8

08001314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b094      	sub	sp, #80	@ 0x50
 8001318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131a:	f107 0320 	add.w	r3, r7, #32
 800131e:	2230      	movs	r2, #48	@ 0x30
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f004 f8a8 	bl	8005478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001338:	4b2b      	ldr	r3, [pc, #172]	@ (80013e8 <SystemClock_Config+0xd4>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133c:	4a2a      	ldr	r2, [pc, #168]	@ (80013e8 <SystemClock_Config+0xd4>)
 800133e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001342:	6413      	str	r3, [r2, #64]	@ 0x40
 8001344:	4b28      	ldr	r3, [pc, #160]	@ (80013e8 <SystemClock_Config+0xd4>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001350:	4b26      	ldr	r3, [pc, #152]	@ (80013ec <SystemClock_Config+0xd8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a25      	ldr	r2, [pc, #148]	@ (80013ec <SystemClock_Config+0xd8>)
 8001356:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <SystemClock_Config+0xd8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001368:	2301      	movs	r3, #1
 800136a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001372:	2302      	movs	r3, #2
 8001374:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001376:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800137a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800137c:	2319      	movs	r3, #25
 800137e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001380:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8001384:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001386:	2302      	movs	r3, #2
 8001388:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800138a:	2309      	movs	r3, #9
 800138c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	4618      	mov	r0, r3
 8001394:	f001 fc90 	bl	8002cb8 <HAL_RCC_OscConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800139e:	f000 f8c7 	bl	8001530 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013a2:	f001 fc39 	bl	8002c18 <HAL_PWREx_EnableOverDrive>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013ac:	f000 f8c0 	bl	8001530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b0:	230f      	movs	r3, #15
 80013b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b4:	2302      	movs	r3, #2
 80013b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2107      	movs	r1, #7
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 ff16 	bl	8003200 <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80013da:	f000 f8a9 	bl	8001530 <Error_Handler>
  }
}
 80013de:	bf00      	nop
 80013e0:	3750      	adds	r7, #80	@ 0x50
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40007000 	.word	0x40007000

080013f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <MX_I2C1_Init+0x74>)
 80013f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001468 <MX_I2C1_Init+0x78>)
 80013f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <MX_I2C1_Init+0x74>)
 80013fc:	4a1b      	ldr	r2, [pc, #108]	@ (800146c <MX_I2C1_Init+0x7c>)
 80013fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001400:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <MX_I2C1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001406:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <MX_I2C1_Init+0x74>)
 8001408:	2201      	movs	r2, #1
 800140a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800140c:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <MX_I2C1_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001412:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <MX_I2C1_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <MX_I2C1_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_I2C1_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_I2C1_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800142a:	480e      	ldr	r0, [pc, #56]	@ (8001464 <MX_I2C1_Init+0x74>)
 800142c:	f000 fdd0 	bl	8001fd0 <HAL_I2C_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001436:	f000 f87b 	bl	8001530 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800143a:	2100      	movs	r1, #0
 800143c:	4809      	ldr	r0, [pc, #36]	@ (8001464 <MX_I2C1_Init+0x74>)
 800143e:	f001 fb53 	bl	8002ae8 <HAL_I2CEx_ConfigAnalogFilter>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001448:	f000 f872 	bl	8001530 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800144c:	2100      	movs	r1, #0
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_I2C1_Init+0x74>)
 8001450:	f001 fb95 	bl	8002b7e <HAL_I2CEx_ConfigDigitalFilter>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800145a:	f000 f869 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200001f0 	.word	0x200001f0
 8001468:	40005400 	.word	0x40005400
 800146c:	6000030d 	.word	0x6000030d

08001470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001474:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 8001476:	4a15      	ldr	r2, [pc, #84]	@ (80014cc <MX_USART1_UART_Init+0x5c>)
 8001478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800147a:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 800147c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <MX_USART1_UART_Init+0x58>)
 80014b4:	f002 fc7a 	bl	8003dac <HAL_UART_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014be:	f000 f837 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000244 	.word	0x20000244
 80014cc:	40011000 	.word	0x40011000

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <MX_GPIO_Init+0x5c>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a14      	ldr	r2, [pc, #80]	@ (800152c <MX_GPIO_Init+0x5c>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b12      	ldr	r3, [pc, #72]	@ (800152c <MX_GPIO_Init+0x5c>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <MX_GPIO_Init+0x5c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a0e      	ldr	r2, [pc, #56]	@ (800152c <MX_GPIO_Init+0x5c>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <MX_GPIO_Init+0x5c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <MX_GPIO_Init+0x5c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a08      	ldr	r2, [pc, #32]	@ (800152c <MX_GPIO_Init+0x5c>)
 800150c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b06      	ldr	r3, [pc, #24]	@ (800152c <MX_GPIO_Init+0x5c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800

08001530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001534:	b672      	cpsid	i
}
 8001536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <Error_Handler+0x8>

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <HAL_MspInit+0x44>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	4a0e      	ldr	r2, [pc, #56]	@ (8001580 <HAL_MspInit+0x44>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	@ 0x40
 800154e:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <HAL_MspInit+0x44>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <HAL_MspInit+0x44>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155e:	4a08      	ldr	r2, [pc, #32]	@ (8001580 <HAL_MspInit+0x44>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001564:	6453      	str	r3, [r2, #68]	@ 0x44
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_MspInit+0x44>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800

08001584 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b0aa      	sub	sp, #168	@ 0xa8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	2284      	movs	r2, #132	@ 0x84
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f003 ff67 	bl	8005478 <memset>
  if(hi2c->Instance==I2C1)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a22      	ldr	r2, [pc, #136]	@ (8001638 <HAL_I2C_MspInit+0xb4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d13c      	bne.n	800162e <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 f802 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015ce:	f7ff ffaf 	bl	8001530 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	4b1a      	ldr	r3, [pc, #104]	@ (800163c <HAL_I2C_MspInit+0xb8>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a19      	ldr	r2, [pc, #100]	@ (800163c <HAL_I2C_MspInit+0xb8>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b17      	ldr	r3, [pc, #92]	@ (800163c <HAL_I2C_MspInit+0xb8>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f2:	2312      	movs	r3, #18
 80015f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001604:	2304      	movs	r3, #4
 8001606:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800160e:	4619      	mov	r1, r3
 8001610:	480b      	ldr	r0, [pc, #44]	@ (8001640 <HAL_I2C_MspInit+0xbc>)
 8001612:	f000 fb31 	bl	8001c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001616:	4b09      	ldr	r3, [pc, #36]	@ (800163c <HAL_I2C_MspInit+0xb8>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	4a08      	ldr	r2, [pc, #32]	@ (800163c <HAL_I2C_MspInit+0xb8>)
 800161c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001620:	6413      	str	r3, [r2, #64]	@ 0x40
 8001622:	4b06      	ldr	r3, [pc, #24]	@ (800163c <HAL_I2C_MspInit+0xb8>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800162e:	bf00      	nop
 8001630:	37a8      	adds	r7, #168	@ 0xa8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40005400 	.word	0x40005400
 800163c:	40023800 	.word	0x40023800
 8001640:	40020400 	.word	0x40020400

08001644 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0ac      	sub	sp, #176	@ 0xb0
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	2284      	movs	r2, #132	@ 0x84
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f003 ff07 	bl	8005478 <memset>
  if(huart->Instance==USART1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a32      	ldr	r2, [pc, #200]	@ (8001738 <HAL_UART_MspInit+0xf4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d15c      	bne.n	800172e <HAL_UART_MspInit+0xea>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001674:	2340      	movs	r3, #64	@ 0x40
 8001676:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001678:	2300      	movs	r3, #0
 800167a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800167c:	f107 0318 	add.w	r3, r7, #24
 8001680:	4618      	mov	r0, r3
 8001682:	f001 ffa3 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800168c:	f7ff ff50 	bl	8001530 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001690:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <HAL_UART_MspInit+0xf8>)
 8001692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001694:	4a29      	ldr	r2, [pc, #164]	@ (800173c <HAL_UART_MspInit+0xf8>)
 8001696:	f043 0310 	orr.w	r3, r3, #16
 800169a:	6453      	str	r3, [r2, #68]	@ 0x44
 800169c:	4b27      	ldr	r3, [pc, #156]	@ (800173c <HAL_UART_MspInit+0xf8>)
 800169e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a8:	4b24      	ldr	r3, [pc, #144]	@ (800173c <HAL_UART_MspInit+0xf8>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ac:	4a23      	ldr	r2, [pc, #140]	@ (800173c <HAL_UART_MspInit+0xf8>)
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b4:	4b21      	ldr	r3, [pc, #132]	@ (800173c <HAL_UART_MspInit+0xf8>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c0:	4b1e      	ldr	r3, [pc, #120]	@ (800173c <HAL_UART_MspInit+0xf8>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c4:	4a1d      	ldr	r2, [pc, #116]	@ (800173c <HAL_UART_MspInit+0xf8>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <HAL_UART_MspInit+0xf8>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016d8:	2380      	movs	r3, #128	@ 0x80
 80016da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016f0:	2307      	movs	r3, #7
 80016f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016fa:	4619      	mov	r1, r3
 80016fc:	4810      	ldr	r0, [pc, #64]	@ (8001740 <HAL_UART_MspInit+0xfc>)
 80016fe:	f000 fabb 	bl	8001c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001702:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001706:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800171c:	2307      	movs	r3, #7
 800171e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001726:	4619      	mov	r1, r3
 8001728:	4806      	ldr	r0, [pc, #24]	@ (8001744 <HAL_UART_MspInit+0x100>)
 800172a:	f000 faa5 	bl	8001c78 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800172e:	bf00      	nop
 8001730:	37b0      	adds	r7, #176	@ 0xb0
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40011000 	.word	0x40011000
 800173c:	40023800 	.word	0x40023800
 8001740:	40020400 	.word	0x40020400
 8001744:	40020000 	.word	0x40020000

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <NMI_Handler+0x4>

08001750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <MemManage_Handler+0x4>

08001760 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <UsageFault_Handler+0x4>

08001770 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179e:	f000 f941 	bl	8001a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  return 1;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <_kill>:

int _kill(int pid, int sig)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017c0:	f003 feac 	bl	800551c <__errno>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2216      	movs	r2, #22
 80017c8:	601a      	str	r2, [r3, #0]
  return -1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_exit>:

void _exit (int status)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017de:	f04f 31ff 	mov.w	r1, #4294967295
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ffe7 	bl	80017b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <_exit+0x12>

080017ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e00a      	b.n	8001814 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017fe:	f3af 8000 	nop.w
 8001802:	4601      	mov	r1, r0
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	b2ca      	uxtb	r2, r1
 800180c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf0      	blt.n	80017fe <_read+0x12>
  }

  return len;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e009      	b.n	800184c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	60ba      	str	r2, [r7, #8]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fd01 	bl	8001248 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	dbf1      	blt.n	8001838 <_write+0x12>
  }
  return len;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_close>:

int _close(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001886:	605a      	str	r2, [r3, #4]
  return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <_isatty>:

int _isatty(int file)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	@ (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	@ (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	@ (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	@ (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f003 fe10 	bl	800551c <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	@ (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	@ (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20050000 	.word	0x20050000
 8001928:	00000400 	.word	0x00000400
 800192c:	200002cc 	.word	0x200002cc
 8001930:	20000420 	.word	0x20000420

08001934 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <SystemInit+0x20>)
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800193e:	4a05      	ldr	r2, [pc, #20]	@ (8001954 <SystemInit+0x20>)
 8001940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001990 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800195c:	f7ff ffea 	bl	8001934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001960:	480c      	ldr	r0, [pc, #48]	@ (8001994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001962:	490d      	ldr	r1, [pc, #52]	@ (8001998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001964:	4a0d      	ldr	r2, [pc, #52]	@ (800199c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001968:	e002      	b.n	8001970 <LoopCopyDataInit>

0800196a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800196c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196e:	3304      	adds	r3, #4

08001970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001974:	d3f9      	bcc.n	800196a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001976:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001978:	4c0a      	ldr	r4, [pc, #40]	@ (80019a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800197c:	e001      	b.n	8001982 <LoopFillZerobss>

0800197e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001980:	3204      	adds	r2, #4

08001982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001984:	d3fb      	bcc.n	800197e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001986:	f003 fdcf 	bl	8005528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800198a:	f7ff fc73 	bl	8001274 <main>
  bx  lr    
 800198e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001990:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001998:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800199c:	080075ac 	.word	0x080075ac
  ldr r2, =_sbss
 80019a0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019a4:	20000420 	.word	0x20000420

080019a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a8:	e7fe      	b.n	80019a8 <ADC_IRQHandler>

080019aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ae:	2003      	movs	r0, #3
 80019b0:	f000 f92e 	bl	8001c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b4:	200f      	movs	r0, #15
 80019b6:	f000 f805 	bl	80019c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ba:	f7ff fdbf 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <HAL_InitTick+0x54>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_InitTick+0x58>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019da:	fbb3 f3f1 	udiv	r3, r3, r1
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f93b 	bl	8001c5e <HAL_SYSTICK_Config>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00e      	b.n	8001a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b0f      	cmp	r3, #15
 80019f6:	d80a      	bhi.n	8001a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f8:	2200      	movs	r2, #0
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f000 f911 	bl	8001c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a04:	4a06      	ldr	r2, [pc, #24]	@ (8001a20 <HAL_InitTick+0x5c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <HAL_IncTick+0x20>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_IncTick+0x24>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a04      	ldr	r2, [pc, #16]	@ (8001a48 <HAL_IncTick+0x24>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000008 	.word	0x20000008
 8001a48:	200002d0 	.word	0x200002d0

08001a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b03      	ldr	r3, [pc, #12]	@ (8001a60 <HAL_GetTick+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	200002d0 	.word	0x200002d0

08001a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff ffee 	bl	8001a4c <HAL_GetTick>
 8001a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d005      	beq.n	8001a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_Delay+0x44>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8a:	bf00      	nop
 8001a8c:	f7ff ffde 	bl	8001a4c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d8f7      	bhi.n	8001a8c <HAL_Delay+0x28>
  {
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000008 	.word	0x20000008

08001aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001abc:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <__NVIC_SetPriorityGrouping+0x40>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ada:	4a04      	ldr	r2, [pc, #16]	@ (8001aec <__NVIC_SetPriorityGrouping+0x40>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00
 8001af0:	05fa0000 	.word	0x05fa0000

08001af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af8:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <__NVIC_GetPriorityGrouping+0x18>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 0307 	and.w	r3, r3, #7
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	6039      	str	r1, [r7, #0]
 8001b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	db0a      	blt.n	8001b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	490c      	ldr	r1, [pc, #48]	@ (8001b5c <__NVIC_SetPriority+0x4c>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	0112      	lsls	r2, r2, #4
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	440b      	add	r3, r1
 8001b34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b38:	e00a      	b.n	8001b50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4908      	ldr	r1, [pc, #32]	@ (8001b60 <__NVIC_SetPriority+0x50>)
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	3b04      	subs	r3, #4
 8001b48:	0112      	lsls	r2, r2, #4
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	761a      	strb	r2, [r3, #24]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000e100 	.word	0xe000e100
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	@ 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f1c3 0307 	rsb	r3, r3, #7
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	bf28      	it	cs
 8001b82:	2304      	movcs	r3, #4
 8001b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d902      	bls.n	8001b94 <NVIC_EncodePriority+0x30>
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3b03      	subs	r3, #3
 8001b92:	e000      	b.n	8001b96 <NVIC_EncodePriority+0x32>
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	43d9      	mvns	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	4313      	orrs	r3, r2
         );
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3724      	adds	r7, #36	@ 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bdc:	d301      	bcc.n	8001be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00f      	b.n	8001c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <SysTick_Config+0x40>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bea:	210f      	movs	r1, #15
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f7ff ff8e 	bl	8001b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <SysTick_Config+0x40>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfa:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <SysTick_Config+0x40>)
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	e000e010 	.word	0xe000e010

08001c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff47 	bl	8001aac <__NVIC_SetPriorityGrouping>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c38:	f7ff ff5c 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8001c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	6978      	ldr	r0, [r7, #20]
 8001c44:	f7ff ff8e 	bl	8001b64 <NVIC_EncodePriority>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff5d 	bl	8001b10 <__NVIC_SetPriority>
}
 8001c56:	bf00      	nop
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ffb0 	bl	8001bcc <SysTick_Config>
 8001c6c:	4603      	mov	r3, r0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	@ 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	e175      	b.n	8001f84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c98:	2201      	movs	r2, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	f040 8164 	bne.w	8001f7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d005      	beq.n	8001cce <HAL_GPIO_Init+0x56>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d130      	bne.n	8001d30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d04:	2201      	movs	r2, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 0201 	and.w	r2, r3, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d017      	beq.n	8001d6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d123      	bne.n	8001dc0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	08da      	lsrs	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3208      	adds	r2, #8
 8001d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	08da      	lsrs	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3208      	adds	r2, #8
 8001dba:	69b9      	ldr	r1, [r7, #24]
 8001dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0203 	and.w	r2, r3, #3
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80be 	beq.w	8001f7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	4b66      	ldr	r3, [pc, #408]	@ (8001f9c <HAL_GPIO_Init+0x324>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	4a65      	ldr	r2, [pc, #404]	@ (8001f9c <HAL_GPIO_Init+0x324>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e0e:	4b63      	ldr	r3, [pc, #396]	@ (8001f9c <HAL_GPIO_Init+0x324>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e1a:	4a61      	ldr	r2, [pc, #388]	@ (8001fa0 <HAL_GPIO_Init+0x328>)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3302      	adds	r3, #2
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	220f      	movs	r2, #15
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a58      	ldr	r2, [pc, #352]	@ (8001fa4 <HAL_GPIO_Init+0x32c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d037      	beq.n	8001eb6 <HAL_GPIO_Init+0x23e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a57      	ldr	r2, [pc, #348]	@ (8001fa8 <HAL_GPIO_Init+0x330>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d031      	beq.n	8001eb2 <HAL_GPIO_Init+0x23a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a56      	ldr	r2, [pc, #344]	@ (8001fac <HAL_GPIO_Init+0x334>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d02b      	beq.n	8001eae <HAL_GPIO_Init+0x236>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a55      	ldr	r2, [pc, #340]	@ (8001fb0 <HAL_GPIO_Init+0x338>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d025      	beq.n	8001eaa <HAL_GPIO_Init+0x232>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a54      	ldr	r2, [pc, #336]	@ (8001fb4 <HAL_GPIO_Init+0x33c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d01f      	beq.n	8001ea6 <HAL_GPIO_Init+0x22e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a53      	ldr	r2, [pc, #332]	@ (8001fb8 <HAL_GPIO_Init+0x340>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d019      	beq.n	8001ea2 <HAL_GPIO_Init+0x22a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a52      	ldr	r2, [pc, #328]	@ (8001fbc <HAL_GPIO_Init+0x344>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_GPIO_Init+0x226>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a51      	ldr	r2, [pc, #324]	@ (8001fc0 <HAL_GPIO_Init+0x348>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00d      	beq.n	8001e9a <HAL_GPIO_Init+0x222>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a50      	ldr	r2, [pc, #320]	@ (8001fc4 <HAL_GPIO_Init+0x34c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d007      	beq.n	8001e96 <HAL_GPIO_Init+0x21e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4f      	ldr	r2, [pc, #316]	@ (8001fc8 <HAL_GPIO_Init+0x350>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_GPIO_Init+0x21a>
 8001e8e:	2309      	movs	r3, #9
 8001e90:	e012      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001e92:	230a      	movs	r3, #10
 8001e94:	e010      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001e96:	2308      	movs	r3, #8
 8001e98:	e00e      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	e00c      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001e9e:	2306      	movs	r3, #6
 8001ea0:	e00a      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001ea2:	2305      	movs	r3, #5
 8001ea4:	e008      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	e006      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e004      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e002      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	f002 0203 	and.w	r2, r2, #3
 8001ebe:	0092      	lsls	r2, r2, #2
 8001ec0:	4093      	lsls	r3, r2
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ec8:	4935      	ldr	r1, [pc, #212]	@ (8001fa0 <HAL_GPIO_Init+0x328>)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	3302      	adds	r3, #2
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fcc <HAL_GPIO_Init+0x354>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001efa:	4a34      	ldr	r2, [pc, #208]	@ (8001fcc <HAL_GPIO_Init+0x354>)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f00:	4b32      	ldr	r3, [pc, #200]	@ (8001fcc <HAL_GPIO_Init+0x354>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f24:	4a29      	ldr	r2, [pc, #164]	@ (8001fcc <HAL_GPIO_Init+0x354>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f2a:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <HAL_GPIO_Init+0x354>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001fcc <HAL_GPIO_Init+0x354>)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f54:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <HAL_GPIO_Init+0x354>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f78:	4a14      	ldr	r2, [pc, #80]	@ (8001fcc <HAL_GPIO_Init+0x354>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3301      	adds	r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	2b0f      	cmp	r3, #15
 8001f88:	f67f ae86 	bls.w	8001c98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3724      	adds	r7, #36	@ 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40013800 	.word	0x40013800
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	40020c00 	.word	0x40020c00
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40021400 	.word	0x40021400
 8001fbc:	40021800 	.word	0x40021800
 8001fc0:	40021c00 	.word	0x40021c00
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	40022400 	.word	0x40022400
 8001fcc:	40013c00 	.word	0x40013c00

08001fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e08b      	b.n	80020fa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d106      	bne.n	8001ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fac4 	bl	8001584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2224      	movs	r2, #36	@ 0x24
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002020:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002030:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d107      	bne.n	800204a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	e006      	b.n	8002058 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002056:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d108      	bne.n	8002072 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	e007      	b.n	8002082 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002080:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b1d      	ldr	r3, [pc, #116]	@ (8002104 <HAL_I2C_Init+0x134>)
 800208e:	430b      	orrs	r3, r1
 8002090:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69d9      	ldr	r1, [r3, #28]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1a      	ldr	r2, [r3, #32]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	02008000 	.word	0x02008000

08002108 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	4608      	mov	r0, r1
 8002112:	4611      	mov	r1, r2
 8002114:	461a      	mov	r2, r3
 8002116:	4603      	mov	r3, r0
 8002118:	817b      	strh	r3, [r7, #10]
 800211a:	460b      	mov	r3, r1
 800211c:	813b      	strh	r3, [r7, #8]
 800211e:	4613      	mov	r3, r2
 8002120:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b20      	cmp	r3, #32
 800212c:	f040 80f9 	bne.w	8002322 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <HAL_I2C_Mem_Write+0x34>
 8002136:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002142:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0ed      	b.n	8002324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_I2C_Mem_Write+0x4e>
 8002152:	2302      	movs	r3, #2
 8002154:	e0e6      	b.n	8002324 <HAL_I2C_Mem_Write+0x21c>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800215e:	f7ff fc75 	bl	8001a4c <HAL_GetTick>
 8002162:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2319      	movs	r3, #25
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 fac3 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0d1      	b.n	8002324 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2221      	movs	r2, #33	@ 0x21
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2240      	movs	r2, #64	@ 0x40
 800218c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a3a      	ldr	r2, [r7, #32]
 800219a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021a8:	88f8      	ldrh	r0, [r7, #6]
 80021aa:	893a      	ldrh	r2, [r7, #8]
 80021ac:	8979      	ldrh	r1, [r7, #10]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	4603      	mov	r3, r0
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f9d3 	bl	8002564 <I2C_RequestMemoryWrite>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0a9      	b.n	8002324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2bff      	cmp	r3, #255	@ 0xff
 80021d8:	d90e      	bls.n	80021f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	22ff      	movs	r2, #255	@ 0xff
 80021de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	8979      	ldrh	r1, [r7, #10]
 80021e8:	2300      	movs	r3, #0
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 fc47 	bl	8002a84 <I2C_TransferConfig>
 80021f6:	e00f      	b.n	8002218 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002206:	b2da      	uxtb	r2, r3
 8002208:	8979      	ldrh	r1, [r7, #10]
 800220a:	2300      	movs	r3, #0
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 fc36 	bl	8002a84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 fac6 	bl	80027ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e07b      	b.n	8002324 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	781a      	ldrb	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d034      	beq.n	80022d0 <HAL_I2C_Mem_Write+0x1c8>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226a:	2b00      	cmp	r3, #0
 800226c:	d130      	bne.n	80022d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002274:	2200      	movs	r2, #0
 8002276:	2180      	movs	r1, #128	@ 0x80
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 fa3f 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e04d      	b.n	8002324 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800228c:	b29b      	uxth	r3, r3
 800228e:	2bff      	cmp	r3, #255	@ 0xff
 8002290:	d90e      	bls.n	80022b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	22ff      	movs	r2, #255	@ 0xff
 8002296:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800229c:	b2da      	uxtb	r2, r3
 800229e:	8979      	ldrh	r1, [r7, #10]
 80022a0:	2300      	movs	r3, #0
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fbeb 	bl	8002a84 <I2C_TransferConfig>
 80022ae:	e00f      	b.n	80022d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	8979      	ldrh	r1, [r7, #10]
 80022c2:	2300      	movs	r3, #0
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fbda 	bl	8002a84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d19e      	bne.n	8002218 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 faac 	bl	800283c <I2C_WaitOnSTOPFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e01a      	b.n	8002324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2220      	movs	r2, #32
 80022f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b0a      	ldr	r3, [pc, #40]	@ (800232c <HAL_I2C_Mem_Write+0x224>)
 8002302:	400b      	ands	r3, r1
 8002304:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002322:	2302      	movs	r3, #2
  }
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	fe00e800 	.word	0xfe00e800

08002330 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	4608      	mov	r0, r1
 800233a:	4611      	mov	r1, r2
 800233c:	461a      	mov	r2, r3
 800233e:	4603      	mov	r3, r0
 8002340:	817b      	strh	r3, [r7, #10]
 8002342:	460b      	mov	r3, r1
 8002344:	813b      	strh	r3, [r7, #8]
 8002346:	4613      	mov	r3, r2
 8002348:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	f040 80fd 	bne.w	8002552 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <HAL_I2C_Mem_Read+0x34>
 800235e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002360:	2b00      	cmp	r3, #0
 8002362:	d105      	bne.n	8002370 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800236a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0f1      	b.n	8002554 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_I2C_Mem_Read+0x4e>
 800237a:	2302      	movs	r3, #2
 800237c:	e0ea      	b.n	8002554 <HAL_I2C_Mem_Read+0x224>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002386:	f7ff fb61 	bl	8001a4c <HAL_GetTick>
 800238a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2319      	movs	r3, #25
 8002392:	2201      	movs	r2, #1
 8002394:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f9af 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0d5      	b.n	8002554 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2222      	movs	r2, #34	@ 0x22
 80023ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2240      	movs	r2, #64	@ 0x40
 80023b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a3a      	ldr	r2, [r7, #32]
 80023c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023d0:	88f8      	ldrh	r0, [r7, #6]
 80023d2:	893a      	ldrh	r2, [r7, #8]
 80023d4:	8979      	ldrh	r1, [r7, #10]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	9301      	str	r3, [sp, #4]
 80023da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	4603      	mov	r3, r0
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f913 	bl	800260c <I2C_RequestMemoryRead>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0ad      	b.n	8002554 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2bff      	cmp	r3, #255	@ 0xff
 8002400:	d90e      	bls.n	8002420 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240c:	b2da      	uxtb	r2, r3
 800240e:	8979      	ldrh	r1, [r7, #10]
 8002410:	4b52      	ldr	r3, [pc, #328]	@ (800255c <HAL_I2C_Mem_Read+0x22c>)
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 fb33 	bl	8002a84 <I2C_TransferConfig>
 800241e:	e00f      	b.n	8002440 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242e:	b2da      	uxtb	r2, r3
 8002430:	8979      	ldrh	r1, [r7, #10]
 8002432:	4b4a      	ldr	r3, [pc, #296]	@ (800255c <HAL_I2C_Mem_Read+0x22c>)
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 fb22 	bl	8002a84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002446:	2200      	movs	r2, #0
 8002448:	2104      	movs	r1, #4
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f956 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e07c      	b.n	8002554 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d034      	beq.n	8002500 <HAL_I2C_Mem_Read+0x1d0>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249a:	2b00      	cmp	r3, #0
 800249c:	d130      	bne.n	8002500 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a4:	2200      	movs	r2, #0
 80024a6:	2180      	movs	r1, #128	@ 0x80
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f927 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e04d      	b.n	8002554 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2bff      	cmp	r3, #255	@ 0xff
 80024c0:	d90e      	bls.n	80024e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	8979      	ldrh	r1, [r7, #10]
 80024d0:	2300      	movs	r3, #0
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fad3 	bl	8002a84 <I2C_TransferConfig>
 80024de:	e00f      	b.n	8002500 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	8979      	ldrh	r1, [r7, #10]
 80024f2:	2300      	movs	r3, #0
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fac2 	bl	8002a84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d19a      	bne.n	8002440 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f994 	bl	800283c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e01a      	b.n	8002554 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2220      	movs	r2, #32
 8002524:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <HAL_I2C_Mem_Read+0x230>)
 8002532:	400b      	ands	r3, r1
 8002534:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e000      	b.n	8002554 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002552:	2302      	movs	r3, #2
  }
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	80002400 	.word	0x80002400
 8002560:	fe00e800 	.word	0xfe00e800

08002564 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	4608      	mov	r0, r1
 800256e:	4611      	mov	r1, r2
 8002570:	461a      	mov	r2, r3
 8002572:	4603      	mov	r3, r0
 8002574:	817b      	strh	r3, [r7, #10]
 8002576:	460b      	mov	r3, r1
 8002578:	813b      	strh	r3, [r7, #8]
 800257a:	4613      	mov	r3, r2
 800257c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	8979      	ldrh	r1, [r7, #10]
 8002584:	4b20      	ldr	r3, [pc, #128]	@ (8002608 <I2C_RequestMemoryWrite+0xa4>)
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fa79 	bl	8002a84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	69b9      	ldr	r1, [r7, #24]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f909 	bl	80027ae <I2C_WaitOnTXISFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e02c      	b.n	8002600 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d105      	bne.n	80025b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025ac:	893b      	ldrh	r3, [r7, #8]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80025b6:	e015      	b.n	80025e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025b8:	893b      	ldrh	r3, [r7, #8]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	b29b      	uxth	r3, r3
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	69b9      	ldr	r1, [r7, #24]
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f8ef 	bl	80027ae <I2C_WaitOnTXISFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e012      	b.n	8002600 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025da:	893b      	ldrh	r3, [r7, #8]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	2200      	movs	r2, #0
 80025ec:	2180      	movs	r1, #128	@ 0x80
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f884 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	80002000 	.word	0x80002000

0800260c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	4608      	mov	r0, r1
 8002616:	4611      	mov	r1, r2
 8002618:	461a      	mov	r2, r3
 800261a:	4603      	mov	r3, r0
 800261c:	817b      	strh	r3, [r7, #10]
 800261e:	460b      	mov	r3, r1
 8002620:	813b      	strh	r3, [r7, #8]
 8002622:	4613      	mov	r3, r2
 8002624:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	8979      	ldrh	r1, [r7, #10]
 800262c:	4b20      	ldr	r3, [pc, #128]	@ (80026b0 <I2C_RequestMemoryRead+0xa4>)
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2300      	movs	r3, #0
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fa26 	bl	8002a84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	69b9      	ldr	r1, [r7, #24]
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f8b6 	bl	80027ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e02c      	b.n	80026a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d105      	bne.n	800265e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002652:	893b      	ldrh	r3, [r7, #8]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	629a      	str	r2, [r3, #40]	@ 0x28
 800265c:	e015      	b.n	800268a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800265e:	893b      	ldrh	r3, [r7, #8]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	b29b      	uxth	r3, r3
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	69b9      	ldr	r1, [r7, #24]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f89c 	bl	80027ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e012      	b.n	80026a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002680:	893b      	ldrh	r3, [r7, #8]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	2200      	movs	r2, #0
 8002692:	2140      	movs	r1, #64	@ 0x40
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f831 	bl	80026fc <I2C_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	80002000 	.word	0x80002000

080026b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d103      	bne.n	80026d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2200      	movs	r2, #0
 80026d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d007      	beq.n	80026f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	619a      	str	r2, [r3, #24]
  }
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800270c:	e03b      	b.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	6839      	ldr	r1, [r7, #0]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f8d6 	bl	80028c4 <I2C_IsErrorOccurred>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e041      	b.n	80027a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d02d      	beq.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272a:	f7ff f98f 	bl	8001a4c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d302      	bcc.n	8002740 <I2C_WaitOnFlagUntilTimeout+0x44>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d122      	bne.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	4013      	ands	r3, r2
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	429a      	cmp	r2, r3
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	429a      	cmp	r2, r3
 800275c:	d113      	bne.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002762:	f043 0220 	orr.w	r2, r3, #32
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e00f      	b.n	80027a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4013      	ands	r3, r2
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	429a      	cmp	r2, r3
 8002794:	bf0c      	ite	eq
 8002796:	2301      	moveq	r3, #1
 8002798:	2300      	movne	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d0b4      	beq.n	800270e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027ba:	e033      	b.n	8002824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f87f 	bl	80028c4 <I2C_IsErrorOccurred>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e031      	b.n	8002834 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d025      	beq.n	8002824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d8:	f7ff f938 	bl	8001a4c <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d302      	bcc.n	80027ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d11a      	bne.n	8002824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d013      	beq.n	8002824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002800:	f043 0220 	orr.w	r2, r3, #32
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e007      	b.n	8002834 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b02      	cmp	r3, #2
 8002830:	d1c4      	bne.n	80027bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002848:	e02f      	b.n	80028aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f838 	bl	80028c4 <I2C_IsErrorOccurred>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e02d      	b.n	80028ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285e:	f7ff f8f5 	bl	8001a4c <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	429a      	cmp	r2, r3
 800286c:	d302      	bcc.n	8002874 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d11a      	bne.n	80028aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b20      	cmp	r3, #32
 8002880:	d013      	beq.n	80028aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e007      	b.n	80028ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d1c8      	bne.n	800284a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	@ 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d068      	beq.n	80029c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2210      	movs	r2, #16
 80028f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028f8:	e049      	b.n	800298e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d045      	beq.n	800298e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002902:	f7ff f8a3 	bl	8001a4c <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	429a      	cmp	r2, r3
 8002910:	d302      	bcc.n	8002918 <I2C_IsErrorOccurred+0x54>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d13a      	bne.n	800298e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002922:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800292a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800293a:	d121      	bne.n	8002980 <I2C_IsErrorOccurred+0xbc>
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002942:	d01d      	beq.n	8002980 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002944:	7cfb      	ldrb	r3, [r7, #19]
 8002946:	2b20      	cmp	r3, #32
 8002948:	d01a      	beq.n	8002980 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002958:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800295a:	f7ff f877 	bl	8001a4c <HAL_GetTick>
 800295e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002960:	e00e      	b.n	8002980 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002962:	f7ff f873 	bl	8001a4c <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b19      	cmp	r3, #25
 800296e:	d907      	bls.n	8002980 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	f043 0320 	orr.w	r3, r3, #32
 8002976:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800297e:	e006      	b.n	800298e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	2b20      	cmp	r3, #32
 800298c:	d1e9      	bne.n	8002962 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b20      	cmp	r3, #32
 800299a:	d003      	beq.n	80029a4 <I2C_IsErrorOccurred+0xe0>
 800299c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0aa      	beq.n	80028fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d103      	bne.n	80029b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2220      	movs	r2, #32
 80029b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00b      	beq.n	80029ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	f043 0308 	orr.w	r3, r3, #8
 80029fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00b      	beq.n	8002a30 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	f043 0302 	orr.w	r3, r3, #2
 8002a1e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01c      	beq.n	8002a72 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f7ff fe3b 	bl	80026b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <I2C_IsErrorOccurred+0x1bc>)
 8002a4a:	400b      	ands	r3, r1
 8002a4c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3728      	adds	r7, #40	@ 0x28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	fe00e800 	.word	0xfe00e800

08002a84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	817b      	strh	r3, [r7, #10]
 8002a92:	4613      	mov	r3, r2
 8002a94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a96:	897b      	ldrh	r3, [r7, #10]
 8002a98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a9c:	7a7b      	ldrb	r3, [r7, #9]
 8002a9e:	041b      	lsls	r3, r3, #16
 8002aa0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aa4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ab2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	0d5b      	lsrs	r3, r3, #21
 8002abe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ac2:	4b08      	ldr	r3, [pc, #32]	@ (8002ae4 <I2C_TransferConfig+0x60>)
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	ea02 0103 	and.w	r1, r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ad6:	bf00      	nop
 8002ad8:	371c      	adds	r7, #28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	03ff63ff 	.word	0x03ff63ff

08002ae8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d138      	bne.n	8002b70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e032      	b.n	8002b72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2224      	movs	r2, #36	@ 0x24
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6819      	ldr	r1, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e000      	b.n	8002b72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
  }
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b085      	sub	sp, #20
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d139      	bne.n	8002c08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e033      	b.n	8002c0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2224      	movs	r2, #36	@ 0x24
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0201 	bic.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bd0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e000      	b.n	8002c0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c08:	2302      	movs	r3, #2
  }
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c22:	4b23      	ldr	r3, [pc, #140]	@ (8002cb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	4a22      	ldr	r2, [pc, #136]	@ (8002cb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2e:	4b20      	ldr	r3, [pc, #128]	@ (8002cb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c44:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c46:	f7fe ff01 	bl	8001a4c <HAL_GetTick>
 8002c4a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c4c:	e009      	b.n	8002c62 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c4e:	f7fe fefd 	bl	8001a4c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c5c:	d901      	bls.n	8002c62 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e022      	b.n	8002ca8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c62:	4b14      	ldr	r3, [pc, #80]	@ (8002cb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c6e:	d1ee      	bne.n	8002c4e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c70:	4b10      	ldr	r3, [pc, #64]	@ (8002cb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a0f      	ldr	r2, [pc, #60]	@ (8002cb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c7c:	f7fe fee6 	bl	8001a4c <HAL_GetTick>
 8002c80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c82:	e009      	b.n	8002c98 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c84:	f7fe fee2 	bl	8001a4c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c92:	d901      	bls.n	8002c98 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e007      	b.n	8002ca8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c98:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ca4:	d1ee      	bne.n	8002c84 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40007000 	.word	0x40007000

08002cb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e291      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8087 	beq.w	8002dea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cdc:	4b96      	ldr	r3, [pc, #600]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d00c      	beq.n	8002d02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce8:	4b93      	ldr	r3, [pc, #588]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d112      	bne.n	8002d1a <HAL_RCC_OscConfig+0x62>
 8002cf4:	4b90      	ldr	r3, [pc, #576]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d00:	d10b      	bne.n	8002d1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d02:	4b8d      	ldr	r3, [pc, #564]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d06c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x130>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d168      	bne.n	8002de8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e26b      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d22:	d106      	bne.n	8002d32 <HAL_RCC_OscConfig+0x7a>
 8002d24:	4b84      	ldr	r3, [pc, #528]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a83      	ldr	r2, [pc, #524]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	e02e      	b.n	8002d90 <HAL_RCC_OscConfig+0xd8>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x9c>
 8002d3a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b7c      	ldr	r3, [pc, #496]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a7b      	ldr	r2, [pc, #492]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e01d      	b.n	8002d90 <HAL_RCC_OscConfig+0xd8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0xc0>
 8002d5e:	4b76      	ldr	r3, [pc, #472]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a75      	ldr	r2, [pc, #468]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b73      	ldr	r3, [pc, #460]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a72      	ldr	r2, [pc, #456]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e00b      	b.n	8002d90 <HAL_RCC_OscConfig+0xd8>
 8002d78:	4b6f      	ldr	r3, [pc, #444]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a6e      	ldr	r2, [pc, #440]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b6c      	ldr	r3, [pc, #432]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a6b      	ldr	r2, [pc, #428]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe fe58 	bl	8001a4c <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da0:	f7fe fe54 	bl	8001a4c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	@ 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e21f      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b61      	ldr	r3, [pc, #388]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0xe8>
 8002dbe:	e014      	b.n	8002dea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fe44 	bl	8001a4c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fe40 	bl	8001a4c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	@ 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e20b      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	4b57      	ldr	r3, [pc, #348]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x110>
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d069      	beq.n	8002eca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002df6:	4b50      	ldr	r3, [pc, #320]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00b      	beq.n	8002e1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e02:	4b4d      	ldr	r3, [pc, #308]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d11c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x190>
 8002e0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d116      	bne.n	8002e48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1a:	4b47      	ldr	r3, [pc, #284]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_RCC_OscConfig+0x17a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e1df      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e32:	4b41      	ldr	r3, [pc, #260]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	493d      	ldr	r1, [pc, #244]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e46:	e040      	b.n	8002eca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d023      	beq.n	8002e98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e50:	4b39      	ldr	r3, [pc, #228]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a38      	ldr	r2, [pc, #224]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fdf6 	bl	8001a4c <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e64:	f7fe fdf2 	bl	8001a4c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e1bd      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e76:	4b30      	ldr	r3, [pc, #192]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e82:	4b2d      	ldr	r3, [pc, #180]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4929      	ldr	r1, [pc, #164]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
 8002e96:	e018      	b.n	8002eca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e98:	4b27      	ldr	r3, [pc, #156]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a26      	ldr	r2, [pc, #152]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7fe fdd2 	bl	8001a4c <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eac:	f7fe fdce 	bl	8001a4c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e199      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d038      	beq.n	8002f48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d019      	beq.n	8002f12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ede:	4b16      	ldr	r3, [pc, #88]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee2:	4a15      	ldr	r2, [pc, #84]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eea:	f7fe fdaf 	bl	8001a4c <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef2:	f7fe fdab 	bl	8001a4c <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e176      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f04:	4b0c      	ldr	r3, [pc, #48]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x23a>
 8002f10:	e01a      	b.n	8002f48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f12:	4b09      	ldr	r3, [pc, #36]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f16:	4a08      	ldr	r2, [pc, #32]	@ (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1e:	f7fe fd95 	bl	8001a4c <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f26:	f7fe fd91 	bl	8001a4c <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d903      	bls.n	8002f3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e15c      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
 8002f38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3c:	4b91      	ldr	r3, [pc, #580]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ee      	bne.n	8002f26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80a4 	beq.w	800309e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f56:	4b8b      	ldr	r3, [pc, #556]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10d      	bne.n	8002f7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f62:	4b88      	ldr	r3, [pc, #544]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	4a87      	ldr	r2, [pc, #540]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f6e:	4b85      	ldr	r3, [pc, #532]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f7e:	4b82      	ldr	r3, [pc, #520]	@ (8003188 <HAL_RCC_OscConfig+0x4d0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d118      	bne.n	8002fbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f8a:	4b7f      	ldr	r3, [pc, #508]	@ (8003188 <HAL_RCC_OscConfig+0x4d0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a7e      	ldr	r2, [pc, #504]	@ (8003188 <HAL_RCC_OscConfig+0x4d0>)
 8002f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f96:	f7fe fd59 	bl	8001a4c <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9e:	f7fe fd55 	bl	8001a4c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b64      	cmp	r3, #100	@ 0x64
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e120      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb0:	4b75      	ldr	r3, [pc, #468]	@ (8003188 <HAL_RCC_OscConfig+0x4d0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x31a>
 8002fc4:	4b6f      	ldr	r3, [pc, #444]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc8:	4a6e      	ldr	r2, [pc, #440]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd0:	e02d      	b.n	800302e <HAL_RCC_OscConfig+0x376>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x33c>
 8002fda:	4b6a      	ldr	r3, [pc, #424]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fde:	4a69      	ldr	r2, [pc, #420]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe6:	4b67      	ldr	r3, [pc, #412]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fea:	4a66      	ldr	r2, [pc, #408]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002fec:	f023 0304 	bic.w	r3, r3, #4
 8002ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff2:	e01c      	b.n	800302e <HAL_RCC_OscConfig+0x376>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d10c      	bne.n	8003016 <HAL_RCC_OscConfig+0x35e>
 8002ffc:	4b61      	ldr	r3, [pc, #388]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003000:	4a60      	ldr	r2, [pc, #384]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003002:	f043 0304 	orr.w	r3, r3, #4
 8003006:	6713      	str	r3, [r2, #112]	@ 0x70
 8003008:	4b5e      	ldr	r3, [pc, #376]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300c:	4a5d      	ldr	r2, [pc, #372]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	@ 0x70
 8003014:	e00b      	b.n	800302e <HAL_RCC_OscConfig+0x376>
 8003016:	4b5b      	ldr	r3, [pc, #364]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301a:	4a5a      	ldr	r2, [pc, #360]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	6713      	str	r3, [r2, #112]	@ 0x70
 8003022:	4b58      	ldr	r3, [pc, #352]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003026:	4a57      	ldr	r2, [pc, #348]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003028:	f023 0304 	bic.w	r3, r3, #4
 800302c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d015      	beq.n	8003062 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003036:	f7fe fd09 	bl	8001a4c <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7fe fd05 	bl	8001a4c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800304c:	4293      	cmp	r3, r2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e0ce      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003054:	4b4b      	ldr	r3, [pc, #300]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0ee      	beq.n	800303e <HAL_RCC_OscConfig+0x386>
 8003060:	e014      	b.n	800308c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003062:	f7fe fcf3 	bl	8001a4c <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003068:	e00a      	b.n	8003080 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7fe fcef 	bl	8001a4c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e0b8      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003080:	4b40      	ldr	r3, [pc, #256]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1ee      	bne.n	800306a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800308c:	7dfb      	ldrb	r3, [r7, #23]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d105      	bne.n	800309e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003092:	4b3c      	ldr	r3, [pc, #240]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	4a3b      	ldr	r2, [pc, #236]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003098:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800309c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80a4 	beq.w	80031f0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030a8:	4b36      	ldr	r3, [pc, #216]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d06b      	beq.n	800318c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d149      	bne.n	8003150 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030bc:	4b31      	ldr	r3, [pc, #196]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a30      	ldr	r2, [pc, #192]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 80030c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fe fcc0 	bl	8001a4c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fe fcbc 	bl	8001a4c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e087      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	4b28      	ldr	r3, [pc, #160]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69da      	ldr	r2, [r3, #28]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fc:	019b      	lsls	r3, r3, #6
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	3b01      	subs	r3, #1
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003110:	061b      	lsls	r3, r3, #24
 8003112:	4313      	orrs	r3, r2
 8003114:	4a1b      	ldr	r2, [pc, #108]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003116:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800311a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800311c:	4b19      	ldr	r3, [pc, #100]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a18      	ldr	r2, [pc, #96]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7fe fc90 	bl	8001a4c <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003130:	f7fe fc8c 	bl	8001a4c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e057      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003142:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x478>
 800314e:	e04f      	b.n	80031f0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003150:	4b0c      	ldr	r3, [pc, #48]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0b      	ldr	r2, [pc, #44]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003156:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800315a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe fc76 	bl	8001a4c <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003164:	f7fe fc72 	bl	8001a4c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e03d      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	4b03      	ldr	r3, [pc, #12]	@ (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x4ac>
 8003182:	e035      	b.n	80031f0 <HAL_RCC_OscConfig+0x538>
 8003184:	40023800 	.word	0x40023800
 8003188:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800318c:	4b1b      	ldr	r3, [pc, #108]	@ (80031fc <HAL_RCC_OscConfig+0x544>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d028      	beq.n	80031ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d121      	bne.n	80031ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d11a      	bne.n	80031ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031bc:	4013      	ands	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d111      	bne.n	80031ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	3b01      	subs	r3, #1
 80031d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d107      	bne.n	80031ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800

08003200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0d0      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003218:	4b6a      	ldr	r3, [pc, #424]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d910      	bls.n	8003248 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003226:	4b67      	ldr	r3, [pc, #412]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 020f 	bic.w	r2, r3, #15
 800322e:	4965      	ldr	r1, [pc, #404]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	4b63      	ldr	r3, [pc, #396]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0b8      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d020      	beq.n	8003296 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003260:	4b59      	ldr	r3, [pc, #356]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a58      	ldr	r2, [pc, #352]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003266:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800326a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003278:	4b53      	ldr	r3, [pc, #332]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a52      	ldr	r2, [pc, #328]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 800327e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003282:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003284:	4b50      	ldr	r3, [pc, #320]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	494d      	ldr	r1, [pc, #308]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d040      	beq.n	8003324 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	4b47      	ldr	r3, [pc, #284]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d115      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e07f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c2:	4b41      	ldr	r3, [pc, #260]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e073      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d2:	4b3d      	ldr	r3, [pc, #244]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e06b      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032e2:	4b39      	ldr	r3, [pc, #228]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f023 0203 	bic.w	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	4936      	ldr	r1, [pc, #216]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f4:	f7fe fbaa 	bl	8001a4c <HAL_GetTick>
 80032f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032fc:	f7fe fba6 	bl	8001a4c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e053      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	4b2d      	ldr	r3, [pc, #180]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 020c 	and.w	r2, r3, #12
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	429a      	cmp	r2, r3
 8003322:	d1eb      	bne.n	80032fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003324:	4b27      	ldr	r3, [pc, #156]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d210      	bcs.n	8003354 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b24      	ldr	r3, [pc, #144]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 020f 	bic.w	r2, r3, #15
 800333a:	4922      	ldr	r1, [pc, #136]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b20      	ldr	r3, [pc, #128]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e032      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003360:	4b19      	ldr	r3, [pc, #100]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4916      	ldr	r1, [pc, #88]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800337e:	4b12      	ldr	r3, [pc, #72]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	490e      	ldr	r1, [pc, #56]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003392:	f000 f821 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003396:	4602      	mov	r2, r0
 8003398:	4b0b      	ldr	r3, [pc, #44]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	490a      	ldr	r1, [pc, #40]	@ (80033cc <HAL_RCC_ClockConfig+0x1cc>)
 80033a4:	5ccb      	ldrb	r3, [r1, r3]
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	4a09      	ldr	r2, [pc, #36]	@ (80033d0 <HAL_RCC_ClockConfig+0x1d0>)
 80033ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ae:	4b09      	ldr	r3, [pc, #36]	@ (80033d4 <HAL_RCC_ClockConfig+0x1d4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fb06 	bl	80019c4 <HAL_InitTick>

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023c00 	.word	0x40023c00
 80033c8:	40023800 	.word	0x40023800
 80033cc:	0800720c 	.word	0x0800720c
 80033d0:	20000000 	.word	0x20000000
 80033d4:	20000004 	.word	0x20000004

080033d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033dc:	b090      	sub	sp, #64	@ 0x40
 80033de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80033e4:	2300      	movs	r3, #0
 80033e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033e8:	2300      	movs	r3, #0
 80033ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f0:	4b59      	ldr	r3, [pc, #356]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d00d      	beq.n	8003418 <HAL_RCC_GetSysClockFreq+0x40>
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	f200 80a1 	bhi.w	8003544 <HAL_RCC_GetSysClockFreq+0x16c>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x34>
 8003406:	2b04      	cmp	r3, #4
 8003408:	d003      	beq.n	8003412 <HAL_RCC_GetSysClockFreq+0x3a>
 800340a:	e09b      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800340c:	4b53      	ldr	r3, [pc, #332]	@ (800355c <HAL_RCC_GetSysClockFreq+0x184>)
 800340e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003410:	e09b      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003412:	4b53      	ldr	r3, [pc, #332]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x188>)
 8003414:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003416:	e098      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003418:	4b4f      	ldr	r3, [pc, #316]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003420:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003422:	4b4d      	ldr	r3, [pc, #308]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d028      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342e:	4b4a      	ldr	r3, [pc, #296]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	099b      	lsrs	r3, r3, #6
 8003434:	2200      	movs	r2, #0
 8003436:	623b      	str	r3, [r7, #32]
 8003438:	627a      	str	r2, [r7, #36]	@ 0x24
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003440:	2100      	movs	r1, #0
 8003442:	4b47      	ldr	r3, [pc, #284]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x188>)
 8003444:	fb03 f201 	mul.w	r2, r3, r1
 8003448:	2300      	movs	r3, #0
 800344a:	fb00 f303 	mul.w	r3, r0, r3
 800344e:	4413      	add	r3, r2
 8003450:	4a43      	ldr	r2, [pc, #268]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x188>)
 8003452:	fba0 1202 	umull	r1, r2, r0, r2
 8003456:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003458:	460a      	mov	r2, r1
 800345a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800345c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800345e:	4413      	add	r3, r2
 8003460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003464:	2200      	movs	r2, #0
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	61fa      	str	r2, [r7, #28]
 800346a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800346e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003472:	f7fd fbb9 	bl	8000be8 <__aeabi_uldivmod>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4613      	mov	r3, r2
 800347c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800347e:	e053      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003480:	4b35      	ldr	r3, [pc, #212]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	099b      	lsrs	r3, r3, #6
 8003486:	2200      	movs	r2, #0
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	617a      	str	r2, [r7, #20]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003492:	f04f 0b00 	mov.w	fp, #0
 8003496:	4652      	mov	r2, sl
 8003498:	465b      	mov	r3, fp
 800349a:	f04f 0000 	mov.w	r0, #0
 800349e:	f04f 0100 	mov.w	r1, #0
 80034a2:	0159      	lsls	r1, r3, #5
 80034a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a8:	0150      	lsls	r0, r2, #5
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	ebb2 080a 	subs.w	r8, r2, sl
 80034b2:	eb63 090b 	sbc.w	r9, r3, fp
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034ca:	ebb2 0408 	subs.w	r4, r2, r8
 80034ce:	eb63 0509 	sbc.w	r5, r3, r9
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	00eb      	lsls	r3, r5, #3
 80034dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e0:	00e2      	lsls	r2, r4, #3
 80034e2:	4614      	mov	r4, r2
 80034e4:	461d      	mov	r5, r3
 80034e6:	eb14 030a 	adds.w	r3, r4, sl
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	eb45 030b 	adc.w	r3, r5, fp
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034fe:	4629      	mov	r1, r5
 8003500:	028b      	lsls	r3, r1, #10
 8003502:	4621      	mov	r1, r4
 8003504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003508:	4621      	mov	r1, r4
 800350a:	028a      	lsls	r2, r1, #10
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003512:	2200      	movs	r2, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	60fa      	str	r2, [r7, #12]
 8003518:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800351c:	f7fd fb64 	bl	8000be8 <__aeabi_uldivmod>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4613      	mov	r3, r2
 8003526:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003528:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	0c1b      	lsrs	r3, r3, #16
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	3301      	adds	r3, #1
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003538:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800353a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003542:	e002      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b05      	ldr	r3, [pc, #20]	@ (800355c <HAL_RCC_GetSysClockFreq+0x184>)
 8003546:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800354c:	4618      	mov	r0, r3
 800354e:	3740      	adds	r7, #64	@ 0x40
 8003550:	46bd      	mov	sp, r7
 8003552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	00f42400 	.word	0x00f42400
 8003560:	017d7840 	.word	0x017d7840

08003564 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003568:	4b03      	ldr	r3, [pc, #12]	@ (8003578 <HAL_RCC_GetHCLKFreq+0x14>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000000 	.word	0x20000000

0800357c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003580:	f7ff fff0 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b05      	ldr	r3, [pc, #20]	@ (800359c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	0a9b      	lsrs	r3, r3, #10
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4903      	ldr	r1, [pc, #12]	@ (80035a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40023800 	.word	0x40023800
 80035a0:	0800721c 	.word	0x0800721c

080035a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035a8:	f7ff ffdc 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	0b5b      	lsrs	r3, r3, #13
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	4903      	ldr	r1, [pc, #12]	@ (80035c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40023800 	.word	0x40023800
 80035c8:	0800721c 	.word	0x0800721c

080035cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d012      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035f4:	4b69      	ldr	r3, [pc, #420]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4a68      	ldr	r2, [pc, #416]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80035fe:	6093      	str	r3, [r2, #8]
 8003600:	4b66      	ldr	r3, [pc, #408]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003608:	4964      	ldr	r1, [pc, #400]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003616:	2301      	movs	r3, #1
 8003618:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d017      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003626:	4b5d      	ldr	r3, [pc, #372]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800362c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003634:	4959      	ldr	r1, [pc, #356]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003640:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003644:	d101      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003646:	2301      	movs	r3, #1
 8003648:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003652:	2301      	movs	r3, #1
 8003654:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d017      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003662:	4b4e      	ldr	r3, [pc, #312]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003664:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003668:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	494a      	ldr	r1, [pc, #296]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003680:	d101      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003682:	2301      	movs	r3, #1
 8003684:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800368e:	2301      	movs	r3, #1
 8003690:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800369e:	2301      	movs	r3, #1
 80036a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 808b 	beq.w	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036b0:	4b3a      	ldr	r3, [pc, #232]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	4a39      	ldr	r2, [pc, #228]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80036bc:	4b37      	ldr	r3, [pc, #220]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036c8:	4b35      	ldr	r3, [pc, #212]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a34      	ldr	r2, [pc, #208]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d4:	f7fe f9ba 	bl	8001a4c <HAL_GetTick>
 80036d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036dc:	f7fe f9b6 	bl	8001a4c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	@ 0x64
 80036e8:	d901      	bls.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e357      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036ee:	4b2c      	ldr	r3, [pc, #176]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036fa:	4b28      	ldr	r3, [pc, #160]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003702:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d035      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	429a      	cmp	r2, r3
 8003716:	d02e      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003718:	4b20      	ldr	r3, [pc, #128]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003720:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003722:	4b1e      	ldr	r3, [pc, #120]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003726:	4a1d      	ldr	r2, [pc, #116]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800372c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800372e:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003732:	4a1a      	ldr	r2, [pc, #104]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003738:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800373a:	4a18      	ldr	r2, [pc, #96]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003740:	4b16      	ldr	r3, [pc, #88]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b01      	cmp	r3, #1
 800374a:	d114      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7fe f97e 	bl	8001a4c <HAL_GetTick>
 8003750:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003752:	e00a      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003754:	f7fe f97a 	bl	8001a4c <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e319      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376a:	4b0c      	ldr	r3, [pc, #48]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0ee      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800377e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003782:	d111      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003784:	4b05      	ldr	r3, [pc, #20]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003790:	4b04      	ldr	r3, [pc, #16]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003792:	400b      	ands	r3, r1
 8003794:	4901      	ldr	r1, [pc, #4]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003796:	4313      	orrs	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
 800379a:	e00b      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800379c:	40023800 	.word	0x40023800
 80037a0:	40007000 	.word	0x40007000
 80037a4:	0ffffcff 	.word	0x0ffffcff
 80037a8:	4baa      	ldr	r3, [pc, #680]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	4aa9      	ldr	r2, [pc, #676]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ae:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80037b2:	6093      	str	r3, [r2, #8]
 80037b4:	4ba7      	ldr	r3, [pc, #668]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c0:	49a4      	ldr	r1, [pc, #656]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d010      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037d2:	4ba0      	ldr	r3, [pc, #640]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037d8:	4a9e      	ldr	r2, [pc, #632]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80037e2:	4b9c      	ldr	r3, [pc, #624]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ec:	4999      	ldr	r1, [pc, #612]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003800:	4b94      	ldr	r3, [pc, #592]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003806:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800380e:	4991      	ldr	r1, [pc, #580]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003822:	4b8c      	ldr	r3, [pc, #560]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003828:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003830:	4988      	ldr	r1, [pc, #544]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003844:	4b83      	ldr	r3, [pc, #524]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003852:	4980      	ldr	r1, [pc, #512]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003866:	4b7b      	ldr	r3, [pc, #492]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003874:	4977      	ldr	r1, [pc, #476]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003888:	4b72      	ldr	r3, [pc, #456]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388e:	f023 0203 	bic.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003896:	496f      	ldr	r1, [pc, #444]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b0:	f023 020c 	bic.w	r2, r3, #12
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b8:	4966      	ldr	r1, [pc, #408]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038cc:	4b61      	ldr	r3, [pc, #388]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038da:	495e      	ldr	r1, [pc, #376]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038ee:	4b59      	ldr	r3, [pc, #356]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038fc:	4955      	ldr	r1, [pc, #340]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003910:	4b50      	ldr	r3, [pc, #320]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003916:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391e:	494d      	ldr	r1, [pc, #308]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003932:	4b48      	ldr	r3, [pc, #288]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003938:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003940:	4944      	ldr	r1, [pc, #272]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003954:	4b3f      	ldr	r3, [pc, #252]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800395a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003962:	493c      	ldr	r1, [pc, #240]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003976:	4b37      	ldr	r3, [pc, #220]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003984:	4933      	ldr	r1, [pc, #204]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003998:	4b2e      	ldr	r3, [pc, #184]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800399e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039a6:	492b      	ldr	r1, [pc, #172]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d011      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039ba:	4b26      	ldr	r3, [pc, #152]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039c8:	4922      	ldr	r1, [pc, #136]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039d8:	d101      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80039da:	2301      	movs	r3, #1
 80039dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80039ea:	2301      	movs	r3, #1
 80039ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039fa:	4b16      	ldr	r3, [pc, #88]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a00:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a08:	4912      	ldr	r1, [pc, #72]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a22:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a2c:	4909      	ldr	r1, [pc, #36]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d006      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80d9 	beq.w	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a48:	4b02      	ldr	r3, [pc, #8]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a01      	ldr	r2, [pc, #4]	@ (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a52:	e001      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003a54:	40023800 	.word	0x40023800
 8003a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a5a:	f7fd fff7 	bl	8001a4c <HAL_GetTick>
 8003a5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a60:	e008      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a62:	f7fd fff3 	bl	8001a4c <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b64      	cmp	r3, #100	@ 0x64
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e194      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a74:	4b6c      	ldr	r3, [pc, #432]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f0      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d021      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d11d      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a94:	4b64      	ldr	r3, [pc, #400]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a9a:	0c1b      	lsrs	r3, r3, #16
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003aa2:	4b61      	ldr	r3, [pc, #388]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aa8:	0e1b      	lsrs	r3, r3, #24
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	019a      	lsls	r2, r3, #6
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	431a      	orrs	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	061b      	lsls	r3, r3, #24
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	071b      	lsls	r3, r3, #28
 8003ac8:	4957      	ldr	r1, [pc, #348]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d02e      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003afa:	d129      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003afc:	4b4a      	ldr	r3, [pc, #296]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b02:	0c1b      	lsrs	r3, r3, #16
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b0a:	4b47      	ldr	r3, [pc, #284]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b10:	0f1b      	lsrs	r3, r3, #28
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	019a      	lsls	r2, r3, #6
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	071b      	lsls	r3, r3, #28
 8003b30:	493d      	ldr	r1, [pc, #244]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b38:	4b3b      	ldr	r3, [pc, #236]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b3e:	f023 021f 	bic.w	r2, r3, #31
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b46:	3b01      	subs	r3, #1
 8003b48:	4937      	ldr	r1, [pc, #220]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01d      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b5c:	4b32      	ldr	r3, [pc, #200]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b62:	0e1b      	lsrs	r3, r3, #24
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b70:	0f1b      	lsrs	r3, r3, #28
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	019a      	lsls	r2, r3, #6
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	041b      	lsls	r3, r3, #16
 8003b84:	431a      	orrs	r2, r3
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	061b      	lsls	r3, r3, #24
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	071b      	lsls	r3, r3, #28
 8003b90:	4925      	ldr	r1, [pc, #148]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d011      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	019a      	lsls	r2, r3, #6
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	041b      	lsls	r3, r3, #16
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	061b      	lsls	r3, r3, #24
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	071b      	lsls	r3, r3, #28
 8003bc0:	4919      	ldr	r1, [pc, #100]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bc8:	4b17      	ldr	r3, [pc, #92]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a16      	ldr	r2, [pc, #88]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd4:	f7fd ff3a 	bl	8001a4c <HAL_GetTick>
 8003bd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bdc:	f7fd ff36 	bl	8001a4c <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	@ 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e0d7      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bee:	4b0e      	ldr	r3, [pc, #56]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	f040 80cd 	bne.w	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c02:	4b09      	ldr	r3, [pc, #36]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a08      	ldr	r2, [pc, #32]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c0e:	f7fd ff1d 	bl	8001a4c <HAL_GetTick>
 8003c12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c14:	e00a      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c16:	f7fd ff19 	bl	8001a4c <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b64      	cmp	r3, #100	@ 0x64
 8003c22:	d903      	bls.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e0ba      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003c28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c2c:	4b5e      	ldr	r3, [pc, #376]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c38:	d0ed      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d02e      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d12a      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c62:	4b51      	ldr	r3, [pc, #324]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c70:	4b4d      	ldr	r3, [pc, #308]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c76:	0f1b      	lsrs	r3, r3, #28
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	019a      	lsls	r2, r3, #6
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	041b      	lsls	r3, r3, #16
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	061b      	lsls	r3, r3, #24
 8003c90:	431a      	orrs	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	071b      	lsls	r3, r3, #28
 8003c96:	4944      	ldr	r1, [pc, #272]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c9e:	4b42      	ldr	r3, [pc, #264]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ca4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cac:	3b01      	subs	r3, #1
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	493d      	ldr	r1, [pc, #244]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d022      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ccc:	d11d      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cce:	4b36      	ldr	r3, [pc, #216]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd4:	0e1b      	lsrs	r3, r3, #24
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cdc:	4b32      	ldr	r3, [pc, #200]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce2:	0f1b      	lsrs	r3, r3, #28
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	019a      	lsls	r2, r3, #6
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	041b      	lsls	r3, r3, #16
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	061b      	lsls	r3, r3, #24
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	071b      	lsls	r3, r3, #28
 8003d02:	4929      	ldr	r1, [pc, #164]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d028      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d16:	4b24      	ldr	r3, [pc, #144]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1c:	0e1b      	lsrs	r3, r3, #24
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d24:	4b20      	ldr	r3, [pc, #128]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2a:	0c1b      	lsrs	r3, r3, #16
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	019a      	lsls	r2, r3, #6
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	041b      	lsls	r3, r3, #16
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	061b      	lsls	r3, r3, #24
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	071b      	lsls	r3, r3, #28
 8003d4a:	4917      	ldr	r1, [pc, #92]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d52:	4b15      	ldr	r3, [pc, #84]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	4911      	ldr	r1, [pc, #68]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d68:	4b0f      	ldr	r3, [pc, #60]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a0e      	ldr	r2, [pc, #56]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d74:	f7fd fe6a 	bl	8001a4c <HAL_GetTick>
 8003d78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d7c:	f7fd fe66 	bl	8001a4c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	@ 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e007      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d8e:	4b06      	ldr	r3, [pc, #24]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d9a:	d1ef      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800

08003dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e040      	b.n	8003e40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fd fc38 	bl	8001644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2224      	movs	r2, #36	@ 0x24
 8003dd8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0201 	bic.w	r2, r2, #1
 8003de8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fb16 	bl	8004424 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f8af 	bl	8003f5c <UART_SetConfig>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e01b      	b.n	8003e40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fb95 	bl	8004568 <UART_CheckIdleState>
 8003e3e:	4603      	mov	r3, r0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08a      	sub	sp, #40	@ 0x28
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d177      	bne.n	8003f50 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_UART_Transmit+0x24>
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e070      	b.n	8003f52 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2221      	movs	r2, #33	@ 0x21
 8003e7c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e7e:	f7fd fde5 	bl	8001a4c <HAL_GetTick>
 8003e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	88fa      	ldrh	r2, [r7, #6]
 8003e88:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e9c:	d108      	bne.n	8003eb0 <HAL_UART_Transmit+0x68>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d104      	bne.n	8003eb0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	e003      	b.n	8003eb8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003eb8:	e02f      	b.n	8003f1a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2180      	movs	r1, #128	@ 0x80
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fba6 	bl	8004616 <UART_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e03b      	b.n	8003f52 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10b      	bne.n	8003ef8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	3302      	adds	r3, #2
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	e007      	b.n	8003f08 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3301      	adds	r3, #1
 8003f06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1c9      	bne.n	8003eba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2140      	movs	r1, #64	@ 0x40
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fb70 	bl	8004616 <UART_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d004      	beq.n	8003f46 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e005      	b.n	8003f52 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e000      	b.n	8003f52 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003f50:	2302      	movs	r3, #2
  }
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4ba6      	ldr	r3, [pc, #664]	@ (8004220 <UART_SetConfig+0x2c4>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	6979      	ldr	r1, [r7, #20]
 8003f90:	430b      	orrs	r3, r1
 8003f92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a94      	ldr	r2, [pc, #592]	@ (8004224 <UART_SetConfig+0x2c8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d120      	bne.n	800401a <UART_SetConfig+0xbe>
 8003fd8:	4b93      	ldr	r3, [pc, #588]	@ (8004228 <UART_SetConfig+0x2cc>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d816      	bhi.n	8004014 <UART_SetConfig+0xb8>
 8003fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8003fec <UART_SetConfig+0x90>)
 8003fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fec:	08003ffd 	.word	0x08003ffd
 8003ff0:	08004009 	.word	0x08004009
 8003ff4:	08004003 	.word	0x08004003
 8003ff8:	0800400f 	.word	0x0800400f
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	e150      	b.n	80042a4 <UART_SetConfig+0x348>
 8004002:	2302      	movs	r3, #2
 8004004:	77fb      	strb	r3, [r7, #31]
 8004006:	e14d      	b.n	80042a4 <UART_SetConfig+0x348>
 8004008:	2304      	movs	r3, #4
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e14a      	b.n	80042a4 <UART_SetConfig+0x348>
 800400e:	2308      	movs	r3, #8
 8004010:	77fb      	strb	r3, [r7, #31]
 8004012:	e147      	b.n	80042a4 <UART_SetConfig+0x348>
 8004014:	2310      	movs	r3, #16
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e144      	b.n	80042a4 <UART_SetConfig+0x348>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a83      	ldr	r2, [pc, #524]	@ (800422c <UART_SetConfig+0x2d0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d132      	bne.n	800408a <UART_SetConfig+0x12e>
 8004024:	4b80      	ldr	r3, [pc, #512]	@ (8004228 <UART_SetConfig+0x2cc>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402a:	f003 030c 	and.w	r3, r3, #12
 800402e:	2b0c      	cmp	r3, #12
 8004030:	d828      	bhi.n	8004084 <UART_SetConfig+0x128>
 8004032:	a201      	add	r2, pc, #4	@ (adr r2, 8004038 <UART_SetConfig+0xdc>)
 8004034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004038:	0800406d 	.word	0x0800406d
 800403c:	08004085 	.word	0x08004085
 8004040:	08004085 	.word	0x08004085
 8004044:	08004085 	.word	0x08004085
 8004048:	08004079 	.word	0x08004079
 800404c:	08004085 	.word	0x08004085
 8004050:	08004085 	.word	0x08004085
 8004054:	08004085 	.word	0x08004085
 8004058:	08004073 	.word	0x08004073
 800405c:	08004085 	.word	0x08004085
 8004060:	08004085 	.word	0x08004085
 8004064:	08004085 	.word	0x08004085
 8004068:	0800407f 	.word	0x0800407f
 800406c:	2300      	movs	r3, #0
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	e118      	b.n	80042a4 <UART_SetConfig+0x348>
 8004072:	2302      	movs	r3, #2
 8004074:	77fb      	strb	r3, [r7, #31]
 8004076:	e115      	b.n	80042a4 <UART_SetConfig+0x348>
 8004078:	2304      	movs	r3, #4
 800407a:	77fb      	strb	r3, [r7, #31]
 800407c:	e112      	b.n	80042a4 <UART_SetConfig+0x348>
 800407e:	2308      	movs	r3, #8
 8004080:	77fb      	strb	r3, [r7, #31]
 8004082:	e10f      	b.n	80042a4 <UART_SetConfig+0x348>
 8004084:	2310      	movs	r3, #16
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e10c      	b.n	80042a4 <UART_SetConfig+0x348>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a68      	ldr	r2, [pc, #416]	@ (8004230 <UART_SetConfig+0x2d4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d120      	bne.n	80040d6 <UART_SetConfig+0x17a>
 8004094:	4b64      	ldr	r3, [pc, #400]	@ (8004228 <UART_SetConfig+0x2cc>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800409e:	2b30      	cmp	r3, #48	@ 0x30
 80040a0:	d013      	beq.n	80040ca <UART_SetConfig+0x16e>
 80040a2:	2b30      	cmp	r3, #48	@ 0x30
 80040a4:	d814      	bhi.n	80040d0 <UART_SetConfig+0x174>
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d009      	beq.n	80040be <UART_SetConfig+0x162>
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d810      	bhi.n	80040d0 <UART_SetConfig+0x174>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <UART_SetConfig+0x15c>
 80040b2:	2b10      	cmp	r3, #16
 80040b4:	d006      	beq.n	80040c4 <UART_SetConfig+0x168>
 80040b6:	e00b      	b.n	80040d0 <UART_SetConfig+0x174>
 80040b8:	2300      	movs	r3, #0
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e0f2      	b.n	80042a4 <UART_SetConfig+0x348>
 80040be:	2302      	movs	r3, #2
 80040c0:	77fb      	strb	r3, [r7, #31]
 80040c2:	e0ef      	b.n	80042a4 <UART_SetConfig+0x348>
 80040c4:	2304      	movs	r3, #4
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	e0ec      	b.n	80042a4 <UART_SetConfig+0x348>
 80040ca:	2308      	movs	r3, #8
 80040cc:	77fb      	strb	r3, [r7, #31]
 80040ce:	e0e9      	b.n	80042a4 <UART_SetConfig+0x348>
 80040d0:	2310      	movs	r3, #16
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e0e6      	b.n	80042a4 <UART_SetConfig+0x348>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a56      	ldr	r2, [pc, #344]	@ (8004234 <UART_SetConfig+0x2d8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d120      	bne.n	8004122 <UART_SetConfig+0x1c6>
 80040e0:	4b51      	ldr	r3, [pc, #324]	@ (8004228 <UART_SetConfig+0x2cc>)
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80040ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80040ec:	d013      	beq.n	8004116 <UART_SetConfig+0x1ba>
 80040ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80040f0:	d814      	bhi.n	800411c <UART_SetConfig+0x1c0>
 80040f2:	2b80      	cmp	r3, #128	@ 0x80
 80040f4:	d009      	beq.n	800410a <UART_SetConfig+0x1ae>
 80040f6:	2b80      	cmp	r3, #128	@ 0x80
 80040f8:	d810      	bhi.n	800411c <UART_SetConfig+0x1c0>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <UART_SetConfig+0x1a8>
 80040fe:	2b40      	cmp	r3, #64	@ 0x40
 8004100:	d006      	beq.n	8004110 <UART_SetConfig+0x1b4>
 8004102:	e00b      	b.n	800411c <UART_SetConfig+0x1c0>
 8004104:	2300      	movs	r3, #0
 8004106:	77fb      	strb	r3, [r7, #31]
 8004108:	e0cc      	b.n	80042a4 <UART_SetConfig+0x348>
 800410a:	2302      	movs	r3, #2
 800410c:	77fb      	strb	r3, [r7, #31]
 800410e:	e0c9      	b.n	80042a4 <UART_SetConfig+0x348>
 8004110:	2304      	movs	r3, #4
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	e0c6      	b.n	80042a4 <UART_SetConfig+0x348>
 8004116:	2308      	movs	r3, #8
 8004118:	77fb      	strb	r3, [r7, #31]
 800411a:	e0c3      	b.n	80042a4 <UART_SetConfig+0x348>
 800411c:	2310      	movs	r3, #16
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e0c0      	b.n	80042a4 <UART_SetConfig+0x348>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a44      	ldr	r2, [pc, #272]	@ (8004238 <UART_SetConfig+0x2dc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d125      	bne.n	8004178 <UART_SetConfig+0x21c>
 800412c:	4b3e      	ldr	r3, [pc, #248]	@ (8004228 <UART_SetConfig+0x2cc>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004136:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800413a:	d017      	beq.n	800416c <UART_SetConfig+0x210>
 800413c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004140:	d817      	bhi.n	8004172 <UART_SetConfig+0x216>
 8004142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004146:	d00b      	beq.n	8004160 <UART_SetConfig+0x204>
 8004148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800414c:	d811      	bhi.n	8004172 <UART_SetConfig+0x216>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <UART_SetConfig+0x1fe>
 8004152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004156:	d006      	beq.n	8004166 <UART_SetConfig+0x20a>
 8004158:	e00b      	b.n	8004172 <UART_SetConfig+0x216>
 800415a:	2300      	movs	r3, #0
 800415c:	77fb      	strb	r3, [r7, #31]
 800415e:	e0a1      	b.n	80042a4 <UART_SetConfig+0x348>
 8004160:	2302      	movs	r3, #2
 8004162:	77fb      	strb	r3, [r7, #31]
 8004164:	e09e      	b.n	80042a4 <UART_SetConfig+0x348>
 8004166:	2304      	movs	r3, #4
 8004168:	77fb      	strb	r3, [r7, #31]
 800416a:	e09b      	b.n	80042a4 <UART_SetConfig+0x348>
 800416c:	2308      	movs	r3, #8
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e098      	b.n	80042a4 <UART_SetConfig+0x348>
 8004172:	2310      	movs	r3, #16
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e095      	b.n	80042a4 <UART_SetConfig+0x348>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a2f      	ldr	r2, [pc, #188]	@ (800423c <UART_SetConfig+0x2e0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d125      	bne.n	80041ce <UART_SetConfig+0x272>
 8004182:	4b29      	ldr	r3, [pc, #164]	@ (8004228 <UART_SetConfig+0x2cc>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004188:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800418c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004190:	d017      	beq.n	80041c2 <UART_SetConfig+0x266>
 8004192:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004196:	d817      	bhi.n	80041c8 <UART_SetConfig+0x26c>
 8004198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800419c:	d00b      	beq.n	80041b6 <UART_SetConfig+0x25a>
 800419e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a2:	d811      	bhi.n	80041c8 <UART_SetConfig+0x26c>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <UART_SetConfig+0x254>
 80041a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ac:	d006      	beq.n	80041bc <UART_SetConfig+0x260>
 80041ae:	e00b      	b.n	80041c8 <UART_SetConfig+0x26c>
 80041b0:	2301      	movs	r3, #1
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e076      	b.n	80042a4 <UART_SetConfig+0x348>
 80041b6:	2302      	movs	r3, #2
 80041b8:	77fb      	strb	r3, [r7, #31]
 80041ba:	e073      	b.n	80042a4 <UART_SetConfig+0x348>
 80041bc:	2304      	movs	r3, #4
 80041be:	77fb      	strb	r3, [r7, #31]
 80041c0:	e070      	b.n	80042a4 <UART_SetConfig+0x348>
 80041c2:	2308      	movs	r3, #8
 80041c4:	77fb      	strb	r3, [r7, #31]
 80041c6:	e06d      	b.n	80042a4 <UART_SetConfig+0x348>
 80041c8:	2310      	movs	r3, #16
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e06a      	b.n	80042a4 <UART_SetConfig+0x348>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004240 <UART_SetConfig+0x2e4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d138      	bne.n	800424a <UART_SetConfig+0x2ee>
 80041d8:	4b13      	ldr	r3, [pc, #76]	@ (8004228 <UART_SetConfig+0x2cc>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80041e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041e6:	d017      	beq.n	8004218 <UART_SetConfig+0x2bc>
 80041e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041ec:	d82a      	bhi.n	8004244 <UART_SetConfig+0x2e8>
 80041ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041f2:	d00b      	beq.n	800420c <UART_SetConfig+0x2b0>
 80041f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041f8:	d824      	bhi.n	8004244 <UART_SetConfig+0x2e8>
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <UART_SetConfig+0x2aa>
 80041fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004202:	d006      	beq.n	8004212 <UART_SetConfig+0x2b6>
 8004204:	e01e      	b.n	8004244 <UART_SetConfig+0x2e8>
 8004206:	2300      	movs	r3, #0
 8004208:	77fb      	strb	r3, [r7, #31]
 800420a:	e04b      	b.n	80042a4 <UART_SetConfig+0x348>
 800420c:	2302      	movs	r3, #2
 800420e:	77fb      	strb	r3, [r7, #31]
 8004210:	e048      	b.n	80042a4 <UART_SetConfig+0x348>
 8004212:	2304      	movs	r3, #4
 8004214:	77fb      	strb	r3, [r7, #31]
 8004216:	e045      	b.n	80042a4 <UART_SetConfig+0x348>
 8004218:	2308      	movs	r3, #8
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e042      	b.n	80042a4 <UART_SetConfig+0x348>
 800421e:	bf00      	nop
 8004220:	efff69f3 	.word	0xefff69f3
 8004224:	40011000 	.word	0x40011000
 8004228:	40023800 	.word	0x40023800
 800422c:	40004400 	.word	0x40004400
 8004230:	40004800 	.word	0x40004800
 8004234:	40004c00 	.word	0x40004c00
 8004238:	40005000 	.word	0x40005000
 800423c:	40011400 	.word	0x40011400
 8004240:	40007800 	.word	0x40007800
 8004244:	2310      	movs	r3, #16
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e02c      	b.n	80042a4 <UART_SetConfig+0x348>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a72      	ldr	r2, [pc, #456]	@ (8004418 <UART_SetConfig+0x4bc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d125      	bne.n	80042a0 <UART_SetConfig+0x344>
 8004254:	4b71      	ldr	r3, [pc, #452]	@ (800441c <UART_SetConfig+0x4c0>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800425e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004262:	d017      	beq.n	8004294 <UART_SetConfig+0x338>
 8004264:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004268:	d817      	bhi.n	800429a <UART_SetConfig+0x33e>
 800426a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800426e:	d00b      	beq.n	8004288 <UART_SetConfig+0x32c>
 8004270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004274:	d811      	bhi.n	800429a <UART_SetConfig+0x33e>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <UART_SetConfig+0x326>
 800427a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800427e:	d006      	beq.n	800428e <UART_SetConfig+0x332>
 8004280:	e00b      	b.n	800429a <UART_SetConfig+0x33e>
 8004282:	2300      	movs	r3, #0
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e00d      	b.n	80042a4 <UART_SetConfig+0x348>
 8004288:	2302      	movs	r3, #2
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e00a      	b.n	80042a4 <UART_SetConfig+0x348>
 800428e:	2304      	movs	r3, #4
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e007      	b.n	80042a4 <UART_SetConfig+0x348>
 8004294:	2308      	movs	r3, #8
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e004      	b.n	80042a4 <UART_SetConfig+0x348>
 800429a:	2310      	movs	r3, #16
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e001      	b.n	80042a4 <UART_SetConfig+0x348>
 80042a0:	2310      	movs	r3, #16
 80042a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ac:	d15b      	bne.n	8004366 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80042ae:	7ffb      	ldrb	r3, [r7, #31]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d828      	bhi.n	8004306 <UART_SetConfig+0x3aa>
 80042b4:	a201      	add	r2, pc, #4	@ (adr r2, 80042bc <UART_SetConfig+0x360>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080042e1 	.word	0x080042e1
 80042c0:	080042e9 	.word	0x080042e9
 80042c4:	080042f1 	.word	0x080042f1
 80042c8:	08004307 	.word	0x08004307
 80042cc:	080042f7 	.word	0x080042f7
 80042d0:	08004307 	.word	0x08004307
 80042d4:	08004307 	.word	0x08004307
 80042d8:	08004307 	.word	0x08004307
 80042dc:	080042ff 	.word	0x080042ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e0:	f7ff f94c 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 80042e4:	61b8      	str	r0, [r7, #24]
        break;
 80042e6:	e013      	b.n	8004310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042e8:	f7ff f95c 	bl	80035a4 <HAL_RCC_GetPCLK2Freq>
 80042ec:	61b8      	str	r0, [r7, #24]
        break;
 80042ee:	e00f      	b.n	8004310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f0:	4b4b      	ldr	r3, [pc, #300]	@ (8004420 <UART_SetConfig+0x4c4>)
 80042f2:	61bb      	str	r3, [r7, #24]
        break;
 80042f4:	e00c      	b.n	8004310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042f6:	f7ff f86f 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 80042fa:	61b8      	str	r0, [r7, #24]
        break;
 80042fc:	e008      	b.n	8004310 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004302:	61bb      	str	r3, [r7, #24]
        break;
 8004304:	e004      	b.n	8004310 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	77bb      	strb	r3, [r7, #30]
        break;
 800430e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d074      	beq.n	8004400 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	005a      	lsls	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	085b      	lsrs	r3, r3, #1
 8004320:	441a      	add	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	fbb2 f3f3 	udiv	r3, r2, r3
 800432a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b0f      	cmp	r3, #15
 8004330:	d916      	bls.n	8004360 <UART_SetConfig+0x404>
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004338:	d212      	bcs.n	8004360 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f023 030f 	bic.w	r3, r3, #15
 8004342:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	085b      	lsrs	r3, r3, #1
 8004348:	b29b      	uxth	r3, r3
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	b29a      	uxth	r2, r3
 8004350:	89fb      	ldrh	r3, [r7, #14]
 8004352:	4313      	orrs	r3, r2
 8004354:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	89fa      	ldrh	r2, [r7, #14]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	e04f      	b.n	8004400 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	77bb      	strb	r3, [r7, #30]
 8004364:	e04c      	b.n	8004400 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004366:	7ffb      	ldrb	r3, [r7, #31]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d828      	bhi.n	80043be <UART_SetConfig+0x462>
 800436c:	a201      	add	r2, pc, #4	@ (adr r2, 8004374 <UART_SetConfig+0x418>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	08004399 	.word	0x08004399
 8004378:	080043a1 	.word	0x080043a1
 800437c:	080043a9 	.word	0x080043a9
 8004380:	080043bf 	.word	0x080043bf
 8004384:	080043af 	.word	0x080043af
 8004388:	080043bf 	.word	0x080043bf
 800438c:	080043bf 	.word	0x080043bf
 8004390:	080043bf 	.word	0x080043bf
 8004394:	080043b7 	.word	0x080043b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004398:	f7ff f8f0 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 800439c:	61b8      	str	r0, [r7, #24]
        break;
 800439e:	e013      	b.n	80043c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043a0:	f7ff f900 	bl	80035a4 <HAL_RCC_GetPCLK2Freq>
 80043a4:	61b8      	str	r0, [r7, #24]
        break;
 80043a6:	e00f      	b.n	80043c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004420 <UART_SetConfig+0x4c4>)
 80043aa:	61bb      	str	r3, [r7, #24]
        break;
 80043ac:	e00c      	b.n	80043c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ae:	f7ff f813 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 80043b2:	61b8      	str	r0, [r7, #24]
        break;
 80043b4:	e008      	b.n	80043c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043ba:	61bb      	str	r3, [r7, #24]
        break;
 80043bc:	e004      	b.n	80043c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	77bb      	strb	r3, [r7, #30]
        break;
 80043c6:	bf00      	nop
    }

    if (pclk != 0U)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d018      	beq.n	8004400 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	085a      	lsrs	r2, r3, #1
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	441a      	add	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b0f      	cmp	r3, #15
 80043e6:	d909      	bls.n	80043fc <UART_SetConfig+0x4a0>
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ee:	d205      	bcs.n	80043fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	e001      	b.n	8004400 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800440c:	7fbb      	ldrb	r3, [r7, #30]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3720      	adds	r7, #32
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40007c00 	.word	0x40007c00
 800441c:	40023800 	.word	0x40023800
 8004420:	00f42400 	.word	0x00f42400

08004424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01a      	beq.n	800453a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004522:	d10a      	bne.n	800453a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	605a      	str	r2, [r3, #4]
  }
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08c      	sub	sp, #48	@ 0x30
 800456c:	af02      	add	r7, sp, #8
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004578:	f7fd fa68 	bl	8001a4c <HAL_GetTick>
 800457c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b08      	cmp	r3, #8
 800458a:	d12e      	bne.n	80045ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800458c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	2200      	movs	r2, #0
 8004596:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f83b 	bl	8004616 <UART_WaitOnFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d021      	beq.n	80045ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	e853 3f00 	ldrex	r3, [r3]
 80045b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045ba:	623b      	str	r3, [r7, #32]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	61fb      	str	r3, [r7, #28]
 80045c6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c8:	69b9      	ldr	r1, [r7, #24]
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	e841 2300 	strex	r3, r2, [r1]
 80045d0:	617b      	str	r3, [r7, #20]
   return(result);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1e6      	bne.n	80045a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e011      	b.n	800460e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3728      	adds	r7, #40	@ 0x28
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	603b      	str	r3, [r7, #0]
 8004622:	4613      	mov	r3, r2
 8004624:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004626:	e04f      	b.n	80046c8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462e:	d04b      	beq.n	80046c8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004630:	f7fd fa0c 	bl	8001a4c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	429a      	cmp	r2, r3
 800463e:	d302      	bcc.n	8004646 <UART_WaitOnFlagUntilTimeout+0x30>
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e04e      	b.n	80046e8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d037      	beq.n	80046c8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b80      	cmp	r3, #128	@ 0x80
 800465c:	d034      	beq.n	80046c8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b40      	cmp	r3, #64	@ 0x40
 8004662:	d031      	beq.n	80046c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b08      	cmp	r3, #8
 8004670:	d110      	bne.n	8004694 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2208      	movs	r2, #8
 8004678:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f838 	bl	80046f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2208      	movs	r2, #8
 8004684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e029      	b.n	80046e8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800469e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046a2:	d111      	bne.n	80046c8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f81e 	bl	80046f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e00f      	b.n	80046e8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69da      	ldr	r2, [r3, #28]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4013      	ands	r3, r2
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	bf0c      	ite	eq
 80046d8:	2301      	moveq	r3, #1
 80046da:	2300      	movne	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d0a0      	beq.n	8004628 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b095      	sub	sp, #84	@ 0x54
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004708:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800470c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004716:	643b      	str	r3, [r7, #64]	@ 0x40
 8004718:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800471c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e6      	bne.n	80046f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3308      	adds	r3, #8
 8004730:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	61fb      	str	r3, [r7, #28]
   return(result);
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3308      	adds	r3, #8
 8004748:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800474a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800474c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004750:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e5      	bne.n	800472a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004762:	2b01      	cmp	r3, #1
 8004764:	d118      	bne.n	8004798 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	60bb      	str	r3, [r7, #8]
   return(result);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f023 0310 	bic.w	r3, r3, #16
 800477a:	647b      	str	r3, [r7, #68]	@ 0x44
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6979      	ldr	r1, [r7, #20]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	613b      	str	r3, [r7, #16]
   return(result);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e6      	bne.n	8004766 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80047ac:	bf00      	nop
 80047ae:	3754      	adds	r7, #84	@ 0x54
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <__cvt>:
 80047b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047bc:	ec57 6b10 	vmov	r6, r7, d0
 80047c0:	2f00      	cmp	r7, #0
 80047c2:	460c      	mov	r4, r1
 80047c4:	4619      	mov	r1, r3
 80047c6:	463b      	mov	r3, r7
 80047c8:	bfbb      	ittet	lt
 80047ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80047ce:	461f      	movlt	r7, r3
 80047d0:	2300      	movge	r3, #0
 80047d2:	232d      	movlt	r3, #45	@ 0x2d
 80047d4:	700b      	strb	r3, [r1, #0]
 80047d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80047dc:	4691      	mov	r9, r2
 80047de:	f023 0820 	bic.w	r8, r3, #32
 80047e2:	bfbc      	itt	lt
 80047e4:	4632      	movlt	r2, r6
 80047e6:	4616      	movlt	r6, r2
 80047e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047ec:	d005      	beq.n	80047fa <__cvt+0x42>
 80047ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80047f2:	d100      	bne.n	80047f6 <__cvt+0x3e>
 80047f4:	3401      	adds	r4, #1
 80047f6:	2102      	movs	r1, #2
 80047f8:	e000      	b.n	80047fc <__cvt+0x44>
 80047fa:	2103      	movs	r1, #3
 80047fc:	ab03      	add	r3, sp, #12
 80047fe:	9301      	str	r3, [sp, #4]
 8004800:	ab02      	add	r3, sp, #8
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	ec47 6b10 	vmov	d0, r6, r7
 8004808:	4653      	mov	r3, sl
 800480a:	4622      	mov	r2, r4
 800480c:	f000 ff3c 	bl	8005688 <_dtoa_r>
 8004810:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004814:	4605      	mov	r5, r0
 8004816:	d119      	bne.n	800484c <__cvt+0x94>
 8004818:	f019 0f01 	tst.w	r9, #1
 800481c:	d00e      	beq.n	800483c <__cvt+0x84>
 800481e:	eb00 0904 	add.w	r9, r0, r4
 8004822:	2200      	movs	r2, #0
 8004824:	2300      	movs	r3, #0
 8004826:	4630      	mov	r0, r6
 8004828:	4639      	mov	r1, r7
 800482a:	f7fc f96d 	bl	8000b08 <__aeabi_dcmpeq>
 800482e:	b108      	cbz	r0, 8004834 <__cvt+0x7c>
 8004830:	f8cd 900c 	str.w	r9, [sp, #12]
 8004834:	2230      	movs	r2, #48	@ 0x30
 8004836:	9b03      	ldr	r3, [sp, #12]
 8004838:	454b      	cmp	r3, r9
 800483a:	d31e      	bcc.n	800487a <__cvt+0xc2>
 800483c:	9b03      	ldr	r3, [sp, #12]
 800483e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004840:	1b5b      	subs	r3, r3, r5
 8004842:	4628      	mov	r0, r5
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	b004      	add	sp, #16
 8004848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800484c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004850:	eb00 0904 	add.w	r9, r0, r4
 8004854:	d1e5      	bne.n	8004822 <__cvt+0x6a>
 8004856:	7803      	ldrb	r3, [r0, #0]
 8004858:	2b30      	cmp	r3, #48	@ 0x30
 800485a:	d10a      	bne.n	8004872 <__cvt+0xba>
 800485c:	2200      	movs	r2, #0
 800485e:	2300      	movs	r3, #0
 8004860:	4630      	mov	r0, r6
 8004862:	4639      	mov	r1, r7
 8004864:	f7fc f950 	bl	8000b08 <__aeabi_dcmpeq>
 8004868:	b918      	cbnz	r0, 8004872 <__cvt+0xba>
 800486a:	f1c4 0401 	rsb	r4, r4, #1
 800486e:	f8ca 4000 	str.w	r4, [sl]
 8004872:	f8da 3000 	ldr.w	r3, [sl]
 8004876:	4499      	add	r9, r3
 8004878:	e7d3      	b.n	8004822 <__cvt+0x6a>
 800487a:	1c59      	adds	r1, r3, #1
 800487c:	9103      	str	r1, [sp, #12]
 800487e:	701a      	strb	r2, [r3, #0]
 8004880:	e7d9      	b.n	8004836 <__cvt+0x7e>

08004882 <__exponent>:
 8004882:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004884:	2900      	cmp	r1, #0
 8004886:	bfba      	itte	lt
 8004888:	4249      	neglt	r1, r1
 800488a:	232d      	movlt	r3, #45	@ 0x2d
 800488c:	232b      	movge	r3, #43	@ 0x2b
 800488e:	2909      	cmp	r1, #9
 8004890:	7002      	strb	r2, [r0, #0]
 8004892:	7043      	strb	r3, [r0, #1]
 8004894:	dd29      	ble.n	80048ea <__exponent+0x68>
 8004896:	f10d 0307 	add.w	r3, sp, #7
 800489a:	461d      	mov	r5, r3
 800489c:	270a      	movs	r7, #10
 800489e:	461a      	mov	r2, r3
 80048a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80048a4:	fb07 1416 	mls	r4, r7, r6, r1
 80048a8:	3430      	adds	r4, #48	@ 0x30
 80048aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80048ae:	460c      	mov	r4, r1
 80048b0:	2c63      	cmp	r4, #99	@ 0x63
 80048b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80048b6:	4631      	mov	r1, r6
 80048b8:	dcf1      	bgt.n	800489e <__exponent+0x1c>
 80048ba:	3130      	adds	r1, #48	@ 0x30
 80048bc:	1e94      	subs	r4, r2, #2
 80048be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80048c2:	1c41      	adds	r1, r0, #1
 80048c4:	4623      	mov	r3, r4
 80048c6:	42ab      	cmp	r3, r5
 80048c8:	d30a      	bcc.n	80048e0 <__exponent+0x5e>
 80048ca:	f10d 0309 	add.w	r3, sp, #9
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	42ac      	cmp	r4, r5
 80048d2:	bf88      	it	hi
 80048d4:	2300      	movhi	r3, #0
 80048d6:	3302      	adds	r3, #2
 80048d8:	4403      	add	r3, r0
 80048da:	1a18      	subs	r0, r3, r0
 80048dc:	b003      	add	sp, #12
 80048de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80048e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80048e8:	e7ed      	b.n	80048c6 <__exponent+0x44>
 80048ea:	2330      	movs	r3, #48	@ 0x30
 80048ec:	3130      	adds	r1, #48	@ 0x30
 80048ee:	7083      	strb	r3, [r0, #2]
 80048f0:	70c1      	strb	r1, [r0, #3]
 80048f2:	1d03      	adds	r3, r0, #4
 80048f4:	e7f1      	b.n	80048da <__exponent+0x58>
	...

080048f8 <_printf_float>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	b08d      	sub	sp, #52	@ 0x34
 80048fe:	460c      	mov	r4, r1
 8004900:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004904:	4616      	mov	r6, r2
 8004906:	461f      	mov	r7, r3
 8004908:	4605      	mov	r5, r0
 800490a:	f000 fdbd 	bl	8005488 <_localeconv_r>
 800490e:	6803      	ldr	r3, [r0, #0]
 8004910:	9304      	str	r3, [sp, #16]
 8004912:	4618      	mov	r0, r3
 8004914:	f7fb fccc 	bl	80002b0 <strlen>
 8004918:	2300      	movs	r3, #0
 800491a:	930a      	str	r3, [sp, #40]	@ 0x28
 800491c:	f8d8 3000 	ldr.w	r3, [r8]
 8004920:	9005      	str	r0, [sp, #20]
 8004922:	3307      	adds	r3, #7
 8004924:	f023 0307 	bic.w	r3, r3, #7
 8004928:	f103 0208 	add.w	r2, r3, #8
 800492c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004930:	f8d4 b000 	ldr.w	fp, [r4]
 8004934:	f8c8 2000 	str.w	r2, [r8]
 8004938:	e9d3 8900 	ldrd	r8, r9, [r3]
 800493c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004940:	9307      	str	r3, [sp, #28]
 8004942:	f8cd 8018 	str.w	r8, [sp, #24]
 8004946:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800494a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800494e:	4b9c      	ldr	r3, [pc, #624]	@ (8004bc0 <_printf_float+0x2c8>)
 8004950:	f04f 32ff 	mov.w	r2, #4294967295
 8004954:	f7fc f90a 	bl	8000b6c <__aeabi_dcmpun>
 8004958:	bb70      	cbnz	r0, 80049b8 <_printf_float+0xc0>
 800495a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800495e:	4b98      	ldr	r3, [pc, #608]	@ (8004bc0 <_printf_float+0x2c8>)
 8004960:	f04f 32ff 	mov.w	r2, #4294967295
 8004964:	f7fc f8e4 	bl	8000b30 <__aeabi_dcmple>
 8004968:	bb30      	cbnz	r0, 80049b8 <_printf_float+0xc0>
 800496a:	2200      	movs	r2, #0
 800496c:	2300      	movs	r3, #0
 800496e:	4640      	mov	r0, r8
 8004970:	4649      	mov	r1, r9
 8004972:	f7fc f8d3 	bl	8000b1c <__aeabi_dcmplt>
 8004976:	b110      	cbz	r0, 800497e <_printf_float+0x86>
 8004978:	232d      	movs	r3, #45	@ 0x2d
 800497a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800497e:	4a91      	ldr	r2, [pc, #580]	@ (8004bc4 <_printf_float+0x2cc>)
 8004980:	4b91      	ldr	r3, [pc, #580]	@ (8004bc8 <_printf_float+0x2d0>)
 8004982:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004986:	bf8c      	ite	hi
 8004988:	4690      	movhi	r8, r2
 800498a:	4698      	movls	r8, r3
 800498c:	2303      	movs	r3, #3
 800498e:	6123      	str	r3, [r4, #16]
 8004990:	f02b 0304 	bic.w	r3, fp, #4
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	f04f 0900 	mov.w	r9, #0
 800499a:	9700      	str	r7, [sp, #0]
 800499c:	4633      	mov	r3, r6
 800499e:	aa0b      	add	r2, sp, #44	@ 0x2c
 80049a0:	4621      	mov	r1, r4
 80049a2:	4628      	mov	r0, r5
 80049a4:	f000 f9d2 	bl	8004d4c <_printf_common>
 80049a8:	3001      	adds	r0, #1
 80049aa:	f040 808d 	bne.w	8004ac8 <_printf_float+0x1d0>
 80049ae:	f04f 30ff 	mov.w	r0, #4294967295
 80049b2:	b00d      	add	sp, #52	@ 0x34
 80049b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b8:	4642      	mov	r2, r8
 80049ba:	464b      	mov	r3, r9
 80049bc:	4640      	mov	r0, r8
 80049be:	4649      	mov	r1, r9
 80049c0:	f7fc f8d4 	bl	8000b6c <__aeabi_dcmpun>
 80049c4:	b140      	cbz	r0, 80049d8 <_printf_float+0xe0>
 80049c6:	464b      	mov	r3, r9
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bfbc      	itt	lt
 80049cc:	232d      	movlt	r3, #45	@ 0x2d
 80049ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80049d2:	4a7e      	ldr	r2, [pc, #504]	@ (8004bcc <_printf_float+0x2d4>)
 80049d4:	4b7e      	ldr	r3, [pc, #504]	@ (8004bd0 <_printf_float+0x2d8>)
 80049d6:	e7d4      	b.n	8004982 <_printf_float+0x8a>
 80049d8:	6863      	ldr	r3, [r4, #4]
 80049da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80049de:	9206      	str	r2, [sp, #24]
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	d13b      	bne.n	8004a5c <_printf_float+0x164>
 80049e4:	2306      	movs	r3, #6
 80049e6:	6063      	str	r3, [r4, #4]
 80049e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80049ec:	2300      	movs	r3, #0
 80049ee:	6022      	str	r2, [r4, #0]
 80049f0:	9303      	str	r3, [sp, #12]
 80049f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80049f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80049f8:	ab09      	add	r3, sp, #36	@ 0x24
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	6861      	ldr	r1, [r4, #4]
 80049fe:	ec49 8b10 	vmov	d0, r8, r9
 8004a02:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004a06:	4628      	mov	r0, r5
 8004a08:	f7ff fed6 	bl	80047b8 <__cvt>
 8004a0c:	9b06      	ldr	r3, [sp, #24]
 8004a0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004a10:	2b47      	cmp	r3, #71	@ 0x47
 8004a12:	4680      	mov	r8, r0
 8004a14:	d129      	bne.n	8004a6a <_printf_float+0x172>
 8004a16:	1cc8      	adds	r0, r1, #3
 8004a18:	db02      	blt.n	8004a20 <_printf_float+0x128>
 8004a1a:	6863      	ldr	r3, [r4, #4]
 8004a1c:	4299      	cmp	r1, r3
 8004a1e:	dd41      	ble.n	8004aa4 <_printf_float+0x1ac>
 8004a20:	f1aa 0a02 	sub.w	sl, sl, #2
 8004a24:	fa5f fa8a 	uxtb.w	sl, sl
 8004a28:	3901      	subs	r1, #1
 8004a2a:	4652      	mov	r2, sl
 8004a2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004a30:	9109      	str	r1, [sp, #36]	@ 0x24
 8004a32:	f7ff ff26 	bl	8004882 <__exponent>
 8004a36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a38:	1813      	adds	r3, r2, r0
 8004a3a:	2a01      	cmp	r2, #1
 8004a3c:	4681      	mov	r9, r0
 8004a3e:	6123      	str	r3, [r4, #16]
 8004a40:	dc02      	bgt.n	8004a48 <_printf_float+0x150>
 8004a42:	6822      	ldr	r2, [r4, #0]
 8004a44:	07d2      	lsls	r2, r2, #31
 8004a46:	d501      	bpl.n	8004a4c <_printf_float+0x154>
 8004a48:	3301      	adds	r3, #1
 8004a4a:	6123      	str	r3, [r4, #16]
 8004a4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0a2      	beq.n	800499a <_printf_float+0xa2>
 8004a54:	232d      	movs	r3, #45	@ 0x2d
 8004a56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a5a:	e79e      	b.n	800499a <_printf_float+0xa2>
 8004a5c:	9a06      	ldr	r2, [sp, #24]
 8004a5e:	2a47      	cmp	r2, #71	@ 0x47
 8004a60:	d1c2      	bne.n	80049e8 <_printf_float+0xf0>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1c0      	bne.n	80049e8 <_printf_float+0xf0>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e7bd      	b.n	80049e6 <_printf_float+0xee>
 8004a6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a6e:	d9db      	bls.n	8004a28 <_printf_float+0x130>
 8004a70:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004a74:	d118      	bne.n	8004aa8 <_printf_float+0x1b0>
 8004a76:	2900      	cmp	r1, #0
 8004a78:	6863      	ldr	r3, [r4, #4]
 8004a7a:	dd0b      	ble.n	8004a94 <_printf_float+0x19c>
 8004a7c:	6121      	str	r1, [r4, #16]
 8004a7e:	b913      	cbnz	r3, 8004a86 <_printf_float+0x18e>
 8004a80:	6822      	ldr	r2, [r4, #0]
 8004a82:	07d0      	lsls	r0, r2, #31
 8004a84:	d502      	bpl.n	8004a8c <_printf_float+0x194>
 8004a86:	3301      	adds	r3, #1
 8004a88:	440b      	add	r3, r1
 8004a8a:	6123      	str	r3, [r4, #16]
 8004a8c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a8e:	f04f 0900 	mov.w	r9, #0
 8004a92:	e7db      	b.n	8004a4c <_printf_float+0x154>
 8004a94:	b913      	cbnz	r3, 8004a9c <_printf_float+0x1a4>
 8004a96:	6822      	ldr	r2, [r4, #0]
 8004a98:	07d2      	lsls	r2, r2, #31
 8004a9a:	d501      	bpl.n	8004aa0 <_printf_float+0x1a8>
 8004a9c:	3302      	adds	r3, #2
 8004a9e:	e7f4      	b.n	8004a8a <_printf_float+0x192>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e7f2      	b.n	8004a8a <_printf_float+0x192>
 8004aa4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004aa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004aaa:	4299      	cmp	r1, r3
 8004aac:	db05      	blt.n	8004aba <_printf_float+0x1c2>
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	6121      	str	r1, [r4, #16]
 8004ab2:	07d8      	lsls	r0, r3, #31
 8004ab4:	d5ea      	bpl.n	8004a8c <_printf_float+0x194>
 8004ab6:	1c4b      	adds	r3, r1, #1
 8004ab8:	e7e7      	b.n	8004a8a <_printf_float+0x192>
 8004aba:	2900      	cmp	r1, #0
 8004abc:	bfd4      	ite	le
 8004abe:	f1c1 0202 	rsble	r2, r1, #2
 8004ac2:	2201      	movgt	r2, #1
 8004ac4:	4413      	add	r3, r2
 8004ac6:	e7e0      	b.n	8004a8a <_printf_float+0x192>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	055a      	lsls	r2, r3, #21
 8004acc:	d407      	bmi.n	8004ade <_printf_float+0x1e6>
 8004ace:	6923      	ldr	r3, [r4, #16]
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	4631      	mov	r1, r6
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	47b8      	blx	r7
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d12b      	bne.n	8004b34 <_printf_float+0x23c>
 8004adc:	e767      	b.n	80049ae <_printf_float+0xb6>
 8004ade:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ae2:	f240 80dd 	bls.w	8004ca0 <_printf_float+0x3a8>
 8004ae6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004aea:	2200      	movs	r2, #0
 8004aec:	2300      	movs	r3, #0
 8004aee:	f7fc f80b 	bl	8000b08 <__aeabi_dcmpeq>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d033      	beq.n	8004b5e <_printf_float+0x266>
 8004af6:	4a37      	ldr	r2, [pc, #220]	@ (8004bd4 <_printf_float+0x2dc>)
 8004af8:	2301      	movs	r3, #1
 8004afa:	4631      	mov	r1, r6
 8004afc:	4628      	mov	r0, r5
 8004afe:	47b8      	blx	r7
 8004b00:	3001      	adds	r0, #1
 8004b02:	f43f af54 	beq.w	80049ae <_printf_float+0xb6>
 8004b06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004b0a:	4543      	cmp	r3, r8
 8004b0c:	db02      	blt.n	8004b14 <_printf_float+0x21c>
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	07d8      	lsls	r0, r3, #31
 8004b12:	d50f      	bpl.n	8004b34 <_printf_float+0x23c>
 8004b14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b18:	4631      	mov	r1, r6
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	47b8      	blx	r7
 8004b1e:	3001      	adds	r0, #1
 8004b20:	f43f af45 	beq.w	80049ae <_printf_float+0xb6>
 8004b24:	f04f 0900 	mov.w	r9, #0
 8004b28:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b2c:	f104 0a1a 	add.w	sl, r4, #26
 8004b30:	45c8      	cmp	r8, r9
 8004b32:	dc09      	bgt.n	8004b48 <_printf_float+0x250>
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	079b      	lsls	r3, r3, #30
 8004b38:	f100 8103 	bmi.w	8004d42 <_printf_float+0x44a>
 8004b3c:	68e0      	ldr	r0, [r4, #12]
 8004b3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b40:	4298      	cmp	r0, r3
 8004b42:	bfb8      	it	lt
 8004b44:	4618      	movlt	r0, r3
 8004b46:	e734      	b.n	80049b2 <_printf_float+0xba>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4652      	mov	r2, sl
 8004b4c:	4631      	mov	r1, r6
 8004b4e:	4628      	mov	r0, r5
 8004b50:	47b8      	blx	r7
 8004b52:	3001      	adds	r0, #1
 8004b54:	f43f af2b 	beq.w	80049ae <_printf_float+0xb6>
 8004b58:	f109 0901 	add.w	r9, r9, #1
 8004b5c:	e7e8      	b.n	8004b30 <_printf_float+0x238>
 8004b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	dc39      	bgt.n	8004bd8 <_printf_float+0x2e0>
 8004b64:	4a1b      	ldr	r2, [pc, #108]	@ (8004bd4 <_printf_float+0x2dc>)
 8004b66:	2301      	movs	r3, #1
 8004b68:	4631      	mov	r1, r6
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	47b8      	blx	r7
 8004b6e:	3001      	adds	r0, #1
 8004b70:	f43f af1d 	beq.w	80049ae <_printf_float+0xb6>
 8004b74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004b78:	ea59 0303 	orrs.w	r3, r9, r3
 8004b7c:	d102      	bne.n	8004b84 <_printf_float+0x28c>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	07d9      	lsls	r1, r3, #31
 8004b82:	d5d7      	bpl.n	8004b34 <_printf_float+0x23c>
 8004b84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b88:	4631      	mov	r1, r6
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	47b8      	blx	r7
 8004b8e:	3001      	adds	r0, #1
 8004b90:	f43f af0d 	beq.w	80049ae <_printf_float+0xb6>
 8004b94:	f04f 0a00 	mov.w	sl, #0
 8004b98:	f104 0b1a 	add.w	fp, r4, #26
 8004b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b9e:	425b      	negs	r3, r3
 8004ba0:	4553      	cmp	r3, sl
 8004ba2:	dc01      	bgt.n	8004ba8 <_printf_float+0x2b0>
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	e793      	b.n	8004ad0 <_printf_float+0x1d8>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	465a      	mov	r2, fp
 8004bac:	4631      	mov	r1, r6
 8004bae:	4628      	mov	r0, r5
 8004bb0:	47b8      	blx	r7
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	f43f aefb 	beq.w	80049ae <_printf_float+0xb6>
 8004bb8:	f10a 0a01 	add.w	sl, sl, #1
 8004bbc:	e7ee      	b.n	8004b9c <_printf_float+0x2a4>
 8004bbe:	bf00      	nop
 8004bc0:	7fefffff 	.word	0x7fefffff
 8004bc4:	08007228 	.word	0x08007228
 8004bc8:	08007224 	.word	0x08007224
 8004bcc:	08007230 	.word	0x08007230
 8004bd0:	0800722c 	.word	0x0800722c
 8004bd4:	08007234 	.word	0x08007234
 8004bd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004bda:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004bde:	4553      	cmp	r3, sl
 8004be0:	bfa8      	it	ge
 8004be2:	4653      	movge	r3, sl
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	4699      	mov	r9, r3
 8004be8:	dc36      	bgt.n	8004c58 <_printf_float+0x360>
 8004bea:	f04f 0b00 	mov.w	fp, #0
 8004bee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bf2:	f104 021a 	add.w	r2, r4, #26
 8004bf6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004bf8:	9306      	str	r3, [sp, #24]
 8004bfa:	eba3 0309 	sub.w	r3, r3, r9
 8004bfe:	455b      	cmp	r3, fp
 8004c00:	dc31      	bgt.n	8004c66 <_printf_float+0x36e>
 8004c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c04:	459a      	cmp	sl, r3
 8004c06:	dc3a      	bgt.n	8004c7e <_printf_float+0x386>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	07da      	lsls	r2, r3, #31
 8004c0c:	d437      	bmi.n	8004c7e <_printf_float+0x386>
 8004c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c10:	ebaa 0903 	sub.w	r9, sl, r3
 8004c14:	9b06      	ldr	r3, [sp, #24]
 8004c16:	ebaa 0303 	sub.w	r3, sl, r3
 8004c1a:	4599      	cmp	r9, r3
 8004c1c:	bfa8      	it	ge
 8004c1e:	4699      	movge	r9, r3
 8004c20:	f1b9 0f00 	cmp.w	r9, #0
 8004c24:	dc33      	bgt.n	8004c8e <_printf_float+0x396>
 8004c26:	f04f 0800 	mov.w	r8, #0
 8004c2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c2e:	f104 0b1a 	add.w	fp, r4, #26
 8004c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c34:	ebaa 0303 	sub.w	r3, sl, r3
 8004c38:	eba3 0309 	sub.w	r3, r3, r9
 8004c3c:	4543      	cmp	r3, r8
 8004c3e:	f77f af79 	ble.w	8004b34 <_printf_float+0x23c>
 8004c42:	2301      	movs	r3, #1
 8004c44:	465a      	mov	r2, fp
 8004c46:	4631      	mov	r1, r6
 8004c48:	4628      	mov	r0, r5
 8004c4a:	47b8      	blx	r7
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	f43f aeae 	beq.w	80049ae <_printf_float+0xb6>
 8004c52:	f108 0801 	add.w	r8, r8, #1
 8004c56:	e7ec      	b.n	8004c32 <_printf_float+0x33a>
 8004c58:	4642      	mov	r2, r8
 8004c5a:	4631      	mov	r1, r6
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	47b8      	blx	r7
 8004c60:	3001      	adds	r0, #1
 8004c62:	d1c2      	bne.n	8004bea <_printf_float+0x2f2>
 8004c64:	e6a3      	b.n	80049ae <_printf_float+0xb6>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4631      	mov	r1, r6
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	9206      	str	r2, [sp, #24]
 8004c6e:	47b8      	blx	r7
 8004c70:	3001      	adds	r0, #1
 8004c72:	f43f ae9c 	beq.w	80049ae <_printf_float+0xb6>
 8004c76:	9a06      	ldr	r2, [sp, #24]
 8004c78:	f10b 0b01 	add.w	fp, fp, #1
 8004c7c:	e7bb      	b.n	8004bf6 <_printf_float+0x2fe>
 8004c7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c82:	4631      	mov	r1, r6
 8004c84:	4628      	mov	r0, r5
 8004c86:	47b8      	blx	r7
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d1c0      	bne.n	8004c0e <_printf_float+0x316>
 8004c8c:	e68f      	b.n	80049ae <_printf_float+0xb6>
 8004c8e:	9a06      	ldr	r2, [sp, #24]
 8004c90:	464b      	mov	r3, r9
 8004c92:	4442      	add	r2, r8
 8004c94:	4631      	mov	r1, r6
 8004c96:	4628      	mov	r0, r5
 8004c98:	47b8      	blx	r7
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d1c3      	bne.n	8004c26 <_printf_float+0x32e>
 8004c9e:	e686      	b.n	80049ae <_printf_float+0xb6>
 8004ca0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004ca4:	f1ba 0f01 	cmp.w	sl, #1
 8004ca8:	dc01      	bgt.n	8004cae <_printf_float+0x3b6>
 8004caa:	07db      	lsls	r3, r3, #31
 8004cac:	d536      	bpl.n	8004d1c <_printf_float+0x424>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	4642      	mov	r2, r8
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	47b8      	blx	r7
 8004cb8:	3001      	adds	r0, #1
 8004cba:	f43f ae78 	beq.w	80049ae <_printf_float+0xb6>
 8004cbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	47b8      	blx	r7
 8004cc8:	3001      	adds	r0, #1
 8004cca:	f43f ae70 	beq.w	80049ae <_printf_float+0xb6>
 8004cce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cda:	f7fb ff15 	bl	8000b08 <__aeabi_dcmpeq>
 8004cde:	b9c0      	cbnz	r0, 8004d12 <_printf_float+0x41a>
 8004ce0:	4653      	mov	r3, sl
 8004ce2:	f108 0201 	add.w	r2, r8, #1
 8004ce6:	4631      	mov	r1, r6
 8004ce8:	4628      	mov	r0, r5
 8004cea:	47b8      	blx	r7
 8004cec:	3001      	adds	r0, #1
 8004cee:	d10c      	bne.n	8004d0a <_printf_float+0x412>
 8004cf0:	e65d      	b.n	80049ae <_printf_float+0xb6>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	465a      	mov	r2, fp
 8004cf6:	4631      	mov	r1, r6
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	47b8      	blx	r7
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	f43f ae56 	beq.w	80049ae <_printf_float+0xb6>
 8004d02:	f108 0801 	add.w	r8, r8, #1
 8004d06:	45d0      	cmp	r8, sl
 8004d08:	dbf3      	blt.n	8004cf2 <_printf_float+0x3fa>
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004d10:	e6df      	b.n	8004ad2 <_printf_float+0x1da>
 8004d12:	f04f 0800 	mov.w	r8, #0
 8004d16:	f104 0b1a 	add.w	fp, r4, #26
 8004d1a:	e7f4      	b.n	8004d06 <_printf_float+0x40e>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	4642      	mov	r2, r8
 8004d20:	e7e1      	b.n	8004ce6 <_printf_float+0x3ee>
 8004d22:	2301      	movs	r3, #1
 8004d24:	464a      	mov	r2, r9
 8004d26:	4631      	mov	r1, r6
 8004d28:	4628      	mov	r0, r5
 8004d2a:	47b8      	blx	r7
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	f43f ae3e 	beq.w	80049ae <_printf_float+0xb6>
 8004d32:	f108 0801 	add.w	r8, r8, #1
 8004d36:	68e3      	ldr	r3, [r4, #12]
 8004d38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d3a:	1a5b      	subs	r3, r3, r1
 8004d3c:	4543      	cmp	r3, r8
 8004d3e:	dcf0      	bgt.n	8004d22 <_printf_float+0x42a>
 8004d40:	e6fc      	b.n	8004b3c <_printf_float+0x244>
 8004d42:	f04f 0800 	mov.w	r8, #0
 8004d46:	f104 0919 	add.w	r9, r4, #25
 8004d4a:	e7f4      	b.n	8004d36 <_printf_float+0x43e>

08004d4c <_printf_common>:
 8004d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d50:	4616      	mov	r6, r2
 8004d52:	4698      	mov	r8, r3
 8004d54:	688a      	ldr	r2, [r1, #8]
 8004d56:	690b      	ldr	r3, [r1, #16]
 8004d58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	bfb8      	it	lt
 8004d60:	4613      	movlt	r3, r2
 8004d62:	6033      	str	r3, [r6, #0]
 8004d64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d68:	4607      	mov	r7, r0
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	b10a      	cbz	r2, 8004d72 <_printf_common+0x26>
 8004d6e:	3301      	adds	r3, #1
 8004d70:	6033      	str	r3, [r6, #0]
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	0699      	lsls	r1, r3, #26
 8004d76:	bf42      	ittt	mi
 8004d78:	6833      	ldrmi	r3, [r6, #0]
 8004d7a:	3302      	addmi	r3, #2
 8004d7c:	6033      	strmi	r3, [r6, #0]
 8004d7e:	6825      	ldr	r5, [r4, #0]
 8004d80:	f015 0506 	ands.w	r5, r5, #6
 8004d84:	d106      	bne.n	8004d94 <_printf_common+0x48>
 8004d86:	f104 0a19 	add.w	sl, r4, #25
 8004d8a:	68e3      	ldr	r3, [r4, #12]
 8004d8c:	6832      	ldr	r2, [r6, #0]
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	42ab      	cmp	r3, r5
 8004d92:	dc26      	bgt.n	8004de2 <_printf_common+0x96>
 8004d94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d98:	6822      	ldr	r2, [r4, #0]
 8004d9a:	3b00      	subs	r3, #0
 8004d9c:	bf18      	it	ne
 8004d9e:	2301      	movne	r3, #1
 8004da0:	0692      	lsls	r2, r2, #26
 8004da2:	d42b      	bmi.n	8004dfc <_printf_common+0xb0>
 8004da4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004da8:	4641      	mov	r1, r8
 8004daa:	4638      	mov	r0, r7
 8004dac:	47c8      	blx	r9
 8004dae:	3001      	adds	r0, #1
 8004db0:	d01e      	beq.n	8004df0 <_printf_common+0xa4>
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	6922      	ldr	r2, [r4, #16]
 8004db6:	f003 0306 	and.w	r3, r3, #6
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	bf02      	ittt	eq
 8004dbe:	68e5      	ldreq	r5, [r4, #12]
 8004dc0:	6833      	ldreq	r3, [r6, #0]
 8004dc2:	1aed      	subeq	r5, r5, r3
 8004dc4:	68a3      	ldr	r3, [r4, #8]
 8004dc6:	bf0c      	ite	eq
 8004dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dcc:	2500      	movne	r5, #0
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	bfc4      	itt	gt
 8004dd2:	1a9b      	subgt	r3, r3, r2
 8004dd4:	18ed      	addgt	r5, r5, r3
 8004dd6:	2600      	movs	r6, #0
 8004dd8:	341a      	adds	r4, #26
 8004dda:	42b5      	cmp	r5, r6
 8004ddc:	d11a      	bne.n	8004e14 <_printf_common+0xc8>
 8004dde:	2000      	movs	r0, #0
 8004de0:	e008      	b.n	8004df4 <_printf_common+0xa8>
 8004de2:	2301      	movs	r3, #1
 8004de4:	4652      	mov	r2, sl
 8004de6:	4641      	mov	r1, r8
 8004de8:	4638      	mov	r0, r7
 8004dea:	47c8      	blx	r9
 8004dec:	3001      	adds	r0, #1
 8004dee:	d103      	bne.n	8004df8 <_printf_common+0xac>
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295
 8004df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df8:	3501      	adds	r5, #1
 8004dfa:	e7c6      	b.n	8004d8a <_printf_common+0x3e>
 8004dfc:	18e1      	adds	r1, r4, r3
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	2030      	movs	r0, #48	@ 0x30
 8004e02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e06:	4422      	add	r2, r4
 8004e08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e10:	3302      	adds	r3, #2
 8004e12:	e7c7      	b.n	8004da4 <_printf_common+0x58>
 8004e14:	2301      	movs	r3, #1
 8004e16:	4622      	mov	r2, r4
 8004e18:	4641      	mov	r1, r8
 8004e1a:	4638      	mov	r0, r7
 8004e1c:	47c8      	blx	r9
 8004e1e:	3001      	adds	r0, #1
 8004e20:	d0e6      	beq.n	8004df0 <_printf_common+0xa4>
 8004e22:	3601      	adds	r6, #1
 8004e24:	e7d9      	b.n	8004dda <_printf_common+0x8e>
	...

08004e28 <_printf_i>:
 8004e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e2c:	7e0f      	ldrb	r7, [r1, #24]
 8004e2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e30:	2f78      	cmp	r7, #120	@ 0x78
 8004e32:	4691      	mov	r9, r2
 8004e34:	4680      	mov	r8, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	469a      	mov	sl, r3
 8004e3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e3e:	d807      	bhi.n	8004e50 <_printf_i+0x28>
 8004e40:	2f62      	cmp	r7, #98	@ 0x62
 8004e42:	d80a      	bhi.n	8004e5a <_printf_i+0x32>
 8004e44:	2f00      	cmp	r7, #0
 8004e46:	f000 80d1 	beq.w	8004fec <_printf_i+0x1c4>
 8004e4a:	2f58      	cmp	r7, #88	@ 0x58
 8004e4c:	f000 80b8 	beq.w	8004fc0 <_printf_i+0x198>
 8004e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e58:	e03a      	b.n	8004ed0 <_printf_i+0xa8>
 8004e5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e5e:	2b15      	cmp	r3, #21
 8004e60:	d8f6      	bhi.n	8004e50 <_printf_i+0x28>
 8004e62:	a101      	add	r1, pc, #4	@ (adr r1, 8004e68 <_printf_i+0x40>)
 8004e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e68:	08004ec1 	.word	0x08004ec1
 8004e6c:	08004ed5 	.word	0x08004ed5
 8004e70:	08004e51 	.word	0x08004e51
 8004e74:	08004e51 	.word	0x08004e51
 8004e78:	08004e51 	.word	0x08004e51
 8004e7c:	08004e51 	.word	0x08004e51
 8004e80:	08004ed5 	.word	0x08004ed5
 8004e84:	08004e51 	.word	0x08004e51
 8004e88:	08004e51 	.word	0x08004e51
 8004e8c:	08004e51 	.word	0x08004e51
 8004e90:	08004e51 	.word	0x08004e51
 8004e94:	08004fd3 	.word	0x08004fd3
 8004e98:	08004eff 	.word	0x08004eff
 8004e9c:	08004f8d 	.word	0x08004f8d
 8004ea0:	08004e51 	.word	0x08004e51
 8004ea4:	08004e51 	.word	0x08004e51
 8004ea8:	08004ff5 	.word	0x08004ff5
 8004eac:	08004e51 	.word	0x08004e51
 8004eb0:	08004eff 	.word	0x08004eff
 8004eb4:	08004e51 	.word	0x08004e51
 8004eb8:	08004e51 	.word	0x08004e51
 8004ebc:	08004f95 	.word	0x08004f95
 8004ec0:	6833      	ldr	r3, [r6, #0]
 8004ec2:	1d1a      	adds	r2, r3, #4
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6032      	str	r2, [r6, #0]
 8004ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ecc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e09c      	b.n	800500e <_printf_i+0x1e6>
 8004ed4:	6833      	ldr	r3, [r6, #0]
 8004ed6:	6820      	ldr	r0, [r4, #0]
 8004ed8:	1d19      	adds	r1, r3, #4
 8004eda:	6031      	str	r1, [r6, #0]
 8004edc:	0606      	lsls	r6, r0, #24
 8004ede:	d501      	bpl.n	8004ee4 <_printf_i+0xbc>
 8004ee0:	681d      	ldr	r5, [r3, #0]
 8004ee2:	e003      	b.n	8004eec <_printf_i+0xc4>
 8004ee4:	0645      	lsls	r5, r0, #25
 8004ee6:	d5fb      	bpl.n	8004ee0 <_printf_i+0xb8>
 8004ee8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	da03      	bge.n	8004ef8 <_printf_i+0xd0>
 8004ef0:	232d      	movs	r3, #45	@ 0x2d
 8004ef2:	426d      	negs	r5, r5
 8004ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ef8:	4858      	ldr	r0, [pc, #352]	@ (800505c <_printf_i+0x234>)
 8004efa:	230a      	movs	r3, #10
 8004efc:	e011      	b.n	8004f22 <_printf_i+0xfa>
 8004efe:	6821      	ldr	r1, [r4, #0]
 8004f00:	6833      	ldr	r3, [r6, #0]
 8004f02:	0608      	lsls	r0, r1, #24
 8004f04:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f08:	d402      	bmi.n	8004f10 <_printf_i+0xe8>
 8004f0a:	0649      	lsls	r1, r1, #25
 8004f0c:	bf48      	it	mi
 8004f0e:	b2ad      	uxthmi	r5, r5
 8004f10:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f12:	4852      	ldr	r0, [pc, #328]	@ (800505c <_printf_i+0x234>)
 8004f14:	6033      	str	r3, [r6, #0]
 8004f16:	bf14      	ite	ne
 8004f18:	230a      	movne	r3, #10
 8004f1a:	2308      	moveq	r3, #8
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f22:	6866      	ldr	r6, [r4, #4]
 8004f24:	60a6      	str	r6, [r4, #8]
 8004f26:	2e00      	cmp	r6, #0
 8004f28:	db05      	blt.n	8004f36 <_printf_i+0x10e>
 8004f2a:	6821      	ldr	r1, [r4, #0]
 8004f2c:	432e      	orrs	r6, r5
 8004f2e:	f021 0104 	bic.w	r1, r1, #4
 8004f32:	6021      	str	r1, [r4, #0]
 8004f34:	d04b      	beq.n	8004fce <_printf_i+0x1a6>
 8004f36:	4616      	mov	r6, r2
 8004f38:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f3c:	fb03 5711 	mls	r7, r3, r1, r5
 8004f40:	5dc7      	ldrb	r7, [r0, r7]
 8004f42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f46:	462f      	mov	r7, r5
 8004f48:	42bb      	cmp	r3, r7
 8004f4a:	460d      	mov	r5, r1
 8004f4c:	d9f4      	bls.n	8004f38 <_printf_i+0x110>
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d10b      	bne.n	8004f6a <_printf_i+0x142>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	07df      	lsls	r7, r3, #31
 8004f56:	d508      	bpl.n	8004f6a <_printf_i+0x142>
 8004f58:	6923      	ldr	r3, [r4, #16]
 8004f5a:	6861      	ldr	r1, [r4, #4]
 8004f5c:	4299      	cmp	r1, r3
 8004f5e:	bfde      	ittt	le
 8004f60:	2330      	movle	r3, #48	@ 0x30
 8004f62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f6a:	1b92      	subs	r2, r2, r6
 8004f6c:	6122      	str	r2, [r4, #16]
 8004f6e:	f8cd a000 	str.w	sl, [sp]
 8004f72:	464b      	mov	r3, r9
 8004f74:	aa03      	add	r2, sp, #12
 8004f76:	4621      	mov	r1, r4
 8004f78:	4640      	mov	r0, r8
 8004f7a:	f7ff fee7 	bl	8004d4c <_printf_common>
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d14a      	bne.n	8005018 <_printf_i+0x1f0>
 8004f82:	f04f 30ff 	mov.w	r0, #4294967295
 8004f86:	b004      	add	sp, #16
 8004f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	f043 0320 	orr.w	r3, r3, #32
 8004f92:	6023      	str	r3, [r4, #0]
 8004f94:	4832      	ldr	r0, [pc, #200]	@ (8005060 <_printf_i+0x238>)
 8004f96:	2778      	movs	r7, #120	@ 0x78
 8004f98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	6831      	ldr	r1, [r6, #0]
 8004fa0:	061f      	lsls	r7, r3, #24
 8004fa2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fa6:	d402      	bmi.n	8004fae <_printf_i+0x186>
 8004fa8:	065f      	lsls	r7, r3, #25
 8004faa:	bf48      	it	mi
 8004fac:	b2ad      	uxthmi	r5, r5
 8004fae:	6031      	str	r1, [r6, #0]
 8004fb0:	07d9      	lsls	r1, r3, #31
 8004fb2:	bf44      	itt	mi
 8004fb4:	f043 0320 	orrmi.w	r3, r3, #32
 8004fb8:	6023      	strmi	r3, [r4, #0]
 8004fba:	b11d      	cbz	r5, 8004fc4 <_printf_i+0x19c>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	e7ad      	b.n	8004f1c <_printf_i+0xf4>
 8004fc0:	4826      	ldr	r0, [pc, #152]	@ (800505c <_printf_i+0x234>)
 8004fc2:	e7e9      	b.n	8004f98 <_printf_i+0x170>
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	f023 0320 	bic.w	r3, r3, #32
 8004fca:	6023      	str	r3, [r4, #0]
 8004fcc:	e7f6      	b.n	8004fbc <_printf_i+0x194>
 8004fce:	4616      	mov	r6, r2
 8004fd0:	e7bd      	b.n	8004f4e <_printf_i+0x126>
 8004fd2:	6833      	ldr	r3, [r6, #0]
 8004fd4:	6825      	ldr	r5, [r4, #0]
 8004fd6:	6961      	ldr	r1, [r4, #20]
 8004fd8:	1d18      	adds	r0, r3, #4
 8004fda:	6030      	str	r0, [r6, #0]
 8004fdc:	062e      	lsls	r6, r5, #24
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	d501      	bpl.n	8004fe6 <_printf_i+0x1be>
 8004fe2:	6019      	str	r1, [r3, #0]
 8004fe4:	e002      	b.n	8004fec <_printf_i+0x1c4>
 8004fe6:	0668      	lsls	r0, r5, #25
 8004fe8:	d5fb      	bpl.n	8004fe2 <_printf_i+0x1ba>
 8004fea:	8019      	strh	r1, [r3, #0]
 8004fec:	2300      	movs	r3, #0
 8004fee:	6123      	str	r3, [r4, #16]
 8004ff0:	4616      	mov	r6, r2
 8004ff2:	e7bc      	b.n	8004f6e <_printf_i+0x146>
 8004ff4:	6833      	ldr	r3, [r6, #0]
 8004ff6:	1d1a      	adds	r2, r3, #4
 8004ff8:	6032      	str	r2, [r6, #0]
 8004ffa:	681e      	ldr	r6, [r3, #0]
 8004ffc:	6862      	ldr	r2, [r4, #4]
 8004ffe:	2100      	movs	r1, #0
 8005000:	4630      	mov	r0, r6
 8005002:	f7fb f905 	bl	8000210 <memchr>
 8005006:	b108      	cbz	r0, 800500c <_printf_i+0x1e4>
 8005008:	1b80      	subs	r0, r0, r6
 800500a:	6060      	str	r0, [r4, #4]
 800500c:	6863      	ldr	r3, [r4, #4]
 800500e:	6123      	str	r3, [r4, #16]
 8005010:	2300      	movs	r3, #0
 8005012:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005016:	e7aa      	b.n	8004f6e <_printf_i+0x146>
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	4632      	mov	r2, r6
 800501c:	4649      	mov	r1, r9
 800501e:	4640      	mov	r0, r8
 8005020:	47d0      	blx	sl
 8005022:	3001      	adds	r0, #1
 8005024:	d0ad      	beq.n	8004f82 <_printf_i+0x15a>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	079b      	lsls	r3, r3, #30
 800502a:	d413      	bmi.n	8005054 <_printf_i+0x22c>
 800502c:	68e0      	ldr	r0, [r4, #12]
 800502e:	9b03      	ldr	r3, [sp, #12]
 8005030:	4298      	cmp	r0, r3
 8005032:	bfb8      	it	lt
 8005034:	4618      	movlt	r0, r3
 8005036:	e7a6      	b.n	8004f86 <_printf_i+0x15e>
 8005038:	2301      	movs	r3, #1
 800503a:	4632      	mov	r2, r6
 800503c:	4649      	mov	r1, r9
 800503e:	4640      	mov	r0, r8
 8005040:	47d0      	blx	sl
 8005042:	3001      	adds	r0, #1
 8005044:	d09d      	beq.n	8004f82 <_printf_i+0x15a>
 8005046:	3501      	adds	r5, #1
 8005048:	68e3      	ldr	r3, [r4, #12]
 800504a:	9903      	ldr	r1, [sp, #12]
 800504c:	1a5b      	subs	r3, r3, r1
 800504e:	42ab      	cmp	r3, r5
 8005050:	dcf2      	bgt.n	8005038 <_printf_i+0x210>
 8005052:	e7eb      	b.n	800502c <_printf_i+0x204>
 8005054:	2500      	movs	r5, #0
 8005056:	f104 0619 	add.w	r6, r4, #25
 800505a:	e7f5      	b.n	8005048 <_printf_i+0x220>
 800505c:	08007236 	.word	0x08007236
 8005060:	08007247 	.word	0x08007247

08005064 <std>:
 8005064:	2300      	movs	r3, #0
 8005066:	b510      	push	{r4, lr}
 8005068:	4604      	mov	r4, r0
 800506a:	e9c0 3300 	strd	r3, r3, [r0]
 800506e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005072:	6083      	str	r3, [r0, #8]
 8005074:	8181      	strh	r1, [r0, #12]
 8005076:	6643      	str	r3, [r0, #100]	@ 0x64
 8005078:	81c2      	strh	r2, [r0, #14]
 800507a:	6183      	str	r3, [r0, #24]
 800507c:	4619      	mov	r1, r3
 800507e:	2208      	movs	r2, #8
 8005080:	305c      	adds	r0, #92	@ 0x5c
 8005082:	f000 f9f9 	bl	8005478 <memset>
 8005086:	4b0d      	ldr	r3, [pc, #52]	@ (80050bc <std+0x58>)
 8005088:	6263      	str	r3, [r4, #36]	@ 0x24
 800508a:	4b0d      	ldr	r3, [pc, #52]	@ (80050c0 <std+0x5c>)
 800508c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800508e:	4b0d      	ldr	r3, [pc, #52]	@ (80050c4 <std+0x60>)
 8005090:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005092:	4b0d      	ldr	r3, [pc, #52]	@ (80050c8 <std+0x64>)
 8005094:	6323      	str	r3, [r4, #48]	@ 0x30
 8005096:	4b0d      	ldr	r3, [pc, #52]	@ (80050cc <std+0x68>)
 8005098:	6224      	str	r4, [r4, #32]
 800509a:	429c      	cmp	r4, r3
 800509c:	d006      	beq.n	80050ac <std+0x48>
 800509e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80050a2:	4294      	cmp	r4, r2
 80050a4:	d002      	beq.n	80050ac <std+0x48>
 80050a6:	33d0      	adds	r3, #208	@ 0xd0
 80050a8:	429c      	cmp	r4, r3
 80050aa:	d105      	bne.n	80050b8 <std+0x54>
 80050ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80050b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050b4:	f000 ba5c 	b.w	8005570 <__retarget_lock_init_recursive>
 80050b8:	bd10      	pop	{r4, pc}
 80050ba:	bf00      	nop
 80050bc:	080052c9 	.word	0x080052c9
 80050c0:	080052eb 	.word	0x080052eb
 80050c4:	08005323 	.word	0x08005323
 80050c8:	08005347 	.word	0x08005347
 80050cc:	200002d4 	.word	0x200002d4

080050d0 <stdio_exit_handler>:
 80050d0:	4a02      	ldr	r2, [pc, #8]	@ (80050dc <stdio_exit_handler+0xc>)
 80050d2:	4903      	ldr	r1, [pc, #12]	@ (80050e0 <stdio_exit_handler+0x10>)
 80050d4:	4803      	ldr	r0, [pc, #12]	@ (80050e4 <stdio_exit_handler+0x14>)
 80050d6:	f000 b869 	b.w	80051ac <_fwalk_sglue>
 80050da:	bf00      	nop
 80050dc:	2000000c 	.word	0x2000000c
 80050e0:	08006ea9 	.word	0x08006ea9
 80050e4:	2000001c 	.word	0x2000001c

080050e8 <cleanup_stdio>:
 80050e8:	6841      	ldr	r1, [r0, #4]
 80050ea:	4b0c      	ldr	r3, [pc, #48]	@ (800511c <cleanup_stdio+0x34>)
 80050ec:	4299      	cmp	r1, r3
 80050ee:	b510      	push	{r4, lr}
 80050f0:	4604      	mov	r4, r0
 80050f2:	d001      	beq.n	80050f8 <cleanup_stdio+0x10>
 80050f4:	f001 fed8 	bl	8006ea8 <_fflush_r>
 80050f8:	68a1      	ldr	r1, [r4, #8]
 80050fa:	4b09      	ldr	r3, [pc, #36]	@ (8005120 <cleanup_stdio+0x38>)
 80050fc:	4299      	cmp	r1, r3
 80050fe:	d002      	beq.n	8005106 <cleanup_stdio+0x1e>
 8005100:	4620      	mov	r0, r4
 8005102:	f001 fed1 	bl	8006ea8 <_fflush_r>
 8005106:	68e1      	ldr	r1, [r4, #12]
 8005108:	4b06      	ldr	r3, [pc, #24]	@ (8005124 <cleanup_stdio+0x3c>)
 800510a:	4299      	cmp	r1, r3
 800510c:	d004      	beq.n	8005118 <cleanup_stdio+0x30>
 800510e:	4620      	mov	r0, r4
 8005110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005114:	f001 bec8 	b.w	8006ea8 <_fflush_r>
 8005118:	bd10      	pop	{r4, pc}
 800511a:	bf00      	nop
 800511c:	200002d4 	.word	0x200002d4
 8005120:	2000033c 	.word	0x2000033c
 8005124:	200003a4 	.word	0x200003a4

08005128 <global_stdio_init.part.0>:
 8005128:	b510      	push	{r4, lr}
 800512a:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <global_stdio_init.part.0+0x30>)
 800512c:	4c0b      	ldr	r4, [pc, #44]	@ (800515c <global_stdio_init.part.0+0x34>)
 800512e:	4a0c      	ldr	r2, [pc, #48]	@ (8005160 <global_stdio_init.part.0+0x38>)
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	4620      	mov	r0, r4
 8005134:	2200      	movs	r2, #0
 8005136:	2104      	movs	r1, #4
 8005138:	f7ff ff94 	bl	8005064 <std>
 800513c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005140:	2201      	movs	r2, #1
 8005142:	2109      	movs	r1, #9
 8005144:	f7ff ff8e 	bl	8005064 <std>
 8005148:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800514c:	2202      	movs	r2, #2
 800514e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005152:	2112      	movs	r1, #18
 8005154:	f7ff bf86 	b.w	8005064 <std>
 8005158:	2000040c 	.word	0x2000040c
 800515c:	200002d4 	.word	0x200002d4
 8005160:	080050d1 	.word	0x080050d1

08005164 <__sfp_lock_acquire>:
 8005164:	4801      	ldr	r0, [pc, #4]	@ (800516c <__sfp_lock_acquire+0x8>)
 8005166:	f000 ba04 	b.w	8005572 <__retarget_lock_acquire_recursive>
 800516a:	bf00      	nop
 800516c:	20000415 	.word	0x20000415

08005170 <__sfp_lock_release>:
 8005170:	4801      	ldr	r0, [pc, #4]	@ (8005178 <__sfp_lock_release+0x8>)
 8005172:	f000 b9ff 	b.w	8005574 <__retarget_lock_release_recursive>
 8005176:	bf00      	nop
 8005178:	20000415 	.word	0x20000415

0800517c <__sinit>:
 800517c:	b510      	push	{r4, lr}
 800517e:	4604      	mov	r4, r0
 8005180:	f7ff fff0 	bl	8005164 <__sfp_lock_acquire>
 8005184:	6a23      	ldr	r3, [r4, #32]
 8005186:	b11b      	cbz	r3, 8005190 <__sinit+0x14>
 8005188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800518c:	f7ff bff0 	b.w	8005170 <__sfp_lock_release>
 8005190:	4b04      	ldr	r3, [pc, #16]	@ (80051a4 <__sinit+0x28>)
 8005192:	6223      	str	r3, [r4, #32]
 8005194:	4b04      	ldr	r3, [pc, #16]	@ (80051a8 <__sinit+0x2c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1f5      	bne.n	8005188 <__sinit+0xc>
 800519c:	f7ff ffc4 	bl	8005128 <global_stdio_init.part.0>
 80051a0:	e7f2      	b.n	8005188 <__sinit+0xc>
 80051a2:	bf00      	nop
 80051a4:	080050e9 	.word	0x080050e9
 80051a8:	2000040c 	.word	0x2000040c

080051ac <_fwalk_sglue>:
 80051ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051b0:	4607      	mov	r7, r0
 80051b2:	4688      	mov	r8, r1
 80051b4:	4614      	mov	r4, r2
 80051b6:	2600      	movs	r6, #0
 80051b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051bc:	f1b9 0901 	subs.w	r9, r9, #1
 80051c0:	d505      	bpl.n	80051ce <_fwalk_sglue+0x22>
 80051c2:	6824      	ldr	r4, [r4, #0]
 80051c4:	2c00      	cmp	r4, #0
 80051c6:	d1f7      	bne.n	80051b8 <_fwalk_sglue+0xc>
 80051c8:	4630      	mov	r0, r6
 80051ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ce:	89ab      	ldrh	r3, [r5, #12]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d907      	bls.n	80051e4 <_fwalk_sglue+0x38>
 80051d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051d8:	3301      	adds	r3, #1
 80051da:	d003      	beq.n	80051e4 <_fwalk_sglue+0x38>
 80051dc:	4629      	mov	r1, r5
 80051de:	4638      	mov	r0, r7
 80051e0:	47c0      	blx	r8
 80051e2:	4306      	orrs	r6, r0
 80051e4:	3568      	adds	r5, #104	@ 0x68
 80051e6:	e7e9      	b.n	80051bc <_fwalk_sglue+0x10>

080051e8 <iprintf>:
 80051e8:	b40f      	push	{r0, r1, r2, r3}
 80051ea:	b507      	push	{r0, r1, r2, lr}
 80051ec:	4906      	ldr	r1, [pc, #24]	@ (8005208 <iprintf+0x20>)
 80051ee:	ab04      	add	r3, sp, #16
 80051f0:	6808      	ldr	r0, [r1, #0]
 80051f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80051f6:	6881      	ldr	r1, [r0, #8]
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	f001 fcb9 	bl	8006b70 <_vfiprintf_r>
 80051fe:	b003      	add	sp, #12
 8005200:	f85d eb04 	ldr.w	lr, [sp], #4
 8005204:	b004      	add	sp, #16
 8005206:	4770      	bx	lr
 8005208:	20000018 	.word	0x20000018

0800520c <_puts_r>:
 800520c:	6a03      	ldr	r3, [r0, #32]
 800520e:	b570      	push	{r4, r5, r6, lr}
 8005210:	6884      	ldr	r4, [r0, #8]
 8005212:	4605      	mov	r5, r0
 8005214:	460e      	mov	r6, r1
 8005216:	b90b      	cbnz	r3, 800521c <_puts_r+0x10>
 8005218:	f7ff ffb0 	bl	800517c <__sinit>
 800521c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800521e:	07db      	lsls	r3, r3, #31
 8005220:	d405      	bmi.n	800522e <_puts_r+0x22>
 8005222:	89a3      	ldrh	r3, [r4, #12]
 8005224:	0598      	lsls	r0, r3, #22
 8005226:	d402      	bmi.n	800522e <_puts_r+0x22>
 8005228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800522a:	f000 f9a2 	bl	8005572 <__retarget_lock_acquire_recursive>
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	0719      	lsls	r1, r3, #28
 8005232:	d502      	bpl.n	800523a <_puts_r+0x2e>
 8005234:	6923      	ldr	r3, [r4, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d135      	bne.n	80052a6 <_puts_r+0x9a>
 800523a:	4621      	mov	r1, r4
 800523c:	4628      	mov	r0, r5
 800523e:	f000 f8c5 	bl	80053cc <__swsetup_r>
 8005242:	b380      	cbz	r0, 80052a6 <_puts_r+0x9a>
 8005244:	f04f 35ff 	mov.w	r5, #4294967295
 8005248:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800524a:	07da      	lsls	r2, r3, #31
 800524c:	d405      	bmi.n	800525a <_puts_r+0x4e>
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	059b      	lsls	r3, r3, #22
 8005252:	d402      	bmi.n	800525a <_puts_r+0x4e>
 8005254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005256:	f000 f98d 	bl	8005574 <__retarget_lock_release_recursive>
 800525a:	4628      	mov	r0, r5
 800525c:	bd70      	pop	{r4, r5, r6, pc}
 800525e:	2b00      	cmp	r3, #0
 8005260:	da04      	bge.n	800526c <_puts_r+0x60>
 8005262:	69a2      	ldr	r2, [r4, #24]
 8005264:	429a      	cmp	r2, r3
 8005266:	dc17      	bgt.n	8005298 <_puts_r+0x8c>
 8005268:	290a      	cmp	r1, #10
 800526a:	d015      	beq.n	8005298 <_puts_r+0x8c>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	6022      	str	r2, [r4, #0]
 8005272:	7019      	strb	r1, [r3, #0]
 8005274:	68a3      	ldr	r3, [r4, #8]
 8005276:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800527a:	3b01      	subs	r3, #1
 800527c:	60a3      	str	r3, [r4, #8]
 800527e:	2900      	cmp	r1, #0
 8005280:	d1ed      	bne.n	800525e <_puts_r+0x52>
 8005282:	2b00      	cmp	r3, #0
 8005284:	da11      	bge.n	80052aa <_puts_r+0x9e>
 8005286:	4622      	mov	r2, r4
 8005288:	210a      	movs	r1, #10
 800528a:	4628      	mov	r0, r5
 800528c:	f000 f85f 	bl	800534e <__swbuf_r>
 8005290:	3001      	adds	r0, #1
 8005292:	d0d7      	beq.n	8005244 <_puts_r+0x38>
 8005294:	250a      	movs	r5, #10
 8005296:	e7d7      	b.n	8005248 <_puts_r+0x3c>
 8005298:	4622      	mov	r2, r4
 800529a:	4628      	mov	r0, r5
 800529c:	f000 f857 	bl	800534e <__swbuf_r>
 80052a0:	3001      	adds	r0, #1
 80052a2:	d1e7      	bne.n	8005274 <_puts_r+0x68>
 80052a4:	e7ce      	b.n	8005244 <_puts_r+0x38>
 80052a6:	3e01      	subs	r6, #1
 80052a8:	e7e4      	b.n	8005274 <_puts_r+0x68>
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	6022      	str	r2, [r4, #0]
 80052b0:	220a      	movs	r2, #10
 80052b2:	701a      	strb	r2, [r3, #0]
 80052b4:	e7ee      	b.n	8005294 <_puts_r+0x88>
	...

080052b8 <puts>:
 80052b8:	4b02      	ldr	r3, [pc, #8]	@ (80052c4 <puts+0xc>)
 80052ba:	4601      	mov	r1, r0
 80052bc:	6818      	ldr	r0, [r3, #0]
 80052be:	f7ff bfa5 	b.w	800520c <_puts_r>
 80052c2:	bf00      	nop
 80052c4:	20000018 	.word	0x20000018

080052c8 <__sread>:
 80052c8:	b510      	push	{r4, lr}
 80052ca:	460c      	mov	r4, r1
 80052cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d0:	f000 f900 	bl	80054d4 <_read_r>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	bfab      	itete	ge
 80052d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80052da:	89a3      	ldrhlt	r3, [r4, #12]
 80052dc:	181b      	addge	r3, r3, r0
 80052de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80052e2:	bfac      	ite	ge
 80052e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80052e6:	81a3      	strhlt	r3, [r4, #12]
 80052e8:	bd10      	pop	{r4, pc}

080052ea <__swrite>:
 80052ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ee:	461f      	mov	r7, r3
 80052f0:	898b      	ldrh	r3, [r1, #12]
 80052f2:	05db      	lsls	r3, r3, #23
 80052f4:	4605      	mov	r5, r0
 80052f6:	460c      	mov	r4, r1
 80052f8:	4616      	mov	r6, r2
 80052fa:	d505      	bpl.n	8005308 <__swrite+0x1e>
 80052fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005300:	2302      	movs	r3, #2
 8005302:	2200      	movs	r2, #0
 8005304:	f000 f8d4 	bl	80054b0 <_lseek_r>
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800530e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005312:	81a3      	strh	r3, [r4, #12]
 8005314:	4632      	mov	r2, r6
 8005316:	463b      	mov	r3, r7
 8005318:	4628      	mov	r0, r5
 800531a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800531e:	f000 b8eb 	b.w	80054f8 <_write_r>

08005322 <__sseek>:
 8005322:	b510      	push	{r4, lr}
 8005324:	460c      	mov	r4, r1
 8005326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532a:	f000 f8c1 	bl	80054b0 <_lseek_r>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	bf15      	itete	ne
 8005334:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005336:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800533a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800533e:	81a3      	strheq	r3, [r4, #12]
 8005340:	bf18      	it	ne
 8005342:	81a3      	strhne	r3, [r4, #12]
 8005344:	bd10      	pop	{r4, pc}

08005346 <__sclose>:
 8005346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800534a:	f000 b8a1 	b.w	8005490 <_close_r>

0800534e <__swbuf_r>:
 800534e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005350:	460e      	mov	r6, r1
 8005352:	4614      	mov	r4, r2
 8005354:	4605      	mov	r5, r0
 8005356:	b118      	cbz	r0, 8005360 <__swbuf_r+0x12>
 8005358:	6a03      	ldr	r3, [r0, #32]
 800535a:	b90b      	cbnz	r3, 8005360 <__swbuf_r+0x12>
 800535c:	f7ff ff0e 	bl	800517c <__sinit>
 8005360:	69a3      	ldr	r3, [r4, #24]
 8005362:	60a3      	str	r3, [r4, #8]
 8005364:	89a3      	ldrh	r3, [r4, #12]
 8005366:	071a      	lsls	r2, r3, #28
 8005368:	d501      	bpl.n	800536e <__swbuf_r+0x20>
 800536a:	6923      	ldr	r3, [r4, #16]
 800536c:	b943      	cbnz	r3, 8005380 <__swbuf_r+0x32>
 800536e:	4621      	mov	r1, r4
 8005370:	4628      	mov	r0, r5
 8005372:	f000 f82b 	bl	80053cc <__swsetup_r>
 8005376:	b118      	cbz	r0, 8005380 <__swbuf_r+0x32>
 8005378:	f04f 37ff 	mov.w	r7, #4294967295
 800537c:	4638      	mov	r0, r7
 800537e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	6922      	ldr	r2, [r4, #16]
 8005384:	1a98      	subs	r0, r3, r2
 8005386:	6963      	ldr	r3, [r4, #20]
 8005388:	b2f6      	uxtb	r6, r6
 800538a:	4283      	cmp	r3, r0
 800538c:	4637      	mov	r7, r6
 800538e:	dc05      	bgt.n	800539c <__swbuf_r+0x4e>
 8005390:	4621      	mov	r1, r4
 8005392:	4628      	mov	r0, r5
 8005394:	f001 fd88 	bl	8006ea8 <_fflush_r>
 8005398:	2800      	cmp	r0, #0
 800539a:	d1ed      	bne.n	8005378 <__swbuf_r+0x2a>
 800539c:	68a3      	ldr	r3, [r4, #8]
 800539e:	3b01      	subs	r3, #1
 80053a0:	60a3      	str	r3, [r4, #8]
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	6022      	str	r2, [r4, #0]
 80053a8:	701e      	strb	r6, [r3, #0]
 80053aa:	6962      	ldr	r2, [r4, #20]
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d004      	beq.n	80053bc <__swbuf_r+0x6e>
 80053b2:	89a3      	ldrh	r3, [r4, #12]
 80053b4:	07db      	lsls	r3, r3, #31
 80053b6:	d5e1      	bpl.n	800537c <__swbuf_r+0x2e>
 80053b8:	2e0a      	cmp	r6, #10
 80053ba:	d1df      	bne.n	800537c <__swbuf_r+0x2e>
 80053bc:	4621      	mov	r1, r4
 80053be:	4628      	mov	r0, r5
 80053c0:	f001 fd72 	bl	8006ea8 <_fflush_r>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d0d9      	beq.n	800537c <__swbuf_r+0x2e>
 80053c8:	e7d6      	b.n	8005378 <__swbuf_r+0x2a>
	...

080053cc <__swsetup_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4b29      	ldr	r3, [pc, #164]	@ (8005474 <__swsetup_r+0xa8>)
 80053d0:	4605      	mov	r5, r0
 80053d2:	6818      	ldr	r0, [r3, #0]
 80053d4:	460c      	mov	r4, r1
 80053d6:	b118      	cbz	r0, 80053e0 <__swsetup_r+0x14>
 80053d8:	6a03      	ldr	r3, [r0, #32]
 80053da:	b90b      	cbnz	r3, 80053e0 <__swsetup_r+0x14>
 80053dc:	f7ff fece 	bl	800517c <__sinit>
 80053e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053e4:	0719      	lsls	r1, r3, #28
 80053e6:	d422      	bmi.n	800542e <__swsetup_r+0x62>
 80053e8:	06da      	lsls	r2, r3, #27
 80053ea:	d407      	bmi.n	80053fc <__swsetup_r+0x30>
 80053ec:	2209      	movs	r2, #9
 80053ee:	602a      	str	r2, [r5, #0]
 80053f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053f4:	81a3      	strh	r3, [r4, #12]
 80053f6:	f04f 30ff 	mov.w	r0, #4294967295
 80053fa:	e033      	b.n	8005464 <__swsetup_r+0x98>
 80053fc:	0758      	lsls	r0, r3, #29
 80053fe:	d512      	bpl.n	8005426 <__swsetup_r+0x5a>
 8005400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005402:	b141      	cbz	r1, 8005416 <__swsetup_r+0x4a>
 8005404:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005408:	4299      	cmp	r1, r3
 800540a:	d002      	beq.n	8005412 <__swsetup_r+0x46>
 800540c:	4628      	mov	r0, r5
 800540e:	f000 ff0b 	bl	8006228 <_free_r>
 8005412:	2300      	movs	r3, #0
 8005414:	6363      	str	r3, [r4, #52]	@ 0x34
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800541c:	81a3      	strh	r3, [r4, #12]
 800541e:	2300      	movs	r3, #0
 8005420:	6063      	str	r3, [r4, #4]
 8005422:	6923      	ldr	r3, [r4, #16]
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	89a3      	ldrh	r3, [r4, #12]
 8005428:	f043 0308 	orr.w	r3, r3, #8
 800542c:	81a3      	strh	r3, [r4, #12]
 800542e:	6923      	ldr	r3, [r4, #16]
 8005430:	b94b      	cbnz	r3, 8005446 <__swsetup_r+0x7a>
 8005432:	89a3      	ldrh	r3, [r4, #12]
 8005434:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800543c:	d003      	beq.n	8005446 <__swsetup_r+0x7a>
 800543e:	4621      	mov	r1, r4
 8005440:	4628      	mov	r0, r5
 8005442:	f001 fd7f 	bl	8006f44 <__smakebuf_r>
 8005446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800544a:	f013 0201 	ands.w	r2, r3, #1
 800544e:	d00a      	beq.n	8005466 <__swsetup_r+0x9a>
 8005450:	2200      	movs	r2, #0
 8005452:	60a2      	str	r2, [r4, #8]
 8005454:	6962      	ldr	r2, [r4, #20]
 8005456:	4252      	negs	r2, r2
 8005458:	61a2      	str	r2, [r4, #24]
 800545a:	6922      	ldr	r2, [r4, #16]
 800545c:	b942      	cbnz	r2, 8005470 <__swsetup_r+0xa4>
 800545e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005462:	d1c5      	bne.n	80053f0 <__swsetup_r+0x24>
 8005464:	bd38      	pop	{r3, r4, r5, pc}
 8005466:	0799      	lsls	r1, r3, #30
 8005468:	bf58      	it	pl
 800546a:	6962      	ldrpl	r2, [r4, #20]
 800546c:	60a2      	str	r2, [r4, #8]
 800546e:	e7f4      	b.n	800545a <__swsetup_r+0x8e>
 8005470:	2000      	movs	r0, #0
 8005472:	e7f7      	b.n	8005464 <__swsetup_r+0x98>
 8005474:	20000018 	.word	0x20000018

08005478 <memset>:
 8005478:	4402      	add	r2, r0
 800547a:	4603      	mov	r3, r0
 800547c:	4293      	cmp	r3, r2
 800547e:	d100      	bne.n	8005482 <memset+0xa>
 8005480:	4770      	bx	lr
 8005482:	f803 1b01 	strb.w	r1, [r3], #1
 8005486:	e7f9      	b.n	800547c <memset+0x4>

08005488 <_localeconv_r>:
 8005488:	4800      	ldr	r0, [pc, #0]	@ (800548c <_localeconv_r+0x4>)
 800548a:	4770      	bx	lr
 800548c:	20000158 	.word	0x20000158

08005490 <_close_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4d06      	ldr	r5, [pc, #24]	@ (80054ac <_close_r+0x1c>)
 8005494:	2300      	movs	r3, #0
 8005496:	4604      	mov	r4, r0
 8005498:	4608      	mov	r0, r1
 800549a:	602b      	str	r3, [r5, #0]
 800549c:	f7fc f9df 	bl	800185e <_close>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d102      	bne.n	80054aa <_close_r+0x1a>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	b103      	cbz	r3, 80054aa <_close_r+0x1a>
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	20000410 	.word	0x20000410

080054b0 <_lseek_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4d07      	ldr	r5, [pc, #28]	@ (80054d0 <_lseek_r+0x20>)
 80054b4:	4604      	mov	r4, r0
 80054b6:	4608      	mov	r0, r1
 80054b8:	4611      	mov	r1, r2
 80054ba:	2200      	movs	r2, #0
 80054bc:	602a      	str	r2, [r5, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	f7fc f9f4 	bl	80018ac <_lseek>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d102      	bne.n	80054ce <_lseek_r+0x1e>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	b103      	cbz	r3, 80054ce <_lseek_r+0x1e>
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	20000410 	.word	0x20000410

080054d4 <_read_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4d07      	ldr	r5, [pc, #28]	@ (80054f4 <_read_r+0x20>)
 80054d8:	4604      	mov	r4, r0
 80054da:	4608      	mov	r0, r1
 80054dc:	4611      	mov	r1, r2
 80054de:	2200      	movs	r2, #0
 80054e0:	602a      	str	r2, [r5, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f7fc f982 	bl	80017ec <_read>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_read_r+0x1e>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_read_r+0x1e>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	20000410 	.word	0x20000410

080054f8 <_write_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4d07      	ldr	r5, [pc, #28]	@ (8005518 <_write_r+0x20>)
 80054fc:	4604      	mov	r4, r0
 80054fe:	4608      	mov	r0, r1
 8005500:	4611      	mov	r1, r2
 8005502:	2200      	movs	r2, #0
 8005504:	602a      	str	r2, [r5, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	f7fc f98d 	bl	8001826 <_write>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_write_r+0x1e>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_write_r+0x1e>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	20000410 	.word	0x20000410

0800551c <__errno>:
 800551c:	4b01      	ldr	r3, [pc, #4]	@ (8005524 <__errno+0x8>)
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	20000018 	.word	0x20000018

08005528 <__libc_init_array>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	4d0d      	ldr	r5, [pc, #52]	@ (8005560 <__libc_init_array+0x38>)
 800552c:	4c0d      	ldr	r4, [pc, #52]	@ (8005564 <__libc_init_array+0x3c>)
 800552e:	1b64      	subs	r4, r4, r5
 8005530:	10a4      	asrs	r4, r4, #2
 8005532:	2600      	movs	r6, #0
 8005534:	42a6      	cmp	r6, r4
 8005536:	d109      	bne.n	800554c <__libc_init_array+0x24>
 8005538:	4d0b      	ldr	r5, [pc, #44]	@ (8005568 <__libc_init_array+0x40>)
 800553a:	4c0c      	ldr	r4, [pc, #48]	@ (800556c <__libc_init_array+0x44>)
 800553c:	f001 fe2e 	bl	800719c <_init>
 8005540:	1b64      	subs	r4, r4, r5
 8005542:	10a4      	asrs	r4, r4, #2
 8005544:	2600      	movs	r6, #0
 8005546:	42a6      	cmp	r6, r4
 8005548:	d105      	bne.n	8005556 <__libc_init_array+0x2e>
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005550:	4798      	blx	r3
 8005552:	3601      	adds	r6, #1
 8005554:	e7ee      	b.n	8005534 <__libc_init_array+0xc>
 8005556:	f855 3b04 	ldr.w	r3, [r5], #4
 800555a:	4798      	blx	r3
 800555c:	3601      	adds	r6, #1
 800555e:	e7f2      	b.n	8005546 <__libc_init_array+0x1e>
 8005560:	080075a4 	.word	0x080075a4
 8005564:	080075a4 	.word	0x080075a4
 8005568:	080075a4 	.word	0x080075a4
 800556c:	080075a8 	.word	0x080075a8

08005570 <__retarget_lock_init_recursive>:
 8005570:	4770      	bx	lr

08005572 <__retarget_lock_acquire_recursive>:
 8005572:	4770      	bx	lr

08005574 <__retarget_lock_release_recursive>:
 8005574:	4770      	bx	lr

08005576 <quorem>:
 8005576:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557a:	6903      	ldr	r3, [r0, #16]
 800557c:	690c      	ldr	r4, [r1, #16]
 800557e:	42a3      	cmp	r3, r4
 8005580:	4607      	mov	r7, r0
 8005582:	db7e      	blt.n	8005682 <quorem+0x10c>
 8005584:	3c01      	subs	r4, #1
 8005586:	f101 0814 	add.w	r8, r1, #20
 800558a:	00a3      	lsls	r3, r4, #2
 800558c:	f100 0514 	add.w	r5, r0, #20
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800559c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055a0:	3301      	adds	r3, #1
 80055a2:	429a      	cmp	r2, r3
 80055a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80055ac:	d32e      	bcc.n	800560c <quorem+0x96>
 80055ae:	f04f 0a00 	mov.w	sl, #0
 80055b2:	46c4      	mov	ip, r8
 80055b4:	46ae      	mov	lr, r5
 80055b6:	46d3      	mov	fp, sl
 80055b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055bc:	b298      	uxth	r0, r3
 80055be:	fb06 a000 	mla	r0, r6, r0, sl
 80055c2:	0c02      	lsrs	r2, r0, #16
 80055c4:	0c1b      	lsrs	r3, r3, #16
 80055c6:	fb06 2303 	mla	r3, r6, r3, r2
 80055ca:	f8de 2000 	ldr.w	r2, [lr]
 80055ce:	b280      	uxth	r0, r0
 80055d0:	b292      	uxth	r2, r2
 80055d2:	1a12      	subs	r2, r2, r0
 80055d4:	445a      	add	r2, fp
 80055d6:	f8de 0000 	ldr.w	r0, [lr]
 80055da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055de:	b29b      	uxth	r3, r3
 80055e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80055e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80055e8:	b292      	uxth	r2, r2
 80055ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80055ee:	45e1      	cmp	r9, ip
 80055f0:	f84e 2b04 	str.w	r2, [lr], #4
 80055f4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80055f8:	d2de      	bcs.n	80055b8 <quorem+0x42>
 80055fa:	9b00      	ldr	r3, [sp, #0]
 80055fc:	58eb      	ldr	r3, [r5, r3]
 80055fe:	b92b      	cbnz	r3, 800560c <quorem+0x96>
 8005600:	9b01      	ldr	r3, [sp, #4]
 8005602:	3b04      	subs	r3, #4
 8005604:	429d      	cmp	r5, r3
 8005606:	461a      	mov	r2, r3
 8005608:	d32f      	bcc.n	800566a <quorem+0xf4>
 800560a:	613c      	str	r4, [r7, #16]
 800560c:	4638      	mov	r0, r7
 800560e:	f001 f97d 	bl	800690c <__mcmp>
 8005612:	2800      	cmp	r0, #0
 8005614:	db25      	blt.n	8005662 <quorem+0xec>
 8005616:	4629      	mov	r1, r5
 8005618:	2000      	movs	r0, #0
 800561a:	f858 2b04 	ldr.w	r2, [r8], #4
 800561e:	f8d1 c000 	ldr.w	ip, [r1]
 8005622:	fa1f fe82 	uxth.w	lr, r2
 8005626:	fa1f f38c 	uxth.w	r3, ip
 800562a:	eba3 030e 	sub.w	r3, r3, lr
 800562e:	4403      	add	r3, r0
 8005630:	0c12      	lsrs	r2, r2, #16
 8005632:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005636:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800563a:	b29b      	uxth	r3, r3
 800563c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005640:	45c1      	cmp	r9, r8
 8005642:	f841 3b04 	str.w	r3, [r1], #4
 8005646:	ea4f 4022 	mov.w	r0, r2, asr #16
 800564a:	d2e6      	bcs.n	800561a <quorem+0xa4>
 800564c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005650:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005654:	b922      	cbnz	r2, 8005660 <quorem+0xea>
 8005656:	3b04      	subs	r3, #4
 8005658:	429d      	cmp	r5, r3
 800565a:	461a      	mov	r2, r3
 800565c:	d30b      	bcc.n	8005676 <quorem+0x100>
 800565e:	613c      	str	r4, [r7, #16]
 8005660:	3601      	adds	r6, #1
 8005662:	4630      	mov	r0, r6
 8005664:	b003      	add	sp, #12
 8005666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	3b04      	subs	r3, #4
 800566e:	2a00      	cmp	r2, #0
 8005670:	d1cb      	bne.n	800560a <quorem+0x94>
 8005672:	3c01      	subs	r4, #1
 8005674:	e7c6      	b.n	8005604 <quorem+0x8e>
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	3b04      	subs	r3, #4
 800567a:	2a00      	cmp	r2, #0
 800567c:	d1ef      	bne.n	800565e <quorem+0xe8>
 800567e:	3c01      	subs	r4, #1
 8005680:	e7ea      	b.n	8005658 <quorem+0xe2>
 8005682:	2000      	movs	r0, #0
 8005684:	e7ee      	b.n	8005664 <quorem+0xee>
	...

08005688 <_dtoa_r>:
 8005688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568c:	69c7      	ldr	r7, [r0, #28]
 800568e:	b097      	sub	sp, #92	@ 0x5c
 8005690:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005694:	ec55 4b10 	vmov	r4, r5, d0
 8005698:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800569a:	9107      	str	r1, [sp, #28]
 800569c:	4681      	mov	r9, r0
 800569e:	920c      	str	r2, [sp, #48]	@ 0x30
 80056a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80056a2:	b97f      	cbnz	r7, 80056c4 <_dtoa_r+0x3c>
 80056a4:	2010      	movs	r0, #16
 80056a6:	f000 fe09 	bl	80062bc <malloc>
 80056aa:	4602      	mov	r2, r0
 80056ac:	f8c9 001c 	str.w	r0, [r9, #28]
 80056b0:	b920      	cbnz	r0, 80056bc <_dtoa_r+0x34>
 80056b2:	4ba9      	ldr	r3, [pc, #676]	@ (8005958 <_dtoa_r+0x2d0>)
 80056b4:	21ef      	movs	r1, #239	@ 0xef
 80056b6:	48a9      	ldr	r0, [pc, #676]	@ (800595c <_dtoa_r+0x2d4>)
 80056b8:	f001 fcc0 	bl	800703c <__assert_func>
 80056bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80056c0:	6007      	str	r7, [r0, #0]
 80056c2:	60c7      	str	r7, [r0, #12]
 80056c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80056c8:	6819      	ldr	r1, [r3, #0]
 80056ca:	b159      	cbz	r1, 80056e4 <_dtoa_r+0x5c>
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	604a      	str	r2, [r1, #4]
 80056d0:	2301      	movs	r3, #1
 80056d2:	4093      	lsls	r3, r2
 80056d4:	608b      	str	r3, [r1, #8]
 80056d6:	4648      	mov	r0, r9
 80056d8:	f000 fee6 	bl	80064a8 <_Bfree>
 80056dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	1e2b      	subs	r3, r5, #0
 80056e6:	bfb9      	ittee	lt
 80056e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80056ec:	9305      	strlt	r3, [sp, #20]
 80056ee:	2300      	movge	r3, #0
 80056f0:	6033      	strge	r3, [r6, #0]
 80056f2:	9f05      	ldr	r7, [sp, #20]
 80056f4:	4b9a      	ldr	r3, [pc, #616]	@ (8005960 <_dtoa_r+0x2d8>)
 80056f6:	bfbc      	itt	lt
 80056f8:	2201      	movlt	r2, #1
 80056fa:	6032      	strlt	r2, [r6, #0]
 80056fc:	43bb      	bics	r3, r7
 80056fe:	d112      	bne.n	8005726 <_dtoa_r+0x9e>
 8005700:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005702:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800570c:	4323      	orrs	r3, r4
 800570e:	f000 855a 	beq.w	80061c6 <_dtoa_r+0xb3e>
 8005712:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005714:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005974 <_dtoa_r+0x2ec>
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 855c 	beq.w	80061d6 <_dtoa_r+0xb4e>
 800571e:	f10a 0303 	add.w	r3, sl, #3
 8005722:	f000 bd56 	b.w	80061d2 <_dtoa_r+0xb4a>
 8005726:	ed9d 7b04 	vldr	d7, [sp, #16]
 800572a:	2200      	movs	r2, #0
 800572c:	ec51 0b17 	vmov	r0, r1, d7
 8005730:	2300      	movs	r3, #0
 8005732:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005736:	f7fb f9e7 	bl	8000b08 <__aeabi_dcmpeq>
 800573a:	4680      	mov	r8, r0
 800573c:	b158      	cbz	r0, 8005756 <_dtoa_r+0xce>
 800573e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005740:	2301      	movs	r3, #1
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005746:	b113      	cbz	r3, 800574e <_dtoa_r+0xc6>
 8005748:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800574a:	4b86      	ldr	r3, [pc, #536]	@ (8005964 <_dtoa_r+0x2dc>)
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005978 <_dtoa_r+0x2f0>
 8005752:	f000 bd40 	b.w	80061d6 <_dtoa_r+0xb4e>
 8005756:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800575a:	aa14      	add	r2, sp, #80	@ 0x50
 800575c:	a915      	add	r1, sp, #84	@ 0x54
 800575e:	4648      	mov	r0, r9
 8005760:	f001 f984 	bl	8006a6c <__d2b>
 8005764:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005768:	9002      	str	r0, [sp, #8]
 800576a:	2e00      	cmp	r6, #0
 800576c:	d078      	beq.n	8005860 <_dtoa_r+0x1d8>
 800576e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005770:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005778:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800577c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005780:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005784:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005788:	4619      	mov	r1, r3
 800578a:	2200      	movs	r2, #0
 800578c:	4b76      	ldr	r3, [pc, #472]	@ (8005968 <_dtoa_r+0x2e0>)
 800578e:	f7fa fd9b 	bl	80002c8 <__aeabi_dsub>
 8005792:	a36b      	add	r3, pc, #428	@ (adr r3, 8005940 <_dtoa_r+0x2b8>)
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	f7fa ff4e 	bl	8000638 <__aeabi_dmul>
 800579c:	a36a      	add	r3, pc, #424	@ (adr r3, 8005948 <_dtoa_r+0x2c0>)
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	f7fa fd93 	bl	80002cc <__adddf3>
 80057a6:	4604      	mov	r4, r0
 80057a8:	4630      	mov	r0, r6
 80057aa:	460d      	mov	r5, r1
 80057ac:	f7fa feda 	bl	8000564 <__aeabi_i2d>
 80057b0:	a367      	add	r3, pc, #412	@ (adr r3, 8005950 <_dtoa_r+0x2c8>)
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f7fa ff3f 	bl	8000638 <__aeabi_dmul>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4620      	mov	r0, r4
 80057c0:	4629      	mov	r1, r5
 80057c2:	f7fa fd83 	bl	80002cc <__adddf3>
 80057c6:	4604      	mov	r4, r0
 80057c8:	460d      	mov	r5, r1
 80057ca:	f7fb f9e5 	bl	8000b98 <__aeabi_d2iz>
 80057ce:	2200      	movs	r2, #0
 80057d0:	4607      	mov	r7, r0
 80057d2:	2300      	movs	r3, #0
 80057d4:	4620      	mov	r0, r4
 80057d6:	4629      	mov	r1, r5
 80057d8:	f7fb f9a0 	bl	8000b1c <__aeabi_dcmplt>
 80057dc:	b140      	cbz	r0, 80057f0 <_dtoa_r+0x168>
 80057de:	4638      	mov	r0, r7
 80057e0:	f7fa fec0 	bl	8000564 <__aeabi_i2d>
 80057e4:	4622      	mov	r2, r4
 80057e6:	462b      	mov	r3, r5
 80057e8:	f7fb f98e 	bl	8000b08 <__aeabi_dcmpeq>
 80057ec:	b900      	cbnz	r0, 80057f0 <_dtoa_r+0x168>
 80057ee:	3f01      	subs	r7, #1
 80057f0:	2f16      	cmp	r7, #22
 80057f2:	d852      	bhi.n	800589a <_dtoa_r+0x212>
 80057f4:	4b5d      	ldr	r3, [pc, #372]	@ (800596c <_dtoa_r+0x2e4>)
 80057f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005802:	f7fb f98b 	bl	8000b1c <__aeabi_dcmplt>
 8005806:	2800      	cmp	r0, #0
 8005808:	d049      	beq.n	800589e <_dtoa_r+0x216>
 800580a:	3f01      	subs	r7, #1
 800580c:	2300      	movs	r3, #0
 800580e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005810:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005812:	1b9b      	subs	r3, r3, r6
 8005814:	1e5a      	subs	r2, r3, #1
 8005816:	bf45      	ittet	mi
 8005818:	f1c3 0301 	rsbmi	r3, r3, #1
 800581c:	9300      	strmi	r3, [sp, #0]
 800581e:	2300      	movpl	r3, #0
 8005820:	2300      	movmi	r3, #0
 8005822:	9206      	str	r2, [sp, #24]
 8005824:	bf54      	ite	pl
 8005826:	9300      	strpl	r3, [sp, #0]
 8005828:	9306      	strmi	r3, [sp, #24]
 800582a:	2f00      	cmp	r7, #0
 800582c:	db39      	blt.n	80058a2 <_dtoa_r+0x21a>
 800582e:	9b06      	ldr	r3, [sp, #24]
 8005830:	970d      	str	r7, [sp, #52]	@ 0x34
 8005832:	443b      	add	r3, r7
 8005834:	9306      	str	r3, [sp, #24]
 8005836:	2300      	movs	r3, #0
 8005838:	9308      	str	r3, [sp, #32]
 800583a:	9b07      	ldr	r3, [sp, #28]
 800583c:	2b09      	cmp	r3, #9
 800583e:	d863      	bhi.n	8005908 <_dtoa_r+0x280>
 8005840:	2b05      	cmp	r3, #5
 8005842:	bfc4      	itt	gt
 8005844:	3b04      	subgt	r3, #4
 8005846:	9307      	strgt	r3, [sp, #28]
 8005848:	9b07      	ldr	r3, [sp, #28]
 800584a:	f1a3 0302 	sub.w	r3, r3, #2
 800584e:	bfcc      	ite	gt
 8005850:	2400      	movgt	r4, #0
 8005852:	2401      	movle	r4, #1
 8005854:	2b03      	cmp	r3, #3
 8005856:	d863      	bhi.n	8005920 <_dtoa_r+0x298>
 8005858:	e8df f003 	tbb	[pc, r3]
 800585c:	2b375452 	.word	0x2b375452
 8005860:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005864:	441e      	add	r6, r3
 8005866:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800586a:	2b20      	cmp	r3, #32
 800586c:	bfc1      	itttt	gt
 800586e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005872:	409f      	lslgt	r7, r3
 8005874:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005878:	fa24 f303 	lsrgt.w	r3, r4, r3
 800587c:	bfd6      	itet	le
 800587e:	f1c3 0320 	rsble	r3, r3, #32
 8005882:	ea47 0003 	orrgt.w	r0, r7, r3
 8005886:	fa04 f003 	lslle.w	r0, r4, r3
 800588a:	f7fa fe5b 	bl	8000544 <__aeabi_ui2d>
 800588e:	2201      	movs	r2, #1
 8005890:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005894:	3e01      	subs	r6, #1
 8005896:	9212      	str	r2, [sp, #72]	@ 0x48
 8005898:	e776      	b.n	8005788 <_dtoa_r+0x100>
 800589a:	2301      	movs	r3, #1
 800589c:	e7b7      	b.n	800580e <_dtoa_r+0x186>
 800589e:	9010      	str	r0, [sp, #64]	@ 0x40
 80058a0:	e7b6      	b.n	8005810 <_dtoa_r+0x188>
 80058a2:	9b00      	ldr	r3, [sp, #0]
 80058a4:	1bdb      	subs	r3, r3, r7
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	427b      	negs	r3, r7
 80058aa:	9308      	str	r3, [sp, #32]
 80058ac:	2300      	movs	r3, #0
 80058ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80058b0:	e7c3      	b.n	800583a <_dtoa_r+0x1b2>
 80058b2:	2301      	movs	r3, #1
 80058b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058b8:	eb07 0b03 	add.w	fp, r7, r3
 80058bc:	f10b 0301 	add.w	r3, fp, #1
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	9303      	str	r3, [sp, #12]
 80058c4:	bfb8      	it	lt
 80058c6:	2301      	movlt	r3, #1
 80058c8:	e006      	b.n	80058d8 <_dtoa_r+0x250>
 80058ca:	2301      	movs	r3, #1
 80058cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80058ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	dd28      	ble.n	8005926 <_dtoa_r+0x29e>
 80058d4:	469b      	mov	fp, r3
 80058d6:	9303      	str	r3, [sp, #12]
 80058d8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80058dc:	2100      	movs	r1, #0
 80058de:	2204      	movs	r2, #4
 80058e0:	f102 0514 	add.w	r5, r2, #20
 80058e4:	429d      	cmp	r5, r3
 80058e6:	d926      	bls.n	8005936 <_dtoa_r+0x2ae>
 80058e8:	6041      	str	r1, [r0, #4]
 80058ea:	4648      	mov	r0, r9
 80058ec:	f000 fd9c 	bl	8006428 <_Balloc>
 80058f0:	4682      	mov	sl, r0
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d142      	bne.n	800597c <_dtoa_r+0x2f4>
 80058f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005970 <_dtoa_r+0x2e8>)
 80058f8:	4602      	mov	r2, r0
 80058fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80058fe:	e6da      	b.n	80056b6 <_dtoa_r+0x2e>
 8005900:	2300      	movs	r3, #0
 8005902:	e7e3      	b.n	80058cc <_dtoa_r+0x244>
 8005904:	2300      	movs	r3, #0
 8005906:	e7d5      	b.n	80058b4 <_dtoa_r+0x22c>
 8005908:	2401      	movs	r4, #1
 800590a:	2300      	movs	r3, #0
 800590c:	9307      	str	r3, [sp, #28]
 800590e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005910:	f04f 3bff 	mov.w	fp, #4294967295
 8005914:	2200      	movs	r2, #0
 8005916:	f8cd b00c 	str.w	fp, [sp, #12]
 800591a:	2312      	movs	r3, #18
 800591c:	920c      	str	r2, [sp, #48]	@ 0x30
 800591e:	e7db      	b.n	80058d8 <_dtoa_r+0x250>
 8005920:	2301      	movs	r3, #1
 8005922:	9309      	str	r3, [sp, #36]	@ 0x24
 8005924:	e7f4      	b.n	8005910 <_dtoa_r+0x288>
 8005926:	f04f 0b01 	mov.w	fp, #1
 800592a:	f8cd b00c 	str.w	fp, [sp, #12]
 800592e:	465b      	mov	r3, fp
 8005930:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005934:	e7d0      	b.n	80058d8 <_dtoa_r+0x250>
 8005936:	3101      	adds	r1, #1
 8005938:	0052      	lsls	r2, r2, #1
 800593a:	e7d1      	b.n	80058e0 <_dtoa_r+0x258>
 800593c:	f3af 8000 	nop.w
 8005940:	636f4361 	.word	0x636f4361
 8005944:	3fd287a7 	.word	0x3fd287a7
 8005948:	8b60c8b3 	.word	0x8b60c8b3
 800594c:	3fc68a28 	.word	0x3fc68a28
 8005950:	509f79fb 	.word	0x509f79fb
 8005954:	3fd34413 	.word	0x3fd34413
 8005958:	08007265 	.word	0x08007265
 800595c:	0800727c 	.word	0x0800727c
 8005960:	7ff00000 	.word	0x7ff00000
 8005964:	08007235 	.word	0x08007235
 8005968:	3ff80000 	.word	0x3ff80000
 800596c:	080073d0 	.word	0x080073d0
 8005970:	080072d4 	.word	0x080072d4
 8005974:	08007261 	.word	0x08007261
 8005978:	08007234 	.word	0x08007234
 800597c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005980:	6018      	str	r0, [r3, #0]
 8005982:	9b03      	ldr	r3, [sp, #12]
 8005984:	2b0e      	cmp	r3, #14
 8005986:	f200 80a1 	bhi.w	8005acc <_dtoa_r+0x444>
 800598a:	2c00      	cmp	r4, #0
 800598c:	f000 809e 	beq.w	8005acc <_dtoa_r+0x444>
 8005990:	2f00      	cmp	r7, #0
 8005992:	dd33      	ble.n	80059fc <_dtoa_r+0x374>
 8005994:	4b9c      	ldr	r3, [pc, #624]	@ (8005c08 <_dtoa_r+0x580>)
 8005996:	f007 020f 	and.w	r2, r7, #15
 800599a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800599e:	ed93 7b00 	vldr	d7, [r3]
 80059a2:	05f8      	lsls	r0, r7, #23
 80059a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80059a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80059ac:	d516      	bpl.n	80059dc <_dtoa_r+0x354>
 80059ae:	4b97      	ldr	r3, [pc, #604]	@ (8005c0c <_dtoa_r+0x584>)
 80059b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80059b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059b8:	f7fa ff68 	bl	800088c <__aeabi_ddiv>
 80059bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059c0:	f004 040f 	and.w	r4, r4, #15
 80059c4:	2603      	movs	r6, #3
 80059c6:	4d91      	ldr	r5, [pc, #580]	@ (8005c0c <_dtoa_r+0x584>)
 80059c8:	b954      	cbnz	r4, 80059e0 <_dtoa_r+0x358>
 80059ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80059ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059d2:	f7fa ff5b 	bl	800088c <__aeabi_ddiv>
 80059d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059da:	e028      	b.n	8005a2e <_dtoa_r+0x3a6>
 80059dc:	2602      	movs	r6, #2
 80059de:	e7f2      	b.n	80059c6 <_dtoa_r+0x33e>
 80059e0:	07e1      	lsls	r1, r4, #31
 80059e2:	d508      	bpl.n	80059f6 <_dtoa_r+0x36e>
 80059e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80059e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059ec:	f7fa fe24 	bl	8000638 <__aeabi_dmul>
 80059f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80059f4:	3601      	adds	r6, #1
 80059f6:	1064      	asrs	r4, r4, #1
 80059f8:	3508      	adds	r5, #8
 80059fa:	e7e5      	b.n	80059c8 <_dtoa_r+0x340>
 80059fc:	f000 80af 	beq.w	8005b5e <_dtoa_r+0x4d6>
 8005a00:	427c      	negs	r4, r7
 8005a02:	4b81      	ldr	r3, [pc, #516]	@ (8005c08 <_dtoa_r+0x580>)
 8005a04:	4d81      	ldr	r5, [pc, #516]	@ (8005c0c <_dtoa_r+0x584>)
 8005a06:	f004 020f 	and.w	r2, r4, #15
 8005a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a16:	f7fa fe0f 	bl	8000638 <__aeabi_dmul>
 8005a1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a1e:	1124      	asrs	r4, r4, #4
 8005a20:	2300      	movs	r3, #0
 8005a22:	2602      	movs	r6, #2
 8005a24:	2c00      	cmp	r4, #0
 8005a26:	f040 808f 	bne.w	8005b48 <_dtoa_r+0x4c0>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1d3      	bne.n	80059d6 <_dtoa_r+0x34e>
 8005a2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a30:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8094 	beq.w	8005b62 <_dtoa_r+0x4da>
 8005a3a:	4b75      	ldr	r3, [pc, #468]	@ (8005c10 <_dtoa_r+0x588>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	4620      	mov	r0, r4
 8005a40:	4629      	mov	r1, r5
 8005a42:	f7fb f86b 	bl	8000b1c <__aeabi_dcmplt>
 8005a46:	2800      	cmp	r0, #0
 8005a48:	f000 808b 	beq.w	8005b62 <_dtoa_r+0x4da>
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 8087 	beq.w	8005b62 <_dtoa_r+0x4da>
 8005a54:	f1bb 0f00 	cmp.w	fp, #0
 8005a58:	dd34      	ble.n	8005ac4 <_dtoa_r+0x43c>
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	4b6d      	ldr	r3, [pc, #436]	@ (8005c14 <_dtoa_r+0x58c>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	4629      	mov	r1, r5
 8005a62:	f7fa fde9 	bl	8000638 <__aeabi_dmul>
 8005a66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a6a:	f107 38ff 	add.w	r8, r7, #4294967295
 8005a6e:	3601      	adds	r6, #1
 8005a70:	465c      	mov	r4, fp
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7fa fd76 	bl	8000564 <__aeabi_i2d>
 8005a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a7c:	f7fa fddc 	bl	8000638 <__aeabi_dmul>
 8005a80:	4b65      	ldr	r3, [pc, #404]	@ (8005c18 <_dtoa_r+0x590>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	f7fa fc22 	bl	80002cc <__adddf3>
 8005a88:	4605      	mov	r5, r0
 8005a8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a8e:	2c00      	cmp	r4, #0
 8005a90:	d16a      	bne.n	8005b68 <_dtoa_r+0x4e0>
 8005a92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a96:	4b61      	ldr	r3, [pc, #388]	@ (8005c1c <_dtoa_r+0x594>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f7fa fc15 	bl	80002c8 <__aeabi_dsub>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005aa6:	462a      	mov	r2, r5
 8005aa8:	4633      	mov	r3, r6
 8005aaa:	f7fb f855 	bl	8000b58 <__aeabi_dcmpgt>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	f040 8298 	bne.w	8005fe4 <_dtoa_r+0x95c>
 8005ab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ab8:	462a      	mov	r2, r5
 8005aba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005abe:	f7fb f82d 	bl	8000b1c <__aeabi_dcmplt>
 8005ac2:	bb38      	cbnz	r0, 8005b14 <_dtoa_r+0x48c>
 8005ac4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005ac8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005acc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f2c0 8157 	blt.w	8005d82 <_dtoa_r+0x6fa>
 8005ad4:	2f0e      	cmp	r7, #14
 8005ad6:	f300 8154 	bgt.w	8005d82 <_dtoa_r+0x6fa>
 8005ada:	4b4b      	ldr	r3, [pc, #300]	@ (8005c08 <_dtoa_r+0x580>)
 8005adc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ae0:	ed93 7b00 	vldr	d7, [r3]
 8005ae4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	ed8d 7b00 	vstr	d7, [sp]
 8005aec:	f280 80e5 	bge.w	8005cba <_dtoa_r+0x632>
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f300 80e1 	bgt.w	8005cba <_dtoa_r+0x632>
 8005af8:	d10c      	bne.n	8005b14 <_dtoa_r+0x48c>
 8005afa:	4b48      	ldr	r3, [pc, #288]	@ (8005c1c <_dtoa_r+0x594>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	ec51 0b17 	vmov	r0, r1, d7
 8005b02:	f7fa fd99 	bl	8000638 <__aeabi_dmul>
 8005b06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b0a:	f7fb f81b 	bl	8000b44 <__aeabi_dcmpge>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	f000 8266 	beq.w	8005fe0 <_dtoa_r+0x958>
 8005b14:	2400      	movs	r4, #0
 8005b16:	4625      	mov	r5, r4
 8005b18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b1a:	4656      	mov	r6, sl
 8005b1c:	ea6f 0803 	mvn.w	r8, r3
 8005b20:	2700      	movs	r7, #0
 8005b22:	4621      	mov	r1, r4
 8005b24:	4648      	mov	r0, r9
 8005b26:	f000 fcbf 	bl	80064a8 <_Bfree>
 8005b2a:	2d00      	cmp	r5, #0
 8005b2c:	f000 80bd 	beq.w	8005caa <_dtoa_r+0x622>
 8005b30:	b12f      	cbz	r7, 8005b3e <_dtoa_r+0x4b6>
 8005b32:	42af      	cmp	r7, r5
 8005b34:	d003      	beq.n	8005b3e <_dtoa_r+0x4b6>
 8005b36:	4639      	mov	r1, r7
 8005b38:	4648      	mov	r0, r9
 8005b3a:	f000 fcb5 	bl	80064a8 <_Bfree>
 8005b3e:	4629      	mov	r1, r5
 8005b40:	4648      	mov	r0, r9
 8005b42:	f000 fcb1 	bl	80064a8 <_Bfree>
 8005b46:	e0b0      	b.n	8005caa <_dtoa_r+0x622>
 8005b48:	07e2      	lsls	r2, r4, #31
 8005b4a:	d505      	bpl.n	8005b58 <_dtoa_r+0x4d0>
 8005b4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b50:	f7fa fd72 	bl	8000638 <__aeabi_dmul>
 8005b54:	3601      	adds	r6, #1
 8005b56:	2301      	movs	r3, #1
 8005b58:	1064      	asrs	r4, r4, #1
 8005b5a:	3508      	adds	r5, #8
 8005b5c:	e762      	b.n	8005a24 <_dtoa_r+0x39c>
 8005b5e:	2602      	movs	r6, #2
 8005b60:	e765      	b.n	8005a2e <_dtoa_r+0x3a6>
 8005b62:	9c03      	ldr	r4, [sp, #12]
 8005b64:	46b8      	mov	r8, r7
 8005b66:	e784      	b.n	8005a72 <_dtoa_r+0x3ea>
 8005b68:	4b27      	ldr	r3, [pc, #156]	@ (8005c08 <_dtoa_r+0x580>)
 8005b6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b74:	4454      	add	r4, sl
 8005b76:	2900      	cmp	r1, #0
 8005b78:	d054      	beq.n	8005c24 <_dtoa_r+0x59c>
 8005b7a:	4929      	ldr	r1, [pc, #164]	@ (8005c20 <_dtoa_r+0x598>)
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	f7fa fe85 	bl	800088c <__aeabi_ddiv>
 8005b82:	4633      	mov	r3, r6
 8005b84:	462a      	mov	r2, r5
 8005b86:	f7fa fb9f 	bl	80002c8 <__aeabi_dsub>
 8005b8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005b8e:	4656      	mov	r6, sl
 8005b90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b94:	f7fb f800 	bl	8000b98 <__aeabi_d2iz>
 8005b98:	4605      	mov	r5, r0
 8005b9a:	f7fa fce3 	bl	8000564 <__aeabi_i2d>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ba6:	f7fa fb8f 	bl	80002c8 <__aeabi_dsub>
 8005baa:	3530      	adds	r5, #48	@ 0x30
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005bb4:	f806 5b01 	strb.w	r5, [r6], #1
 8005bb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005bbc:	f7fa ffae 	bl	8000b1c <__aeabi_dcmplt>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d172      	bne.n	8005caa <_dtoa_r+0x622>
 8005bc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bc8:	4911      	ldr	r1, [pc, #68]	@ (8005c10 <_dtoa_r+0x588>)
 8005bca:	2000      	movs	r0, #0
 8005bcc:	f7fa fb7c 	bl	80002c8 <__aeabi_dsub>
 8005bd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005bd4:	f7fa ffa2 	bl	8000b1c <__aeabi_dcmplt>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	f040 80b4 	bne.w	8005d46 <_dtoa_r+0x6be>
 8005bde:	42a6      	cmp	r6, r4
 8005be0:	f43f af70 	beq.w	8005ac4 <_dtoa_r+0x43c>
 8005be4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005be8:	4b0a      	ldr	r3, [pc, #40]	@ (8005c14 <_dtoa_r+0x58c>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	f7fa fd24 	bl	8000638 <__aeabi_dmul>
 8005bf0:	4b08      	ldr	r3, [pc, #32]	@ (8005c14 <_dtoa_r+0x58c>)
 8005bf2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bfc:	f7fa fd1c 	bl	8000638 <__aeabi_dmul>
 8005c00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c04:	e7c4      	b.n	8005b90 <_dtoa_r+0x508>
 8005c06:	bf00      	nop
 8005c08:	080073d0 	.word	0x080073d0
 8005c0c:	080073a8 	.word	0x080073a8
 8005c10:	3ff00000 	.word	0x3ff00000
 8005c14:	40240000 	.word	0x40240000
 8005c18:	401c0000 	.word	0x401c0000
 8005c1c:	40140000 	.word	0x40140000
 8005c20:	3fe00000 	.word	0x3fe00000
 8005c24:	4631      	mov	r1, r6
 8005c26:	4628      	mov	r0, r5
 8005c28:	f7fa fd06 	bl	8000638 <__aeabi_dmul>
 8005c2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005c30:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005c32:	4656      	mov	r6, sl
 8005c34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c38:	f7fa ffae 	bl	8000b98 <__aeabi_d2iz>
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	f7fa fc91 	bl	8000564 <__aeabi_i2d>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c4a:	f7fa fb3d 	bl	80002c8 <__aeabi_dsub>
 8005c4e:	3530      	adds	r5, #48	@ 0x30
 8005c50:	f806 5b01 	strb.w	r5, [r6], #1
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	42a6      	cmp	r6, r4
 8005c5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	d124      	bne.n	8005cae <_dtoa_r+0x626>
 8005c64:	4baf      	ldr	r3, [pc, #700]	@ (8005f24 <_dtoa_r+0x89c>)
 8005c66:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005c6a:	f7fa fb2f 	bl	80002cc <__adddf3>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c76:	f7fa ff6f 	bl	8000b58 <__aeabi_dcmpgt>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d163      	bne.n	8005d46 <_dtoa_r+0x6be>
 8005c7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005c82:	49a8      	ldr	r1, [pc, #672]	@ (8005f24 <_dtoa_r+0x89c>)
 8005c84:	2000      	movs	r0, #0
 8005c86:	f7fa fb1f 	bl	80002c8 <__aeabi_dsub>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c92:	f7fa ff43 	bl	8000b1c <__aeabi_dcmplt>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	f43f af14 	beq.w	8005ac4 <_dtoa_r+0x43c>
 8005c9c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005c9e:	1e73      	subs	r3, r6, #1
 8005ca0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ca2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ca6:	2b30      	cmp	r3, #48	@ 0x30
 8005ca8:	d0f8      	beq.n	8005c9c <_dtoa_r+0x614>
 8005caa:	4647      	mov	r7, r8
 8005cac:	e03b      	b.n	8005d26 <_dtoa_r+0x69e>
 8005cae:	4b9e      	ldr	r3, [pc, #632]	@ (8005f28 <_dtoa_r+0x8a0>)
 8005cb0:	f7fa fcc2 	bl	8000638 <__aeabi_dmul>
 8005cb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cb8:	e7bc      	b.n	8005c34 <_dtoa_r+0x5ac>
 8005cba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005cbe:	4656      	mov	r6, sl
 8005cc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	f7fa fde0 	bl	800088c <__aeabi_ddiv>
 8005ccc:	f7fa ff64 	bl	8000b98 <__aeabi_d2iz>
 8005cd0:	4680      	mov	r8, r0
 8005cd2:	f7fa fc47 	bl	8000564 <__aeabi_i2d>
 8005cd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cda:	f7fa fcad 	bl	8000638 <__aeabi_dmul>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005cea:	f7fa faed 	bl	80002c8 <__aeabi_dsub>
 8005cee:	f806 4b01 	strb.w	r4, [r6], #1
 8005cf2:	9d03      	ldr	r5, [sp, #12]
 8005cf4:	eba6 040a 	sub.w	r4, r6, sl
 8005cf8:	42a5      	cmp	r5, r4
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	d133      	bne.n	8005d68 <_dtoa_r+0x6e0>
 8005d00:	f7fa fae4 	bl	80002cc <__adddf3>
 8005d04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d08:	4604      	mov	r4, r0
 8005d0a:	460d      	mov	r5, r1
 8005d0c:	f7fa ff24 	bl	8000b58 <__aeabi_dcmpgt>
 8005d10:	b9c0      	cbnz	r0, 8005d44 <_dtoa_r+0x6bc>
 8005d12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d16:	4620      	mov	r0, r4
 8005d18:	4629      	mov	r1, r5
 8005d1a:	f7fa fef5 	bl	8000b08 <__aeabi_dcmpeq>
 8005d1e:	b110      	cbz	r0, 8005d26 <_dtoa_r+0x69e>
 8005d20:	f018 0f01 	tst.w	r8, #1
 8005d24:	d10e      	bne.n	8005d44 <_dtoa_r+0x6bc>
 8005d26:	9902      	ldr	r1, [sp, #8]
 8005d28:	4648      	mov	r0, r9
 8005d2a:	f000 fbbd 	bl	80064a8 <_Bfree>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	7033      	strb	r3, [r6, #0]
 8005d32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005d34:	3701      	adds	r7, #1
 8005d36:	601f      	str	r7, [r3, #0]
 8005d38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 824b 	beq.w	80061d6 <_dtoa_r+0xb4e>
 8005d40:	601e      	str	r6, [r3, #0]
 8005d42:	e248      	b.n	80061d6 <_dtoa_r+0xb4e>
 8005d44:	46b8      	mov	r8, r7
 8005d46:	4633      	mov	r3, r6
 8005d48:	461e      	mov	r6, r3
 8005d4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d4e:	2a39      	cmp	r2, #57	@ 0x39
 8005d50:	d106      	bne.n	8005d60 <_dtoa_r+0x6d8>
 8005d52:	459a      	cmp	sl, r3
 8005d54:	d1f8      	bne.n	8005d48 <_dtoa_r+0x6c0>
 8005d56:	2230      	movs	r2, #48	@ 0x30
 8005d58:	f108 0801 	add.w	r8, r8, #1
 8005d5c:	f88a 2000 	strb.w	r2, [sl]
 8005d60:	781a      	ldrb	r2, [r3, #0]
 8005d62:	3201      	adds	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	e7a0      	b.n	8005caa <_dtoa_r+0x622>
 8005d68:	4b6f      	ldr	r3, [pc, #444]	@ (8005f28 <_dtoa_r+0x8a0>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f7fa fc64 	bl	8000638 <__aeabi_dmul>
 8005d70:	2200      	movs	r2, #0
 8005d72:	2300      	movs	r3, #0
 8005d74:	4604      	mov	r4, r0
 8005d76:	460d      	mov	r5, r1
 8005d78:	f7fa fec6 	bl	8000b08 <__aeabi_dcmpeq>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d09f      	beq.n	8005cc0 <_dtoa_r+0x638>
 8005d80:	e7d1      	b.n	8005d26 <_dtoa_r+0x69e>
 8005d82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d84:	2a00      	cmp	r2, #0
 8005d86:	f000 80ea 	beq.w	8005f5e <_dtoa_r+0x8d6>
 8005d8a:	9a07      	ldr	r2, [sp, #28]
 8005d8c:	2a01      	cmp	r2, #1
 8005d8e:	f300 80cd 	bgt.w	8005f2c <_dtoa_r+0x8a4>
 8005d92:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d94:	2a00      	cmp	r2, #0
 8005d96:	f000 80c1 	beq.w	8005f1c <_dtoa_r+0x894>
 8005d9a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d9e:	9c08      	ldr	r4, [sp, #32]
 8005da0:	9e00      	ldr	r6, [sp, #0]
 8005da2:	9a00      	ldr	r2, [sp, #0]
 8005da4:	441a      	add	r2, r3
 8005da6:	9200      	str	r2, [sp, #0]
 8005da8:	9a06      	ldr	r2, [sp, #24]
 8005daa:	2101      	movs	r1, #1
 8005dac:	441a      	add	r2, r3
 8005dae:	4648      	mov	r0, r9
 8005db0:	9206      	str	r2, [sp, #24]
 8005db2:	f000 fc2d 	bl	8006610 <__i2b>
 8005db6:	4605      	mov	r5, r0
 8005db8:	b166      	cbz	r6, 8005dd4 <_dtoa_r+0x74c>
 8005dba:	9b06      	ldr	r3, [sp, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dd09      	ble.n	8005dd4 <_dtoa_r+0x74c>
 8005dc0:	42b3      	cmp	r3, r6
 8005dc2:	9a00      	ldr	r2, [sp, #0]
 8005dc4:	bfa8      	it	ge
 8005dc6:	4633      	movge	r3, r6
 8005dc8:	1ad2      	subs	r2, r2, r3
 8005dca:	9200      	str	r2, [sp, #0]
 8005dcc:	9a06      	ldr	r2, [sp, #24]
 8005dce:	1af6      	subs	r6, r6, r3
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	9306      	str	r3, [sp, #24]
 8005dd4:	9b08      	ldr	r3, [sp, #32]
 8005dd6:	b30b      	cbz	r3, 8005e1c <_dtoa_r+0x794>
 8005dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 80c6 	beq.w	8005f6c <_dtoa_r+0x8e4>
 8005de0:	2c00      	cmp	r4, #0
 8005de2:	f000 80c0 	beq.w	8005f66 <_dtoa_r+0x8de>
 8005de6:	4629      	mov	r1, r5
 8005de8:	4622      	mov	r2, r4
 8005dea:	4648      	mov	r0, r9
 8005dec:	f000 fcc8 	bl	8006780 <__pow5mult>
 8005df0:	9a02      	ldr	r2, [sp, #8]
 8005df2:	4601      	mov	r1, r0
 8005df4:	4605      	mov	r5, r0
 8005df6:	4648      	mov	r0, r9
 8005df8:	f000 fc20 	bl	800663c <__multiply>
 8005dfc:	9902      	ldr	r1, [sp, #8]
 8005dfe:	4680      	mov	r8, r0
 8005e00:	4648      	mov	r0, r9
 8005e02:	f000 fb51 	bl	80064a8 <_Bfree>
 8005e06:	9b08      	ldr	r3, [sp, #32]
 8005e08:	1b1b      	subs	r3, r3, r4
 8005e0a:	9308      	str	r3, [sp, #32]
 8005e0c:	f000 80b1 	beq.w	8005f72 <_dtoa_r+0x8ea>
 8005e10:	9a08      	ldr	r2, [sp, #32]
 8005e12:	4641      	mov	r1, r8
 8005e14:	4648      	mov	r0, r9
 8005e16:	f000 fcb3 	bl	8006780 <__pow5mult>
 8005e1a:	9002      	str	r0, [sp, #8]
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	4648      	mov	r0, r9
 8005e20:	f000 fbf6 	bl	8006610 <__i2b>
 8005e24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e26:	4604      	mov	r4, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 81d8 	beq.w	80061de <_dtoa_r+0xb56>
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4601      	mov	r1, r0
 8005e32:	4648      	mov	r0, r9
 8005e34:	f000 fca4 	bl	8006780 <__pow5mult>
 8005e38:	9b07      	ldr	r3, [sp, #28]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	f300 809f 	bgt.w	8005f80 <_dtoa_r+0x8f8>
 8005e42:	9b04      	ldr	r3, [sp, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f040 8097 	bne.w	8005f78 <_dtoa_r+0x8f0>
 8005e4a:	9b05      	ldr	r3, [sp, #20]
 8005e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f040 8093 	bne.w	8005f7c <_dtoa_r+0x8f4>
 8005e56:	9b05      	ldr	r3, [sp, #20]
 8005e58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e5c:	0d1b      	lsrs	r3, r3, #20
 8005e5e:	051b      	lsls	r3, r3, #20
 8005e60:	b133      	cbz	r3, 8005e70 <_dtoa_r+0x7e8>
 8005e62:	9b00      	ldr	r3, [sp, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	9b06      	ldr	r3, [sp, #24]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	9306      	str	r3, [sp, #24]
 8005e6e:	2301      	movs	r3, #1
 8005e70:	9308      	str	r3, [sp, #32]
 8005e72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 81b8 	beq.w	80061ea <_dtoa_r+0xb62>
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e80:	6918      	ldr	r0, [r3, #16]
 8005e82:	f000 fb79 	bl	8006578 <__hi0bits>
 8005e86:	f1c0 0020 	rsb	r0, r0, #32
 8005e8a:	9b06      	ldr	r3, [sp, #24]
 8005e8c:	4418      	add	r0, r3
 8005e8e:	f010 001f 	ands.w	r0, r0, #31
 8005e92:	f000 8082 	beq.w	8005f9a <_dtoa_r+0x912>
 8005e96:	f1c0 0320 	rsb	r3, r0, #32
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	dd73      	ble.n	8005f86 <_dtoa_r+0x8fe>
 8005e9e:	9b00      	ldr	r3, [sp, #0]
 8005ea0:	f1c0 001c 	rsb	r0, r0, #28
 8005ea4:	4403      	add	r3, r0
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	9b06      	ldr	r3, [sp, #24]
 8005eaa:	4403      	add	r3, r0
 8005eac:	4406      	add	r6, r0
 8005eae:	9306      	str	r3, [sp, #24]
 8005eb0:	9b00      	ldr	r3, [sp, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	dd05      	ble.n	8005ec2 <_dtoa_r+0x83a>
 8005eb6:	9902      	ldr	r1, [sp, #8]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4648      	mov	r0, r9
 8005ebc:	f000 fcba 	bl	8006834 <__lshift>
 8005ec0:	9002      	str	r0, [sp, #8]
 8005ec2:	9b06      	ldr	r3, [sp, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dd05      	ble.n	8005ed4 <_dtoa_r+0x84c>
 8005ec8:	4621      	mov	r1, r4
 8005eca:	461a      	mov	r2, r3
 8005ecc:	4648      	mov	r0, r9
 8005ece:	f000 fcb1 	bl	8006834 <__lshift>
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d061      	beq.n	8005f9e <_dtoa_r+0x916>
 8005eda:	9802      	ldr	r0, [sp, #8]
 8005edc:	4621      	mov	r1, r4
 8005ede:	f000 fd15 	bl	800690c <__mcmp>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	da5b      	bge.n	8005f9e <_dtoa_r+0x916>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	9902      	ldr	r1, [sp, #8]
 8005eea:	220a      	movs	r2, #10
 8005eec:	4648      	mov	r0, r9
 8005eee:	f000 fafd 	bl	80064ec <__multadd>
 8005ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ef4:	9002      	str	r0, [sp, #8]
 8005ef6:	f107 38ff 	add.w	r8, r7, #4294967295
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 8177 	beq.w	80061ee <_dtoa_r+0xb66>
 8005f00:	4629      	mov	r1, r5
 8005f02:	2300      	movs	r3, #0
 8005f04:	220a      	movs	r2, #10
 8005f06:	4648      	mov	r0, r9
 8005f08:	f000 faf0 	bl	80064ec <__multadd>
 8005f0c:	f1bb 0f00 	cmp.w	fp, #0
 8005f10:	4605      	mov	r5, r0
 8005f12:	dc6f      	bgt.n	8005ff4 <_dtoa_r+0x96c>
 8005f14:	9b07      	ldr	r3, [sp, #28]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	dc49      	bgt.n	8005fae <_dtoa_r+0x926>
 8005f1a:	e06b      	b.n	8005ff4 <_dtoa_r+0x96c>
 8005f1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f22:	e73c      	b.n	8005d9e <_dtoa_r+0x716>
 8005f24:	3fe00000 	.word	0x3fe00000
 8005f28:	40240000 	.word	0x40240000
 8005f2c:	9b03      	ldr	r3, [sp, #12]
 8005f2e:	1e5c      	subs	r4, r3, #1
 8005f30:	9b08      	ldr	r3, [sp, #32]
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	db09      	blt.n	8005f4a <_dtoa_r+0x8c2>
 8005f36:	1b1c      	subs	r4, r3, r4
 8005f38:	9b03      	ldr	r3, [sp, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f6bf af30 	bge.w	8005da0 <_dtoa_r+0x718>
 8005f40:	9b00      	ldr	r3, [sp, #0]
 8005f42:	9a03      	ldr	r2, [sp, #12]
 8005f44:	1a9e      	subs	r6, r3, r2
 8005f46:	2300      	movs	r3, #0
 8005f48:	e72b      	b.n	8005da2 <_dtoa_r+0x71a>
 8005f4a:	9b08      	ldr	r3, [sp, #32]
 8005f4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005f4e:	9408      	str	r4, [sp, #32]
 8005f50:	1ae3      	subs	r3, r4, r3
 8005f52:	441a      	add	r2, r3
 8005f54:	9e00      	ldr	r6, [sp, #0]
 8005f56:	9b03      	ldr	r3, [sp, #12]
 8005f58:	920d      	str	r2, [sp, #52]	@ 0x34
 8005f5a:	2400      	movs	r4, #0
 8005f5c:	e721      	b.n	8005da2 <_dtoa_r+0x71a>
 8005f5e:	9c08      	ldr	r4, [sp, #32]
 8005f60:	9e00      	ldr	r6, [sp, #0]
 8005f62:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005f64:	e728      	b.n	8005db8 <_dtoa_r+0x730>
 8005f66:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005f6a:	e751      	b.n	8005e10 <_dtoa_r+0x788>
 8005f6c:	9a08      	ldr	r2, [sp, #32]
 8005f6e:	9902      	ldr	r1, [sp, #8]
 8005f70:	e750      	b.n	8005e14 <_dtoa_r+0x78c>
 8005f72:	f8cd 8008 	str.w	r8, [sp, #8]
 8005f76:	e751      	b.n	8005e1c <_dtoa_r+0x794>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	e779      	b.n	8005e70 <_dtoa_r+0x7e8>
 8005f7c:	9b04      	ldr	r3, [sp, #16]
 8005f7e:	e777      	b.n	8005e70 <_dtoa_r+0x7e8>
 8005f80:	2300      	movs	r3, #0
 8005f82:	9308      	str	r3, [sp, #32]
 8005f84:	e779      	b.n	8005e7a <_dtoa_r+0x7f2>
 8005f86:	d093      	beq.n	8005eb0 <_dtoa_r+0x828>
 8005f88:	9a00      	ldr	r2, [sp, #0]
 8005f8a:	331c      	adds	r3, #28
 8005f8c:	441a      	add	r2, r3
 8005f8e:	9200      	str	r2, [sp, #0]
 8005f90:	9a06      	ldr	r2, [sp, #24]
 8005f92:	441a      	add	r2, r3
 8005f94:	441e      	add	r6, r3
 8005f96:	9206      	str	r2, [sp, #24]
 8005f98:	e78a      	b.n	8005eb0 <_dtoa_r+0x828>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	e7f4      	b.n	8005f88 <_dtoa_r+0x900>
 8005f9e:	9b03      	ldr	r3, [sp, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	46b8      	mov	r8, r7
 8005fa4:	dc20      	bgt.n	8005fe8 <_dtoa_r+0x960>
 8005fa6:	469b      	mov	fp, r3
 8005fa8:	9b07      	ldr	r3, [sp, #28]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	dd1e      	ble.n	8005fec <_dtoa_r+0x964>
 8005fae:	f1bb 0f00 	cmp.w	fp, #0
 8005fb2:	f47f adb1 	bne.w	8005b18 <_dtoa_r+0x490>
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	465b      	mov	r3, fp
 8005fba:	2205      	movs	r2, #5
 8005fbc:	4648      	mov	r0, r9
 8005fbe:	f000 fa95 	bl	80064ec <__multadd>
 8005fc2:	4601      	mov	r1, r0
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	9802      	ldr	r0, [sp, #8]
 8005fc8:	f000 fca0 	bl	800690c <__mcmp>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	f77f ada3 	ble.w	8005b18 <_dtoa_r+0x490>
 8005fd2:	4656      	mov	r6, sl
 8005fd4:	2331      	movs	r3, #49	@ 0x31
 8005fd6:	f806 3b01 	strb.w	r3, [r6], #1
 8005fda:	f108 0801 	add.w	r8, r8, #1
 8005fde:	e59f      	b.n	8005b20 <_dtoa_r+0x498>
 8005fe0:	9c03      	ldr	r4, [sp, #12]
 8005fe2:	46b8      	mov	r8, r7
 8005fe4:	4625      	mov	r5, r4
 8005fe6:	e7f4      	b.n	8005fd2 <_dtoa_r+0x94a>
 8005fe8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 8101 	beq.w	80061f6 <_dtoa_r+0xb6e>
 8005ff4:	2e00      	cmp	r6, #0
 8005ff6:	dd05      	ble.n	8006004 <_dtoa_r+0x97c>
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	4632      	mov	r2, r6
 8005ffc:	4648      	mov	r0, r9
 8005ffe:	f000 fc19 	bl	8006834 <__lshift>
 8006002:	4605      	mov	r5, r0
 8006004:	9b08      	ldr	r3, [sp, #32]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d05c      	beq.n	80060c4 <_dtoa_r+0xa3c>
 800600a:	6869      	ldr	r1, [r5, #4]
 800600c:	4648      	mov	r0, r9
 800600e:	f000 fa0b 	bl	8006428 <_Balloc>
 8006012:	4606      	mov	r6, r0
 8006014:	b928      	cbnz	r0, 8006022 <_dtoa_r+0x99a>
 8006016:	4b82      	ldr	r3, [pc, #520]	@ (8006220 <_dtoa_r+0xb98>)
 8006018:	4602      	mov	r2, r0
 800601a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800601e:	f7ff bb4a 	b.w	80056b6 <_dtoa_r+0x2e>
 8006022:	692a      	ldr	r2, [r5, #16]
 8006024:	3202      	adds	r2, #2
 8006026:	0092      	lsls	r2, r2, #2
 8006028:	f105 010c 	add.w	r1, r5, #12
 800602c:	300c      	adds	r0, #12
 800602e:	f000 fff7 	bl	8007020 <memcpy>
 8006032:	2201      	movs	r2, #1
 8006034:	4631      	mov	r1, r6
 8006036:	4648      	mov	r0, r9
 8006038:	f000 fbfc 	bl	8006834 <__lshift>
 800603c:	f10a 0301 	add.w	r3, sl, #1
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	eb0a 030b 	add.w	r3, sl, fp
 8006046:	9308      	str	r3, [sp, #32]
 8006048:	9b04      	ldr	r3, [sp, #16]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	462f      	mov	r7, r5
 8006050:	9306      	str	r3, [sp, #24]
 8006052:	4605      	mov	r5, r0
 8006054:	9b00      	ldr	r3, [sp, #0]
 8006056:	9802      	ldr	r0, [sp, #8]
 8006058:	4621      	mov	r1, r4
 800605a:	f103 3bff 	add.w	fp, r3, #4294967295
 800605e:	f7ff fa8a 	bl	8005576 <quorem>
 8006062:	4603      	mov	r3, r0
 8006064:	3330      	adds	r3, #48	@ 0x30
 8006066:	9003      	str	r0, [sp, #12]
 8006068:	4639      	mov	r1, r7
 800606a:	9802      	ldr	r0, [sp, #8]
 800606c:	9309      	str	r3, [sp, #36]	@ 0x24
 800606e:	f000 fc4d 	bl	800690c <__mcmp>
 8006072:	462a      	mov	r2, r5
 8006074:	9004      	str	r0, [sp, #16]
 8006076:	4621      	mov	r1, r4
 8006078:	4648      	mov	r0, r9
 800607a:	f000 fc63 	bl	8006944 <__mdiff>
 800607e:	68c2      	ldr	r2, [r0, #12]
 8006080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006082:	4606      	mov	r6, r0
 8006084:	bb02      	cbnz	r2, 80060c8 <_dtoa_r+0xa40>
 8006086:	4601      	mov	r1, r0
 8006088:	9802      	ldr	r0, [sp, #8]
 800608a:	f000 fc3f 	bl	800690c <__mcmp>
 800608e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006090:	4602      	mov	r2, r0
 8006092:	4631      	mov	r1, r6
 8006094:	4648      	mov	r0, r9
 8006096:	920c      	str	r2, [sp, #48]	@ 0x30
 8006098:	9309      	str	r3, [sp, #36]	@ 0x24
 800609a:	f000 fa05 	bl	80064a8 <_Bfree>
 800609e:	9b07      	ldr	r3, [sp, #28]
 80060a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060a2:	9e00      	ldr	r6, [sp, #0]
 80060a4:	ea42 0103 	orr.w	r1, r2, r3
 80060a8:	9b06      	ldr	r3, [sp, #24]
 80060aa:	4319      	orrs	r1, r3
 80060ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060ae:	d10d      	bne.n	80060cc <_dtoa_r+0xa44>
 80060b0:	2b39      	cmp	r3, #57	@ 0x39
 80060b2:	d027      	beq.n	8006104 <_dtoa_r+0xa7c>
 80060b4:	9a04      	ldr	r2, [sp, #16]
 80060b6:	2a00      	cmp	r2, #0
 80060b8:	dd01      	ble.n	80060be <_dtoa_r+0xa36>
 80060ba:	9b03      	ldr	r3, [sp, #12]
 80060bc:	3331      	adds	r3, #49	@ 0x31
 80060be:	f88b 3000 	strb.w	r3, [fp]
 80060c2:	e52e      	b.n	8005b22 <_dtoa_r+0x49a>
 80060c4:	4628      	mov	r0, r5
 80060c6:	e7b9      	b.n	800603c <_dtoa_r+0x9b4>
 80060c8:	2201      	movs	r2, #1
 80060ca:	e7e2      	b.n	8006092 <_dtoa_r+0xa0a>
 80060cc:	9904      	ldr	r1, [sp, #16]
 80060ce:	2900      	cmp	r1, #0
 80060d0:	db04      	blt.n	80060dc <_dtoa_r+0xa54>
 80060d2:	9807      	ldr	r0, [sp, #28]
 80060d4:	4301      	orrs	r1, r0
 80060d6:	9806      	ldr	r0, [sp, #24]
 80060d8:	4301      	orrs	r1, r0
 80060da:	d120      	bne.n	800611e <_dtoa_r+0xa96>
 80060dc:	2a00      	cmp	r2, #0
 80060de:	ddee      	ble.n	80060be <_dtoa_r+0xa36>
 80060e0:	9902      	ldr	r1, [sp, #8]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	2201      	movs	r2, #1
 80060e6:	4648      	mov	r0, r9
 80060e8:	f000 fba4 	bl	8006834 <__lshift>
 80060ec:	4621      	mov	r1, r4
 80060ee:	9002      	str	r0, [sp, #8]
 80060f0:	f000 fc0c 	bl	800690c <__mcmp>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	9b00      	ldr	r3, [sp, #0]
 80060f8:	dc02      	bgt.n	8006100 <_dtoa_r+0xa78>
 80060fa:	d1e0      	bne.n	80060be <_dtoa_r+0xa36>
 80060fc:	07da      	lsls	r2, r3, #31
 80060fe:	d5de      	bpl.n	80060be <_dtoa_r+0xa36>
 8006100:	2b39      	cmp	r3, #57	@ 0x39
 8006102:	d1da      	bne.n	80060ba <_dtoa_r+0xa32>
 8006104:	2339      	movs	r3, #57	@ 0x39
 8006106:	f88b 3000 	strb.w	r3, [fp]
 800610a:	4633      	mov	r3, r6
 800610c:	461e      	mov	r6, r3
 800610e:	3b01      	subs	r3, #1
 8006110:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006114:	2a39      	cmp	r2, #57	@ 0x39
 8006116:	d04e      	beq.n	80061b6 <_dtoa_r+0xb2e>
 8006118:	3201      	adds	r2, #1
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	e501      	b.n	8005b22 <_dtoa_r+0x49a>
 800611e:	2a00      	cmp	r2, #0
 8006120:	dd03      	ble.n	800612a <_dtoa_r+0xaa2>
 8006122:	2b39      	cmp	r3, #57	@ 0x39
 8006124:	d0ee      	beq.n	8006104 <_dtoa_r+0xa7c>
 8006126:	3301      	adds	r3, #1
 8006128:	e7c9      	b.n	80060be <_dtoa_r+0xa36>
 800612a:	9a00      	ldr	r2, [sp, #0]
 800612c:	9908      	ldr	r1, [sp, #32]
 800612e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006132:	428a      	cmp	r2, r1
 8006134:	d028      	beq.n	8006188 <_dtoa_r+0xb00>
 8006136:	9902      	ldr	r1, [sp, #8]
 8006138:	2300      	movs	r3, #0
 800613a:	220a      	movs	r2, #10
 800613c:	4648      	mov	r0, r9
 800613e:	f000 f9d5 	bl	80064ec <__multadd>
 8006142:	42af      	cmp	r7, r5
 8006144:	9002      	str	r0, [sp, #8]
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	f04f 020a 	mov.w	r2, #10
 800614e:	4639      	mov	r1, r7
 8006150:	4648      	mov	r0, r9
 8006152:	d107      	bne.n	8006164 <_dtoa_r+0xadc>
 8006154:	f000 f9ca 	bl	80064ec <__multadd>
 8006158:	4607      	mov	r7, r0
 800615a:	4605      	mov	r5, r0
 800615c:	9b00      	ldr	r3, [sp, #0]
 800615e:	3301      	adds	r3, #1
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	e777      	b.n	8006054 <_dtoa_r+0x9cc>
 8006164:	f000 f9c2 	bl	80064ec <__multadd>
 8006168:	4629      	mov	r1, r5
 800616a:	4607      	mov	r7, r0
 800616c:	2300      	movs	r3, #0
 800616e:	220a      	movs	r2, #10
 8006170:	4648      	mov	r0, r9
 8006172:	f000 f9bb 	bl	80064ec <__multadd>
 8006176:	4605      	mov	r5, r0
 8006178:	e7f0      	b.n	800615c <_dtoa_r+0xad4>
 800617a:	f1bb 0f00 	cmp.w	fp, #0
 800617e:	bfcc      	ite	gt
 8006180:	465e      	movgt	r6, fp
 8006182:	2601      	movle	r6, #1
 8006184:	4456      	add	r6, sl
 8006186:	2700      	movs	r7, #0
 8006188:	9902      	ldr	r1, [sp, #8]
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	2201      	movs	r2, #1
 800618e:	4648      	mov	r0, r9
 8006190:	f000 fb50 	bl	8006834 <__lshift>
 8006194:	4621      	mov	r1, r4
 8006196:	9002      	str	r0, [sp, #8]
 8006198:	f000 fbb8 	bl	800690c <__mcmp>
 800619c:	2800      	cmp	r0, #0
 800619e:	dcb4      	bgt.n	800610a <_dtoa_r+0xa82>
 80061a0:	d102      	bne.n	80061a8 <_dtoa_r+0xb20>
 80061a2:	9b00      	ldr	r3, [sp, #0]
 80061a4:	07db      	lsls	r3, r3, #31
 80061a6:	d4b0      	bmi.n	800610a <_dtoa_r+0xa82>
 80061a8:	4633      	mov	r3, r6
 80061aa:	461e      	mov	r6, r3
 80061ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061b0:	2a30      	cmp	r2, #48	@ 0x30
 80061b2:	d0fa      	beq.n	80061aa <_dtoa_r+0xb22>
 80061b4:	e4b5      	b.n	8005b22 <_dtoa_r+0x49a>
 80061b6:	459a      	cmp	sl, r3
 80061b8:	d1a8      	bne.n	800610c <_dtoa_r+0xa84>
 80061ba:	2331      	movs	r3, #49	@ 0x31
 80061bc:	f108 0801 	add.w	r8, r8, #1
 80061c0:	f88a 3000 	strb.w	r3, [sl]
 80061c4:	e4ad      	b.n	8005b22 <_dtoa_r+0x49a>
 80061c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006224 <_dtoa_r+0xb9c>
 80061cc:	b11b      	cbz	r3, 80061d6 <_dtoa_r+0xb4e>
 80061ce:	f10a 0308 	add.w	r3, sl, #8
 80061d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	4650      	mov	r0, sl
 80061d8:	b017      	add	sp, #92	@ 0x5c
 80061da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061de:	9b07      	ldr	r3, [sp, #28]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	f77f ae2e 	ble.w	8005e42 <_dtoa_r+0x7ba>
 80061e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061e8:	9308      	str	r3, [sp, #32]
 80061ea:	2001      	movs	r0, #1
 80061ec:	e64d      	b.n	8005e8a <_dtoa_r+0x802>
 80061ee:	f1bb 0f00 	cmp.w	fp, #0
 80061f2:	f77f aed9 	ble.w	8005fa8 <_dtoa_r+0x920>
 80061f6:	4656      	mov	r6, sl
 80061f8:	9802      	ldr	r0, [sp, #8]
 80061fa:	4621      	mov	r1, r4
 80061fc:	f7ff f9bb 	bl	8005576 <quorem>
 8006200:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006204:	f806 3b01 	strb.w	r3, [r6], #1
 8006208:	eba6 020a 	sub.w	r2, r6, sl
 800620c:	4593      	cmp	fp, r2
 800620e:	ddb4      	ble.n	800617a <_dtoa_r+0xaf2>
 8006210:	9902      	ldr	r1, [sp, #8]
 8006212:	2300      	movs	r3, #0
 8006214:	220a      	movs	r2, #10
 8006216:	4648      	mov	r0, r9
 8006218:	f000 f968 	bl	80064ec <__multadd>
 800621c:	9002      	str	r0, [sp, #8]
 800621e:	e7eb      	b.n	80061f8 <_dtoa_r+0xb70>
 8006220:	080072d4 	.word	0x080072d4
 8006224:	08007258 	.word	0x08007258

08006228 <_free_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4605      	mov	r5, r0
 800622c:	2900      	cmp	r1, #0
 800622e:	d041      	beq.n	80062b4 <_free_r+0x8c>
 8006230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006234:	1f0c      	subs	r4, r1, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	bfb8      	it	lt
 800623a:	18e4      	addlt	r4, r4, r3
 800623c:	f000 f8e8 	bl	8006410 <__malloc_lock>
 8006240:	4a1d      	ldr	r2, [pc, #116]	@ (80062b8 <_free_r+0x90>)
 8006242:	6813      	ldr	r3, [r2, #0]
 8006244:	b933      	cbnz	r3, 8006254 <_free_r+0x2c>
 8006246:	6063      	str	r3, [r4, #4]
 8006248:	6014      	str	r4, [r2, #0]
 800624a:	4628      	mov	r0, r5
 800624c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006250:	f000 b8e4 	b.w	800641c <__malloc_unlock>
 8006254:	42a3      	cmp	r3, r4
 8006256:	d908      	bls.n	800626a <_free_r+0x42>
 8006258:	6820      	ldr	r0, [r4, #0]
 800625a:	1821      	adds	r1, r4, r0
 800625c:	428b      	cmp	r3, r1
 800625e:	bf01      	itttt	eq
 8006260:	6819      	ldreq	r1, [r3, #0]
 8006262:	685b      	ldreq	r3, [r3, #4]
 8006264:	1809      	addeq	r1, r1, r0
 8006266:	6021      	streq	r1, [r4, #0]
 8006268:	e7ed      	b.n	8006246 <_free_r+0x1e>
 800626a:	461a      	mov	r2, r3
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	b10b      	cbz	r3, 8006274 <_free_r+0x4c>
 8006270:	42a3      	cmp	r3, r4
 8006272:	d9fa      	bls.n	800626a <_free_r+0x42>
 8006274:	6811      	ldr	r1, [r2, #0]
 8006276:	1850      	adds	r0, r2, r1
 8006278:	42a0      	cmp	r0, r4
 800627a:	d10b      	bne.n	8006294 <_free_r+0x6c>
 800627c:	6820      	ldr	r0, [r4, #0]
 800627e:	4401      	add	r1, r0
 8006280:	1850      	adds	r0, r2, r1
 8006282:	4283      	cmp	r3, r0
 8006284:	6011      	str	r1, [r2, #0]
 8006286:	d1e0      	bne.n	800624a <_free_r+0x22>
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	6053      	str	r3, [r2, #4]
 800628e:	4408      	add	r0, r1
 8006290:	6010      	str	r0, [r2, #0]
 8006292:	e7da      	b.n	800624a <_free_r+0x22>
 8006294:	d902      	bls.n	800629c <_free_r+0x74>
 8006296:	230c      	movs	r3, #12
 8006298:	602b      	str	r3, [r5, #0]
 800629a:	e7d6      	b.n	800624a <_free_r+0x22>
 800629c:	6820      	ldr	r0, [r4, #0]
 800629e:	1821      	adds	r1, r4, r0
 80062a0:	428b      	cmp	r3, r1
 80062a2:	bf04      	itt	eq
 80062a4:	6819      	ldreq	r1, [r3, #0]
 80062a6:	685b      	ldreq	r3, [r3, #4]
 80062a8:	6063      	str	r3, [r4, #4]
 80062aa:	bf04      	itt	eq
 80062ac:	1809      	addeq	r1, r1, r0
 80062ae:	6021      	streq	r1, [r4, #0]
 80062b0:	6054      	str	r4, [r2, #4]
 80062b2:	e7ca      	b.n	800624a <_free_r+0x22>
 80062b4:	bd38      	pop	{r3, r4, r5, pc}
 80062b6:	bf00      	nop
 80062b8:	2000041c 	.word	0x2000041c

080062bc <malloc>:
 80062bc:	4b02      	ldr	r3, [pc, #8]	@ (80062c8 <malloc+0xc>)
 80062be:	4601      	mov	r1, r0
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	f000 b825 	b.w	8006310 <_malloc_r>
 80062c6:	bf00      	nop
 80062c8:	20000018 	.word	0x20000018

080062cc <sbrk_aligned>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	4e0f      	ldr	r6, [pc, #60]	@ (800630c <sbrk_aligned+0x40>)
 80062d0:	460c      	mov	r4, r1
 80062d2:	6831      	ldr	r1, [r6, #0]
 80062d4:	4605      	mov	r5, r0
 80062d6:	b911      	cbnz	r1, 80062de <sbrk_aligned+0x12>
 80062d8:	f000 fe92 	bl	8007000 <_sbrk_r>
 80062dc:	6030      	str	r0, [r6, #0]
 80062de:	4621      	mov	r1, r4
 80062e0:	4628      	mov	r0, r5
 80062e2:	f000 fe8d 	bl	8007000 <_sbrk_r>
 80062e6:	1c43      	adds	r3, r0, #1
 80062e8:	d103      	bne.n	80062f2 <sbrk_aligned+0x26>
 80062ea:	f04f 34ff 	mov.w	r4, #4294967295
 80062ee:	4620      	mov	r0, r4
 80062f0:	bd70      	pop	{r4, r5, r6, pc}
 80062f2:	1cc4      	adds	r4, r0, #3
 80062f4:	f024 0403 	bic.w	r4, r4, #3
 80062f8:	42a0      	cmp	r0, r4
 80062fa:	d0f8      	beq.n	80062ee <sbrk_aligned+0x22>
 80062fc:	1a21      	subs	r1, r4, r0
 80062fe:	4628      	mov	r0, r5
 8006300:	f000 fe7e 	bl	8007000 <_sbrk_r>
 8006304:	3001      	adds	r0, #1
 8006306:	d1f2      	bne.n	80062ee <sbrk_aligned+0x22>
 8006308:	e7ef      	b.n	80062ea <sbrk_aligned+0x1e>
 800630a:	bf00      	nop
 800630c:	20000418 	.word	0x20000418

08006310 <_malloc_r>:
 8006310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006314:	1ccd      	adds	r5, r1, #3
 8006316:	f025 0503 	bic.w	r5, r5, #3
 800631a:	3508      	adds	r5, #8
 800631c:	2d0c      	cmp	r5, #12
 800631e:	bf38      	it	cc
 8006320:	250c      	movcc	r5, #12
 8006322:	2d00      	cmp	r5, #0
 8006324:	4606      	mov	r6, r0
 8006326:	db01      	blt.n	800632c <_malloc_r+0x1c>
 8006328:	42a9      	cmp	r1, r5
 800632a:	d904      	bls.n	8006336 <_malloc_r+0x26>
 800632c:	230c      	movs	r3, #12
 800632e:	6033      	str	r3, [r6, #0]
 8006330:	2000      	movs	r0, #0
 8006332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006336:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800640c <_malloc_r+0xfc>
 800633a:	f000 f869 	bl	8006410 <__malloc_lock>
 800633e:	f8d8 3000 	ldr.w	r3, [r8]
 8006342:	461c      	mov	r4, r3
 8006344:	bb44      	cbnz	r4, 8006398 <_malloc_r+0x88>
 8006346:	4629      	mov	r1, r5
 8006348:	4630      	mov	r0, r6
 800634a:	f7ff ffbf 	bl	80062cc <sbrk_aligned>
 800634e:	1c43      	adds	r3, r0, #1
 8006350:	4604      	mov	r4, r0
 8006352:	d158      	bne.n	8006406 <_malloc_r+0xf6>
 8006354:	f8d8 4000 	ldr.w	r4, [r8]
 8006358:	4627      	mov	r7, r4
 800635a:	2f00      	cmp	r7, #0
 800635c:	d143      	bne.n	80063e6 <_malloc_r+0xd6>
 800635e:	2c00      	cmp	r4, #0
 8006360:	d04b      	beq.n	80063fa <_malloc_r+0xea>
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	4639      	mov	r1, r7
 8006366:	4630      	mov	r0, r6
 8006368:	eb04 0903 	add.w	r9, r4, r3
 800636c:	f000 fe48 	bl	8007000 <_sbrk_r>
 8006370:	4581      	cmp	r9, r0
 8006372:	d142      	bne.n	80063fa <_malloc_r+0xea>
 8006374:	6821      	ldr	r1, [r4, #0]
 8006376:	1a6d      	subs	r5, r5, r1
 8006378:	4629      	mov	r1, r5
 800637a:	4630      	mov	r0, r6
 800637c:	f7ff ffa6 	bl	80062cc <sbrk_aligned>
 8006380:	3001      	adds	r0, #1
 8006382:	d03a      	beq.n	80063fa <_malloc_r+0xea>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	442b      	add	r3, r5
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	f8d8 3000 	ldr.w	r3, [r8]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	bb62      	cbnz	r2, 80063ec <_malloc_r+0xdc>
 8006392:	f8c8 7000 	str.w	r7, [r8]
 8006396:	e00f      	b.n	80063b8 <_malloc_r+0xa8>
 8006398:	6822      	ldr	r2, [r4, #0]
 800639a:	1b52      	subs	r2, r2, r5
 800639c:	d420      	bmi.n	80063e0 <_malloc_r+0xd0>
 800639e:	2a0b      	cmp	r2, #11
 80063a0:	d917      	bls.n	80063d2 <_malloc_r+0xc2>
 80063a2:	1961      	adds	r1, r4, r5
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	6025      	str	r5, [r4, #0]
 80063a8:	bf18      	it	ne
 80063aa:	6059      	strne	r1, [r3, #4]
 80063ac:	6863      	ldr	r3, [r4, #4]
 80063ae:	bf08      	it	eq
 80063b0:	f8c8 1000 	streq.w	r1, [r8]
 80063b4:	5162      	str	r2, [r4, r5]
 80063b6:	604b      	str	r3, [r1, #4]
 80063b8:	4630      	mov	r0, r6
 80063ba:	f000 f82f 	bl	800641c <__malloc_unlock>
 80063be:	f104 000b 	add.w	r0, r4, #11
 80063c2:	1d23      	adds	r3, r4, #4
 80063c4:	f020 0007 	bic.w	r0, r0, #7
 80063c8:	1ac2      	subs	r2, r0, r3
 80063ca:	bf1c      	itt	ne
 80063cc:	1a1b      	subne	r3, r3, r0
 80063ce:	50a3      	strne	r3, [r4, r2]
 80063d0:	e7af      	b.n	8006332 <_malloc_r+0x22>
 80063d2:	6862      	ldr	r2, [r4, #4]
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	bf0c      	ite	eq
 80063d8:	f8c8 2000 	streq.w	r2, [r8]
 80063dc:	605a      	strne	r2, [r3, #4]
 80063de:	e7eb      	b.n	80063b8 <_malloc_r+0xa8>
 80063e0:	4623      	mov	r3, r4
 80063e2:	6864      	ldr	r4, [r4, #4]
 80063e4:	e7ae      	b.n	8006344 <_malloc_r+0x34>
 80063e6:	463c      	mov	r4, r7
 80063e8:	687f      	ldr	r7, [r7, #4]
 80063ea:	e7b6      	b.n	800635a <_malloc_r+0x4a>
 80063ec:	461a      	mov	r2, r3
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	d1fb      	bne.n	80063ec <_malloc_r+0xdc>
 80063f4:	2300      	movs	r3, #0
 80063f6:	6053      	str	r3, [r2, #4]
 80063f8:	e7de      	b.n	80063b8 <_malloc_r+0xa8>
 80063fa:	230c      	movs	r3, #12
 80063fc:	6033      	str	r3, [r6, #0]
 80063fe:	4630      	mov	r0, r6
 8006400:	f000 f80c 	bl	800641c <__malloc_unlock>
 8006404:	e794      	b.n	8006330 <_malloc_r+0x20>
 8006406:	6005      	str	r5, [r0, #0]
 8006408:	e7d6      	b.n	80063b8 <_malloc_r+0xa8>
 800640a:	bf00      	nop
 800640c:	2000041c 	.word	0x2000041c

08006410 <__malloc_lock>:
 8006410:	4801      	ldr	r0, [pc, #4]	@ (8006418 <__malloc_lock+0x8>)
 8006412:	f7ff b8ae 	b.w	8005572 <__retarget_lock_acquire_recursive>
 8006416:	bf00      	nop
 8006418:	20000414 	.word	0x20000414

0800641c <__malloc_unlock>:
 800641c:	4801      	ldr	r0, [pc, #4]	@ (8006424 <__malloc_unlock+0x8>)
 800641e:	f7ff b8a9 	b.w	8005574 <__retarget_lock_release_recursive>
 8006422:	bf00      	nop
 8006424:	20000414 	.word	0x20000414

08006428 <_Balloc>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	69c6      	ldr	r6, [r0, #28]
 800642c:	4604      	mov	r4, r0
 800642e:	460d      	mov	r5, r1
 8006430:	b976      	cbnz	r6, 8006450 <_Balloc+0x28>
 8006432:	2010      	movs	r0, #16
 8006434:	f7ff ff42 	bl	80062bc <malloc>
 8006438:	4602      	mov	r2, r0
 800643a:	61e0      	str	r0, [r4, #28]
 800643c:	b920      	cbnz	r0, 8006448 <_Balloc+0x20>
 800643e:	4b18      	ldr	r3, [pc, #96]	@ (80064a0 <_Balloc+0x78>)
 8006440:	4818      	ldr	r0, [pc, #96]	@ (80064a4 <_Balloc+0x7c>)
 8006442:	216b      	movs	r1, #107	@ 0x6b
 8006444:	f000 fdfa 	bl	800703c <__assert_func>
 8006448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800644c:	6006      	str	r6, [r0, #0]
 800644e:	60c6      	str	r6, [r0, #12]
 8006450:	69e6      	ldr	r6, [r4, #28]
 8006452:	68f3      	ldr	r3, [r6, #12]
 8006454:	b183      	cbz	r3, 8006478 <_Balloc+0x50>
 8006456:	69e3      	ldr	r3, [r4, #28]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800645e:	b9b8      	cbnz	r0, 8006490 <_Balloc+0x68>
 8006460:	2101      	movs	r1, #1
 8006462:	fa01 f605 	lsl.w	r6, r1, r5
 8006466:	1d72      	adds	r2, r6, #5
 8006468:	0092      	lsls	r2, r2, #2
 800646a:	4620      	mov	r0, r4
 800646c:	f000 fe04 	bl	8007078 <_calloc_r>
 8006470:	b160      	cbz	r0, 800648c <_Balloc+0x64>
 8006472:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006476:	e00e      	b.n	8006496 <_Balloc+0x6e>
 8006478:	2221      	movs	r2, #33	@ 0x21
 800647a:	2104      	movs	r1, #4
 800647c:	4620      	mov	r0, r4
 800647e:	f000 fdfb 	bl	8007078 <_calloc_r>
 8006482:	69e3      	ldr	r3, [r4, #28]
 8006484:	60f0      	str	r0, [r6, #12]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e4      	bne.n	8006456 <_Balloc+0x2e>
 800648c:	2000      	movs	r0, #0
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	6802      	ldr	r2, [r0, #0]
 8006492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006496:	2300      	movs	r3, #0
 8006498:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800649c:	e7f7      	b.n	800648e <_Balloc+0x66>
 800649e:	bf00      	nop
 80064a0:	08007265 	.word	0x08007265
 80064a4:	080072e5 	.word	0x080072e5

080064a8 <_Bfree>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	69c6      	ldr	r6, [r0, #28]
 80064ac:	4605      	mov	r5, r0
 80064ae:	460c      	mov	r4, r1
 80064b0:	b976      	cbnz	r6, 80064d0 <_Bfree+0x28>
 80064b2:	2010      	movs	r0, #16
 80064b4:	f7ff ff02 	bl	80062bc <malloc>
 80064b8:	4602      	mov	r2, r0
 80064ba:	61e8      	str	r0, [r5, #28]
 80064bc:	b920      	cbnz	r0, 80064c8 <_Bfree+0x20>
 80064be:	4b09      	ldr	r3, [pc, #36]	@ (80064e4 <_Bfree+0x3c>)
 80064c0:	4809      	ldr	r0, [pc, #36]	@ (80064e8 <_Bfree+0x40>)
 80064c2:	218f      	movs	r1, #143	@ 0x8f
 80064c4:	f000 fdba 	bl	800703c <__assert_func>
 80064c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064cc:	6006      	str	r6, [r0, #0]
 80064ce:	60c6      	str	r6, [r0, #12]
 80064d0:	b13c      	cbz	r4, 80064e2 <_Bfree+0x3a>
 80064d2:	69eb      	ldr	r3, [r5, #28]
 80064d4:	6862      	ldr	r2, [r4, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064dc:	6021      	str	r1, [r4, #0]
 80064de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	08007265 	.word	0x08007265
 80064e8:	080072e5 	.word	0x080072e5

080064ec <__multadd>:
 80064ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f0:	690d      	ldr	r5, [r1, #16]
 80064f2:	4607      	mov	r7, r0
 80064f4:	460c      	mov	r4, r1
 80064f6:	461e      	mov	r6, r3
 80064f8:	f101 0c14 	add.w	ip, r1, #20
 80064fc:	2000      	movs	r0, #0
 80064fe:	f8dc 3000 	ldr.w	r3, [ip]
 8006502:	b299      	uxth	r1, r3
 8006504:	fb02 6101 	mla	r1, r2, r1, r6
 8006508:	0c1e      	lsrs	r6, r3, #16
 800650a:	0c0b      	lsrs	r3, r1, #16
 800650c:	fb02 3306 	mla	r3, r2, r6, r3
 8006510:	b289      	uxth	r1, r1
 8006512:	3001      	adds	r0, #1
 8006514:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006518:	4285      	cmp	r5, r0
 800651a:	f84c 1b04 	str.w	r1, [ip], #4
 800651e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006522:	dcec      	bgt.n	80064fe <__multadd+0x12>
 8006524:	b30e      	cbz	r6, 800656a <__multadd+0x7e>
 8006526:	68a3      	ldr	r3, [r4, #8]
 8006528:	42ab      	cmp	r3, r5
 800652a:	dc19      	bgt.n	8006560 <__multadd+0x74>
 800652c:	6861      	ldr	r1, [r4, #4]
 800652e:	4638      	mov	r0, r7
 8006530:	3101      	adds	r1, #1
 8006532:	f7ff ff79 	bl	8006428 <_Balloc>
 8006536:	4680      	mov	r8, r0
 8006538:	b928      	cbnz	r0, 8006546 <__multadd+0x5a>
 800653a:	4602      	mov	r2, r0
 800653c:	4b0c      	ldr	r3, [pc, #48]	@ (8006570 <__multadd+0x84>)
 800653e:	480d      	ldr	r0, [pc, #52]	@ (8006574 <__multadd+0x88>)
 8006540:	21ba      	movs	r1, #186	@ 0xba
 8006542:	f000 fd7b 	bl	800703c <__assert_func>
 8006546:	6922      	ldr	r2, [r4, #16]
 8006548:	3202      	adds	r2, #2
 800654a:	f104 010c 	add.w	r1, r4, #12
 800654e:	0092      	lsls	r2, r2, #2
 8006550:	300c      	adds	r0, #12
 8006552:	f000 fd65 	bl	8007020 <memcpy>
 8006556:	4621      	mov	r1, r4
 8006558:	4638      	mov	r0, r7
 800655a:	f7ff ffa5 	bl	80064a8 <_Bfree>
 800655e:	4644      	mov	r4, r8
 8006560:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006564:	3501      	adds	r5, #1
 8006566:	615e      	str	r6, [r3, #20]
 8006568:	6125      	str	r5, [r4, #16]
 800656a:	4620      	mov	r0, r4
 800656c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006570:	080072d4 	.word	0x080072d4
 8006574:	080072e5 	.word	0x080072e5

08006578 <__hi0bits>:
 8006578:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800657c:	4603      	mov	r3, r0
 800657e:	bf36      	itet	cc
 8006580:	0403      	lslcc	r3, r0, #16
 8006582:	2000      	movcs	r0, #0
 8006584:	2010      	movcc	r0, #16
 8006586:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800658a:	bf3c      	itt	cc
 800658c:	021b      	lslcc	r3, r3, #8
 800658e:	3008      	addcc	r0, #8
 8006590:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006594:	bf3c      	itt	cc
 8006596:	011b      	lslcc	r3, r3, #4
 8006598:	3004      	addcc	r0, #4
 800659a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800659e:	bf3c      	itt	cc
 80065a0:	009b      	lslcc	r3, r3, #2
 80065a2:	3002      	addcc	r0, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	db05      	blt.n	80065b4 <__hi0bits+0x3c>
 80065a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80065ac:	f100 0001 	add.w	r0, r0, #1
 80065b0:	bf08      	it	eq
 80065b2:	2020      	moveq	r0, #32
 80065b4:	4770      	bx	lr

080065b6 <__lo0bits>:
 80065b6:	6803      	ldr	r3, [r0, #0]
 80065b8:	4602      	mov	r2, r0
 80065ba:	f013 0007 	ands.w	r0, r3, #7
 80065be:	d00b      	beq.n	80065d8 <__lo0bits+0x22>
 80065c0:	07d9      	lsls	r1, r3, #31
 80065c2:	d421      	bmi.n	8006608 <__lo0bits+0x52>
 80065c4:	0798      	lsls	r0, r3, #30
 80065c6:	bf49      	itett	mi
 80065c8:	085b      	lsrmi	r3, r3, #1
 80065ca:	089b      	lsrpl	r3, r3, #2
 80065cc:	2001      	movmi	r0, #1
 80065ce:	6013      	strmi	r3, [r2, #0]
 80065d0:	bf5c      	itt	pl
 80065d2:	6013      	strpl	r3, [r2, #0]
 80065d4:	2002      	movpl	r0, #2
 80065d6:	4770      	bx	lr
 80065d8:	b299      	uxth	r1, r3
 80065da:	b909      	cbnz	r1, 80065e0 <__lo0bits+0x2a>
 80065dc:	0c1b      	lsrs	r3, r3, #16
 80065de:	2010      	movs	r0, #16
 80065e0:	b2d9      	uxtb	r1, r3
 80065e2:	b909      	cbnz	r1, 80065e8 <__lo0bits+0x32>
 80065e4:	3008      	adds	r0, #8
 80065e6:	0a1b      	lsrs	r3, r3, #8
 80065e8:	0719      	lsls	r1, r3, #28
 80065ea:	bf04      	itt	eq
 80065ec:	091b      	lsreq	r3, r3, #4
 80065ee:	3004      	addeq	r0, #4
 80065f0:	0799      	lsls	r1, r3, #30
 80065f2:	bf04      	itt	eq
 80065f4:	089b      	lsreq	r3, r3, #2
 80065f6:	3002      	addeq	r0, #2
 80065f8:	07d9      	lsls	r1, r3, #31
 80065fa:	d403      	bmi.n	8006604 <__lo0bits+0x4e>
 80065fc:	085b      	lsrs	r3, r3, #1
 80065fe:	f100 0001 	add.w	r0, r0, #1
 8006602:	d003      	beq.n	800660c <__lo0bits+0x56>
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	4770      	bx	lr
 8006608:	2000      	movs	r0, #0
 800660a:	4770      	bx	lr
 800660c:	2020      	movs	r0, #32
 800660e:	4770      	bx	lr

08006610 <__i2b>:
 8006610:	b510      	push	{r4, lr}
 8006612:	460c      	mov	r4, r1
 8006614:	2101      	movs	r1, #1
 8006616:	f7ff ff07 	bl	8006428 <_Balloc>
 800661a:	4602      	mov	r2, r0
 800661c:	b928      	cbnz	r0, 800662a <__i2b+0x1a>
 800661e:	4b05      	ldr	r3, [pc, #20]	@ (8006634 <__i2b+0x24>)
 8006620:	4805      	ldr	r0, [pc, #20]	@ (8006638 <__i2b+0x28>)
 8006622:	f240 1145 	movw	r1, #325	@ 0x145
 8006626:	f000 fd09 	bl	800703c <__assert_func>
 800662a:	2301      	movs	r3, #1
 800662c:	6144      	str	r4, [r0, #20]
 800662e:	6103      	str	r3, [r0, #16]
 8006630:	bd10      	pop	{r4, pc}
 8006632:	bf00      	nop
 8006634:	080072d4 	.word	0x080072d4
 8006638:	080072e5 	.word	0x080072e5

0800663c <__multiply>:
 800663c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006640:	4617      	mov	r7, r2
 8006642:	690a      	ldr	r2, [r1, #16]
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	429a      	cmp	r2, r3
 8006648:	bfa8      	it	ge
 800664a:	463b      	movge	r3, r7
 800664c:	4689      	mov	r9, r1
 800664e:	bfa4      	itt	ge
 8006650:	460f      	movge	r7, r1
 8006652:	4699      	movge	r9, r3
 8006654:	693d      	ldr	r5, [r7, #16]
 8006656:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	eb05 060a 	add.w	r6, r5, sl
 8006662:	42b3      	cmp	r3, r6
 8006664:	b085      	sub	sp, #20
 8006666:	bfb8      	it	lt
 8006668:	3101      	addlt	r1, #1
 800666a:	f7ff fedd 	bl	8006428 <_Balloc>
 800666e:	b930      	cbnz	r0, 800667e <__multiply+0x42>
 8006670:	4602      	mov	r2, r0
 8006672:	4b41      	ldr	r3, [pc, #260]	@ (8006778 <__multiply+0x13c>)
 8006674:	4841      	ldr	r0, [pc, #260]	@ (800677c <__multiply+0x140>)
 8006676:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800667a:	f000 fcdf 	bl	800703c <__assert_func>
 800667e:	f100 0414 	add.w	r4, r0, #20
 8006682:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006686:	4623      	mov	r3, r4
 8006688:	2200      	movs	r2, #0
 800668a:	4573      	cmp	r3, lr
 800668c:	d320      	bcc.n	80066d0 <__multiply+0x94>
 800668e:	f107 0814 	add.w	r8, r7, #20
 8006692:	f109 0114 	add.w	r1, r9, #20
 8006696:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800669a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800669e:	9302      	str	r3, [sp, #8]
 80066a0:	1beb      	subs	r3, r5, r7
 80066a2:	3b15      	subs	r3, #21
 80066a4:	f023 0303 	bic.w	r3, r3, #3
 80066a8:	3304      	adds	r3, #4
 80066aa:	3715      	adds	r7, #21
 80066ac:	42bd      	cmp	r5, r7
 80066ae:	bf38      	it	cc
 80066b0:	2304      	movcc	r3, #4
 80066b2:	9301      	str	r3, [sp, #4]
 80066b4:	9b02      	ldr	r3, [sp, #8]
 80066b6:	9103      	str	r1, [sp, #12]
 80066b8:	428b      	cmp	r3, r1
 80066ba:	d80c      	bhi.n	80066d6 <__multiply+0x9a>
 80066bc:	2e00      	cmp	r6, #0
 80066be:	dd03      	ble.n	80066c8 <__multiply+0x8c>
 80066c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d055      	beq.n	8006774 <__multiply+0x138>
 80066c8:	6106      	str	r6, [r0, #16]
 80066ca:	b005      	add	sp, #20
 80066cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d0:	f843 2b04 	str.w	r2, [r3], #4
 80066d4:	e7d9      	b.n	800668a <__multiply+0x4e>
 80066d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80066da:	f1ba 0f00 	cmp.w	sl, #0
 80066de:	d01f      	beq.n	8006720 <__multiply+0xe4>
 80066e0:	46c4      	mov	ip, r8
 80066e2:	46a1      	mov	r9, r4
 80066e4:	2700      	movs	r7, #0
 80066e6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80066ea:	f8d9 3000 	ldr.w	r3, [r9]
 80066ee:	fa1f fb82 	uxth.w	fp, r2
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	fb0a 330b 	mla	r3, sl, fp, r3
 80066f8:	443b      	add	r3, r7
 80066fa:	f8d9 7000 	ldr.w	r7, [r9]
 80066fe:	0c12      	lsrs	r2, r2, #16
 8006700:	0c3f      	lsrs	r7, r7, #16
 8006702:	fb0a 7202 	mla	r2, sl, r2, r7
 8006706:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800670a:	b29b      	uxth	r3, r3
 800670c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006710:	4565      	cmp	r5, ip
 8006712:	f849 3b04 	str.w	r3, [r9], #4
 8006716:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800671a:	d8e4      	bhi.n	80066e6 <__multiply+0xaa>
 800671c:	9b01      	ldr	r3, [sp, #4]
 800671e:	50e7      	str	r7, [r4, r3]
 8006720:	9b03      	ldr	r3, [sp, #12]
 8006722:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006726:	3104      	adds	r1, #4
 8006728:	f1b9 0f00 	cmp.w	r9, #0
 800672c:	d020      	beq.n	8006770 <__multiply+0x134>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	4647      	mov	r7, r8
 8006732:	46a4      	mov	ip, r4
 8006734:	f04f 0a00 	mov.w	sl, #0
 8006738:	f8b7 b000 	ldrh.w	fp, [r7]
 800673c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006740:	fb09 220b 	mla	r2, r9, fp, r2
 8006744:	4452      	add	r2, sl
 8006746:	b29b      	uxth	r3, r3
 8006748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800674c:	f84c 3b04 	str.w	r3, [ip], #4
 8006750:	f857 3b04 	ldr.w	r3, [r7], #4
 8006754:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006758:	f8bc 3000 	ldrh.w	r3, [ip]
 800675c:	fb09 330a 	mla	r3, r9, sl, r3
 8006760:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006764:	42bd      	cmp	r5, r7
 8006766:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800676a:	d8e5      	bhi.n	8006738 <__multiply+0xfc>
 800676c:	9a01      	ldr	r2, [sp, #4]
 800676e:	50a3      	str	r3, [r4, r2]
 8006770:	3404      	adds	r4, #4
 8006772:	e79f      	b.n	80066b4 <__multiply+0x78>
 8006774:	3e01      	subs	r6, #1
 8006776:	e7a1      	b.n	80066bc <__multiply+0x80>
 8006778:	080072d4 	.word	0x080072d4
 800677c:	080072e5 	.word	0x080072e5

08006780 <__pow5mult>:
 8006780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006784:	4615      	mov	r5, r2
 8006786:	f012 0203 	ands.w	r2, r2, #3
 800678a:	4607      	mov	r7, r0
 800678c:	460e      	mov	r6, r1
 800678e:	d007      	beq.n	80067a0 <__pow5mult+0x20>
 8006790:	4c25      	ldr	r4, [pc, #148]	@ (8006828 <__pow5mult+0xa8>)
 8006792:	3a01      	subs	r2, #1
 8006794:	2300      	movs	r3, #0
 8006796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800679a:	f7ff fea7 	bl	80064ec <__multadd>
 800679e:	4606      	mov	r6, r0
 80067a0:	10ad      	asrs	r5, r5, #2
 80067a2:	d03d      	beq.n	8006820 <__pow5mult+0xa0>
 80067a4:	69fc      	ldr	r4, [r7, #28]
 80067a6:	b97c      	cbnz	r4, 80067c8 <__pow5mult+0x48>
 80067a8:	2010      	movs	r0, #16
 80067aa:	f7ff fd87 	bl	80062bc <malloc>
 80067ae:	4602      	mov	r2, r0
 80067b0:	61f8      	str	r0, [r7, #28]
 80067b2:	b928      	cbnz	r0, 80067c0 <__pow5mult+0x40>
 80067b4:	4b1d      	ldr	r3, [pc, #116]	@ (800682c <__pow5mult+0xac>)
 80067b6:	481e      	ldr	r0, [pc, #120]	@ (8006830 <__pow5mult+0xb0>)
 80067b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80067bc:	f000 fc3e 	bl	800703c <__assert_func>
 80067c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067c4:	6004      	str	r4, [r0, #0]
 80067c6:	60c4      	str	r4, [r0, #12]
 80067c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80067cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067d0:	b94c      	cbnz	r4, 80067e6 <__pow5mult+0x66>
 80067d2:	f240 2171 	movw	r1, #625	@ 0x271
 80067d6:	4638      	mov	r0, r7
 80067d8:	f7ff ff1a 	bl	8006610 <__i2b>
 80067dc:	2300      	movs	r3, #0
 80067de:	f8c8 0008 	str.w	r0, [r8, #8]
 80067e2:	4604      	mov	r4, r0
 80067e4:	6003      	str	r3, [r0, #0]
 80067e6:	f04f 0900 	mov.w	r9, #0
 80067ea:	07eb      	lsls	r3, r5, #31
 80067ec:	d50a      	bpl.n	8006804 <__pow5mult+0x84>
 80067ee:	4631      	mov	r1, r6
 80067f0:	4622      	mov	r2, r4
 80067f2:	4638      	mov	r0, r7
 80067f4:	f7ff ff22 	bl	800663c <__multiply>
 80067f8:	4631      	mov	r1, r6
 80067fa:	4680      	mov	r8, r0
 80067fc:	4638      	mov	r0, r7
 80067fe:	f7ff fe53 	bl	80064a8 <_Bfree>
 8006802:	4646      	mov	r6, r8
 8006804:	106d      	asrs	r5, r5, #1
 8006806:	d00b      	beq.n	8006820 <__pow5mult+0xa0>
 8006808:	6820      	ldr	r0, [r4, #0]
 800680a:	b938      	cbnz	r0, 800681c <__pow5mult+0x9c>
 800680c:	4622      	mov	r2, r4
 800680e:	4621      	mov	r1, r4
 8006810:	4638      	mov	r0, r7
 8006812:	f7ff ff13 	bl	800663c <__multiply>
 8006816:	6020      	str	r0, [r4, #0]
 8006818:	f8c0 9000 	str.w	r9, [r0]
 800681c:	4604      	mov	r4, r0
 800681e:	e7e4      	b.n	80067ea <__pow5mult+0x6a>
 8006820:	4630      	mov	r0, r6
 8006822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006826:	bf00      	nop
 8006828:	08007398 	.word	0x08007398
 800682c:	08007265 	.word	0x08007265
 8006830:	080072e5 	.word	0x080072e5

08006834 <__lshift>:
 8006834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006838:	460c      	mov	r4, r1
 800683a:	6849      	ldr	r1, [r1, #4]
 800683c:	6923      	ldr	r3, [r4, #16]
 800683e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006842:	68a3      	ldr	r3, [r4, #8]
 8006844:	4607      	mov	r7, r0
 8006846:	4691      	mov	r9, r2
 8006848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800684c:	f108 0601 	add.w	r6, r8, #1
 8006850:	42b3      	cmp	r3, r6
 8006852:	db0b      	blt.n	800686c <__lshift+0x38>
 8006854:	4638      	mov	r0, r7
 8006856:	f7ff fde7 	bl	8006428 <_Balloc>
 800685a:	4605      	mov	r5, r0
 800685c:	b948      	cbnz	r0, 8006872 <__lshift+0x3e>
 800685e:	4602      	mov	r2, r0
 8006860:	4b28      	ldr	r3, [pc, #160]	@ (8006904 <__lshift+0xd0>)
 8006862:	4829      	ldr	r0, [pc, #164]	@ (8006908 <__lshift+0xd4>)
 8006864:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006868:	f000 fbe8 	bl	800703c <__assert_func>
 800686c:	3101      	adds	r1, #1
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	e7ee      	b.n	8006850 <__lshift+0x1c>
 8006872:	2300      	movs	r3, #0
 8006874:	f100 0114 	add.w	r1, r0, #20
 8006878:	f100 0210 	add.w	r2, r0, #16
 800687c:	4618      	mov	r0, r3
 800687e:	4553      	cmp	r3, sl
 8006880:	db33      	blt.n	80068ea <__lshift+0xb6>
 8006882:	6920      	ldr	r0, [r4, #16]
 8006884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006888:	f104 0314 	add.w	r3, r4, #20
 800688c:	f019 091f 	ands.w	r9, r9, #31
 8006890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006898:	d02b      	beq.n	80068f2 <__lshift+0xbe>
 800689a:	f1c9 0e20 	rsb	lr, r9, #32
 800689e:	468a      	mov	sl, r1
 80068a0:	2200      	movs	r2, #0
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	fa00 f009 	lsl.w	r0, r0, r9
 80068a8:	4310      	orrs	r0, r2
 80068aa:	f84a 0b04 	str.w	r0, [sl], #4
 80068ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80068b2:	459c      	cmp	ip, r3
 80068b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80068b8:	d8f3      	bhi.n	80068a2 <__lshift+0x6e>
 80068ba:	ebac 0304 	sub.w	r3, ip, r4
 80068be:	3b15      	subs	r3, #21
 80068c0:	f023 0303 	bic.w	r3, r3, #3
 80068c4:	3304      	adds	r3, #4
 80068c6:	f104 0015 	add.w	r0, r4, #21
 80068ca:	4560      	cmp	r0, ip
 80068cc:	bf88      	it	hi
 80068ce:	2304      	movhi	r3, #4
 80068d0:	50ca      	str	r2, [r1, r3]
 80068d2:	b10a      	cbz	r2, 80068d8 <__lshift+0xa4>
 80068d4:	f108 0602 	add.w	r6, r8, #2
 80068d8:	3e01      	subs	r6, #1
 80068da:	4638      	mov	r0, r7
 80068dc:	612e      	str	r6, [r5, #16]
 80068de:	4621      	mov	r1, r4
 80068e0:	f7ff fde2 	bl	80064a8 <_Bfree>
 80068e4:	4628      	mov	r0, r5
 80068e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80068ee:	3301      	adds	r3, #1
 80068f0:	e7c5      	b.n	800687e <__lshift+0x4a>
 80068f2:	3904      	subs	r1, #4
 80068f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80068fc:	459c      	cmp	ip, r3
 80068fe:	d8f9      	bhi.n	80068f4 <__lshift+0xc0>
 8006900:	e7ea      	b.n	80068d8 <__lshift+0xa4>
 8006902:	bf00      	nop
 8006904:	080072d4 	.word	0x080072d4
 8006908:	080072e5 	.word	0x080072e5

0800690c <__mcmp>:
 800690c:	690a      	ldr	r2, [r1, #16]
 800690e:	4603      	mov	r3, r0
 8006910:	6900      	ldr	r0, [r0, #16]
 8006912:	1a80      	subs	r0, r0, r2
 8006914:	b530      	push	{r4, r5, lr}
 8006916:	d10e      	bne.n	8006936 <__mcmp+0x2a>
 8006918:	3314      	adds	r3, #20
 800691a:	3114      	adds	r1, #20
 800691c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800692c:	4295      	cmp	r5, r2
 800692e:	d003      	beq.n	8006938 <__mcmp+0x2c>
 8006930:	d205      	bcs.n	800693e <__mcmp+0x32>
 8006932:	f04f 30ff 	mov.w	r0, #4294967295
 8006936:	bd30      	pop	{r4, r5, pc}
 8006938:	42a3      	cmp	r3, r4
 800693a:	d3f3      	bcc.n	8006924 <__mcmp+0x18>
 800693c:	e7fb      	b.n	8006936 <__mcmp+0x2a>
 800693e:	2001      	movs	r0, #1
 8006940:	e7f9      	b.n	8006936 <__mcmp+0x2a>
	...

08006944 <__mdiff>:
 8006944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006948:	4689      	mov	r9, r1
 800694a:	4606      	mov	r6, r0
 800694c:	4611      	mov	r1, r2
 800694e:	4648      	mov	r0, r9
 8006950:	4614      	mov	r4, r2
 8006952:	f7ff ffdb 	bl	800690c <__mcmp>
 8006956:	1e05      	subs	r5, r0, #0
 8006958:	d112      	bne.n	8006980 <__mdiff+0x3c>
 800695a:	4629      	mov	r1, r5
 800695c:	4630      	mov	r0, r6
 800695e:	f7ff fd63 	bl	8006428 <_Balloc>
 8006962:	4602      	mov	r2, r0
 8006964:	b928      	cbnz	r0, 8006972 <__mdiff+0x2e>
 8006966:	4b3f      	ldr	r3, [pc, #252]	@ (8006a64 <__mdiff+0x120>)
 8006968:	f240 2137 	movw	r1, #567	@ 0x237
 800696c:	483e      	ldr	r0, [pc, #248]	@ (8006a68 <__mdiff+0x124>)
 800696e:	f000 fb65 	bl	800703c <__assert_func>
 8006972:	2301      	movs	r3, #1
 8006974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006978:	4610      	mov	r0, r2
 800697a:	b003      	add	sp, #12
 800697c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006980:	bfbc      	itt	lt
 8006982:	464b      	movlt	r3, r9
 8006984:	46a1      	movlt	r9, r4
 8006986:	4630      	mov	r0, r6
 8006988:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800698c:	bfba      	itte	lt
 800698e:	461c      	movlt	r4, r3
 8006990:	2501      	movlt	r5, #1
 8006992:	2500      	movge	r5, #0
 8006994:	f7ff fd48 	bl	8006428 <_Balloc>
 8006998:	4602      	mov	r2, r0
 800699a:	b918      	cbnz	r0, 80069a4 <__mdiff+0x60>
 800699c:	4b31      	ldr	r3, [pc, #196]	@ (8006a64 <__mdiff+0x120>)
 800699e:	f240 2145 	movw	r1, #581	@ 0x245
 80069a2:	e7e3      	b.n	800696c <__mdiff+0x28>
 80069a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80069a8:	6926      	ldr	r6, [r4, #16]
 80069aa:	60c5      	str	r5, [r0, #12]
 80069ac:	f109 0310 	add.w	r3, r9, #16
 80069b0:	f109 0514 	add.w	r5, r9, #20
 80069b4:	f104 0e14 	add.w	lr, r4, #20
 80069b8:	f100 0b14 	add.w	fp, r0, #20
 80069bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80069c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80069c4:	9301      	str	r3, [sp, #4]
 80069c6:	46d9      	mov	r9, fp
 80069c8:	f04f 0c00 	mov.w	ip, #0
 80069cc:	9b01      	ldr	r3, [sp, #4]
 80069ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80069d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	fa1f f38a 	uxth.w	r3, sl
 80069dc:	4619      	mov	r1, r3
 80069de:	b283      	uxth	r3, r0
 80069e0:	1acb      	subs	r3, r1, r3
 80069e2:	0c00      	lsrs	r0, r0, #16
 80069e4:	4463      	add	r3, ip
 80069e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80069ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80069f4:	4576      	cmp	r6, lr
 80069f6:	f849 3b04 	str.w	r3, [r9], #4
 80069fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069fe:	d8e5      	bhi.n	80069cc <__mdiff+0x88>
 8006a00:	1b33      	subs	r3, r6, r4
 8006a02:	3b15      	subs	r3, #21
 8006a04:	f023 0303 	bic.w	r3, r3, #3
 8006a08:	3415      	adds	r4, #21
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	42a6      	cmp	r6, r4
 8006a0e:	bf38      	it	cc
 8006a10:	2304      	movcc	r3, #4
 8006a12:	441d      	add	r5, r3
 8006a14:	445b      	add	r3, fp
 8006a16:	461e      	mov	r6, r3
 8006a18:	462c      	mov	r4, r5
 8006a1a:	4544      	cmp	r4, r8
 8006a1c:	d30e      	bcc.n	8006a3c <__mdiff+0xf8>
 8006a1e:	f108 0103 	add.w	r1, r8, #3
 8006a22:	1b49      	subs	r1, r1, r5
 8006a24:	f021 0103 	bic.w	r1, r1, #3
 8006a28:	3d03      	subs	r5, #3
 8006a2a:	45a8      	cmp	r8, r5
 8006a2c:	bf38      	it	cc
 8006a2e:	2100      	movcc	r1, #0
 8006a30:	440b      	add	r3, r1
 8006a32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a36:	b191      	cbz	r1, 8006a5e <__mdiff+0x11a>
 8006a38:	6117      	str	r7, [r2, #16]
 8006a3a:	e79d      	b.n	8006978 <__mdiff+0x34>
 8006a3c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a40:	46e6      	mov	lr, ip
 8006a42:	0c08      	lsrs	r0, r1, #16
 8006a44:	fa1c fc81 	uxtah	ip, ip, r1
 8006a48:	4471      	add	r1, lr
 8006a4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a4e:	b289      	uxth	r1, r1
 8006a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a54:	f846 1b04 	str.w	r1, [r6], #4
 8006a58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a5c:	e7dd      	b.n	8006a1a <__mdiff+0xd6>
 8006a5e:	3f01      	subs	r7, #1
 8006a60:	e7e7      	b.n	8006a32 <__mdiff+0xee>
 8006a62:	bf00      	nop
 8006a64:	080072d4 	.word	0x080072d4
 8006a68:	080072e5 	.word	0x080072e5

08006a6c <__d2b>:
 8006a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a70:	460f      	mov	r7, r1
 8006a72:	2101      	movs	r1, #1
 8006a74:	ec59 8b10 	vmov	r8, r9, d0
 8006a78:	4616      	mov	r6, r2
 8006a7a:	f7ff fcd5 	bl	8006428 <_Balloc>
 8006a7e:	4604      	mov	r4, r0
 8006a80:	b930      	cbnz	r0, 8006a90 <__d2b+0x24>
 8006a82:	4602      	mov	r2, r0
 8006a84:	4b23      	ldr	r3, [pc, #140]	@ (8006b14 <__d2b+0xa8>)
 8006a86:	4824      	ldr	r0, [pc, #144]	@ (8006b18 <__d2b+0xac>)
 8006a88:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a8c:	f000 fad6 	bl	800703c <__assert_func>
 8006a90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a98:	b10d      	cbz	r5, 8006a9e <__d2b+0x32>
 8006a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	f1b8 0300 	subs.w	r3, r8, #0
 8006aa4:	d023      	beq.n	8006aee <__d2b+0x82>
 8006aa6:	4668      	mov	r0, sp
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	f7ff fd84 	bl	80065b6 <__lo0bits>
 8006aae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ab2:	b1d0      	cbz	r0, 8006aea <__d2b+0x7e>
 8006ab4:	f1c0 0320 	rsb	r3, r0, #32
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	430b      	orrs	r3, r1
 8006abe:	40c2      	lsrs	r2, r0
 8006ac0:	6163      	str	r3, [r4, #20]
 8006ac2:	9201      	str	r2, [sp, #4]
 8006ac4:	9b01      	ldr	r3, [sp, #4]
 8006ac6:	61a3      	str	r3, [r4, #24]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bf0c      	ite	eq
 8006acc:	2201      	moveq	r2, #1
 8006ace:	2202      	movne	r2, #2
 8006ad0:	6122      	str	r2, [r4, #16]
 8006ad2:	b1a5      	cbz	r5, 8006afe <__d2b+0x92>
 8006ad4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ad8:	4405      	add	r5, r0
 8006ada:	603d      	str	r5, [r7, #0]
 8006adc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ae0:	6030      	str	r0, [r6, #0]
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	b003      	add	sp, #12
 8006ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006aea:	6161      	str	r1, [r4, #20]
 8006aec:	e7ea      	b.n	8006ac4 <__d2b+0x58>
 8006aee:	a801      	add	r0, sp, #4
 8006af0:	f7ff fd61 	bl	80065b6 <__lo0bits>
 8006af4:	9b01      	ldr	r3, [sp, #4]
 8006af6:	6163      	str	r3, [r4, #20]
 8006af8:	3020      	adds	r0, #32
 8006afa:	2201      	movs	r2, #1
 8006afc:	e7e8      	b.n	8006ad0 <__d2b+0x64>
 8006afe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b06:	6038      	str	r0, [r7, #0]
 8006b08:	6918      	ldr	r0, [r3, #16]
 8006b0a:	f7ff fd35 	bl	8006578 <__hi0bits>
 8006b0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b12:	e7e5      	b.n	8006ae0 <__d2b+0x74>
 8006b14:	080072d4 	.word	0x080072d4
 8006b18:	080072e5 	.word	0x080072e5

08006b1c <__sfputc_r>:
 8006b1c:	6893      	ldr	r3, [r2, #8]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	b410      	push	{r4}
 8006b24:	6093      	str	r3, [r2, #8]
 8006b26:	da08      	bge.n	8006b3a <__sfputc_r+0x1e>
 8006b28:	6994      	ldr	r4, [r2, #24]
 8006b2a:	42a3      	cmp	r3, r4
 8006b2c:	db01      	blt.n	8006b32 <__sfputc_r+0x16>
 8006b2e:	290a      	cmp	r1, #10
 8006b30:	d103      	bne.n	8006b3a <__sfputc_r+0x1e>
 8006b32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b36:	f7fe bc0a 	b.w	800534e <__swbuf_r>
 8006b3a:	6813      	ldr	r3, [r2, #0]
 8006b3c:	1c58      	adds	r0, r3, #1
 8006b3e:	6010      	str	r0, [r2, #0]
 8006b40:	7019      	strb	r1, [r3, #0]
 8006b42:	4608      	mov	r0, r1
 8006b44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <__sfputs_r>:
 8006b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	460f      	mov	r7, r1
 8006b50:	4614      	mov	r4, r2
 8006b52:	18d5      	adds	r5, r2, r3
 8006b54:	42ac      	cmp	r4, r5
 8006b56:	d101      	bne.n	8006b5c <__sfputs_r+0x12>
 8006b58:	2000      	movs	r0, #0
 8006b5a:	e007      	b.n	8006b6c <__sfputs_r+0x22>
 8006b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b60:	463a      	mov	r2, r7
 8006b62:	4630      	mov	r0, r6
 8006b64:	f7ff ffda 	bl	8006b1c <__sfputc_r>
 8006b68:	1c43      	adds	r3, r0, #1
 8006b6a:	d1f3      	bne.n	8006b54 <__sfputs_r+0xa>
 8006b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b70 <_vfiprintf_r>:
 8006b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b74:	460d      	mov	r5, r1
 8006b76:	b09d      	sub	sp, #116	@ 0x74
 8006b78:	4614      	mov	r4, r2
 8006b7a:	4698      	mov	r8, r3
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	b118      	cbz	r0, 8006b88 <_vfiprintf_r+0x18>
 8006b80:	6a03      	ldr	r3, [r0, #32]
 8006b82:	b90b      	cbnz	r3, 8006b88 <_vfiprintf_r+0x18>
 8006b84:	f7fe fafa 	bl	800517c <__sinit>
 8006b88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b8a:	07d9      	lsls	r1, r3, #31
 8006b8c:	d405      	bmi.n	8006b9a <_vfiprintf_r+0x2a>
 8006b8e:	89ab      	ldrh	r3, [r5, #12]
 8006b90:	059a      	lsls	r2, r3, #22
 8006b92:	d402      	bmi.n	8006b9a <_vfiprintf_r+0x2a>
 8006b94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b96:	f7fe fcec 	bl	8005572 <__retarget_lock_acquire_recursive>
 8006b9a:	89ab      	ldrh	r3, [r5, #12]
 8006b9c:	071b      	lsls	r3, r3, #28
 8006b9e:	d501      	bpl.n	8006ba4 <_vfiprintf_r+0x34>
 8006ba0:	692b      	ldr	r3, [r5, #16]
 8006ba2:	b99b      	cbnz	r3, 8006bcc <_vfiprintf_r+0x5c>
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	f7fe fc10 	bl	80053cc <__swsetup_r>
 8006bac:	b170      	cbz	r0, 8006bcc <_vfiprintf_r+0x5c>
 8006bae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bb0:	07dc      	lsls	r4, r3, #31
 8006bb2:	d504      	bpl.n	8006bbe <_vfiprintf_r+0x4e>
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb8:	b01d      	add	sp, #116	@ 0x74
 8006bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bbe:	89ab      	ldrh	r3, [r5, #12]
 8006bc0:	0598      	lsls	r0, r3, #22
 8006bc2:	d4f7      	bmi.n	8006bb4 <_vfiprintf_r+0x44>
 8006bc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bc6:	f7fe fcd5 	bl	8005574 <__retarget_lock_release_recursive>
 8006bca:	e7f3      	b.n	8006bb4 <_vfiprintf_r+0x44>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bd0:	2320      	movs	r3, #32
 8006bd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bda:	2330      	movs	r3, #48	@ 0x30
 8006bdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006d8c <_vfiprintf_r+0x21c>
 8006be0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006be4:	f04f 0901 	mov.w	r9, #1
 8006be8:	4623      	mov	r3, r4
 8006bea:	469a      	mov	sl, r3
 8006bec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bf0:	b10a      	cbz	r2, 8006bf6 <_vfiprintf_r+0x86>
 8006bf2:	2a25      	cmp	r2, #37	@ 0x25
 8006bf4:	d1f9      	bne.n	8006bea <_vfiprintf_r+0x7a>
 8006bf6:	ebba 0b04 	subs.w	fp, sl, r4
 8006bfa:	d00b      	beq.n	8006c14 <_vfiprintf_r+0xa4>
 8006bfc:	465b      	mov	r3, fp
 8006bfe:	4622      	mov	r2, r4
 8006c00:	4629      	mov	r1, r5
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7ff ffa1 	bl	8006b4a <__sfputs_r>
 8006c08:	3001      	adds	r0, #1
 8006c0a:	f000 80a7 	beq.w	8006d5c <_vfiprintf_r+0x1ec>
 8006c0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c10:	445a      	add	r2, fp
 8006c12:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c14:	f89a 3000 	ldrb.w	r3, [sl]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 809f 	beq.w	8006d5c <_vfiprintf_r+0x1ec>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f04f 32ff 	mov.w	r2, #4294967295
 8006c24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c28:	f10a 0a01 	add.w	sl, sl, #1
 8006c2c:	9304      	str	r3, [sp, #16]
 8006c2e:	9307      	str	r3, [sp, #28]
 8006c30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c34:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c36:	4654      	mov	r4, sl
 8006c38:	2205      	movs	r2, #5
 8006c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c3e:	4853      	ldr	r0, [pc, #332]	@ (8006d8c <_vfiprintf_r+0x21c>)
 8006c40:	f7f9 fae6 	bl	8000210 <memchr>
 8006c44:	9a04      	ldr	r2, [sp, #16]
 8006c46:	b9d8      	cbnz	r0, 8006c80 <_vfiprintf_r+0x110>
 8006c48:	06d1      	lsls	r1, r2, #27
 8006c4a:	bf44      	itt	mi
 8006c4c:	2320      	movmi	r3, #32
 8006c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c52:	0713      	lsls	r3, r2, #28
 8006c54:	bf44      	itt	mi
 8006c56:	232b      	movmi	r3, #43	@ 0x2b
 8006c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c60:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c62:	d015      	beq.n	8006c90 <_vfiprintf_r+0x120>
 8006c64:	9a07      	ldr	r2, [sp, #28]
 8006c66:	4654      	mov	r4, sl
 8006c68:	2000      	movs	r0, #0
 8006c6a:	f04f 0c0a 	mov.w	ip, #10
 8006c6e:	4621      	mov	r1, r4
 8006c70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c74:	3b30      	subs	r3, #48	@ 0x30
 8006c76:	2b09      	cmp	r3, #9
 8006c78:	d94b      	bls.n	8006d12 <_vfiprintf_r+0x1a2>
 8006c7a:	b1b0      	cbz	r0, 8006caa <_vfiprintf_r+0x13a>
 8006c7c:	9207      	str	r2, [sp, #28]
 8006c7e:	e014      	b.n	8006caa <_vfiprintf_r+0x13a>
 8006c80:	eba0 0308 	sub.w	r3, r0, r8
 8006c84:	fa09 f303 	lsl.w	r3, r9, r3
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	9304      	str	r3, [sp, #16]
 8006c8c:	46a2      	mov	sl, r4
 8006c8e:	e7d2      	b.n	8006c36 <_vfiprintf_r+0xc6>
 8006c90:	9b03      	ldr	r3, [sp, #12]
 8006c92:	1d19      	adds	r1, r3, #4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	9103      	str	r1, [sp, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	bfbb      	ittet	lt
 8006c9c:	425b      	neglt	r3, r3
 8006c9e:	f042 0202 	orrlt.w	r2, r2, #2
 8006ca2:	9307      	strge	r3, [sp, #28]
 8006ca4:	9307      	strlt	r3, [sp, #28]
 8006ca6:	bfb8      	it	lt
 8006ca8:	9204      	strlt	r2, [sp, #16]
 8006caa:	7823      	ldrb	r3, [r4, #0]
 8006cac:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cae:	d10a      	bne.n	8006cc6 <_vfiprintf_r+0x156>
 8006cb0:	7863      	ldrb	r3, [r4, #1]
 8006cb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cb4:	d132      	bne.n	8006d1c <_vfiprintf_r+0x1ac>
 8006cb6:	9b03      	ldr	r3, [sp, #12]
 8006cb8:	1d1a      	adds	r2, r3, #4
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	9203      	str	r2, [sp, #12]
 8006cbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cc2:	3402      	adds	r4, #2
 8006cc4:	9305      	str	r3, [sp, #20]
 8006cc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d9c <_vfiprintf_r+0x22c>
 8006cca:	7821      	ldrb	r1, [r4, #0]
 8006ccc:	2203      	movs	r2, #3
 8006cce:	4650      	mov	r0, sl
 8006cd0:	f7f9 fa9e 	bl	8000210 <memchr>
 8006cd4:	b138      	cbz	r0, 8006ce6 <_vfiprintf_r+0x176>
 8006cd6:	9b04      	ldr	r3, [sp, #16]
 8006cd8:	eba0 000a 	sub.w	r0, r0, sl
 8006cdc:	2240      	movs	r2, #64	@ 0x40
 8006cde:	4082      	lsls	r2, r0
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	3401      	adds	r4, #1
 8006ce4:	9304      	str	r3, [sp, #16]
 8006ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cea:	4829      	ldr	r0, [pc, #164]	@ (8006d90 <_vfiprintf_r+0x220>)
 8006cec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006cf0:	2206      	movs	r2, #6
 8006cf2:	f7f9 fa8d 	bl	8000210 <memchr>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d03f      	beq.n	8006d7a <_vfiprintf_r+0x20a>
 8006cfa:	4b26      	ldr	r3, [pc, #152]	@ (8006d94 <_vfiprintf_r+0x224>)
 8006cfc:	bb1b      	cbnz	r3, 8006d46 <_vfiprintf_r+0x1d6>
 8006cfe:	9b03      	ldr	r3, [sp, #12]
 8006d00:	3307      	adds	r3, #7
 8006d02:	f023 0307 	bic.w	r3, r3, #7
 8006d06:	3308      	adds	r3, #8
 8006d08:	9303      	str	r3, [sp, #12]
 8006d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d0c:	443b      	add	r3, r7
 8006d0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d10:	e76a      	b.n	8006be8 <_vfiprintf_r+0x78>
 8006d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d16:	460c      	mov	r4, r1
 8006d18:	2001      	movs	r0, #1
 8006d1a:	e7a8      	b.n	8006c6e <_vfiprintf_r+0xfe>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	3401      	adds	r4, #1
 8006d20:	9305      	str	r3, [sp, #20]
 8006d22:	4619      	mov	r1, r3
 8006d24:	f04f 0c0a 	mov.w	ip, #10
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d2e:	3a30      	subs	r2, #48	@ 0x30
 8006d30:	2a09      	cmp	r2, #9
 8006d32:	d903      	bls.n	8006d3c <_vfiprintf_r+0x1cc>
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0c6      	beq.n	8006cc6 <_vfiprintf_r+0x156>
 8006d38:	9105      	str	r1, [sp, #20]
 8006d3a:	e7c4      	b.n	8006cc6 <_vfiprintf_r+0x156>
 8006d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d40:	4604      	mov	r4, r0
 8006d42:	2301      	movs	r3, #1
 8006d44:	e7f0      	b.n	8006d28 <_vfiprintf_r+0x1b8>
 8006d46:	ab03      	add	r3, sp, #12
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	462a      	mov	r2, r5
 8006d4c:	4b12      	ldr	r3, [pc, #72]	@ (8006d98 <_vfiprintf_r+0x228>)
 8006d4e:	a904      	add	r1, sp, #16
 8006d50:	4630      	mov	r0, r6
 8006d52:	f7fd fdd1 	bl	80048f8 <_printf_float>
 8006d56:	4607      	mov	r7, r0
 8006d58:	1c78      	adds	r0, r7, #1
 8006d5a:	d1d6      	bne.n	8006d0a <_vfiprintf_r+0x19a>
 8006d5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d5e:	07d9      	lsls	r1, r3, #31
 8006d60:	d405      	bmi.n	8006d6e <_vfiprintf_r+0x1fe>
 8006d62:	89ab      	ldrh	r3, [r5, #12]
 8006d64:	059a      	lsls	r2, r3, #22
 8006d66:	d402      	bmi.n	8006d6e <_vfiprintf_r+0x1fe>
 8006d68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d6a:	f7fe fc03 	bl	8005574 <__retarget_lock_release_recursive>
 8006d6e:	89ab      	ldrh	r3, [r5, #12]
 8006d70:	065b      	lsls	r3, r3, #25
 8006d72:	f53f af1f 	bmi.w	8006bb4 <_vfiprintf_r+0x44>
 8006d76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d78:	e71e      	b.n	8006bb8 <_vfiprintf_r+0x48>
 8006d7a:	ab03      	add	r3, sp, #12
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	462a      	mov	r2, r5
 8006d80:	4b05      	ldr	r3, [pc, #20]	@ (8006d98 <_vfiprintf_r+0x228>)
 8006d82:	a904      	add	r1, sp, #16
 8006d84:	4630      	mov	r0, r6
 8006d86:	f7fe f84f 	bl	8004e28 <_printf_i>
 8006d8a:	e7e4      	b.n	8006d56 <_vfiprintf_r+0x1e6>
 8006d8c:	0800733e 	.word	0x0800733e
 8006d90:	08007348 	.word	0x08007348
 8006d94:	080048f9 	.word	0x080048f9
 8006d98:	08006b4b 	.word	0x08006b4b
 8006d9c:	08007344 	.word	0x08007344

08006da0 <__sflush_r>:
 8006da0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da8:	0716      	lsls	r6, r2, #28
 8006daa:	4605      	mov	r5, r0
 8006dac:	460c      	mov	r4, r1
 8006dae:	d454      	bmi.n	8006e5a <__sflush_r+0xba>
 8006db0:	684b      	ldr	r3, [r1, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	dc02      	bgt.n	8006dbc <__sflush_r+0x1c>
 8006db6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	dd48      	ble.n	8006e4e <__sflush_r+0xae>
 8006dbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006dbe:	2e00      	cmp	r6, #0
 8006dc0:	d045      	beq.n	8006e4e <__sflush_r+0xae>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006dc8:	682f      	ldr	r7, [r5, #0]
 8006dca:	6a21      	ldr	r1, [r4, #32]
 8006dcc:	602b      	str	r3, [r5, #0]
 8006dce:	d030      	beq.n	8006e32 <__sflush_r+0x92>
 8006dd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006dd2:	89a3      	ldrh	r3, [r4, #12]
 8006dd4:	0759      	lsls	r1, r3, #29
 8006dd6:	d505      	bpl.n	8006de4 <__sflush_r+0x44>
 8006dd8:	6863      	ldr	r3, [r4, #4]
 8006dda:	1ad2      	subs	r2, r2, r3
 8006ddc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006dde:	b10b      	cbz	r3, 8006de4 <__sflush_r+0x44>
 8006de0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006de2:	1ad2      	subs	r2, r2, r3
 8006de4:	2300      	movs	r3, #0
 8006de6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006de8:	6a21      	ldr	r1, [r4, #32]
 8006dea:	4628      	mov	r0, r5
 8006dec:	47b0      	blx	r6
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	d106      	bne.n	8006e02 <__sflush_r+0x62>
 8006df4:	6829      	ldr	r1, [r5, #0]
 8006df6:	291d      	cmp	r1, #29
 8006df8:	d82b      	bhi.n	8006e52 <__sflush_r+0xb2>
 8006dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8006ea4 <__sflush_r+0x104>)
 8006dfc:	40ca      	lsrs	r2, r1
 8006dfe:	07d6      	lsls	r6, r2, #31
 8006e00:	d527      	bpl.n	8006e52 <__sflush_r+0xb2>
 8006e02:	2200      	movs	r2, #0
 8006e04:	6062      	str	r2, [r4, #4]
 8006e06:	04d9      	lsls	r1, r3, #19
 8006e08:	6922      	ldr	r2, [r4, #16]
 8006e0a:	6022      	str	r2, [r4, #0]
 8006e0c:	d504      	bpl.n	8006e18 <__sflush_r+0x78>
 8006e0e:	1c42      	adds	r2, r0, #1
 8006e10:	d101      	bne.n	8006e16 <__sflush_r+0x76>
 8006e12:	682b      	ldr	r3, [r5, #0]
 8006e14:	b903      	cbnz	r3, 8006e18 <__sflush_r+0x78>
 8006e16:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e1a:	602f      	str	r7, [r5, #0]
 8006e1c:	b1b9      	cbz	r1, 8006e4e <__sflush_r+0xae>
 8006e1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e22:	4299      	cmp	r1, r3
 8006e24:	d002      	beq.n	8006e2c <__sflush_r+0x8c>
 8006e26:	4628      	mov	r0, r5
 8006e28:	f7ff f9fe 	bl	8006228 <_free_r>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e30:	e00d      	b.n	8006e4e <__sflush_r+0xae>
 8006e32:	2301      	movs	r3, #1
 8006e34:	4628      	mov	r0, r5
 8006e36:	47b0      	blx	r6
 8006e38:	4602      	mov	r2, r0
 8006e3a:	1c50      	adds	r0, r2, #1
 8006e3c:	d1c9      	bne.n	8006dd2 <__sflush_r+0x32>
 8006e3e:	682b      	ldr	r3, [r5, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0c6      	beq.n	8006dd2 <__sflush_r+0x32>
 8006e44:	2b1d      	cmp	r3, #29
 8006e46:	d001      	beq.n	8006e4c <__sflush_r+0xac>
 8006e48:	2b16      	cmp	r3, #22
 8006e4a:	d11e      	bne.n	8006e8a <__sflush_r+0xea>
 8006e4c:	602f      	str	r7, [r5, #0]
 8006e4e:	2000      	movs	r0, #0
 8006e50:	e022      	b.n	8006e98 <__sflush_r+0xf8>
 8006e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e56:	b21b      	sxth	r3, r3
 8006e58:	e01b      	b.n	8006e92 <__sflush_r+0xf2>
 8006e5a:	690f      	ldr	r7, [r1, #16]
 8006e5c:	2f00      	cmp	r7, #0
 8006e5e:	d0f6      	beq.n	8006e4e <__sflush_r+0xae>
 8006e60:	0793      	lsls	r3, r2, #30
 8006e62:	680e      	ldr	r6, [r1, #0]
 8006e64:	bf08      	it	eq
 8006e66:	694b      	ldreq	r3, [r1, #20]
 8006e68:	600f      	str	r7, [r1, #0]
 8006e6a:	bf18      	it	ne
 8006e6c:	2300      	movne	r3, #0
 8006e6e:	eba6 0807 	sub.w	r8, r6, r7
 8006e72:	608b      	str	r3, [r1, #8]
 8006e74:	f1b8 0f00 	cmp.w	r8, #0
 8006e78:	dde9      	ble.n	8006e4e <__sflush_r+0xae>
 8006e7a:	6a21      	ldr	r1, [r4, #32]
 8006e7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e7e:	4643      	mov	r3, r8
 8006e80:	463a      	mov	r2, r7
 8006e82:	4628      	mov	r0, r5
 8006e84:	47b0      	blx	r6
 8006e86:	2800      	cmp	r0, #0
 8006e88:	dc08      	bgt.n	8006e9c <__sflush_r+0xfc>
 8006e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e92:	81a3      	strh	r3, [r4, #12]
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295
 8006e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e9c:	4407      	add	r7, r0
 8006e9e:	eba8 0800 	sub.w	r8, r8, r0
 8006ea2:	e7e7      	b.n	8006e74 <__sflush_r+0xd4>
 8006ea4:	20400001 	.word	0x20400001

08006ea8 <_fflush_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	690b      	ldr	r3, [r1, #16]
 8006eac:	4605      	mov	r5, r0
 8006eae:	460c      	mov	r4, r1
 8006eb0:	b913      	cbnz	r3, 8006eb8 <_fflush_r+0x10>
 8006eb2:	2500      	movs	r5, #0
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	b118      	cbz	r0, 8006ec2 <_fflush_r+0x1a>
 8006eba:	6a03      	ldr	r3, [r0, #32]
 8006ebc:	b90b      	cbnz	r3, 8006ec2 <_fflush_r+0x1a>
 8006ebe:	f7fe f95d 	bl	800517c <__sinit>
 8006ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d0f3      	beq.n	8006eb2 <_fflush_r+0xa>
 8006eca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ecc:	07d0      	lsls	r0, r2, #31
 8006ece:	d404      	bmi.n	8006eda <_fflush_r+0x32>
 8006ed0:	0599      	lsls	r1, r3, #22
 8006ed2:	d402      	bmi.n	8006eda <_fflush_r+0x32>
 8006ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ed6:	f7fe fb4c 	bl	8005572 <__retarget_lock_acquire_recursive>
 8006eda:	4628      	mov	r0, r5
 8006edc:	4621      	mov	r1, r4
 8006ede:	f7ff ff5f 	bl	8006da0 <__sflush_r>
 8006ee2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ee4:	07da      	lsls	r2, r3, #31
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	d4e4      	bmi.n	8006eb4 <_fflush_r+0xc>
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	059b      	lsls	r3, r3, #22
 8006eee:	d4e1      	bmi.n	8006eb4 <_fflush_r+0xc>
 8006ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ef2:	f7fe fb3f 	bl	8005574 <__retarget_lock_release_recursive>
 8006ef6:	e7dd      	b.n	8006eb4 <_fflush_r+0xc>

08006ef8 <__swhatbuf_r>:
 8006ef8:	b570      	push	{r4, r5, r6, lr}
 8006efa:	460c      	mov	r4, r1
 8006efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f00:	2900      	cmp	r1, #0
 8006f02:	b096      	sub	sp, #88	@ 0x58
 8006f04:	4615      	mov	r5, r2
 8006f06:	461e      	mov	r6, r3
 8006f08:	da0d      	bge.n	8006f26 <__swhatbuf_r+0x2e>
 8006f0a:	89a3      	ldrh	r3, [r4, #12]
 8006f0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f10:	f04f 0100 	mov.w	r1, #0
 8006f14:	bf14      	ite	ne
 8006f16:	2340      	movne	r3, #64	@ 0x40
 8006f18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	6031      	str	r1, [r6, #0]
 8006f20:	602b      	str	r3, [r5, #0]
 8006f22:	b016      	add	sp, #88	@ 0x58
 8006f24:	bd70      	pop	{r4, r5, r6, pc}
 8006f26:	466a      	mov	r2, sp
 8006f28:	f000 f848 	bl	8006fbc <_fstat_r>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	dbec      	blt.n	8006f0a <__swhatbuf_r+0x12>
 8006f30:	9901      	ldr	r1, [sp, #4]
 8006f32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f3a:	4259      	negs	r1, r3
 8006f3c:	4159      	adcs	r1, r3
 8006f3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f42:	e7eb      	b.n	8006f1c <__swhatbuf_r+0x24>

08006f44 <__smakebuf_r>:
 8006f44:	898b      	ldrh	r3, [r1, #12]
 8006f46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f48:	079d      	lsls	r5, r3, #30
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	d507      	bpl.n	8006f60 <__smakebuf_r+0x1c>
 8006f50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	6123      	str	r3, [r4, #16]
 8006f58:	2301      	movs	r3, #1
 8006f5a:	6163      	str	r3, [r4, #20]
 8006f5c:	b003      	add	sp, #12
 8006f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f60:	ab01      	add	r3, sp, #4
 8006f62:	466a      	mov	r2, sp
 8006f64:	f7ff ffc8 	bl	8006ef8 <__swhatbuf_r>
 8006f68:	9f00      	ldr	r7, [sp, #0]
 8006f6a:	4605      	mov	r5, r0
 8006f6c:	4639      	mov	r1, r7
 8006f6e:	4630      	mov	r0, r6
 8006f70:	f7ff f9ce 	bl	8006310 <_malloc_r>
 8006f74:	b948      	cbnz	r0, 8006f8a <__smakebuf_r+0x46>
 8006f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f7a:	059a      	lsls	r2, r3, #22
 8006f7c:	d4ee      	bmi.n	8006f5c <__smakebuf_r+0x18>
 8006f7e:	f023 0303 	bic.w	r3, r3, #3
 8006f82:	f043 0302 	orr.w	r3, r3, #2
 8006f86:	81a3      	strh	r3, [r4, #12]
 8006f88:	e7e2      	b.n	8006f50 <__smakebuf_r+0xc>
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	6020      	str	r0, [r4, #0]
 8006f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f92:	81a3      	strh	r3, [r4, #12]
 8006f94:	9b01      	ldr	r3, [sp, #4]
 8006f96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f9a:	b15b      	cbz	r3, 8006fb4 <__smakebuf_r+0x70>
 8006f9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	f000 f81d 	bl	8006fe0 <_isatty_r>
 8006fa6:	b128      	cbz	r0, 8006fb4 <__smakebuf_r+0x70>
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	f023 0303 	bic.w	r3, r3, #3
 8006fae:	f043 0301 	orr.w	r3, r3, #1
 8006fb2:	81a3      	strh	r3, [r4, #12]
 8006fb4:	89a3      	ldrh	r3, [r4, #12]
 8006fb6:	431d      	orrs	r5, r3
 8006fb8:	81a5      	strh	r5, [r4, #12]
 8006fba:	e7cf      	b.n	8006f5c <__smakebuf_r+0x18>

08006fbc <_fstat_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	4d07      	ldr	r5, [pc, #28]	@ (8006fdc <_fstat_r+0x20>)
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	602b      	str	r3, [r5, #0]
 8006fca:	f7fa fc54 	bl	8001876 <_fstat>
 8006fce:	1c43      	adds	r3, r0, #1
 8006fd0:	d102      	bne.n	8006fd8 <_fstat_r+0x1c>
 8006fd2:	682b      	ldr	r3, [r5, #0]
 8006fd4:	b103      	cbz	r3, 8006fd8 <_fstat_r+0x1c>
 8006fd6:	6023      	str	r3, [r4, #0]
 8006fd8:	bd38      	pop	{r3, r4, r5, pc}
 8006fda:	bf00      	nop
 8006fdc:	20000410 	.word	0x20000410

08006fe0 <_isatty_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4d06      	ldr	r5, [pc, #24]	@ (8006ffc <_isatty_r+0x1c>)
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	4608      	mov	r0, r1
 8006fea:	602b      	str	r3, [r5, #0]
 8006fec:	f7fa fc53 	bl	8001896 <_isatty>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d102      	bne.n	8006ffa <_isatty_r+0x1a>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	b103      	cbz	r3, 8006ffa <_isatty_r+0x1a>
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	20000410 	.word	0x20000410

08007000 <_sbrk_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d06      	ldr	r5, [pc, #24]	@ (800701c <_sbrk_r+0x1c>)
 8007004:	2300      	movs	r3, #0
 8007006:	4604      	mov	r4, r0
 8007008:	4608      	mov	r0, r1
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	f7fa fc5c 	bl	80018c8 <_sbrk>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_sbrk_r+0x1a>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_sbrk_r+0x1a>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	20000410 	.word	0x20000410

08007020 <memcpy>:
 8007020:	440a      	add	r2, r1
 8007022:	4291      	cmp	r1, r2
 8007024:	f100 33ff 	add.w	r3, r0, #4294967295
 8007028:	d100      	bne.n	800702c <memcpy+0xc>
 800702a:	4770      	bx	lr
 800702c:	b510      	push	{r4, lr}
 800702e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007036:	4291      	cmp	r1, r2
 8007038:	d1f9      	bne.n	800702e <memcpy+0xe>
 800703a:	bd10      	pop	{r4, pc}

0800703c <__assert_func>:
 800703c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800703e:	4614      	mov	r4, r2
 8007040:	461a      	mov	r2, r3
 8007042:	4b09      	ldr	r3, [pc, #36]	@ (8007068 <__assert_func+0x2c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4605      	mov	r5, r0
 8007048:	68d8      	ldr	r0, [r3, #12]
 800704a:	b14c      	cbz	r4, 8007060 <__assert_func+0x24>
 800704c:	4b07      	ldr	r3, [pc, #28]	@ (800706c <__assert_func+0x30>)
 800704e:	9100      	str	r1, [sp, #0]
 8007050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007054:	4906      	ldr	r1, [pc, #24]	@ (8007070 <__assert_func+0x34>)
 8007056:	462b      	mov	r3, r5
 8007058:	f000 f842 	bl	80070e0 <fiprintf>
 800705c:	f000 f852 	bl	8007104 <abort>
 8007060:	4b04      	ldr	r3, [pc, #16]	@ (8007074 <__assert_func+0x38>)
 8007062:	461c      	mov	r4, r3
 8007064:	e7f3      	b.n	800704e <__assert_func+0x12>
 8007066:	bf00      	nop
 8007068:	20000018 	.word	0x20000018
 800706c:	08007359 	.word	0x08007359
 8007070:	08007366 	.word	0x08007366
 8007074:	08007394 	.word	0x08007394

08007078 <_calloc_r>:
 8007078:	b570      	push	{r4, r5, r6, lr}
 800707a:	fba1 5402 	umull	r5, r4, r1, r2
 800707e:	b934      	cbnz	r4, 800708e <_calloc_r+0x16>
 8007080:	4629      	mov	r1, r5
 8007082:	f7ff f945 	bl	8006310 <_malloc_r>
 8007086:	4606      	mov	r6, r0
 8007088:	b928      	cbnz	r0, 8007096 <_calloc_r+0x1e>
 800708a:	4630      	mov	r0, r6
 800708c:	bd70      	pop	{r4, r5, r6, pc}
 800708e:	220c      	movs	r2, #12
 8007090:	6002      	str	r2, [r0, #0]
 8007092:	2600      	movs	r6, #0
 8007094:	e7f9      	b.n	800708a <_calloc_r+0x12>
 8007096:	462a      	mov	r2, r5
 8007098:	4621      	mov	r1, r4
 800709a:	f7fe f9ed 	bl	8005478 <memset>
 800709e:	e7f4      	b.n	800708a <_calloc_r+0x12>

080070a0 <__ascii_mbtowc>:
 80070a0:	b082      	sub	sp, #8
 80070a2:	b901      	cbnz	r1, 80070a6 <__ascii_mbtowc+0x6>
 80070a4:	a901      	add	r1, sp, #4
 80070a6:	b142      	cbz	r2, 80070ba <__ascii_mbtowc+0x1a>
 80070a8:	b14b      	cbz	r3, 80070be <__ascii_mbtowc+0x1e>
 80070aa:	7813      	ldrb	r3, [r2, #0]
 80070ac:	600b      	str	r3, [r1, #0]
 80070ae:	7812      	ldrb	r2, [r2, #0]
 80070b0:	1e10      	subs	r0, r2, #0
 80070b2:	bf18      	it	ne
 80070b4:	2001      	movne	r0, #1
 80070b6:	b002      	add	sp, #8
 80070b8:	4770      	bx	lr
 80070ba:	4610      	mov	r0, r2
 80070bc:	e7fb      	b.n	80070b6 <__ascii_mbtowc+0x16>
 80070be:	f06f 0001 	mvn.w	r0, #1
 80070c2:	e7f8      	b.n	80070b6 <__ascii_mbtowc+0x16>

080070c4 <__ascii_wctomb>:
 80070c4:	4603      	mov	r3, r0
 80070c6:	4608      	mov	r0, r1
 80070c8:	b141      	cbz	r1, 80070dc <__ascii_wctomb+0x18>
 80070ca:	2aff      	cmp	r2, #255	@ 0xff
 80070cc:	d904      	bls.n	80070d8 <__ascii_wctomb+0x14>
 80070ce:	228a      	movs	r2, #138	@ 0x8a
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	f04f 30ff 	mov.w	r0, #4294967295
 80070d6:	4770      	bx	lr
 80070d8:	700a      	strb	r2, [r1, #0]
 80070da:	2001      	movs	r0, #1
 80070dc:	4770      	bx	lr
	...

080070e0 <fiprintf>:
 80070e0:	b40e      	push	{r1, r2, r3}
 80070e2:	b503      	push	{r0, r1, lr}
 80070e4:	4601      	mov	r1, r0
 80070e6:	ab03      	add	r3, sp, #12
 80070e8:	4805      	ldr	r0, [pc, #20]	@ (8007100 <fiprintf+0x20>)
 80070ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ee:	6800      	ldr	r0, [r0, #0]
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	f7ff fd3d 	bl	8006b70 <_vfiprintf_r>
 80070f6:	b002      	add	sp, #8
 80070f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070fc:	b003      	add	sp, #12
 80070fe:	4770      	bx	lr
 8007100:	20000018 	.word	0x20000018

08007104 <abort>:
 8007104:	b508      	push	{r3, lr}
 8007106:	2006      	movs	r0, #6
 8007108:	f000 f82c 	bl	8007164 <raise>
 800710c:	2001      	movs	r0, #1
 800710e:	f7fa fb62 	bl	80017d6 <_exit>

08007112 <_raise_r>:
 8007112:	291f      	cmp	r1, #31
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4605      	mov	r5, r0
 8007118:	460c      	mov	r4, r1
 800711a:	d904      	bls.n	8007126 <_raise_r+0x14>
 800711c:	2316      	movs	r3, #22
 800711e:	6003      	str	r3, [r0, #0]
 8007120:	f04f 30ff 	mov.w	r0, #4294967295
 8007124:	bd38      	pop	{r3, r4, r5, pc}
 8007126:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007128:	b112      	cbz	r2, 8007130 <_raise_r+0x1e>
 800712a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800712e:	b94b      	cbnz	r3, 8007144 <_raise_r+0x32>
 8007130:	4628      	mov	r0, r5
 8007132:	f000 f831 	bl	8007198 <_getpid_r>
 8007136:	4622      	mov	r2, r4
 8007138:	4601      	mov	r1, r0
 800713a:	4628      	mov	r0, r5
 800713c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007140:	f000 b818 	b.w	8007174 <_kill_r>
 8007144:	2b01      	cmp	r3, #1
 8007146:	d00a      	beq.n	800715e <_raise_r+0x4c>
 8007148:	1c59      	adds	r1, r3, #1
 800714a:	d103      	bne.n	8007154 <_raise_r+0x42>
 800714c:	2316      	movs	r3, #22
 800714e:	6003      	str	r3, [r0, #0]
 8007150:	2001      	movs	r0, #1
 8007152:	e7e7      	b.n	8007124 <_raise_r+0x12>
 8007154:	2100      	movs	r1, #0
 8007156:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800715a:	4620      	mov	r0, r4
 800715c:	4798      	blx	r3
 800715e:	2000      	movs	r0, #0
 8007160:	e7e0      	b.n	8007124 <_raise_r+0x12>
	...

08007164 <raise>:
 8007164:	4b02      	ldr	r3, [pc, #8]	@ (8007170 <raise+0xc>)
 8007166:	4601      	mov	r1, r0
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	f7ff bfd2 	b.w	8007112 <_raise_r>
 800716e:	bf00      	nop
 8007170:	20000018 	.word	0x20000018

08007174 <_kill_r>:
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	4d07      	ldr	r5, [pc, #28]	@ (8007194 <_kill_r+0x20>)
 8007178:	2300      	movs	r3, #0
 800717a:	4604      	mov	r4, r0
 800717c:	4608      	mov	r0, r1
 800717e:	4611      	mov	r1, r2
 8007180:	602b      	str	r3, [r5, #0]
 8007182:	f7fa fb18 	bl	80017b6 <_kill>
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	d102      	bne.n	8007190 <_kill_r+0x1c>
 800718a:	682b      	ldr	r3, [r5, #0]
 800718c:	b103      	cbz	r3, 8007190 <_kill_r+0x1c>
 800718e:	6023      	str	r3, [r4, #0]
 8007190:	bd38      	pop	{r3, r4, r5, pc}
 8007192:	bf00      	nop
 8007194:	20000410 	.word	0x20000410

08007198 <_getpid_r>:
 8007198:	f7fa bb05 	b.w	80017a6 <_getpid>

0800719c <_init>:
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	bf00      	nop
 80071a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a2:	bc08      	pop	{r3}
 80071a4:	469e      	mov	lr, r3
 80071a6:	4770      	bx	lr

080071a8 <_fini>:
 80071a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071aa:	bf00      	nop
 80071ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ae:	bc08      	pop	{r3}
 80071b0:	469e      	mov	lr, r3
 80071b2:	4770      	bx	lr
