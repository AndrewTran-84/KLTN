
mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08006db8  08006db8  00007db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071cc  080071cc  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080071cc  080071cc  000081cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071d4  080071d4  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071d4  080071d4  000081d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071d8  080071d8  000081d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080071dc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001d4  080073b0  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  080073b0  00009420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd96  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f2b  00000000  00000000  00016f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00018ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000894  00000000  00000000  000199e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026437  00000000  00000000  0001a27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100fe  00000000  00000000  000406b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8fd0  00000000  00000000  000507b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139781  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d98  00000000  00000000  001397c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0013d55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d9c 	.word	0x08006d9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08006d9c 	.word	0x08006d9c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <mpu_read_bytes>:
static const float ACC_SENS_2G = 16384.0f;  // LSB/g for ±2g
static const float GYRO_SENS_250DPS = 131.0f; // LSB/(°/s) for ±250 dps

// Helper: read bytes
static HAL_StatusTypeDef mpu_read_bytes(uint8_t reg, uint8_t *buf, uint16_t len)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af04      	add	r7, sp, #16
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg, I2C_MEMADD_SIZE_8BIT, buf, len, 1000);
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2301      	movs	r3, #1
 8000f38:	21d0      	movs	r1, #208	@ 0xd0
 8000f3a:	4804      	ldr	r0, [pc, #16]	@ (8000f4c <mpu_read_bytes+0x38>)
 8000f3c:	f001 f84c 	bl	8001fd8 <HAL_I2C_Mem_Read>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200001f0 	.word	0x200001f0

08000f50 <MPU6050_ReadAll>:

    return 0;
}

int MPU6050_ReadAll(MPU6050_Data_t *out)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
    uint8_t buf[14];
    if (mpu_read_bytes(MPU6050_ACCEL_XOUT_H, buf, 14) != HAL_OK) {
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	220e      	movs	r2, #14
 8000f5e:	4619      	mov	r1, r3
 8000f60:	203b      	movs	r0, #59	@ 0x3b
 8000f62:	f7ff ffd7 	bl	8000f14 <mpu_read_bytes>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <MPU6050_ReadAll+0x22>
        return -1;
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	e0ac      	b.n	80010cc <MPU6050_ReadAll+0x17c>
    }

    out->acc_x_raw = (int16_t)((buf[0] << 8) | buf[1]);
 8000f72:	7a3b      	ldrb	r3, [r7, #8]
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	7a7b      	ldrb	r3, [r7, #9]
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	801a      	strh	r2, [r3, #0]
    out->acc_y_raw = (int16_t)((buf[2] << 8) | buf[3]);
 8000f86:	7abb      	ldrb	r3, [r7, #10]
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	7afb      	ldrb	r3, [r7, #11]
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	805a      	strh	r2, [r3, #2]
    out->acc_z_raw = (int16_t)((buf[4] << 8) | buf[5]);
 8000f9a:	7b3b      	ldrb	r3, [r7, #12]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	7b7b      	ldrb	r3, [r7, #13]
 8000fa4:	b21b      	sxth	r3, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	809a      	strh	r2, [r3, #4]

    out->temp_raw  = (int16_t)((buf[6] << 8) | buf[7]);
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	80da      	strh	r2, [r3, #6]

    out->gyro_x_raw = (int16_t)((buf[8]  << 8) | buf[9]);
 8000fc2:	7c3b      	ldrb	r3, [r7, #16]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	021b      	lsls	r3, r3, #8
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	7c7b      	ldrb	r3, [r7, #17]
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	811a      	strh	r2, [r3, #8]
    out->gyro_y_raw = (int16_t)((buf[10] << 8) | buf[11]);
 8000fd6:	7cbb      	ldrb	r3, [r7, #18]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	7cfb      	ldrb	r3, [r7, #19]
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	815a      	strh	r2, [r3, #10]
    out->gyro_z_raw = (int16_t)((buf[12] << 8) | buf[13]);
 8000fea:	7d3b      	ldrb	r3, [r7, #20]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	7d7b      	ldrb	r3, [r7, #21]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	819a      	strh	r2, [r3, #12]

    // Convert to physical units
    out->acc_x_g = ((float)out->acc_x_raw) / ACC_SENS_2G;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001004:	ee07 3a90 	vmov	s15, r3
 8001008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100c:	eddf 6a31 	vldr	s13, [pc, #196]	@ 80010d4 <MPU6050_ReadAll+0x184>
 8001010:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	edc3 7a04 	vstr	s15, [r3, #16]
    out->acc_y_g = ((float)out->acc_y_raw) / ACC_SENS_2G;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001028:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80010d4 <MPU6050_ReadAll+0x184>
 800102c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	edc3 7a05 	vstr	s15, [r3, #20]
    out->acc_z_g = ((float)out->acc_z_raw) / ACC_SENS_2G;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001044:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80010d4 <MPU6050_ReadAll+0x184>
 8001048:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	edc3 7a06 	vstr	s15, [r3, #24]

    out->temperature_c = ((float)out->temp_raw) / 340.0f + 36.53f;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001060:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 80010d8 <MPU6050_ReadAll+0x188>
 8001064:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001068:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80010dc <MPU6050_ReadAll+0x18c>
 800106c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	edc3 7a07 	vstr	s15, [r3, #28]

    out->gyro_x_dps = ((float)out->gyro_x_raw) / GYRO_SENS_250DPS;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001084:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80010e0 <MPU6050_ReadAll+0x190>
 8001088:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	edc3 7a08 	vstr	s15, [r3, #32]
    out->gyro_y_dps = ((float)out->gyro_y_raw) / GYRO_SENS_250DPS;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001098:	ee07 3a90 	vmov	s15, r3
 800109c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a0:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80010e0 <MPU6050_ReadAll+0x190>
 80010a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    out->gyro_z_dps = ((float)out->gyro_z_raw) / GYRO_SENS_250DPS;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80010b4:	ee07 3a90 	vmov	s15, r3
 80010b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010bc:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010e0 <MPU6050_ReadAll+0x190>
 80010c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    return 0;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	46800000 	.word	0x46800000
 80010d8:	43aa0000 	.word	0x43aa0000
 80010dc:	42121eb8 	.word	0x42121eb8
 80010e0:	43030000 	.word	0x43030000

080010e4 <__io_putchar>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
int __io_putchar(int ch)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    uint8_t c = (uint8_t)ch;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart1, &c, 1, HAL_MAX_DELAY);
 80010f2:	f107 010f 	add.w	r1, r7, #15
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	2201      	movs	r2, #1
 80010fc:	4803      	ldr	r0, [pc, #12]	@ (800110c <__io_putchar+0x28>)
 80010fe:	f002 fca3 	bl	8003a48 <HAL_UART_Transmit>
    return ch;
 8001102:	687b      	ldr	r3, [r7, #4]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000244 	.word	0x20000244

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001114:	b09f      	sub	sp, #124	@ 0x7c
 8001116:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001118:	f000 fbaf 	bl	800187a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111c:	f000 f862 	bl	80011e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001120:	f000 f93e 	bl	80013a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001124:	f000 f8cc 	bl	80012c0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001128:	f000 f90a 	bl	8001340 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\nMPU6050 test start\r\n");
 800112c:	482a      	ldr	r0, [pc, #168]	@ (80011d8 <main+0xc8>)
 800112e:	f003 fec3 	bl	8004eb8 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (MPU6050_ReadAll(&data) == 0) {
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff0a 	bl	8000f50 <MPU6050_ReadAll>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d143      	bne.n	80011ca <main+0xba>
		  printf("t=%lu ms, Acc(g): X=%.3f Y=%.3f Z=%.3f, Gyro(dps): X=%.2f Y=%.2f Z=%.2f, Temp=%.2f C\r\n",
 8001142:	f000 fbeb 	bl	800191c <HAL_GetTick>
 8001146:	4606      	mov	r6, r0
				  HAL_GetTick(),
				  data.acc_x_g, data.acc_y_g, data.acc_z_g,
 8001148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
		  printf("t=%lu ms, Acc(g): X=%.3f Y=%.3f Z=%.3f, Gyro(dps): X=%.2f Y=%.2f Z=%.2f, Temp=%.2f C\r\n",
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fa1c 	bl	8000588 <__aeabi_f2d>
 8001150:	e9c7 0104 	strd	r0, r1, [r7, #16]
				  data.acc_x_g, data.acc_y_g, data.acc_z_g,
 8001154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
		  printf("t=%lu ms, Acc(g): X=%.3f Y=%.3f Z=%.3f, Gyro(dps): X=%.2f Y=%.2f Z=%.2f, Temp=%.2f C\r\n",
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fa16 	bl	8000588 <__aeabi_f2d>
 800115c:	4680      	mov	r8, r0
 800115e:	4689      	mov	r9, r1
				  data.acc_x_g, data.acc_y_g, data.acc_z_g,
 8001160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
		  printf("t=%lu ms, Acc(g): X=%.3f Y=%.3f Z=%.3f, Gyro(dps): X=%.2f Y=%.2f Z=%.2f, Temp=%.2f C\r\n",
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fa10 	bl	8000588 <__aeabi_f2d>
 8001168:	4682      	mov	sl, r0
 800116a:	468b      	mov	fp, r1
				  data.gyro_x_dps, data.gyro_y_dps, data.gyro_z_dps,
 800116c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
		  printf("t=%lu ms, Acc(g): X=%.3f Y=%.3f Z=%.3f, Gyro(dps): X=%.2f Y=%.2f Z=%.2f, Temp=%.2f C\r\n",
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fa0a 	bl	8000588 <__aeabi_f2d>
 8001174:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  data.gyro_x_dps, data.gyro_y_dps, data.gyro_z_dps,
 8001178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
		  printf("t=%lu ms, Acc(g): X=%.3f Y=%.3f Z=%.3f, Gyro(dps): X=%.2f Y=%.2f Z=%.2f, Temp=%.2f C\r\n",
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fa04 	bl	8000588 <__aeabi_f2d>
 8001180:	e9c7 0100 	strd	r0, r1, [r7]
				  data.gyro_x_dps, data.gyro_y_dps, data.gyro_z_dps,
 8001184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
		  printf("t=%lu ms, Acc(g): X=%.3f Y=%.3f Z=%.3f, Gyro(dps): X=%.2f Y=%.2f Z=%.2f, Temp=%.2f C\r\n",
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f9fe 	bl	8000588 <__aeabi_f2d>
 800118c:	4604      	mov	r4, r0
 800118e:	460d      	mov	r5, r1
				  data.temperature_c);
 8001190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
		  printf("t=%lu ms, Acc(g): X=%.3f Y=%.3f Z=%.3f, Gyro(dps): X=%.2f Y=%.2f Z=%.2f, Temp=%.2f C\r\n",
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f9f8 	bl	8000588 <__aeabi_f2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80011a0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80011a4:	ed97 7b00 	vldr	d7, [r7]
 80011a8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80011ac:	ed97 7b02 	vldr	d7, [r7, #8]
 80011b0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80011b4:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80011b8:	e9cd 8900 	strd	r8, r9, [sp]
 80011bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011c0:	4631      	mov	r1, r6
 80011c2:	4806      	ldr	r0, [pc, #24]	@ (80011dc <main+0xcc>)
 80011c4:	f003 fe10 	bl	8004de8 <iprintf>
 80011c8:	e002      	b.n	80011d0 <main+0xc0>
	  } else {
		  printf("MPU6050 read error\r\n");
 80011ca:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <main+0xd0>)
 80011cc:	f003 fe74 	bl	8004eb8 <puts>
	  }
	  HAL_Delay(200); // 5 Hz printing - adjust as needed
 80011d0:	20c8      	movs	r0, #200	@ 0xc8
 80011d2:	f000 fbaf 	bl	8001934 <HAL_Delay>
	  if (MPU6050_ReadAll(&data) == 0) {
 80011d6:	e7ac      	b.n	8001132 <main+0x22>
 80011d8:	08006db8 	.word	0x08006db8
 80011dc:	08006dd0 	.word	0x08006dd0
 80011e0:	08006e28 	.word	0x08006e28

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b094      	sub	sp, #80	@ 0x50
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	2230      	movs	r2, #48	@ 0x30
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 ff40 	bl	8005078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	4b2b      	ldr	r3, [pc, #172]	@ (80012b8 <SystemClock_Config+0xd4>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120c:	4a2a      	ldr	r2, [pc, #168]	@ (80012b8 <SystemClock_Config+0xd4>)
 800120e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001212:	6413      	str	r3, [r2, #64]	@ 0x40
 8001214:	4b28      	ldr	r3, [pc, #160]	@ (80012b8 <SystemClock_Config+0xd4>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001220:	4b26      	ldr	r3, [pc, #152]	@ (80012bc <SystemClock_Config+0xd8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a25      	ldr	r2, [pc, #148]	@ (80012bc <SystemClock_Config+0xd8>)
 8001226:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <SystemClock_Config+0xd8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001238:	2301      	movs	r3, #1
 800123a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001242:	2302      	movs	r3, #2
 8001244:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001246:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800124a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800124c:	2319      	movs	r3, #25
 800124e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001250:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8001254:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800125a:	2309      	movs	r3, #9
 800125c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	4618      	mov	r0, r3
 8001264:	f001 fb28 	bl	80028b8 <HAL_RCC_OscConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800126e:	f000 f8c7 	bl	8001400 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001272:	f001 fad1 	bl	8002818 <HAL_PWREx_EnableOverDrive>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800127c:	f000 f8c0 	bl	8001400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001280:	230f      	movs	r3, #15
 8001282:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001284:	2302      	movs	r3, #2
 8001286:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800128c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001290:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001296:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2107      	movs	r1, #7
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 fdae 	bl	8002e00 <HAL_RCC_ClockConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012aa:	f000 f8a9 	bl	8001400 <Error_Handler>
  }
}
 80012ae:	bf00      	nop
 80012b0:	3750      	adds	r7, #80	@ 0x50
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000

080012c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001338 <MX_I2C1_Init+0x78>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012cc:	4a1b      	ldr	r2, [pc, #108]	@ (800133c <MX_I2C1_Init+0x7c>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d6:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012d8:	2201      	movs	r2, #1
 80012da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012dc:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012e2:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fa:	480e      	ldr	r0, [pc, #56]	@ (8001334 <MX_I2C1_Init+0x74>)
 80012fc:	f000 fdd0 	bl	8001ea0 <HAL_I2C_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001306:	f000 f87b 	bl	8001400 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800130a:	2100      	movs	r1, #0
 800130c:	4809      	ldr	r0, [pc, #36]	@ (8001334 <MX_I2C1_Init+0x74>)
 800130e:	f001 f9eb 	bl	80026e8 <HAL_I2CEx_ConfigAnalogFilter>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001318:	f000 f872 	bl	8001400 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800131c:	2100      	movs	r1, #0
 800131e:	4805      	ldr	r0, [pc, #20]	@ (8001334 <MX_I2C1_Init+0x74>)
 8001320:	f001 fa2d 	bl	800277e <HAL_I2CEx_ConfigDigitalFilter>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800132a:	f000 f869 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200001f0 	.word	0x200001f0
 8001338:	40005400 	.word	0x40005400
 800133c:	6000030d 	.word	0x6000030d

08001340 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001344:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <MX_USART1_UART_Init+0x58>)
 8001346:	4a15      	ldr	r2, [pc, #84]	@ (800139c <MX_USART1_UART_Init+0x5c>)
 8001348:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800134a:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <MX_USART1_UART_Init+0x58>)
 800134c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001350:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_USART1_UART_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <MX_USART1_UART_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_USART1_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <MX_USART1_UART_Init+0x58>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <MX_USART1_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <MX_USART1_UART_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001376:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <MX_USART1_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <MX_USART1_UART_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	@ (8001398 <MX_USART1_UART_Init+0x58>)
 8001384:	f002 fb12 	bl	80039ac <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800138e:	f000 f837 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000244 	.word	0x20000244
 800139c:	40011000 	.word	0x40011000

080013a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <MX_GPIO_Init+0x5c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	4a14      	ldr	r2, [pc, #80]	@ (80013fc <MX_GPIO_Init+0x5c>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <MX_GPIO_Init+0x5c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <MX_GPIO_Init+0x5c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a0e      	ldr	r2, [pc, #56]	@ (80013fc <MX_GPIO_Init+0x5c>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <MX_GPIO_Init+0x5c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <MX_GPIO_Init+0x5c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a08      	ldr	r2, [pc, #32]	@ (80013fc <MX_GPIO_Init+0x5c>)
 80013dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <MX_GPIO_Init+0x5c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
}
 8001406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <Error_Handler+0x8>

0800140c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <HAL_MspInit+0x44>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a0e      	ldr	r2, [pc, #56]	@ (8001450 <HAL_MspInit+0x44>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <HAL_MspInit+0x44>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <HAL_MspInit+0x44>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <HAL_MspInit+0x44>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001434:	6453      	str	r3, [r2, #68]	@ 0x44
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <HAL_MspInit+0x44>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b0aa      	sub	sp, #168	@ 0xa8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	2284      	movs	r2, #132	@ 0x84
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f003 fdff 	bl	8005078 <memset>
  if(hi2c->Instance==I2C1)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a22      	ldr	r2, [pc, #136]	@ (8001508 <HAL_I2C_MspInit+0xb4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d13c      	bne.n	80014fe <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001484:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001488:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800148a:	2300      	movs	r3, #0
 800148c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	4618      	mov	r0, r3
 8001494:	f001 fe9a 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800149e:	f7ff ffaf 	bl	8001400 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <HAL_I2C_MspInit+0xb8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a19      	ldr	r2, [pc, #100]	@ (800150c <HAL_I2C_MspInit+0xb8>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b17      	ldr	r3, [pc, #92]	@ (800150c <HAL_I2C_MspInit+0xb8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c2:	2312      	movs	r3, #18
 80014c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014d4:	2304      	movs	r3, #4
 80014d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014de:	4619      	mov	r1, r3
 80014e0:	480b      	ldr	r0, [pc, #44]	@ (8001510 <HAL_I2C_MspInit+0xbc>)
 80014e2:	f000 fb31 	bl	8001b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e6:	4b09      	ldr	r3, [pc, #36]	@ (800150c <HAL_I2C_MspInit+0xb8>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	4a08      	ldr	r2, [pc, #32]	@ (800150c <HAL_I2C_MspInit+0xb8>)
 80014ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_I2C_MspInit+0xb8>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014fe:	bf00      	nop
 8001500:	37a8      	adds	r7, #168	@ 0xa8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40005400 	.word	0x40005400
 800150c:	40023800 	.word	0x40023800
 8001510:	40020400 	.word	0x40020400

08001514 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b0ac      	sub	sp, #176	@ 0xb0
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800152c:	f107 0318 	add.w	r3, r7, #24
 8001530:	2284      	movs	r2, #132	@ 0x84
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f003 fd9f 	bl	8005078 <memset>
  if(huart->Instance==USART1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a32      	ldr	r2, [pc, #200]	@ (8001608 <HAL_UART_MspInit+0xf4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d15c      	bne.n	80015fe <HAL_UART_MspInit+0xea>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001544:	2340      	movs	r3, #64	@ 0x40
 8001546:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001548:	2300      	movs	r3, #0
 800154a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154c:	f107 0318 	add.w	r3, r7, #24
 8001550:	4618      	mov	r0, r3
 8001552:	f001 fe3b 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800155c:	f7ff ff50 	bl	8001400 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001560:	4b2a      	ldr	r3, [pc, #168]	@ (800160c <HAL_UART_MspInit+0xf8>)
 8001562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001564:	4a29      	ldr	r2, [pc, #164]	@ (800160c <HAL_UART_MspInit+0xf8>)
 8001566:	f043 0310 	orr.w	r3, r3, #16
 800156a:	6453      	str	r3, [r2, #68]	@ 0x44
 800156c:	4b27      	ldr	r3, [pc, #156]	@ (800160c <HAL_UART_MspInit+0xf8>)
 800156e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001578:	4b24      	ldr	r3, [pc, #144]	@ (800160c <HAL_UART_MspInit+0xf8>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157c:	4a23      	ldr	r2, [pc, #140]	@ (800160c <HAL_UART_MspInit+0xf8>)
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	6313      	str	r3, [r2, #48]	@ 0x30
 8001584:	4b21      	ldr	r3, [pc, #132]	@ (800160c <HAL_UART_MspInit+0xf8>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001590:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <HAL_UART_MspInit+0xf8>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001594:	4a1d      	ldr	r2, [pc, #116]	@ (800160c <HAL_UART_MspInit+0xf8>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6313      	str	r3, [r2, #48]	@ 0x30
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <HAL_UART_MspInit+0xf8>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015a8:	2380      	movs	r3, #128	@ 0x80
 80015aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015c0:	2307      	movs	r3, #7
 80015c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015ca:	4619      	mov	r1, r3
 80015cc:	4810      	ldr	r0, [pc, #64]	@ (8001610 <HAL_UART_MspInit+0xfc>)
 80015ce:	f000 fabb 	bl	8001b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015ec:	2307      	movs	r3, #7
 80015ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015f6:	4619      	mov	r1, r3
 80015f8:	4806      	ldr	r0, [pc, #24]	@ (8001614 <HAL_UART_MspInit+0x100>)
 80015fa:	f000 faa5 	bl	8001b48 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80015fe:	bf00      	nop
 8001600:	37b0      	adds	r7, #176	@ 0xb0
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40011000 	.word	0x40011000
 800160c:	40023800 	.word	0x40023800
 8001610:	40020400 	.word	0x40020400
 8001614:	40020000 	.word	0x40020000

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <NMI_Handler+0x4>

08001620 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <MemManage_Handler+0x4>

08001630 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <UsageFault_Handler+0x4>

08001640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166e:	f000 f941 	bl	80018f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}

08001676 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  return 1;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_kill>:

int _kill(int pid, int sig)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001690:	f003 fd44 	bl	800511c <__errno>
 8001694:	4603      	mov	r3, r0
 8001696:	2216      	movs	r2, #22
 8001698:	601a      	str	r2, [r3, #0]
  return -1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <_exit>:

void _exit (int status)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016ae:	f04f 31ff 	mov.w	r1, #4294967295
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ffe7 	bl	8001686 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <_exit+0x12>

080016bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e00a      	b.n	80016e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ce:	f3af 8000 	nop.w
 80016d2:	4601      	mov	r1, r0
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	60ba      	str	r2, [r7, #8]
 80016da:	b2ca      	uxtb	r2, r1
 80016dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dbf0      	blt.n	80016ce <_read+0x12>
  }

  return len;
 80016ec:	687b      	ldr	r3, [r7, #4]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e009      	b.n	800171c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60ba      	str	r2, [r7, #8]
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fce7 	bl	80010e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	429a      	cmp	r2, r3
 8001722:	dbf1      	blt.n	8001708 <_write+0x12>
  }
  return len;
 8001724:	687b      	ldr	r3, [r7, #4]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_close>:

int _close(int file)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001756:	605a      	str	r2, [r3, #4]
  return 0;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <_isatty>:

int _isatty(int file)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a0:	4a14      	ldr	r2, [pc, #80]	@ (80017f4 <_sbrk+0x5c>)
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <_sbrk+0x60>)
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <_sbrk+0x64>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	@ (8001800 <_sbrk+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ba:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d207      	bcs.n	80017d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c8:	f003 fca8 	bl	800511c <__errno>
 80017cc:	4603      	mov	r3, r0
 80017ce:	220c      	movs	r2, #12
 80017d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	e009      	b.n	80017ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d8:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017de:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a05      	ldr	r2, [pc, #20]	@ (80017fc <_sbrk+0x64>)
 80017e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20050000 	.word	0x20050000
 80017f8:	00000400 	.word	0x00000400
 80017fc:	200002cc 	.word	0x200002cc
 8001800:	20000420 	.word	0x20000420

08001804 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <SystemInit+0x20>)
 800180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800180e:	4a05      	ldr	r2, [pc, #20]	@ (8001824 <SystemInit+0x20>)
 8001810:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001814:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001828:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001860 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800182c:	f7ff ffea 	bl	8001804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001830:	480c      	ldr	r0, [pc, #48]	@ (8001864 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001832:	490d      	ldr	r1, [pc, #52]	@ (8001868 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001834:	4a0d      	ldr	r2, [pc, #52]	@ (800186c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001846:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001848:	4c0a      	ldr	r4, [pc, #40]	@ (8001874 <LoopFillZerobss+0x22>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001856:	f003 fc67 	bl	8005128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185a:	f7ff fc59 	bl	8001110 <main>
  bx  lr    
 800185e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001860:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800186c:	080071dc 	.word	0x080071dc
  ldr r2, =_sbss
 8001870:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001874:	20000420 	.word	0x20000420

08001878 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC_IRQHandler>

0800187a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187e:	2003      	movs	r0, #3
 8001880:	f000 f92e 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001884:	200f      	movs	r0, #15
 8001886:	f000 f805 	bl	8001894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800188a:	f7ff fdbf 	bl	800140c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800189c:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <HAL_InitTick+0x54>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_InitTick+0x58>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 f93b 	bl	8001b2e <HAL_SYSTICK_Config>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e00e      	b.n	80018e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d80a      	bhi.n	80018de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c8:	2200      	movs	r2, #0
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f000 f911 	bl	8001af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d4:	4a06      	ldr	r2, [pc, #24]	@ (80018f0 <HAL_InitTick+0x5c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000008 	.word	0x20000008
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_IncTick+0x20>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_IncTick+0x24>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a04      	ldr	r2, [pc, #16]	@ (8001918 <HAL_IncTick+0x24>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000008 	.word	0x20000008
 8001918:	200002d0 	.word	0x200002d0

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	200002d0 	.word	0x200002d0

08001934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800193c:	f7ff ffee 	bl	800191c <HAL_GetTick>
 8001940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194c:	d005      	beq.n	800195a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800194e:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <HAL_Delay+0x44>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800195a:	bf00      	nop
 800195c:	f7ff ffde 	bl	800191c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	d8f7      	bhi.n	800195c <HAL_Delay+0x28>
  {
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000008 	.word	0x20000008

0800197c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <__NVIC_SetPriorityGrouping+0x40>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	@ (80019bc <__NVIC_SetPriorityGrouping+0x40>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00
 80019c0:	05fa0000 	.word	0x05fa0000

080019c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	@ (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	@ (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	@ 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	@ 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	210f      	movs	r1, #15
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f7ff ff8e 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	@ (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff47 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff5c 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff8e 	bl	8001a34 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5d 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ffb0 	bl	8001a9c <SysTick_Config>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	@ 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e175      	b.n	8001e54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	f040 8164 	bne.w	8001e4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d005      	beq.n	8001b9e <HAL_GPIO_Init+0x56>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d130      	bne.n	8001c00 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 0201 	and.w	r2, r3, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d017      	beq.n	8001c3c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d123      	bne.n	8001c90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	08da      	lsrs	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3208      	adds	r2, #8
 8001c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	08da      	lsrs	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	69b9      	ldr	r1, [r7, #24]
 8001c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0203 	and.w	r2, r3, #3
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80be 	beq.w	8001e4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	4b66      	ldr	r3, [pc, #408]	@ (8001e6c <HAL_GPIO_Init+0x324>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	4a65      	ldr	r2, [pc, #404]	@ (8001e6c <HAL_GPIO_Init+0x324>)
 8001cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cde:	4b63      	ldr	r3, [pc, #396]	@ (8001e6c <HAL_GPIO_Init+0x324>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cea:	4a61      	ldr	r2, [pc, #388]	@ (8001e70 <HAL_GPIO_Init+0x328>)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	220f      	movs	r2, #15
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a58      	ldr	r2, [pc, #352]	@ (8001e74 <HAL_GPIO_Init+0x32c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d037      	beq.n	8001d86 <HAL_GPIO_Init+0x23e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a57      	ldr	r2, [pc, #348]	@ (8001e78 <HAL_GPIO_Init+0x330>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d031      	beq.n	8001d82 <HAL_GPIO_Init+0x23a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a56      	ldr	r2, [pc, #344]	@ (8001e7c <HAL_GPIO_Init+0x334>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d02b      	beq.n	8001d7e <HAL_GPIO_Init+0x236>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a55      	ldr	r2, [pc, #340]	@ (8001e80 <HAL_GPIO_Init+0x338>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d025      	beq.n	8001d7a <HAL_GPIO_Init+0x232>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a54      	ldr	r2, [pc, #336]	@ (8001e84 <HAL_GPIO_Init+0x33c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01f      	beq.n	8001d76 <HAL_GPIO_Init+0x22e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a53      	ldr	r2, [pc, #332]	@ (8001e88 <HAL_GPIO_Init+0x340>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d019      	beq.n	8001d72 <HAL_GPIO_Init+0x22a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a52      	ldr	r2, [pc, #328]	@ (8001e8c <HAL_GPIO_Init+0x344>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <HAL_GPIO_Init+0x226>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a51      	ldr	r2, [pc, #324]	@ (8001e90 <HAL_GPIO_Init+0x348>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00d      	beq.n	8001d6a <HAL_GPIO_Init+0x222>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a50      	ldr	r2, [pc, #320]	@ (8001e94 <HAL_GPIO_Init+0x34c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d007      	beq.n	8001d66 <HAL_GPIO_Init+0x21e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4f      	ldr	r2, [pc, #316]	@ (8001e98 <HAL_GPIO_Init+0x350>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d101      	bne.n	8001d62 <HAL_GPIO_Init+0x21a>
 8001d5e:	2309      	movs	r3, #9
 8001d60:	e012      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d62:	230a      	movs	r3, #10
 8001d64:	e010      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d66:	2308      	movs	r3, #8
 8001d68:	e00e      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	e00c      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d6e:	2306      	movs	r3, #6
 8001d70:	e00a      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d72:	2305      	movs	r3, #5
 8001d74:	e008      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d76:	2304      	movs	r3, #4
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e004      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e002      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d86:	2300      	movs	r3, #0
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	f002 0203 	and.w	r2, r2, #3
 8001d8e:	0092      	lsls	r2, r2, #2
 8001d90:	4093      	lsls	r3, r2
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d98:	4935      	ldr	r1, [pc, #212]	@ (8001e70 <HAL_GPIO_Init+0x328>)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001da6:	4b3d      	ldr	r3, [pc, #244]	@ (8001e9c <HAL_GPIO_Init+0x354>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dca:	4a34      	ldr	r2, [pc, #208]	@ (8001e9c <HAL_GPIO_Init+0x354>)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd0:	4b32      	ldr	r3, [pc, #200]	@ (8001e9c <HAL_GPIO_Init+0x354>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001df4:	4a29      	ldr	r2, [pc, #164]	@ (8001e9c <HAL_GPIO_Init+0x354>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dfa:	4b28      	ldr	r3, [pc, #160]	@ (8001e9c <HAL_GPIO_Init+0x354>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001e9c <HAL_GPIO_Init+0x354>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e24:	4b1d      	ldr	r3, [pc, #116]	@ (8001e9c <HAL_GPIO_Init+0x354>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e48:	4a14      	ldr	r2, [pc, #80]	@ (8001e9c <HAL_GPIO_Init+0x354>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3301      	adds	r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	2b0f      	cmp	r3, #15
 8001e58:	f67f ae86 	bls.w	8001b68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3724      	adds	r7, #36	@ 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40013800 	.word	0x40013800
 8001e74:	40020000 	.word	0x40020000
 8001e78:	40020400 	.word	0x40020400
 8001e7c:	40020800 	.word	0x40020800
 8001e80:	40020c00 	.word	0x40020c00
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40021400 	.word	0x40021400
 8001e8c:	40021800 	.word	0x40021800
 8001e90:	40021c00 	.word	0x40021c00
 8001e94:	40022000 	.word	0x40022000
 8001e98:	40022400 	.word	0x40022400
 8001e9c:	40013c00 	.word	0x40013c00

08001ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e08b      	b.n	8001fca <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff fac4 	bl	8001454 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2224      	movs	r2, #36	@ 0x24
 8001ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ef0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	e006      	b.n	8001f28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d108      	bne.n	8001f42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	e007      	b.n	8001f52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd4 <HAL_I2C_Init+0x134>)
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69d9      	ldr	r1, [r3, #28]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1a      	ldr	r2, [r3, #32]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	02008000 	.word	0x02008000

08001fd8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	817b      	strh	r3, [r7, #10]
 8001fea:	460b      	mov	r3, r1
 8001fec:	813b      	strh	r3, [r7, #8]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	f040 80fd 	bne.w	80021fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_I2C_Mem_Read+0x34>
 8002006:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002008:	2b00      	cmp	r3, #0
 800200a:	d105      	bne.n	8002018 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002012:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0f1      	b.n	80021fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_I2C_Mem_Read+0x4e>
 8002022:	2302      	movs	r3, #2
 8002024:	e0ea      	b.n	80021fc <HAL_I2C_Mem_Read+0x224>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800202e:	f7ff fc75 	bl	800191c <HAL_GetTick>
 8002032:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2319      	movs	r3, #25
 800203a:	2201      	movs	r2, #1
 800203c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f95b 	bl	80022fc <I2C_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0d5      	b.n	80021fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2222      	movs	r2, #34	@ 0x22
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2240      	movs	r2, #64	@ 0x40
 800205c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a3a      	ldr	r2, [r7, #32]
 800206a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002070:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002078:	88f8      	ldrh	r0, [r7, #6]
 800207a:	893a      	ldrh	r2, [r7, #8]
 800207c:	8979      	ldrh	r1, [r7, #10]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	4603      	mov	r3, r0
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f8bf 	bl	800220c <I2C_RequestMemoryRead>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0ad      	b.n	80021fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2bff      	cmp	r3, #255	@ 0xff
 80020a8:	d90e      	bls.n	80020c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	8979      	ldrh	r1, [r7, #10]
 80020b8:	4b52      	ldr	r3, [pc, #328]	@ (8002204 <HAL_I2C_Mem_Read+0x22c>)
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 fadf 	bl	8002684 <I2C_TransferConfig>
 80020c6:	e00f      	b.n	80020e8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	8979      	ldrh	r1, [r7, #10]
 80020da:	4b4a      	ldr	r3, [pc, #296]	@ (8002204 <HAL_I2C_Mem_Read+0x22c>)
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 face 	bl	8002684 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ee:	2200      	movs	r2, #0
 80020f0:	2104      	movs	r1, #4
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f902 	bl	80022fc <I2C_WaitOnFlagUntilTimeout>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e07c      	b.n	80021fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211e:	3b01      	subs	r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d034      	beq.n	80021a8 <HAL_I2C_Mem_Read+0x1d0>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002142:	2b00      	cmp	r3, #0
 8002144:	d130      	bne.n	80021a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800214c:	2200      	movs	r2, #0
 800214e:	2180      	movs	r1, #128	@ 0x80
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 f8d3 	bl	80022fc <I2C_WaitOnFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e04d      	b.n	80021fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	2bff      	cmp	r3, #255	@ 0xff
 8002168:	d90e      	bls.n	8002188 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002174:	b2da      	uxtb	r2, r3
 8002176:	8979      	ldrh	r1, [r7, #10]
 8002178:	2300      	movs	r3, #0
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 fa7f 	bl	8002684 <I2C_TransferConfig>
 8002186:	e00f      	b.n	80021a8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002196:	b2da      	uxtb	r2, r3
 8002198:	8979      	ldrh	r1, [r7, #10]
 800219a:	2300      	movs	r3, #0
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 fa6e 	bl	8002684 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d19a      	bne.n	80020e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f940 	bl	800243c <I2C_WaitOnSTOPFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e01a      	b.n	80021fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2220      	movs	r2, #32
 80021cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <HAL_I2C_Mem_Read+0x230>)
 80021da:	400b      	ands	r3, r1
 80021dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
  }
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	80002400 	.word	0x80002400
 8002208:	fe00e800 	.word	0xfe00e800

0800220c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af02      	add	r7, sp, #8
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	4608      	mov	r0, r1
 8002216:	4611      	mov	r1, r2
 8002218:	461a      	mov	r2, r3
 800221a:	4603      	mov	r3, r0
 800221c:	817b      	strh	r3, [r7, #10]
 800221e:	460b      	mov	r3, r1
 8002220:	813b      	strh	r3, [r7, #8]
 8002222:	4613      	mov	r3, r2
 8002224:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	8979      	ldrh	r1, [r7, #10]
 800222c:	4b20      	ldr	r3, [pc, #128]	@ (80022b0 <I2C_RequestMemoryRead+0xa4>)
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2300      	movs	r3, #0
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fa26 	bl	8002684 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	69b9      	ldr	r1, [r7, #24]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f8b6 	bl	80023ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e02c      	b.n	80022a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d105      	bne.n	800225e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002252:	893b      	ldrh	r3, [r7, #8]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	629a      	str	r2, [r3, #40]	@ 0x28
 800225c:	e015      	b.n	800228a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800225e:	893b      	ldrh	r3, [r7, #8]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	b29b      	uxth	r3, r3
 8002264:	b2da      	uxtb	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	69b9      	ldr	r1, [r7, #24]
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 f89c 	bl	80023ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e012      	b.n	80022a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002280:	893b      	ldrh	r3, [r7, #8]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2200      	movs	r2, #0
 8002292:	2140      	movs	r1, #64	@ 0x40
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f831 	bl	80022fc <I2C_WaitOnFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	80002000 	.word	0x80002000

080022b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d103      	bne.n	80022d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2200      	movs	r2, #0
 80022d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d007      	beq.n	80022f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	619a      	str	r2, [r3, #24]
  }
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800230c:	e03b      	b.n	8002386 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	6839      	ldr	r1, [r7, #0]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f8d6 	bl	80024c4 <I2C_IsErrorOccurred>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e041      	b.n	80023a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d02d      	beq.n	8002386 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232a:	f7ff faf7 	bl	800191c <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d302      	bcc.n	8002340 <I2C_WaitOnFlagUntilTimeout+0x44>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d122      	bne.n	8002386 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	4013      	ands	r3, r2
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	429a      	cmp	r2, r3
 800234e:	bf0c      	ite	eq
 8002350:	2301      	moveq	r3, #1
 8002352:	2300      	movne	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	429a      	cmp	r2, r3
 800235c:	d113      	bne.n	8002386 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	f043 0220 	orr.w	r2, r3, #32
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2220      	movs	r2, #32
 800236e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e00f      	b.n	80023a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4013      	ands	r3, r2
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	429a      	cmp	r2, r3
 8002394:	bf0c      	ite	eq
 8002396:	2301      	moveq	r3, #1
 8002398:	2300      	movne	r3, #0
 800239a:	b2db      	uxtb	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d0b4      	beq.n	800230e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023ba:	e033      	b.n	8002424 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68b9      	ldr	r1, [r7, #8]
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f87f 	bl	80024c4 <I2C_IsErrorOccurred>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e031      	b.n	8002434 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d6:	d025      	beq.n	8002424 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d8:	f7ff faa0 	bl	800191c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d302      	bcc.n	80023ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d11a      	bne.n	8002424 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d013      	beq.n	8002424 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002400:	f043 0220 	orr.w	r2, r3, #32
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e007      	b.n	8002434 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b02      	cmp	r3, #2
 8002430:	d1c4      	bne.n	80023bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002448:	e02f      	b.n	80024aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f838 	bl	80024c4 <I2C_IsErrorOccurred>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e02d      	b.n	80024ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245e:	f7ff fa5d 	bl	800191c <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	429a      	cmp	r2, r3
 800246c:	d302      	bcc.n	8002474 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d11a      	bne.n	80024aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b20      	cmp	r3, #32
 8002480:	d013      	beq.n	80024aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002486:	f043 0220 	orr.w	r2, r3, #32
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e007      	b.n	80024ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d1c8      	bne.n	800244a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	@ 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d068      	beq.n	80025c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2210      	movs	r2, #16
 80024f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024f8:	e049      	b.n	800258e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d045      	beq.n	800258e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002502:	f7ff fa0b 	bl	800191c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	429a      	cmp	r2, r3
 8002510:	d302      	bcc.n	8002518 <I2C_IsErrorOccurred+0x54>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d13a      	bne.n	800258e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002522:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800252a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800253a:	d121      	bne.n	8002580 <I2C_IsErrorOccurred+0xbc>
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002542:	d01d      	beq.n	8002580 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	2b20      	cmp	r3, #32
 8002548:	d01a      	beq.n	8002580 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002558:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800255a:	f7ff f9df 	bl	800191c <HAL_GetTick>
 800255e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002560:	e00e      	b.n	8002580 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002562:	f7ff f9db 	bl	800191c <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b19      	cmp	r3, #25
 800256e:	d907      	bls.n	8002580 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	f043 0320 	orr.w	r3, r3, #32
 8002576:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800257e:	e006      	b.n	800258e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b20      	cmp	r3, #32
 800258c:	d1e9      	bne.n	8002562 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b20      	cmp	r3, #32
 800259a:	d003      	beq.n	80025a4 <I2C_IsErrorOccurred+0xe0>
 800259c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0aa      	beq.n	80024fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d103      	bne.n	80025b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2220      	movs	r2, #32
 80025b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00b      	beq.n	80025ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	f043 0308 	orr.w	r3, r3, #8
 80025fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002606:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00b      	beq.n	8002630 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	f043 0302 	orr.w	r3, r3, #2
 800261e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002628:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01c      	beq.n	8002672 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7ff fe3b 	bl	80022b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b0d      	ldr	r3, [pc, #52]	@ (8002680 <I2C_IsErrorOccurred+0x1bc>)
 800264a:	400b      	ands	r3, r1
 800264c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	431a      	orrs	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002672:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002676:	4618      	mov	r0, r3
 8002678:	3728      	adds	r7, #40	@ 0x28
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	fe00e800 	.word	0xfe00e800

08002684 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	607b      	str	r3, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	817b      	strh	r3, [r7, #10]
 8002692:	4613      	mov	r3, r2
 8002694:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002696:	897b      	ldrh	r3, [r7, #10]
 8002698:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800269c:	7a7b      	ldrb	r3, [r7, #9]
 800269e:	041b      	lsls	r3, r3, #16
 80026a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026a4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026b2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	0d5b      	lsrs	r3, r3, #21
 80026be:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80026c2:	4b08      	ldr	r3, [pc, #32]	@ (80026e4 <I2C_TransferConfig+0x60>)
 80026c4:	430b      	orrs	r3, r1
 80026c6:	43db      	mvns	r3, r3
 80026c8:	ea02 0103 	and.w	r1, r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	03ff63ff 	.word	0x03ff63ff

080026e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	d138      	bne.n	8002770 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002708:	2302      	movs	r3, #2
 800270a:	e032      	b.n	8002772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2224      	movs	r2, #36	@ 0x24
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800273a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6819      	ldr	r1, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	e000      	b.n	8002772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002770:	2302      	movs	r3, #2
  }
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b20      	cmp	r3, #32
 8002792:	d139      	bne.n	8002808 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800279e:	2302      	movs	r3, #2
 80027a0:	e033      	b.n	800280a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2224      	movs	r2, #36	@ 0x24
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	e000      	b.n	800280a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
  }
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	4b23      	ldr	r3, [pc, #140]	@ (80028b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	4a22      	ldr	r2, [pc, #136]	@ (80028b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800282c:	6413      	str	r3, [r2, #64]	@ 0x40
 800282e:	4b20      	ldr	r3, [pc, #128]	@ (80028b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800283a:	4b1e      	ldr	r3, [pc, #120]	@ (80028b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1d      	ldr	r2, [pc, #116]	@ (80028b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002844:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002846:	f7ff f869 	bl	800191c <HAL_GetTick>
 800284a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800284c:	e009      	b.n	8002862 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800284e:	f7ff f865 	bl	800191c <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800285c:	d901      	bls.n	8002862 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e022      	b.n	80028a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002862:	4b14      	ldr	r3, [pc, #80]	@ (80028b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800286a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800286e:	d1ee      	bne.n	800284e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002870:	4b10      	ldr	r3, [pc, #64]	@ (80028b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0f      	ldr	r2, [pc, #60]	@ (80028b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800287a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800287c:	f7ff f84e 	bl	800191c <HAL_GetTick>
 8002880:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002882:	e009      	b.n	8002898 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002884:	f7ff f84a 	bl	800191c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002892:	d901      	bls.n	8002898 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e007      	b.n	80028a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028a4:	d1ee      	bne.n	8002884 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40007000 	.word	0x40007000

080028b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028c0:	2300      	movs	r3, #0
 80028c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e291      	b.n	8002df2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8087 	beq.w	80029ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028dc:	4b96      	ldr	r3, [pc, #600]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d00c      	beq.n	8002902 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e8:	4b93      	ldr	r3, [pc, #588]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d112      	bne.n	800291a <HAL_RCC_OscConfig+0x62>
 80028f4:	4b90      	ldr	r3, [pc, #576]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002900:	d10b      	bne.n	800291a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002902:	4b8d      	ldr	r3, [pc, #564]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d06c      	beq.n	80029e8 <HAL_RCC_OscConfig+0x130>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d168      	bne.n	80029e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e26b      	b.n	8002df2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x7a>
 8002924:	4b84      	ldr	r3, [pc, #528]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a83      	ldr	r2, [pc, #524]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 800292a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	e02e      	b.n	8002990 <HAL_RCC_OscConfig+0xd8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0x9c>
 800293a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b7c      	ldr	r3, [pc, #496]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a7b      	ldr	r2, [pc, #492]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 800294c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e01d      	b.n	8002990 <HAL_RCC_OscConfig+0xd8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0xc0>
 800295e:	4b76      	ldr	r3, [pc, #472]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a75      	ldr	r2, [pc, #468]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002964:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	4b73      	ldr	r3, [pc, #460]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a72      	ldr	r2, [pc, #456]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e00b      	b.n	8002990 <HAL_RCC_OscConfig+0xd8>
 8002978:	4b6f      	ldr	r3, [pc, #444]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a6e      	ldr	r2, [pc, #440]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 800297e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b6c      	ldr	r3, [pc, #432]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a6b      	ldr	r2, [pc, #428]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 800298a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800298e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d013      	beq.n	80029c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe ffc0 	bl	800191c <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a0:	f7fe ffbc 	bl	800191c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	@ 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e21f      	b.n	8002df2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	4b61      	ldr	r3, [pc, #388]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0xe8>
 80029be:	e014      	b.n	80029ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe ffac 	bl	800191c <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c8:	f7fe ffa8 	bl	800191c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	@ 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e20b      	b.n	8002df2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029da:	4b57      	ldr	r3, [pc, #348]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x110>
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d069      	beq.n	8002aca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029f6:	4b50      	ldr	r3, [pc, #320]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00b      	beq.n	8002a1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a02:	4b4d      	ldr	r3, [pc, #308]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d11c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x190>
 8002a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d116      	bne.n	8002a48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1a:	4b47      	ldr	r3, [pc, #284]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_RCC_OscConfig+0x17a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d001      	beq.n	8002a32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e1df      	b.n	8002df2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a32:	4b41      	ldr	r3, [pc, #260]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	493d      	ldr	r1, [pc, #244]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a46:	e040      	b.n	8002aca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d023      	beq.n	8002a98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a50:	4b39      	ldr	r3, [pc, #228]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a38      	ldr	r2, [pc, #224]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fe ff5e 	bl	800191c <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a64:	f7fe ff5a 	bl	800191c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e1bd      	b.n	8002df2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a76:	4b30      	ldr	r3, [pc, #192]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a82:	4b2d      	ldr	r3, [pc, #180]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4929      	ldr	r1, [pc, #164]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]
 8002a96:	e018      	b.n	8002aca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a98:	4b27      	ldr	r3, [pc, #156]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a26      	ldr	r2, [pc, #152]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002a9e:	f023 0301 	bic.w	r3, r3, #1
 8002aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe ff3a 	bl	800191c <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aac:	f7fe ff36 	bl	800191c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e199      	b.n	8002df2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002abe:	4b1e      	ldr	r3, [pc, #120]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d038      	beq.n	8002b48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d019      	beq.n	8002b12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ade:	4b16      	ldr	r3, [pc, #88]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae2:	4a15      	ldr	r2, [pc, #84]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aea:	f7fe ff17 	bl	800191c <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af2:	f7fe ff13 	bl	800191c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e176      	b.n	8002df2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b04:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x23a>
 8002b10:	e01a      	b.n	8002b48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b12:	4b09      	ldr	r3, [pc, #36]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b16:	4a08      	ldr	r2, [pc, #32]	@ (8002b38 <HAL_RCC_OscConfig+0x280>)
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1e:	f7fe fefd 	bl	800191c <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b24:	e00a      	b.n	8002b3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b26:	f7fe fef9 	bl	800191c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d903      	bls.n	8002b3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e15c      	b.n	8002df2 <HAL_RCC_OscConfig+0x53a>
 8002b38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3c:	4b91      	ldr	r3, [pc, #580]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1ee      	bne.n	8002b26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80a4 	beq.w	8002c9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b56:	4b8b      	ldr	r3, [pc, #556]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10d      	bne.n	8002b7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b62:	4b88      	ldr	r3, [pc, #544]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	4a87      	ldr	r2, [pc, #540]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b6e:	4b85      	ldr	r3, [pc, #532]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b7e:	4b82      	ldr	r3, [pc, #520]	@ (8002d88 <HAL_RCC_OscConfig+0x4d0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d118      	bne.n	8002bbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d88 <HAL_RCC_OscConfig+0x4d0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d88 <HAL_RCC_OscConfig+0x4d0>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b96:	f7fe fec1 	bl	800191c <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9e:	f7fe febd 	bl	800191c <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b64      	cmp	r3, #100	@ 0x64
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e120      	b.n	8002df2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb0:	4b75      	ldr	r3, [pc, #468]	@ (8002d88 <HAL_RCC_OscConfig+0x4d0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x31a>
 8002bc4:	4b6f      	ldr	r3, [pc, #444]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc8:	4a6e      	ldr	r2, [pc, #440]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd0:	e02d      	b.n	8002c2e <HAL_RCC_OscConfig+0x376>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x33c>
 8002bda:	4b6a      	ldr	r3, [pc, #424]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bde:	4a69      	ldr	r2, [pc, #420]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be6:	4b67      	ldr	r3, [pc, #412]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bea:	4a66      	ldr	r2, [pc, #408]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002bec:	f023 0304 	bic.w	r3, r3, #4
 8002bf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf2:	e01c      	b.n	8002c2e <HAL_RCC_OscConfig+0x376>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b05      	cmp	r3, #5
 8002bfa:	d10c      	bne.n	8002c16 <HAL_RCC_OscConfig+0x35e>
 8002bfc:	4b61      	ldr	r3, [pc, #388]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c00:	4a60      	ldr	r2, [pc, #384]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002c02:	f043 0304 	orr.w	r3, r3, #4
 8002c06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c08:	4b5e      	ldr	r3, [pc, #376]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0c:	4a5d      	ldr	r2, [pc, #372]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c14:	e00b      	b.n	8002c2e <HAL_RCC_OscConfig+0x376>
 8002c16:	4b5b      	ldr	r3, [pc, #364]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1a:	4a5a      	ldr	r2, [pc, #360]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c22:	4b58      	ldr	r3, [pc, #352]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c26:	4a57      	ldr	r2, [pc, #348]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002c28:	f023 0304 	bic.w	r3, r3, #4
 8002c2c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d015      	beq.n	8002c62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c36:	f7fe fe71 	bl	800191c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7fe fe6d 	bl	800191c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e0ce      	b.n	8002df2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c54:	4b4b      	ldr	r3, [pc, #300]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ee      	beq.n	8002c3e <HAL_RCC_OscConfig+0x386>
 8002c60:	e014      	b.n	8002c8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c62:	f7fe fe5b 	bl	800191c <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c68:	e00a      	b.n	8002c80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6a:	f7fe fe57 	bl	800191c <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e0b8      	b.n	8002df2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c80:	4b40      	ldr	r3, [pc, #256]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ee      	bne.n	8002c6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d105      	bne.n	8002c9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c92:	4b3c      	ldr	r3, [pc, #240]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	4a3b      	ldr	r2, [pc, #236]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002c98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c9c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 80a4 	beq.w	8002df0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ca8:	4b36      	ldr	r3, [pc, #216]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d06b      	beq.n	8002d8c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d149      	bne.n	8002d50 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbc:	4b31      	ldr	r3, [pc, #196]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a30      	ldr	r2, [pc, #192]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002cc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fe28 	bl	800191c <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe fe24 	bl	800191c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e087      	b.n	8002df2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	4b28      	ldr	r3, [pc, #160]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69da      	ldr	r2, [r3, #28]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfc:	019b      	lsls	r3, r3, #6
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	3b01      	subs	r3, #1
 8002d08:	041b      	lsls	r3, r3, #16
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	4313      	orrs	r3, r2
 8002d14:	4a1b      	ldr	r2, [pc, #108]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002d16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d1a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d1c:	4b19      	ldr	r3, [pc, #100]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a18      	ldr	r2, [pc, #96]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002d22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fe fdf8 	bl	800191c <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fe fdf4 	bl	800191c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e057      	b.n	8002df2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d42:	4b10      	ldr	r3, [pc, #64]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x478>
 8002d4e:	e04f      	b.n	8002df0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d50:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0b      	ldr	r2, [pc, #44]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002d56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fdde 	bl	800191c <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe fdda 	bl	800191c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e03d      	b.n	8002df2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	4b03      	ldr	r3, [pc, #12]	@ (8002d84 <HAL_RCC_OscConfig+0x4cc>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x4ac>
 8002d82:	e035      	b.n	8002df0 <HAL_RCC_OscConfig+0x538>
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dfc <HAL_RCC_OscConfig+0x544>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d028      	beq.n	8002dec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d121      	bne.n	8002dec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d11a      	bne.n	8002dec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dc2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d111      	bne.n	8002dec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800

08002e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0d0      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b6a      	ldr	r3, [pc, #424]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d910      	bls.n	8002e48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b67      	ldr	r3, [pc, #412]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 020f 	bic.w	r2, r3, #15
 8002e2e:	4965      	ldr	r1, [pc, #404]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b63      	ldr	r3, [pc, #396]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0b8      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d020      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e60:	4b59      	ldr	r3, [pc, #356]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4a58      	ldr	r2, [pc, #352]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e78:	4b53      	ldr	r3, [pc, #332]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	4a52      	ldr	r2, [pc, #328]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e84:	4b50      	ldr	r3, [pc, #320]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	494d      	ldr	r1, [pc, #308]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d040      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d107      	bne.n	8002eba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	4b47      	ldr	r3, [pc, #284]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d115      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e07f      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec2:	4b41      	ldr	r3, [pc, #260]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e073      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e06b      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee2:	4b39      	ldr	r3, [pc, #228]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f023 0203 	bic.w	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4936      	ldr	r1, [pc, #216]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef4:	f7fe fd12 	bl	800191c <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7fe fd0e 	bl	800191c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e053      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 020c 	and.w	r2, r3, #12
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1eb      	bne.n	8002efc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b27      	ldr	r3, [pc, #156]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d210      	bcs.n	8002f54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b24      	ldr	r3, [pc, #144]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 020f 	bic.w	r2, r3, #15
 8002f3a:	4922      	ldr	r1, [pc, #136]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b20      	ldr	r3, [pc, #128]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e032      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f60:	4b19      	ldr	r3, [pc, #100]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4916      	ldr	r1, [pc, #88]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f7e:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	490e      	ldr	r1, [pc, #56]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f92:	f000 f821 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8002f96:	4602      	mov	r2, r0
 8002f98:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	490a      	ldr	r1, [pc, #40]	@ (8002fcc <HAL_RCC_ClockConfig+0x1cc>)
 8002fa4:	5ccb      	ldrb	r3, [r1, r3]
 8002fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002faa:	4a09      	ldr	r2, [pc, #36]	@ (8002fd0 <HAL_RCC_ClockConfig+0x1d0>)
 8002fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fae:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <HAL_RCC_ClockConfig+0x1d4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fc6e 	bl	8001894 <HAL_InitTick>

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023c00 	.word	0x40023c00
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	08006e3c 	.word	0x08006e3c
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	20000004 	.word	0x20000004

08002fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fdc:	b090      	sub	sp, #64	@ 0x40
 8002fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fe8:	2300      	movs	r3, #0
 8002fea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ff0:	4b59      	ldr	r3, [pc, #356]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d00d      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0x40>
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	f200 80a1 	bhi.w	8003144 <HAL_RCC_GetSysClockFreq+0x16c>
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x34>
 8003006:	2b04      	cmp	r3, #4
 8003008:	d003      	beq.n	8003012 <HAL_RCC_GetSysClockFreq+0x3a>
 800300a:	e09b      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800300c:	4b53      	ldr	r3, [pc, #332]	@ (800315c <HAL_RCC_GetSysClockFreq+0x184>)
 800300e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003010:	e09b      	b.n	800314a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003012:	4b53      	ldr	r3, [pc, #332]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x188>)
 8003014:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003016:	e098      	b.n	800314a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003018:	4b4f      	ldr	r3, [pc, #316]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003020:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003022:	4b4d      	ldr	r3, [pc, #308]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d028      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302e:	4b4a      	ldr	r3, [pc, #296]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	099b      	lsrs	r3, r3, #6
 8003034:	2200      	movs	r2, #0
 8003036:	623b      	str	r3, [r7, #32]
 8003038:	627a      	str	r2, [r7, #36]	@ 0x24
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003040:	2100      	movs	r1, #0
 8003042:	4b47      	ldr	r3, [pc, #284]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x188>)
 8003044:	fb03 f201 	mul.w	r2, r3, r1
 8003048:	2300      	movs	r3, #0
 800304a:	fb00 f303 	mul.w	r3, r0, r3
 800304e:	4413      	add	r3, r2
 8003050:	4a43      	ldr	r2, [pc, #268]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x188>)
 8003052:	fba0 1202 	umull	r1, r2, r0, r2
 8003056:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003058:	460a      	mov	r2, r1
 800305a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800305c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800305e:	4413      	add	r3, r2
 8003060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003064:	2200      	movs	r2, #0
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	61fa      	str	r2, [r7, #28]
 800306a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800306e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003072:	f7fd fdb9 	bl	8000be8 <__aeabi_uldivmod>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4613      	mov	r3, r2
 800307c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800307e:	e053      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003080:	4b35      	ldr	r3, [pc, #212]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	099b      	lsrs	r3, r3, #6
 8003086:	2200      	movs	r2, #0
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	617a      	str	r2, [r7, #20]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003092:	f04f 0b00 	mov.w	fp, #0
 8003096:	4652      	mov	r2, sl
 8003098:	465b      	mov	r3, fp
 800309a:	f04f 0000 	mov.w	r0, #0
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	0159      	lsls	r1, r3, #5
 80030a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a8:	0150      	lsls	r0, r2, #5
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	ebb2 080a 	subs.w	r8, r2, sl
 80030b2:	eb63 090b 	sbc.w	r9, r3, fp
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030ca:	ebb2 0408 	subs.w	r4, r2, r8
 80030ce:	eb63 0509 	sbc.w	r5, r3, r9
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	00eb      	lsls	r3, r5, #3
 80030dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030e0:	00e2      	lsls	r2, r4, #3
 80030e2:	4614      	mov	r4, r2
 80030e4:	461d      	mov	r5, r3
 80030e6:	eb14 030a 	adds.w	r3, r4, sl
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	eb45 030b 	adc.w	r3, r5, fp
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030fe:	4629      	mov	r1, r5
 8003100:	028b      	lsls	r3, r1, #10
 8003102:	4621      	mov	r1, r4
 8003104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003108:	4621      	mov	r1, r4
 800310a:	028a      	lsls	r2, r1, #10
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003112:	2200      	movs	r2, #0
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	60fa      	str	r2, [r7, #12]
 8003118:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800311c:	f7fd fd64 	bl	8000be8 <__aeabi_uldivmod>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4613      	mov	r3, r2
 8003126:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003128:	4b0b      	ldr	r3, [pc, #44]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	3301      	adds	r3, #1
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003138:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003142:	e002      	b.n	800314a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003144:	4b05      	ldr	r3, [pc, #20]	@ (800315c <HAL_RCC_GetSysClockFreq+0x184>)
 8003146:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800314c:	4618      	mov	r0, r3
 800314e:	3740      	adds	r7, #64	@ 0x40
 8003150:	46bd      	mov	sp, r7
 8003152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800
 800315c:	00f42400 	.word	0x00f42400
 8003160:	017d7840 	.word	0x017d7840

08003164 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003168:	4b03      	ldr	r3, [pc, #12]	@ (8003178 <HAL_RCC_GetHCLKFreq+0x14>)
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000000 	.word	0x20000000

0800317c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003180:	f7ff fff0 	bl	8003164 <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	@ (800319c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	0a9b      	lsrs	r3, r3, #10
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4903      	ldr	r1, [pc, #12]	@ (80031a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40023800 	.word	0x40023800
 80031a0:	08006e4c 	.word	0x08006e4c

080031a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031a8:	f7ff ffdc 	bl	8003164 <HAL_RCC_GetHCLKFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b05      	ldr	r3, [pc, #20]	@ (80031c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	0b5b      	lsrs	r3, r3, #13
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4903      	ldr	r1, [pc, #12]	@ (80031c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40023800 	.word	0x40023800
 80031c8:	08006e4c 	.word	0x08006e4c

080031cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d012      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031f4:	4b69      	ldr	r3, [pc, #420]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4a68      	ldr	r2, [pc, #416]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80031fe:	6093      	str	r3, [r2, #8]
 8003200:	4b66      	ldr	r3, [pc, #408]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003208:	4964      	ldr	r1, [pc, #400]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003216:	2301      	movs	r3, #1
 8003218:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d017      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003226:	4b5d      	ldr	r3, [pc, #372]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003228:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800322c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003234:	4959      	ldr	r1, [pc, #356]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003240:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003244:	d101      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003246:	2301      	movs	r3, #1
 8003248:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003252:	2301      	movs	r3, #1
 8003254:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d017      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003262:	4b4e      	ldr	r3, [pc, #312]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003268:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	494a      	ldr	r1, [pc, #296]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003280:	d101      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003282:	2301      	movs	r3, #1
 8003284:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800328e:	2301      	movs	r3, #1
 8003290:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800329e:	2301      	movs	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 808b 	beq.w	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032b0:	4b3a      	ldr	r3, [pc, #232]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	4a39      	ldr	r2, [pc, #228]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80032bc:	4b37      	ldr	r3, [pc, #220]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032c8:	4b35      	ldr	r3, [pc, #212]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a34      	ldr	r2, [pc, #208]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d4:	f7fe fb22 	bl	800191c <HAL_GetTick>
 80032d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032dc:	f7fe fb1e 	bl	800191c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	@ 0x64
 80032e8:	d901      	bls.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e357      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032ee:	4b2c      	ldr	r3, [pc, #176]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032fa:	4b28      	ldr	r3, [pc, #160]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003302:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d035      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	429a      	cmp	r2, r3
 8003316:	d02e      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003318:	4b20      	ldr	r3, [pc, #128]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003320:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003322:	4b1e      	ldr	r3, [pc, #120]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003326:	4a1d      	ldr	r2, [pc, #116]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800332c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800332e:	4b1b      	ldr	r3, [pc, #108]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003332:	4a1a      	ldr	r2, [pc, #104]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003338:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800333a:	4a18      	ldr	r2, [pc, #96]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003340:	4b16      	ldr	r3, [pc, #88]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d114      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe fae6 	bl	800191c <HAL_GetTick>
 8003350:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	e00a      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7fe fae2 	bl	800191c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e319      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336a:	4b0c      	ldr	r3, [pc, #48]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0ee      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800337e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003382:	d111      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003384:	4b05      	ldr	r3, [pc, #20]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003390:	4b04      	ldr	r3, [pc, #16]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003392:	400b      	ands	r3, r1
 8003394:	4901      	ldr	r1, [pc, #4]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
 800339a:	e00b      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800339c:	40023800 	.word	0x40023800
 80033a0:	40007000 	.word	0x40007000
 80033a4:	0ffffcff 	.word	0x0ffffcff
 80033a8:	4baa      	ldr	r3, [pc, #680]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	4aa9      	ldr	r2, [pc, #676]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ae:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80033b2:	6093      	str	r3, [r2, #8]
 80033b4:	4ba7      	ldr	r3, [pc, #668]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c0:	49a4      	ldr	r1, [pc, #656]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d010      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033d2:	4ba0      	ldr	r3, [pc, #640]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033d8:	4a9e      	ldr	r2, [pc, #632]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80033e2:	4b9c      	ldr	r3, [pc, #624]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ec:	4999      	ldr	r1, [pc, #612]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003400:	4b94      	ldr	r3, [pc, #592]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003406:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800340e:	4991      	ldr	r1, [pc, #580]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003422:	4b8c      	ldr	r3, [pc, #560]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003428:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003430:	4988      	ldr	r1, [pc, #544]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003444:	4b83      	ldr	r3, [pc, #524]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003452:	4980      	ldr	r1, [pc, #512]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003466:	4b7b      	ldr	r3, [pc, #492]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003474:	4977      	ldr	r1, [pc, #476]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003488:	4b72      	ldr	r3, [pc, #456]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348e:	f023 0203 	bic.w	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003496:	496f      	ldr	r1, [pc, #444]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b0:	f023 020c 	bic.w	r2, r3, #12
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b8:	4966      	ldr	r1, [pc, #408]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034cc:	4b61      	ldr	r3, [pc, #388]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034da:	495e      	ldr	r1, [pc, #376]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034ee:	4b59      	ldr	r3, [pc, #356]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034fc:	4955      	ldr	r1, [pc, #340]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003510:	4b50      	ldr	r3, [pc, #320]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003516:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351e:	494d      	ldr	r1, [pc, #308]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003532:	4b48      	ldr	r3, [pc, #288]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003538:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003540:	4944      	ldr	r1, [pc, #272]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003554:	4b3f      	ldr	r3, [pc, #252]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003562:	493c      	ldr	r1, [pc, #240]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003576:	4b37      	ldr	r3, [pc, #220]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003584:	4933      	ldr	r1, [pc, #204]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003598:	4b2e      	ldr	r3, [pc, #184]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800359e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035a6:	492b      	ldr	r1, [pc, #172]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d011      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035ba:	4b26      	ldr	r3, [pc, #152]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035c8:	4922      	ldr	r1, [pc, #136]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035d8:	d101      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80035da:	2301      	movs	r3, #1
 80035dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80035ea:	2301      	movs	r3, #1
 80035ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035fa:	4b16      	ldr	r3, [pc, #88]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003600:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003608:	4912      	ldr	r1, [pc, #72]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00b      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800361c:	4b0d      	ldr	r3, [pc, #52]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800361e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003622:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800362c:	4909      	ldr	r1, [pc, #36]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d006      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 80d9 	beq.w	80037fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003648:	4b02      	ldr	r3, [pc, #8]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a01      	ldr	r2, [pc, #4]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800364e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003652:	e001      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003654:	40023800 	.word	0x40023800
 8003658:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800365a:	f7fe f95f 	bl	800191c <HAL_GetTick>
 800365e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003662:	f7fe f95b 	bl	800191c <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b64      	cmp	r3, #100	@ 0x64
 800366e:	d901      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e194      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003674:	4b6c      	ldr	r3, [pc, #432]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f0      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d021      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003690:	2b00      	cmp	r3, #0
 8003692:	d11d      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003694:	4b64      	ldr	r3, [pc, #400]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003696:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800369a:	0c1b      	lsrs	r3, r3, #16
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036a2:	4b61      	ldr	r3, [pc, #388]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036a8:	0e1b      	lsrs	r3, r3, #24
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	019a      	lsls	r2, r3, #6
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	041b      	lsls	r3, r3, #16
 80036ba:	431a      	orrs	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	061b      	lsls	r3, r3, #24
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	071b      	lsls	r3, r3, #28
 80036c8:	4957      	ldr	r1, [pc, #348]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d004      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d02e      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036fa:	d129      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036fc:	4b4a      	ldr	r3, [pc, #296]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003702:	0c1b      	lsrs	r3, r3, #16
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800370a:	4b47      	ldr	r3, [pc, #284]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800370c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003710:	0f1b      	lsrs	r3, r3, #28
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	019a      	lsls	r2, r3, #6
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	041b      	lsls	r3, r3, #16
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	061b      	lsls	r3, r3, #24
 800372a:	431a      	orrs	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	071b      	lsls	r3, r3, #28
 8003730:	493d      	ldr	r1, [pc, #244]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003738:	4b3b      	ldr	r3, [pc, #236]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800373a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800373e:	f023 021f 	bic.w	r2, r3, #31
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	3b01      	subs	r3, #1
 8003748:	4937      	ldr	r1, [pc, #220]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01d      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800375c:	4b32      	ldr	r3, [pc, #200]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800375e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003762:	0e1b      	lsrs	r3, r3, #24
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800376a:	4b2f      	ldr	r3, [pc, #188]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800376c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003770:	0f1b      	lsrs	r3, r3, #28
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	019a      	lsls	r2, r3, #6
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	041b      	lsls	r3, r3, #16
 8003784:	431a      	orrs	r2, r3
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	061b      	lsls	r3, r3, #24
 800378a:	431a      	orrs	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	071b      	lsls	r3, r3, #28
 8003790:	4925      	ldr	r1, [pc, #148]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d011      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	019a      	lsls	r2, r3, #6
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	041b      	lsls	r3, r3, #16
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	061b      	lsls	r3, r3, #24
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	071b      	lsls	r3, r3, #28
 80037c0:	4919      	ldr	r1, [pc, #100]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037c8:	4b17      	ldr	r3, [pc, #92]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a16      	ldr	r2, [pc, #88]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d4:	f7fe f8a2 	bl	800191c <HAL_GetTick>
 80037d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037dc:	f7fe f89e 	bl	800191c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	@ 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e0d7      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	f040 80cd 	bne.w	800399c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003802:	4b09      	ldr	r3, [pc, #36]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a08      	ldr	r2, [pc, #32]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003808:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800380c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380e:	f7fe f885 	bl	800191c <HAL_GetTick>
 8003812:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003814:	e00a      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003816:	f7fe f881 	bl	800191c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b64      	cmp	r3, #100	@ 0x64
 8003822:	d903      	bls.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e0ba      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003828:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800382c:	4b5e      	ldr	r3, [pc, #376]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003838:	d0ed      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003856:	2b00      	cmp	r3, #0
 8003858:	d02e      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d12a      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003862:	4b51      	ldr	r3, [pc, #324]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003870:	4b4d      	ldr	r3, [pc, #308]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003876:	0f1b      	lsrs	r3, r3, #28
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	019a      	lsls	r2, r3, #6
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	061b      	lsls	r3, r3, #24
 8003890:	431a      	orrs	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	071b      	lsls	r3, r3, #28
 8003896:	4944      	ldr	r1, [pc, #272]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800389e:	4b42      	ldr	r3, [pc, #264]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038a4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ac:	3b01      	subs	r3, #1
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	493d      	ldr	r1, [pc, #244]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d022      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038cc:	d11d      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038ce:	4b36      	ldr	r3, [pc, #216]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d4:	0e1b      	lsrs	r3, r3, #24
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038dc:	4b32      	ldr	r3, [pc, #200]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e2:	0f1b      	lsrs	r3, r3, #28
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	019a      	lsls	r2, r3, #6
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	041b      	lsls	r3, r3, #16
 80038f6:	431a      	orrs	r2, r3
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	061b      	lsls	r3, r3, #24
 80038fc:	431a      	orrs	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	071b      	lsls	r3, r3, #28
 8003902:	4929      	ldr	r1, [pc, #164]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d028      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003916:	4b24      	ldr	r3, [pc, #144]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391c:	0e1b      	lsrs	r3, r3, #24
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003924:	4b20      	ldr	r3, [pc, #128]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392a:	0c1b      	lsrs	r3, r3, #16
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	019a      	lsls	r2, r3, #6
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	041b      	lsls	r3, r3, #16
 800393c:	431a      	orrs	r2, r3
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	061b      	lsls	r3, r3, #24
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	071b      	lsls	r3, r3, #28
 800394a:	4917      	ldr	r1, [pc, #92]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003952:	4b15      	ldr	r3, [pc, #84]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003958:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003960:	4911      	ldr	r1, [pc, #68]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003968:	4b0f      	ldr	r3, [pc, #60]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0e      	ldr	r2, [pc, #56]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800396e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003974:	f7fd ffd2 	bl	800191c <HAL_GetTick>
 8003978:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800397a:	e008      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800397c:	f7fd ffce 	bl	800191c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	@ 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e007      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800398e:	4b06      	ldr	r3, [pc, #24]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003996:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800399a:	d1ef      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3720      	adds	r7, #32
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800

080039ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e040      	b.n	8003a40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fd fda0 	bl	8001514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2224      	movs	r2, #36	@ 0x24
 80039d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fb16 	bl	8004024 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f8af 	bl	8003b5c <UART_SetConfig>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e01b      	b.n	8003a40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fb95 	bl	8004168 <UART_CheckIdleState>
 8003a3e:	4603      	mov	r3, r0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	@ 0x28
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	4613      	mov	r3, r2
 8003a56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d177      	bne.n	8003b50 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HAL_UART_Transmit+0x24>
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e070      	b.n	8003b52 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2221      	movs	r2, #33	@ 0x21
 8003a7c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a7e:	f7fd ff4d 	bl	800191c <HAL_GetTick>
 8003a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	88fa      	ldrh	r2, [r7, #6]
 8003a88:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	88fa      	ldrh	r2, [r7, #6]
 8003a90:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a9c:	d108      	bne.n	8003ab0 <HAL_UART_Transmit+0x68>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d104      	bne.n	8003ab0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	e003      	b.n	8003ab8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ab8:	e02f      	b.n	8003b1a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2180      	movs	r1, #128	@ 0x80
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 fba6 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d004      	beq.n	8003ada <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e03b      	b.n	8003b52 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10b      	bne.n	8003af8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	3302      	adds	r3, #2
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	e007      	b.n	8003b08 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	781a      	ldrb	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	3301      	adds	r3, #1
 8003b06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1c9      	bne.n	8003aba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2140      	movs	r1, #64	@ 0x40
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 fb70 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d004      	beq.n	8003b46 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e005      	b.n	8003b52 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	e000      	b.n	8003b52 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b50:	2302      	movs	r3, #2
  }
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4ba6      	ldr	r3, [pc, #664]	@ (8003e20 <UART_SetConfig+0x2c4>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	6979      	ldr	r1, [r7, #20]
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a94      	ldr	r2, [pc, #592]	@ (8003e24 <UART_SetConfig+0x2c8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d120      	bne.n	8003c1a <UART_SetConfig+0xbe>
 8003bd8:	4b93      	ldr	r3, [pc, #588]	@ (8003e28 <UART_SetConfig+0x2cc>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d816      	bhi.n	8003c14 <UART_SetConfig+0xb8>
 8003be6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bec <UART_SetConfig+0x90>)
 8003be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bec:	08003bfd 	.word	0x08003bfd
 8003bf0:	08003c09 	.word	0x08003c09
 8003bf4:	08003c03 	.word	0x08003c03
 8003bf8:	08003c0f 	.word	0x08003c0f
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	77fb      	strb	r3, [r7, #31]
 8003c00:	e150      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003c02:	2302      	movs	r3, #2
 8003c04:	77fb      	strb	r3, [r7, #31]
 8003c06:	e14d      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e14a      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003c0e:	2308      	movs	r3, #8
 8003c10:	77fb      	strb	r3, [r7, #31]
 8003c12:	e147      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003c14:	2310      	movs	r3, #16
 8003c16:	77fb      	strb	r3, [r7, #31]
 8003c18:	e144      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a83      	ldr	r2, [pc, #524]	@ (8003e2c <UART_SetConfig+0x2d0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d132      	bne.n	8003c8a <UART_SetConfig+0x12e>
 8003c24:	4b80      	ldr	r3, [pc, #512]	@ (8003e28 <UART_SetConfig+0x2cc>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b0c      	cmp	r3, #12
 8003c30:	d828      	bhi.n	8003c84 <UART_SetConfig+0x128>
 8003c32:	a201      	add	r2, pc, #4	@ (adr r2, 8003c38 <UART_SetConfig+0xdc>)
 8003c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c38:	08003c6d 	.word	0x08003c6d
 8003c3c:	08003c85 	.word	0x08003c85
 8003c40:	08003c85 	.word	0x08003c85
 8003c44:	08003c85 	.word	0x08003c85
 8003c48:	08003c79 	.word	0x08003c79
 8003c4c:	08003c85 	.word	0x08003c85
 8003c50:	08003c85 	.word	0x08003c85
 8003c54:	08003c85 	.word	0x08003c85
 8003c58:	08003c73 	.word	0x08003c73
 8003c5c:	08003c85 	.word	0x08003c85
 8003c60:	08003c85 	.word	0x08003c85
 8003c64:	08003c85 	.word	0x08003c85
 8003c68:	08003c7f 	.word	0x08003c7f
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	77fb      	strb	r3, [r7, #31]
 8003c70:	e118      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003c72:	2302      	movs	r3, #2
 8003c74:	77fb      	strb	r3, [r7, #31]
 8003c76:	e115      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	e112      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003c7e:	2308      	movs	r3, #8
 8003c80:	77fb      	strb	r3, [r7, #31]
 8003c82:	e10f      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003c84:	2310      	movs	r3, #16
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e10c      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a68      	ldr	r2, [pc, #416]	@ (8003e30 <UART_SetConfig+0x2d4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d120      	bne.n	8003cd6 <UART_SetConfig+0x17a>
 8003c94:	4b64      	ldr	r3, [pc, #400]	@ (8003e28 <UART_SetConfig+0x2cc>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c9e:	2b30      	cmp	r3, #48	@ 0x30
 8003ca0:	d013      	beq.n	8003cca <UART_SetConfig+0x16e>
 8003ca2:	2b30      	cmp	r3, #48	@ 0x30
 8003ca4:	d814      	bhi.n	8003cd0 <UART_SetConfig+0x174>
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d009      	beq.n	8003cbe <UART_SetConfig+0x162>
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d810      	bhi.n	8003cd0 <UART_SetConfig+0x174>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <UART_SetConfig+0x15c>
 8003cb2:	2b10      	cmp	r3, #16
 8003cb4:	d006      	beq.n	8003cc4 <UART_SetConfig+0x168>
 8003cb6:	e00b      	b.n	8003cd0 <UART_SetConfig+0x174>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e0f2      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	77fb      	strb	r3, [r7, #31]
 8003cc2:	e0ef      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	77fb      	strb	r3, [r7, #31]
 8003cc8:	e0ec      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003cca:	2308      	movs	r3, #8
 8003ccc:	77fb      	strb	r3, [r7, #31]
 8003cce:	e0e9      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003cd0:	2310      	movs	r3, #16
 8003cd2:	77fb      	strb	r3, [r7, #31]
 8003cd4:	e0e6      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a56      	ldr	r2, [pc, #344]	@ (8003e34 <UART_SetConfig+0x2d8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d120      	bne.n	8003d22 <UART_SetConfig+0x1c6>
 8003ce0:	4b51      	ldr	r3, [pc, #324]	@ (8003e28 <UART_SetConfig+0x2cc>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003cea:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cec:	d013      	beq.n	8003d16 <UART_SetConfig+0x1ba>
 8003cee:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cf0:	d814      	bhi.n	8003d1c <UART_SetConfig+0x1c0>
 8003cf2:	2b80      	cmp	r3, #128	@ 0x80
 8003cf4:	d009      	beq.n	8003d0a <UART_SetConfig+0x1ae>
 8003cf6:	2b80      	cmp	r3, #128	@ 0x80
 8003cf8:	d810      	bhi.n	8003d1c <UART_SetConfig+0x1c0>
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <UART_SetConfig+0x1a8>
 8003cfe:	2b40      	cmp	r3, #64	@ 0x40
 8003d00:	d006      	beq.n	8003d10 <UART_SetConfig+0x1b4>
 8003d02:	e00b      	b.n	8003d1c <UART_SetConfig+0x1c0>
 8003d04:	2300      	movs	r3, #0
 8003d06:	77fb      	strb	r3, [r7, #31]
 8003d08:	e0cc      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	77fb      	strb	r3, [r7, #31]
 8003d0e:	e0c9      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003d10:	2304      	movs	r3, #4
 8003d12:	77fb      	strb	r3, [r7, #31]
 8003d14:	e0c6      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003d16:	2308      	movs	r3, #8
 8003d18:	77fb      	strb	r3, [r7, #31]
 8003d1a:	e0c3      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	77fb      	strb	r3, [r7, #31]
 8003d20:	e0c0      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a44      	ldr	r2, [pc, #272]	@ (8003e38 <UART_SetConfig+0x2dc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d125      	bne.n	8003d78 <UART_SetConfig+0x21c>
 8003d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e28 <UART_SetConfig+0x2cc>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d3a:	d017      	beq.n	8003d6c <UART_SetConfig+0x210>
 8003d3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d40:	d817      	bhi.n	8003d72 <UART_SetConfig+0x216>
 8003d42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d46:	d00b      	beq.n	8003d60 <UART_SetConfig+0x204>
 8003d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d4c:	d811      	bhi.n	8003d72 <UART_SetConfig+0x216>
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <UART_SetConfig+0x1fe>
 8003d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d56:	d006      	beq.n	8003d66 <UART_SetConfig+0x20a>
 8003d58:	e00b      	b.n	8003d72 <UART_SetConfig+0x216>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	77fb      	strb	r3, [r7, #31]
 8003d5e:	e0a1      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003d60:	2302      	movs	r3, #2
 8003d62:	77fb      	strb	r3, [r7, #31]
 8003d64:	e09e      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003d66:	2304      	movs	r3, #4
 8003d68:	77fb      	strb	r3, [r7, #31]
 8003d6a:	e09b      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003d6c:	2308      	movs	r3, #8
 8003d6e:	77fb      	strb	r3, [r7, #31]
 8003d70:	e098      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003d72:	2310      	movs	r3, #16
 8003d74:	77fb      	strb	r3, [r7, #31]
 8003d76:	e095      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a2f      	ldr	r2, [pc, #188]	@ (8003e3c <UART_SetConfig+0x2e0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d125      	bne.n	8003dce <UART_SetConfig+0x272>
 8003d82:	4b29      	ldr	r3, [pc, #164]	@ (8003e28 <UART_SetConfig+0x2cc>)
 8003d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d90:	d017      	beq.n	8003dc2 <UART_SetConfig+0x266>
 8003d92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d96:	d817      	bhi.n	8003dc8 <UART_SetConfig+0x26c>
 8003d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d9c:	d00b      	beq.n	8003db6 <UART_SetConfig+0x25a>
 8003d9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003da2:	d811      	bhi.n	8003dc8 <UART_SetConfig+0x26c>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <UART_SetConfig+0x254>
 8003da8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dac:	d006      	beq.n	8003dbc <UART_SetConfig+0x260>
 8003dae:	e00b      	b.n	8003dc8 <UART_SetConfig+0x26c>
 8003db0:	2301      	movs	r3, #1
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e076      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003db6:	2302      	movs	r3, #2
 8003db8:	77fb      	strb	r3, [r7, #31]
 8003dba:	e073      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e070      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e06d      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e06a      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e40 <UART_SetConfig+0x2e4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d138      	bne.n	8003e4a <UART_SetConfig+0x2ee>
 8003dd8:	4b13      	ldr	r3, [pc, #76]	@ (8003e28 <UART_SetConfig+0x2cc>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dde:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003de2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003de6:	d017      	beq.n	8003e18 <UART_SetConfig+0x2bc>
 8003de8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003dec:	d82a      	bhi.n	8003e44 <UART_SetConfig+0x2e8>
 8003dee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003df2:	d00b      	beq.n	8003e0c <UART_SetConfig+0x2b0>
 8003df4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003df8:	d824      	bhi.n	8003e44 <UART_SetConfig+0x2e8>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <UART_SetConfig+0x2aa>
 8003dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e02:	d006      	beq.n	8003e12 <UART_SetConfig+0x2b6>
 8003e04:	e01e      	b.n	8003e44 <UART_SetConfig+0x2e8>
 8003e06:	2300      	movs	r3, #0
 8003e08:	77fb      	strb	r3, [r7, #31]
 8003e0a:	e04b      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	e048      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003e12:	2304      	movs	r3, #4
 8003e14:	77fb      	strb	r3, [r7, #31]
 8003e16:	e045      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003e18:	2308      	movs	r3, #8
 8003e1a:	77fb      	strb	r3, [r7, #31]
 8003e1c:	e042      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003e1e:	bf00      	nop
 8003e20:	efff69f3 	.word	0xefff69f3
 8003e24:	40011000 	.word	0x40011000
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40004400 	.word	0x40004400
 8003e30:	40004800 	.word	0x40004800
 8003e34:	40004c00 	.word	0x40004c00
 8003e38:	40005000 	.word	0x40005000
 8003e3c:	40011400 	.word	0x40011400
 8003e40:	40007800 	.word	0x40007800
 8003e44:	2310      	movs	r3, #16
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e02c      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a72      	ldr	r2, [pc, #456]	@ (8004018 <UART_SetConfig+0x4bc>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d125      	bne.n	8003ea0 <UART_SetConfig+0x344>
 8003e54:	4b71      	ldr	r3, [pc, #452]	@ (800401c <UART_SetConfig+0x4c0>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003e5e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e62:	d017      	beq.n	8003e94 <UART_SetConfig+0x338>
 8003e64:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e68:	d817      	bhi.n	8003e9a <UART_SetConfig+0x33e>
 8003e6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e6e:	d00b      	beq.n	8003e88 <UART_SetConfig+0x32c>
 8003e70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e74:	d811      	bhi.n	8003e9a <UART_SetConfig+0x33e>
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <UART_SetConfig+0x326>
 8003e7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e7e:	d006      	beq.n	8003e8e <UART_SetConfig+0x332>
 8003e80:	e00b      	b.n	8003e9a <UART_SetConfig+0x33e>
 8003e82:	2300      	movs	r3, #0
 8003e84:	77fb      	strb	r3, [r7, #31]
 8003e86:	e00d      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	77fb      	strb	r3, [r7, #31]
 8003e8c:	e00a      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003e8e:	2304      	movs	r3, #4
 8003e90:	77fb      	strb	r3, [r7, #31]
 8003e92:	e007      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003e94:	2308      	movs	r3, #8
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	e004      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003e9a:	2310      	movs	r3, #16
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	e001      	b.n	8003ea4 <UART_SetConfig+0x348>
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eac:	d15b      	bne.n	8003f66 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003eae:	7ffb      	ldrb	r3, [r7, #31]
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d828      	bhi.n	8003f06 <UART_SetConfig+0x3aa>
 8003eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ebc <UART_SetConfig+0x360>)
 8003eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eba:	bf00      	nop
 8003ebc:	08003ee1 	.word	0x08003ee1
 8003ec0:	08003ee9 	.word	0x08003ee9
 8003ec4:	08003ef1 	.word	0x08003ef1
 8003ec8:	08003f07 	.word	0x08003f07
 8003ecc:	08003ef7 	.word	0x08003ef7
 8003ed0:	08003f07 	.word	0x08003f07
 8003ed4:	08003f07 	.word	0x08003f07
 8003ed8:	08003f07 	.word	0x08003f07
 8003edc:	08003eff 	.word	0x08003eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee0:	f7ff f94c 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8003ee4:	61b8      	str	r0, [r7, #24]
        break;
 8003ee6:	e013      	b.n	8003f10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ee8:	f7ff f95c 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8003eec:	61b8      	str	r0, [r7, #24]
        break;
 8003eee:	e00f      	b.n	8003f10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8004020 <UART_SetConfig+0x4c4>)
 8003ef2:	61bb      	str	r3, [r7, #24]
        break;
 8003ef4:	e00c      	b.n	8003f10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ef6:	f7ff f86f 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8003efa:	61b8      	str	r0, [r7, #24]
        break;
 8003efc:	e008      	b.n	8003f10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f02:	61bb      	str	r3, [r7, #24]
        break;
 8003f04:	e004      	b.n	8003f10 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d074      	beq.n	8004000 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	005a      	lsls	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	085b      	lsrs	r3, r3, #1
 8003f20:	441a      	add	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b0f      	cmp	r3, #15
 8003f30:	d916      	bls.n	8003f60 <UART_SetConfig+0x404>
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f38:	d212      	bcs.n	8003f60 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f023 030f 	bic.w	r3, r3, #15
 8003f42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	89fb      	ldrh	r3, [r7, #14]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	89fa      	ldrh	r2, [r7, #14]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	e04f      	b.n	8004000 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	77bb      	strb	r3, [r7, #30]
 8003f64:	e04c      	b.n	8004000 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f66:	7ffb      	ldrb	r3, [r7, #31]
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d828      	bhi.n	8003fbe <UART_SetConfig+0x462>
 8003f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f74 <UART_SetConfig+0x418>)
 8003f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08003f99 	.word	0x08003f99
 8003f78:	08003fa1 	.word	0x08003fa1
 8003f7c:	08003fa9 	.word	0x08003fa9
 8003f80:	08003fbf 	.word	0x08003fbf
 8003f84:	08003faf 	.word	0x08003faf
 8003f88:	08003fbf 	.word	0x08003fbf
 8003f8c:	08003fbf 	.word	0x08003fbf
 8003f90:	08003fbf 	.word	0x08003fbf
 8003f94:	08003fb7 	.word	0x08003fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f98:	f7ff f8f0 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8003f9c:	61b8      	str	r0, [r7, #24]
        break;
 8003f9e:	e013      	b.n	8003fc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa0:	f7ff f900 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8003fa4:	61b8      	str	r0, [r7, #24]
        break;
 8003fa6:	e00f      	b.n	8003fc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8004020 <UART_SetConfig+0x4c4>)
 8003faa:	61bb      	str	r3, [r7, #24]
        break;
 8003fac:	e00c      	b.n	8003fc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fae:	f7ff f813 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8003fb2:	61b8      	str	r0, [r7, #24]
        break;
 8003fb4:	e008      	b.n	8003fc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fba:	61bb      	str	r3, [r7, #24]
        break;
 8003fbc:	e004      	b.n	8003fc8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	77bb      	strb	r3, [r7, #30]
        break;
 8003fc6:	bf00      	nop
    }

    if (pclk != 0U)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d018      	beq.n	8004000 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	085a      	lsrs	r2, r3, #1
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	441a      	add	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	2b0f      	cmp	r3, #15
 8003fe6:	d909      	bls.n	8003ffc <UART_SetConfig+0x4a0>
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fee:	d205      	bcs.n	8003ffc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60da      	str	r2, [r3, #12]
 8003ffa:	e001      	b.n	8004000 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800400c:	7fbb      	ldrb	r3, [r7, #30]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3720      	adds	r7, #32
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40007c00 	.word	0x40007c00
 800401c:	40023800 	.word	0x40023800
 8004020:	00f42400 	.word	0x00f42400

08004024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01a      	beq.n	800413a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004122:	d10a      	bne.n	800413a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	605a      	str	r2, [r3, #4]
  }
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08c      	sub	sp, #48	@ 0x30
 800416c:	af02      	add	r7, sp, #8
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004178:	f7fd fbd0 	bl	800191c <HAL_GetTick>
 800417c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b08      	cmp	r3, #8
 800418a:	d12e      	bne.n	80041ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800418c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	2200      	movs	r2, #0
 8004196:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f83b 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d021      	beq.n	80041ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	e853 3f00 	ldrex	r3, [r3]
 80041b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041ba:	623b      	str	r3, [r7, #32]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	461a      	mov	r2, r3
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	61fb      	str	r3, [r7, #28]
 80041c6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	69b9      	ldr	r1, [r7, #24]
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	617b      	str	r3, [r7, #20]
   return(result);
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e6      	bne.n	80041a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e011      	b.n	800420e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3728      	adds	r7, #40	@ 0x28
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004226:	e04f      	b.n	80042c8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	d04b      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004230:	f7fd fb74 	bl	800191c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	429a      	cmp	r2, r3
 800423e:	d302      	bcc.n	8004246 <UART_WaitOnFlagUntilTimeout+0x30>
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e04e      	b.n	80042e8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d037      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b80      	cmp	r3, #128	@ 0x80
 800425c:	d034      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b40      	cmp	r3, #64	@ 0x40
 8004262:	d031      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b08      	cmp	r3, #8
 8004270:	d110      	bne.n	8004294 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2208      	movs	r2, #8
 8004278:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f838 	bl	80042f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2208      	movs	r2, #8
 8004284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e029      	b.n	80042e8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800429e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042a2:	d111      	bne.n	80042c8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f81e 	bl	80042f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e00f      	b.n	80042e8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69da      	ldr	r2, [r3, #28]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4013      	ands	r3, r2
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d0a0      	beq.n	8004228 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b095      	sub	sp, #84	@ 0x54
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004308:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800430c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004316:	643b      	str	r3, [r7, #64]	@ 0x40
 8004318:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800431c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e6      	bne.n	80042f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3308      	adds	r3, #8
 8004330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	61fb      	str	r3, [r7, #28]
   return(result);
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3308      	adds	r3, #8
 8004348:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800434a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800434c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004350:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e5      	bne.n	800432a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004362:	2b01      	cmp	r3, #1
 8004364:	d118      	bne.n	8004398 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	60bb      	str	r3, [r7, #8]
   return(result);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f023 0310 	bic.w	r3, r3, #16
 800437a:	647b      	str	r3, [r7, #68]	@ 0x44
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6979      	ldr	r1, [r7, #20]
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	613b      	str	r3, [r7, #16]
   return(result);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e6      	bne.n	8004366 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043ac:	bf00      	nop
 80043ae:	3754      	adds	r7, #84	@ 0x54
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <__cvt>:
 80043b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043bc:	ec57 6b10 	vmov	r6, r7, d0
 80043c0:	2f00      	cmp	r7, #0
 80043c2:	460c      	mov	r4, r1
 80043c4:	4619      	mov	r1, r3
 80043c6:	463b      	mov	r3, r7
 80043c8:	bfbb      	ittet	lt
 80043ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80043ce:	461f      	movlt	r7, r3
 80043d0:	2300      	movge	r3, #0
 80043d2:	232d      	movlt	r3, #45	@ 0x2d
 80043d4:	700b      	strb	r3, [r1, #0]
 80043d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80043dc:	4691      	mov	r9, r2
 80043de:	f023 0820 	bic.w	r8, r3, #32
 80043e2:	bfbc      	itt	lt
 80043e4:	4632      	movlt	r2, r6
 80043e6:	4616      	movlt	r6, r2
 80043e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80043ec:	d005      	beq.n	80043fa <__cvt+0x42>
 80043ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80043f2:	d100      	bne.n	80043f6 <__cvt+0x3e>
 80043f4:	3401      	adds	r4, #1
 80043f6:	2102      	movs	r1, #2
 80043f8:	e000      	b.n	80043fc <__cvt+0x44>
 80043fa:	2103      	movs	r1, #3
 80043fc:	ab03      	add	r3, sp, #12
 80043fe:	9301      	str	r3, [sp, #4]
 8004400:	ab02      	add	r3, sp, #8
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	ec47 6b10 	vmov	d0, r6, r7
 8004408:	4653      	mov	r3, sl
 800440a:	4622      	mov	r2, r4
 800440c:	f000 ff3c 	bl	8005288 <_dtoa_r>
 8004410:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004414:	4605      	mov	r5, r0
 8004416:	d119      	bne.n	800444c <__cvt+0x94>
 8004418:	f019 0f01 	tst.w	r9, #1
 800441c:	d00e      	beq.n	800443c <__cvt+0x84>
 800441e:	eb00 0904 	add.w	r9, r0, r4
 8004422:	2200      	movs	r2, #0
 8004424:	2300      	movs	r3, #0
 8004426:	4630      	mov	r0, r6
 8004428:	4639      	mov	r1, r7
 800442a:	f7fc fb6d 	bl	8000b08 <__aeabi_dcmpeq>
 800442e:	b108      	cbz	r0, 8004434 <__cvt+0x7c>
 8004430:	f8cd 900c 	str.w	r9, [sp, #12]
 8004434:	2230      	movs	r2, #48	@ 0x30
 8004436:	9b03      	ldr	r3, [sp, #12]
 8004438:	454b      	cmp	r3, r9
 800443a:	d31e      	bcc.n	800447a <__cvt+0xc2>
 800443c:	9b03      	ldr	r3, [sp, #12]
 800443e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004440:	1b5b      	subs	r3, r3, r5
 8004442:	4628      	mov	r0, r5
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	b004      	add	sp, #16
 8004448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800444c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004450:	eb00 0904 	add.w	r9, r0, r4
 8004454:	d1e5      	bne.n	8004422 <__cvt+0x6a>
 8004456:	7803      	ldrb	r3, [r0, #0]
 8004458:	2b30      	cmp	r3, #48	@ 0x30
 800445a:	d10a      	bne.n	8004472 <__cvt+0xba>
 800445c:	2200      	movs	r2, #0
 800445e:	2300      	movs	r3, #0
 8004460:	4630      	mov	r0, r6
 8004462:	4639      	mov	r1, r7
 8004464:	f7fc fb50 	bl	8000b08 <__aeabi_dcmpeq>
 8004468:	b918      	cbnz	r0, 8004472 <__cvt+0xba>
 800446a:	f1c4 0401 	rsb	r4, r4, #1
 800446e:	f8ca 4000 	str.w	r4, [sl]
 8004472:	f8da 3000 	ldr.w	r3, [sl]
 8004476:	4499      	add	r9, r3
 8004478:	e7d3      	b.n	8004422 <__cvt+0x6a>
 800447a:	1c59      	adds	r1, r3, #1
 800447c:	9103      	str	r1, [sp, #12]
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e7d9      	b.n	8004436 <__cvt+0x7e>

08004482 <__exponent>:
 8004482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004484:	2900      	cmp	r1, #0
 8004486:	bfba      	itte	lt
 8004488:	4249      	neglt	r1, r1
 800448a:	232d      	movlt	r3, #45	@ 0x2d
 800448c:	232b      	movge	r3, #43	@ 0x2b
 800448e:	2909      	cmp	r1, #9
 8004490:	7002      	strb	r2, [r0, #0]
 8004492:	7043      	strb	r3, [r0, #1]
 8004494:	dd29      	ble.n	80044ea <__exponent+0x68>
 8004496:	f10d 0307 	add.w	r3, sp, #7
 800449a:	461d      	mov	r5, r3
 800449c:	270a      	movs	r7, #10
 800449e:	461a      	mov	r2, r3
 80044a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80044a4:	fb07 1416 	mls	r4, r7, r6, r1
 80044a8:	3430      	adds	r4, #48	@ 0x30
 80044aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80044ae:	460c      	mov	r4, r1
 80044b0:	2c63      	cmp	r4, #99	@ 0x63
 80044b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80044b6:	4631      	mov	r1, r6
 80044b8:	dcf1      	bgt.n	800449e <__exponent+0x1c>
 80044ba:	3130      	adds	r1, #48	@ 0x30
 80044bc:	1e94      	subs	r4, r2, #2
 80044be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80044c2:	1c41      	adds	r1, r0, #1
 80044c4:	4623      	mov	r3, r4
 80044c6:	42ab      	cmp	r3, r5
 80044c8:	d30a      	bcc.n	80044e0 <__exponent+0x5e>
 80044ca:	f10d 0309 	add.w	r3, sp, #9
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	42ac      	cmp	r4, r5
 80044d2:	bf88      	it	hi
 80044d4:	2300      	movhi	r3, #0
 80044d6:	3302      	adds	r3, #2
 80044d8:	4403      	add	r3, r0
 80044da:	1a18      	subs	r0, r3, r0
 80044dc:	b003      	add	sp, #12
 80044de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80044e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80044e8:	e7ed      	b.n	80044c6 <__exponent+0x44>
 80044ea:	2330      	movs	r3, #48	@ 0x30
 80044ec:	3130      	adds	r1, #48	@ 0x30
 80044ee:	7083      	strb	r3, [r0, #2]
 80044f0:	70c1      	strb	r1, [r0, #3]
 80044f2:	1d03      	adds	r3, r0, #4
 80044f4:	e7f1      	b.n	80044da <__exponent+0x58>
	...

080044f8 <_printf_float>:
 80044f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fc:	b08d      	sub	sp, #52	@ 0x34
 80044fe:	460c      	mov	r4, r1
 8004500:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004504:	4616      	mov	r6, r2
 8004506:	461f      	mov	r7, r3
 8004508:	4605      	mov	r5, r0
 800450a:	f000 fdbd 	bl	8005088 <_localeconv_r>
 800450e:	6803      	ldr	r3, [r0, #0]
 8004510:	9304      	str	r3, [sp, #16]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fb fecc 	bl	80002b0 <strlen>
 8004518:	2300      	movs	r3, #0
 800451a:	930a      	str	r3, [sp, #40]	@ 0x28
 800451c:	f8d8 3000 	ldr.w	r3, [r8]
 8004520:	9005      	str	r0, [sp, #20]
 8004522:	3307      	adds	r3, #7
 8004524:	f023 0307 	bic.w	r3, r3, #7
 8004528:	f103 0208 	add.w	r2, r3, #8
 800452c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004530:	f8d4 b000 	ldr.w	fp, [r4]
 8004534:	f8c8 2000 	str.w	r2, [r8]
 8004538:	e9d3 8900 	ldrd	r8, r9, [r3]
 800453c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004540:	9307      	str	r3, [sp, #28]
 8004542:	f8cd 8018 	str.w	r8, [sp, #24]
 8004546:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800454a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800454e:	4b9c      	ldr	r3, [pc, #624]	@ (80047c0 <_printf_float+0x2c8>)
 8004550:	f04f 32ff 	mov.w	r2, #4294967295
 8004554:	f7fc fb0a 	bl	8000b6c <__aeabi_dcmpun>
 8004558:	bb70      	cbnz	r0, 80045b8 <_printf_float+0xc0>
 800455a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800455e:	4b98      	ldr	r3, [pc, #608]	@ (80047c0 <_printf_float+0x2c8>)
 8004560:	f04f 32ff 	mov.w	r2, #4294967295
 8004564:	f7fc fae4 	bl	8000b30 <__aeabi_dcmple>
 8004568:	bb30      	cbnz	r0, 80045b8 <_printf_float+0xc0>
 800456a:	2200      	movs	r2, #0
 800456c:	2300      	movs	r3, #0
 800456e:	4640      	mov	r0, r8
 8004570:	4649      	mov	r1, r9
 8004572:	f7fc fad3 	bl	8000b1c <__aeabi_dcmplt>
 8004576:	b110      	cbz	r0, 800457e <_printf_float+0x86>
 8004578:	232d      	movs	r3, #45	@ 0x2d
 800457a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800457e:	4a91      	ldr	r2, [pc, #580]	@ (80047c4 <_printf_float+0x2cc>)
 8004580:	4b91      	ldr	r3, [pc, #580]	@ (80047c8 <_printf_float+0x2d0>)
 8004582:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004586:	bf8c      	ite	hi
 8004588:	4690      	movhi	r8, r2
 800458a:	4698      	movls	r8, r3
 800458c:	2303      	movs	r3, #3
 800458e:	6123      	str	r3, [r4, #16]
 8004590:	f02b 0304 	bic.w	r3, fp, #4
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	f04f 0900 	mov.w	r9, #0
 800459a:	9700      	str	r7, [sp, #0]
 800459c:	4633      	mov	r3, r6
 800459e:	aa0b      	add	r2, sp, #44	@ 0x2c
 80045a0:	4621      	mov	r1, r4
 80045a2:	4628      	mov	r0, r5
 80045a4:	f000 f9d2 	bl	800494c <_printf_common>
 80045a8:	3001      	adds	r0, #1
 80045aa:	f040 808d 	bne.w	80046c8 <_printf_float+0x1d0>
 80045ae:	f04f 30ff 	mov.w	r0, #4294967295
 80045b2:	b00d      	add	sp, #52	@ 0x34
 80045b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b8:	4642      	mov	r2, r8
 80045ba:	464b      	mov	r3, r9
 80045bc:	4640      	mov	r0, r8
 80045be:	4649      	mov	r1, r9
 80045c0:	f7fc fad4 	bl	8000b6c <__aeabi_dcmpun>
 80045c4:	b140      	cbz	r0, 80045d8 <_printf_float+0xe0>
 80045c6:	464b      	mov	r3, r9
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bfbc      	itt	lt
 80045cc:	232d      	movlt	r3, #45	@ 0x2d
 80045ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80045d2:	4a7e      	ldr	r2, [pc, #504]	@ (80047cc <_printf_float+0x2d4>)
 80045d4:	4b7e      	ldr	r3, [pc, #504]	@ (80047d0 <_printf_float+0x2d8>)
 80045d6:	e7d4      	b.n	8004582 <_printf_float+0x8a>
 80045d8:	6863      	ldr	r3, [r4, #4]
 80045da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80045de:	9206      	str	r2, [sp, #24]
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	d13b      	bne.n	800465c <_printf_float+0x164>
 80045e4:	2306      	movs	r3, #6
 80045e6:	6063      	str	r3, [r4, #4]
 80045e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80045ec:	2300      	movs	r3, #0
 80045ee:	6022      	str	r2, [r4, #0]
 80045f0:	9303      	str	r3, [sp, #12]
 80045f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80045f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80045f8:	ab09      	add	r3, sp, #36	@ 0x24
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	6861      	ldr	r1, [r4, #4]
 80045fe:	ec49 8b10 	vmov	d0, r8, r9
 8004602:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004606:	4628      	mov	r0, r5
 8004608:	f7ff fed6 	bl	80043b8 <__cvt>
 800460c:	9b06      	ldr	r3, [sp, #24]
 800460e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004610:	2b47      	cmp	r3, #71	@ 0x47
 8004612:	4680      	mov	r8, r0
 8004614:	d129      	bne.n	800466a <_printf_float+0x172>
 8004616:	1cc8      	adds	r0, r1, #3
 8004618:	db02      	blt.n	8004620 <_printf_float+0x128>
 800461a:	6863      	ldr	r3, [r4, #4]
 800461c:	4299      	cmp	r1, r3
 800461e:	dd41      	ble.n	80046a4 <_printf_float+0x1ac>
 8004620:	f1aa 0a02 	sub.w	sl, sl, #2
 8004624:	fa5f fa8a 	uxtb.w	sl, sl
 8004628:	3901      	subs	r1, #1
 800462a:	4652      	mov	r2, sl
 800462c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004630:	9109      	str	r1, [sp, #36]	@ 0x24
 8004632:	f7ff ff26 	bl	8004482 <__exponent>
 8004636:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004638:	1813      	adds	r3, r2, r0
 800463a:	2a01      	cmp	r2, #1
 800463c:	4681      	mov	r9, r0
 800463e:	6123      	str	r3, [r4, #16]
 8004640:	dc02      	bgt.n	8004648 <_printf_float+0x150>
 8004642:	6822      	ldr	r2, [r4, #0]
 8004644:	07d2      	lsls	r2, r2, #31
 8004646:	d501      	bpl.n	800464c <_printf_float+0x154>
 8004648:	3301      	adds	r3, #1
 800464a:	6123      	str	r3, [r4, #16]
 800464c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0a2      	beq.n	800459a <_printf_float+0xa2>
 8004654:	232d      	movs	r3, #45	@ 0x2d
 8004656:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800465a:	e79e      	b.n	800459a <_printf_float+0xa2>
 800465c:	9a06      	ldr	r2, [sp, #24]
 800465e:	2a47      	cmp	r2, #71	@ 0x47
 8004660:	d1c2      	bne.n	80045e8 <_printf_float+0xf0>
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1c0      	bne.n	80045e8 <_printf_float+0xf0>
 8004666:	2301      	movs	r3, #1
 8004668:	e7bd      	b.n	80045e6 <_printf_float+0xee>
 800466a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800466e:	d9db      	bls.n	8004628 <_printf_float+0x130>
 8004670:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004674:	d118      	bne.n	80046a8 <_printf_float+0x1b0>
 8004676:	2900      	cmp	r1, #0
 8004678:	6863      	ldr	r3, [r4, #4]
 800467a:	dd0b      	ble.n	8004694 <_printf_float+0x19c>
 800467c:	6121      	str	r1, [r4, #16]
 800467e:	b913      	cbnz	r3, 8004686 <_printf_float+0x18e>
 8004680:	6822      	ldr	r2, [r4, #0]
 8004682:	07d0      	lsls	r0, r2, #31
 8004684:	d502      	bpl.n	800468c <_printf_float+0x194>
 8004686:	3301      	adds	r3, #1
 8004688:	440b      	add	r3, r1
 800468a:	6123      	str	r3, [r4, #16]
 800468c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800468e:	f04f 0900 	mov.w	r9, #0
 8004692:	e7db      	b.n	800464c <_printf_float+0x154>
 8004694:	b913      	cbnz	r3, 800469c <_printf_float+0x1a4>
 8004696:	6822      	ldr	r2, [r4, #0]
 8004698:	07d2      	lsls	r2, r2, #31
 800469a:	d501      	bpl.n	80046a0 <_printf_float+0x1a8>
 800469c:	3302      	adds	r3, #2
 800469e:	e7f4      	b.n	800468a <_printf_float+0x192>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e7f2      	b.n	800468a <_printf_float+0x192>
 80046a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80046a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046aa:	4299      	cmp	r1, r3
 80046ac:	db05      	blt.n	80046ba <_printf_float+0x1c2>
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	6121      	str	r1, [r4, #16]
 80046b2:	07d8      	lsls	r0, r3, #31
 80046b4:	d5ea      	bpl.n	800468c <_printf_float+0x194>
 80046b6:	1c4b      	adds	r3, r1, #1
 80046b8:	e7e7      	b.n	800468a <_printf_float+0x192>
 80046ba:	2900      	cmp	r1, #0
 80046bc:	bfd4      	ite	le
 80046be:	f1c1 0202 	rsble	r2, r1, #2
 80046c2:	2201      	movgt	r2, #1
 80046c4:	4413      	add	r3, r2
 80046c6:	e7e0      	b.n	800468a <_printf_float+0x192>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	055a      	lsls	r2, r3, #21
 80046cc:	d407      	bmi.n	80046de <_printf_float+0x1e6>
 80046ce:	6923      	ldr	r3, [r4, #16]
 80046d0:	4642      	mov	r2, r8
 80046d2:	4631      	mov	r1, r6
 80046d4:	4628      	mov	r0, r5
 80046d6:	47b8      	blx	r7
 80046d8:	3001      	adds	r0, #1
 80046da:	d12b      	bne.n	8004734 <_printf_float+0x23c>
 80046dc:	e767      	b.n	80045ae <_printf_float+0xb6>
 80046de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80046e2:	f240 80dd 	bls.w	80048a0 <_printf_float+0x3a8>
 80046e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80046ea:	2200      	movs	r2, #0
 80046ec:	2300      	movs	r3, #0
 80046ee:	f7fc fa0b 	bl	8000b08 <__aeabi_dcmpeq>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d033      	beq.n	800475e <_printf_float+0x266>
 80046f6:	4a37      	ldr	r2, [pc, #220]	@ (80047d4 <_printf_float+0x2dc>)
 80046f8:	2301      	movs	r3, #1
 80046fa:	4631      	mov	r1, r6
 80046fc:	4628      	mov	r0, r5
 80046fe:	47b8      	blx	r7
 8004700:	3001      	adds	r0, #1
 8004702:	f43f af54 	beq.w	80045ae <_printf_float+0xb6>
 8004706:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800470a:	4543      	cmp	r3, r8
 800470c:	db02      	blt.n	8004714 <_printf_float+0x21c>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	07d8      	lsls	r0, r3, #31
 8004712:	d50f      	bpl.n	8004734 <_printf_float+0x23c>
 8004714:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004718:	4631      	mov	r1, r6
 800471a:	4628      	mov	r0, r5
 800471c:	47b8      	blx	r7
 800471e:	3001      	adds	r0, #1
 8004720:	f43f af45 	beq.w	80045ae <_printf_float+0xb6>
 8004724:	f04f 0900 	mov.w	r9, #0
 8004728:	f108 38ff 	add.w	r8, r8, #4294967295
 800472c:	f104 0a1a 	add.w	sl, r4, #26
 8004730:	45c8      	cmp	r8, r9
 8004732:	dc09      	bgt.n	8004748 <_printf_float+0x250>
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	079b      	lsls	r3, r3, #30
 8004738:	f100 8103 	bmi.w	8004942 <_printf_float+0x44a>
 800473c:	68e0      	ldr	r0, [r4, #12]
 800473e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004740:	4298      	cmp	r0, r3
 8004742:	bfb8      	it	lt
 8004744:	4618      	movlt	r0, r3
 8004746:	e734      	b.n	80045b2 <_printf_float+0xba>
 8004748:	2301      	movs	r3, #1
 800474a:	4652      	mov	r2, sl
 800474c:	4631      	mov	r1, r6
 800474e:	4628      	mov	r0, r5
 8004750:	47b8      	blx	r7
 8004752:	3001      	adds	r0, #1
 8004754:	f43f af2b 	beq.w	80045ae <_printf_float+0xb6>
 8004758:	f109 0901 	add.w	r9, r9, #1
 800475c:	e7e8      	b.n	8004730 <_printf_float+0x238>
 800475e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004760:	2b00      	cmp	r3, #0
 8004762:	dc39      	bgt.n	80047d8 <_printf_float+0x2e0>
 8004764:	4a1b      	ldr	r2, [pc, #108]	@ (80047d4 <_printf_float+0x2dc>)
 8004766:	2301      	movs	r3, #1
 8004768:	4631      	mov	r1, r6
 800476a:	4628      	mov	r0, r5
 800476c:	47b8      	blx	r7
 800476e:	3001      	adds	r0, #1
 8004770:	f43f af1d 	beq.w	80045ae <_printf_float+0xb6>
 8004774:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004778:	ea59 0303 	orrs.w	r3, r9, r3
 800477c:	d102      	bne.n	8004784 <_printf_float+0x28c>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	07d9      	lsls	r1, r3, #31
 8004782:	d5d7      	bpl.n	8004734 <_printf_float+0x23c>
 8004784:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004788:	4631      	mov	r1, r6
 800478a:	4628      	mov	r0, r5
 800478c:	47b8      	blx	r7
 800478e:	3001      	adds	r0, #1
 8004790:	f43f af0d 	beq.w	80045ae <_printf_float+0xb6>
 8004794:	f04f 0a00 	mov.w	sl, #0
 8004798:	f104 0b1a 	add.w	fp, r4, #26
 800479c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800479e:	425b      	negs	r3, r3
 80047a0:	4553      	cmp	r3, sl
 80047a2:	dc01      	bgt.n	80047a8 <_printf_float+0x2b0>
 80047a4:	464b      	mov	r3, r9
 80047a6:	e793      	b.n	80046d0 <_printf_float+0x1d8>
 80047a8:	2301      	movs	r3, #1
 80047aa:	465a      	mov	r2, fp
 80047ac:	4631      	mov	r1, r6
 80047ae:	4628      	mov	r0, r5
 80047b0:	47b8      	blx	r7
 80047b2:	3001      	adds	r0, #1
 80047b4:	f43f aefb 	beq.w	80045ae <_printf_float+0xb6>
 80047b8:	f10a 0a01 	add.w	sl, sl, #1
 80047bc:	e7ee      	b.n	800479c <_printf_float+0x2a4>
 80047be:	bf00      	nop
 80047c0:	7fefffff 	.word	0x7fefffff
 80047c4:	08006e58 	.word	0x08006e58
 80047c8:	08006e54 	.word	0x08006e54
 80047cc:	08006e60 	.word	0x08006e60
 80047d0:	08006e5c 	.word	0x08006e5c
 80047d4:	08006e64 	.word	0x08006e64
 80047d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80047da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80047de:	4553      	cmp	r3, sl
 80047e0:	bfa8      	it	ge
 80047e2:	4653      	movge	r3, sl
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	4699      	mov	r9, r3
 80047e8:	dc36      	bgt.n	8004858 <_printf_float+0x360>
 80047ea:	f04f 0b00 	mov.w	fp, #0
 80047ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047f2:	f104 021a 	add.w	r2, r4, #26
 80047f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80047f8:	9306      	str	r3, [sp, #24]
 80047fa:	eba3 0309 	sub.w	r3, r3, r9
 80047fe:	455b      	cmp	r3, fp
 8004800:	dc31      	bgt.n	8004866 <_printf_float+0x36e>
 8004802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004804:	459a      	cmp	sl, r3
 8004806:	dc3a      	bgt.n	800487e <_printf_float+0x386>
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	07da      	lsls	r2, r3, #31
 800480c:	d437      	bmi.n	800487e <_printf_float+0x386>
 800480e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004810:	ebaa 0903 	sub.w	r9, sl, r3
 8004814:	9b06      	ldr	r3, [sp, #24]
 8004816:	ebaa 0303 	sub.w	r3, sl, r3
 800481a:	4599      	cmp	r9, r3
 800481c:	bfa8      	it	ge
 800481e:	4699      	movge	r9, r3
 8004820:	f1b9 0f00 	cmp.w	r9, #0
 8004824:	dc33      	bgt.n	800488e <_printf_float+0x396>
 8004826:	f04f 0800 	mov.w	r8, #0
 800482a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800482e:	f104 0b1a 	add.w	fp, r4, #26
 8004832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004834:	ebaa 0303 	sub.w	r3, sl, r3
 8004838:	eba3 0309 	sub.w	r3, r3, r9
 800483c:	4543      	cmp	r3, r8
 800483e:	f77f af79 	ble.w	8004734 <_printf_float+0x23c>
 8004842:	2301      	movs	r3, #1
 8004844:	465a      	mov	r2, fp
 8004846:	4631      	mov	r1, r6
 8004848:	4628      	mov	r0, r5
 800484a:	47b8      	blx	r7
 800484c:	3001      	adds	r0, #1
 800484e:	f43f aeae 	beq.w	80045ae <_printf_float+0xb6>
 8004852:	f108 0801 	add.w	r8, r8, #1
 8004856:	e7ec      	b.n	8004832 <_printf_float+0x33a>
 8004858:	4642      	mov	r2, r8
 800485a:	4631      	mov	r1, r6
 800485c:	4628      	mov	r0, r5
 800485e:	47b8      	blx	r7
 8004860:	3001      	adds	r0, #1
 8004862:	d1c2      	bne.n	80047ea <_printf_float+0x2f2>
 8004864:	e6a3      	b.n	80045ae <_printf_float+0xb6>
 8004866:	2301      	movs	r3, #1
 8004868:	4631      	mov	r1, r6
 800486a:	4628      	mov	r0, r5
 800486c:	9206      	str	r2, [sp, #24]
 800486e:	47b8      	blx	r7
 8004870:	3001      	adds	r0, #1
 8004872:	f43f ae9c 	beq.w	80045ae <_printf_float+0xb6>
 8004876:	9a06      	ldr	r2, [sp, #24]
 8004878:	f10b 0b01 	add.w	fp, fp, #1
 800487c:	e7bb      	b.n	80047f6 <_printf_float+0x2fe>
 800487e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004882:	4631      	mov	r1, r6
 8004884:	4628      	mov	r0, r5
 8004886:	47b8      	blx	r7
 8004888:	3001      	adds	r0, #1
 800488a:	d1c0      	bne.n	800480e <_printf_float+0x316>
 800488c:	e68f      	b.n	80045ae <_printf_float+0xb6>
 800488e:	9a06      	ldr	r2, [sp, #24]
 8004890:	464b      	mov	r3, r9
 8004892:	4442      	add	r2, r8
 8004894:	4631      	mov	r1, r6
 8004896:	4628      	mov	r0, r5
 8004898:	47b8      	blx	r7
 800489a:	3001      	adds	r0, #1
 800489c:	d1c3      	bne.n	8004826 <_printf_float+0x32e>
 800489e:	e686      	b.n	80045ae <_printf_float+0xb6>
 80048a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80048a4:	f1ba 0f01 	cmp.w	sl, #1
 80048a8:	dc01      	bgt.n	80048ae <_printf_float+0x3b6>
 80048aa:	07db      	lsls	r3, r3, #31
 80048ac:	d536      	bpl.n	800491c <_printf_float+0x424>
 80048ae:	2301      	movs	r3, #1
 80048b0:	4642      	mov	r2, r8
 80048b2:	4631      	mov	r1, r6
 80048b4:	4628      	mov	r0, r5
 80048b6:	47b8      	blx	r7
 80048b8:	3001      	adds	r0, #1
 80048ba:	f43f ae78 	beq.w	80045ae <_printf_float+0xb6>
 80048be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048c2:	4631      	mov	r1, r6
 80048c4:	4628      	mov	r0, r5
 80048c6:	47b8      	blx	r7
 80048c8:	3001      	adds	r0, #1
 80048ca:	f43f ae70 	beq.w	80045ae <_printf_float+0xb6>
 80048ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80048d2:	2200      	movs	r2, #0
 80048d4:	2300      	movs	r3, #0
 80048d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048da:	f7fc f915 	bl	8000b08 <__aeabi_dcmpeq>
 80048de:	b9c0      	cbnz	r0, 8004912 <_printf_float+0x41a>
 80048e0:	4653      	mov	r3, sl
 80048e2:	f108 0201 	add.w	r2, r8, #1
 80048e6:	4631      	mov	r1, r6
 80048e8:	4628      	mov	r0, r5
 80048ea:	47b8      	blx	r7
 80048ec:	3001      	adds	r0, #1
 80048ee:	d10c      	bne.n	800490a <_printf_float+0x412>
 80048f0:	e65d      	b.n	80045ae <_printf_float+0xb6>
 80048f2:	2301      	movs	r3, #1
 80048f4:	465a      	mov	r2, fp
 80048f6:	4631      	mov	r1, r6
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b8      	blx	r7
 80048fc:	3001      	adds	r0, #1
 80048fe:	f43f ae56 	beq.w	80045ae <_printf_float+0xb6>
 8004902:	f108 0801 	add.w	r8, r8, #1
 8004906:	45d0      	cmp	r8, sl
 8004908:	dbf3      	blt.n	80048f2 <_printf_float+0x3fa>
 800490a:	464b      	mov	r3, r9
 800490c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004910:	e6df      	b.n	80046d2 <_printf_float+0x1da>
 8004912:	f04f 0800 	mov.w	r8, #0
 8004916:	f104 0b1a 	add.w	fp, r4, #26
 800491a:	e7f4      	b.n	8004906 <_printf_float+0x40e>
 800491c:	2301      	movs	r3, #1
 800491e:	4642      	mov	r2, r8
 8004920:	e7e1      	b.n	80048e6 <_printf_float+0x3ee>
 8004922:	2301      	movs	r3, #1
 8004924:	464a      	mov	r2, r9
 8004926:	4631      	mov	r1, r6
 8004928:	4628      	mov	r0, r5
 800492a:	47b8      	blx	r7
 800492c:	3001      	adds	r0, #1
 800492e:	f43f ae3e 	beq.w	80045ae <_printf_float+0xb6>
 8004932:	f108 0801 	add.w	r8, r8, #1
 8004936:	68e3      	ldr	r3, [r4, #12]
 8004938:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800493a:	1a5b      	subs	r3, r3, r1
 800493c:	4543      	cmp	r3, r8
 800493e:	dcf0      	bgt.n	8004922 <_printf_float+0x42a>
 8004940:	e6fc      	b.n	800473c <_printf_float+0x244>
 8004942:	f04f 0800 	mov.w	r8, #0
 8004946:	f104 0919 	add.w	r9, r4, #25
 800494a:	e7f4      	b.n	8004936 <_printf_float+0x43e>

0800494c <_printf_common>:
 800494c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004950:	4616      	mov	r6, r2
 8004952:	4698      	mov	r8, r3
 8004954:	688a      	ldr	r2, [r1, #8]
 8004956:	690b      	ldr	r3, [r1, #16]
 8004958:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800495c:	4293      	cmp	r3, r2
 800495e:	bfb8      	it	lt
 8004960:	4613      	movlt	r3, r2
 8004962:	6033      	str	r3, [r6, #0]
 8004964:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004968:	4607      	mov	r7, r0
 800496a:	460c      	mov	r4, r1
 800496c:	b10a      	cbz	r2, 8004972 <_printf_common+0x26>
 800496e:	3301      	adds	r3, #1
 8004970:	6033      	str	r3, [r6, #0]
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	0699      	lsls	r1, r3, #26
 8004976:	bf42      	ittt	mi
 8004978:	6833      	ldrmi	r3, [r6, #0]
 800497a:	3302      	addmi	r3, #2
 800497c:	6033      	strmi	r3, [r6, #0]
 800497e:	6825      	ldr	r5, [r4, #0]
 8004980:	f015 0506 	ands.w	r5, r5, #6
 8004984:	d106      	bne.n	8004994 <_printf_common+0x48>
 8004986:	f104 0a19 	add.w	sl, r4, #25
 800498a:	68e3      	ldr	r3, [r4, #12]
 800498c:	6832      	ldr	r2, [r6, #0]
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	42ab      	cmp	r3, r5
 8004992:	dc26      	bgt.n	80049e2 <_printf_common+0x96>
 8004994:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004998:	6822      	ldr	r2, [r4, #0]
 800499a:	3b00      	subs	r3, #0
 800499c:	bf18      	it	ne
 800499e:	2301      	movne	r3, #1
 80049a0:	0692      	lsls	r2, r2, #26
 80049a2:	d42b      	bmi.n	80049fc <_printf_common+0xb0>
 80049a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049a8:	4641      	mov	r1, r8
 80049aa:	4638      	mov	r0, r7
 80049ac:	47c8      	blx	r9
 80049ae:	3001      	adds	r0, #1
 80049b0:	d01e      	beq.n	80049f0 <_printf_common+0xa4>
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	6922      	ldr	r2, [r4, #16]
 80049b6:	f003 0306 	and.w	r3, r3, #6
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	bf02      	ittt	eq
 80049be:	68e5      	ldreq	r5, [r4, #12]
 80049c0:	6833      	ldreq	r3, [r6, #0]
 80049c2:	1aed      	subeq	r5, r5, r3
 80049c4:	68a3      	ldr	r3, [r4, #8]
 80049c6:	bf0c      	ite	eq
 80049c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049cc:	2500      	movne	r5, #0
 80049ce:	4293      	cmp	r3, r2
 80049d0:	bfc4      	itt	gt
 80049d2:	1a9b      	subgt	r3, r3, r2
 80049d4:	18ed      	addgt	r5, r5, r3
 80049d6:	2600      	movs	r6, #0
 80049d8:	341a      	adds	r4, #26
 80049da:	42b5      	cmp	r5, r6
 80049dc:	d11a      	bne.n	8004a14 <_printf_common+0xc8>
 80049de:	2000      	movs	r0, #0
 80049e0:	e008      	b.n	80049f4 <_printf_common+0xa8>
 80049e2:	2301      	movs	r3, #1
 80049e4:	4652      	mov	r2, sl
 80049e6:	4641      	mov	r1, r8
 80049e8:	4638      	mov	r0, r7
 80049ea:	47c8      	blx	r9
 80049ec:	3001      	adds	r0, #1
 80049ee:	d103      	bne.n	80049f8 <_printf_common+0xac>
 80049f0:	f04f 30ff 	mov.w	r0, #4294967295
 80049f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f8:	3501      	adds	r5, #1
 80049fa:	e7c6      	b.n	800498a <_printf_common+0x3e>
 80049fc:	18e1      	adds	r1, r4, r3
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	2030      	movs	r0, #48	@ 0x30
 8004a02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a06:	4422      	add	r2, r4
 8004a08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a10:	3302      	adds	r3, #2
 8004a12:	e7c7      	b.n	80049a4 <_printf_common+0x58>
 8004a14:	2301      	movs	r3, #1
 8004a16:	4622      	mov	r2, r4
 8004a18:	4641      	mov	r1, r8
 8004a1a:	4638      	mov	r0, r7
 8004a1c:	47c8      	blx	r9
 8004a1e:	3001      	adds	r0, #1
 8004a20:	d0e6      	beq.n	80049f0 <_printf_common+0xa4>
 8004a22:	3601      	adds	r6, #1
 8004a24:	e7d9      	b.n	80049da <_printf_common+0x8e>
	...

08004a28 <_printf_i>:
 8004a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a2c:	7e0f      	ldrb	r7, [r1, #24]
 8004a2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a30:	2f78      	cmp	r7, #120	@ 0x78
 8004a32:	4691      	mov	r9, r2
 8004a34:	4680      	mov	r8, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	469a      	mov	sl, r3
 8004a3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a3e:	d807      	bhi.n	8004a50 <_printf_i+0x28>
 8004a40:	2f62      	cmp	r7, #98	@ 0x62
 8004a42:	d80a      	bhi.n	8004a5a <_printf_i+0x32>
 8004a44:	2f00      	cmp	r7, #0
 8004a46:	f000 80d1 	beq.w	8004bec <_printf_i+0x1c4>
 8004a4a:	2f58      	cmp	r7, #88	@ 0x58
 8004a4c:	f000 80b8 	beq.w	8004bc0 <_printf_i+0x198>
 8004a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a58:	e03a      	b.n	8004ad0 <_printf_i+0xa8>
 8004a5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a5e:	2b15      	cmp	r3, #21
 8004a60:	d8f6      	bhi.n	8004a50 <_printf_i+0x28>
 8004a62:	a101      	add	r1, pc, #4	@ (adr r1, 8004a68 <_printf_i+0x40>)
 8004a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a68:	08004ac1 	.word	0x08004ac1
 8004a6c:	08004ad5 	.word	0x08004ad5
 8004a70:	08004a51 	.word	0x08004a51
 8004a74:	08004a51 	.word	0x08004a51
 8004a78:	08004a51 	.word	0x08004a51
 8004a7c:	08004a51 	.word	0x08004a51
 8004a80:	08004ad5 	.word	0x08004ad5
 8004a84:	08004a51 	.word	0x08004a51
 8004a88:	08004a51 	.word	0x08004a51
 8004a8c:	08004a51 	.word	0x08004a51
 8004a90:	08004a51 	.word	0x08004a51
 8004a94:	08004bd3 	.word	0x08004bd3
 8004a98:	08004aff 	.word	0x08004aff
 8004a9c:	08004b8d 	.word	0x08004b8d
 8004aa0:	08004a51 	.word	0x08004a51
 8004aa4:	08004a51 	.word	0x08004a51
 8004aa8:	08004bf5 	.word	0x08004bf5
 8004aac:	08004a51 	.word	0x08004a51
 8004ab0:	08004aff 	.word	0x08004aff
 8004ab4:	08004a51 	.word	0x08004a51
 8004ab8:	08004a51 	.word	0x08004a51
 8004abc:	08004b95 	.word	0x08004b95
 8004ac0:	6833      	ldr	r3, [r6, #0]
 8004ac2:	1d1a      	adds	r2, r3, #4
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6032      	str	r2, [r6, #0]
 8004ac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004acc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e09c      	b.n	8004c0e <_printf_i+0x1e6>
 8004ad4:	6833      	ldr	r3, [r6, #0]
 8004ad6:	6820      	ldr	r0, [r4, #0]
 8004ad8:	1d19      	adds	r1, r3, #4
 8004ada:	6031      	str	r1, [r6, #0]
 8004adc:	0606      	lsls	r6, r0, #24
 8004ade:	d501      	bpl.n	8004ae4 <_printf_i+0xbc>
 8004ae0:	681d      	ldr	r5, [r3, #0]
 8004ae2:	e003      	b.n	8004aec <_printf_i+0xc4>
 8004ae4:	0645      	lsls	r5, r0, #25
 8004ae6:	d5fb      	bpl.n	8004ae0 <_printf_i+0xb8>
 8004ae8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004aec:	2d00      	cmp	r5, #0
 8004aee:	da03      	bge.n	8004af8 <_printf_i+0xd0>
 8004af0:	232d      	movs	r3, #45	@ 0x2d
 8004af2:	426d      	negs	r5, r5
 8004af4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004af8:	4858      	ldr	r0, [pc, #352]	@ (8004c5c <_printf_i+0x234>)
 8004afa:	230a      	movs	r3, #10
 8004afc:	e011      	b.n	8004b22 <_printf_i+0xfa>
 8004afe:	6821      	ldr	r1, [r4, #0]
 8004b00:	6833      	ldr	r3, [r6, #0]
 8004b02:	0608      	lsls	r0, r1, #24
 8004b04:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b08:	d402      	bmi.n	8004b10 <_printf_i+0xe8>
 8004b0a:	0649      	lsls	r1, r1, #25
 8004b0c:	bf48      	it	mi
 8004b0e:	b2ad      	uxthmi	r5, r5
 8004b10:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b12:	4852      	ldr	r0, [pc, #328]	@ (8004c5c <_printf_i+0x234>)
 8004b14:	6033      	str	r3, [r6, #0]
 8004b16:	bf14      	ite	ne
 8004b18:	230a      	movne	r3, #10
 8004b1a:	2308      	moveq	r3, #8
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b22:	6866      	ldr	r6, [r4, #4]
 8004b24:	60a6      	str	r6, [r4, #8]
 8004b26:	2e00      	cmp	r6, #0
 8004b28:	db05      	blt.n	8004b36 <_printf_i+0x10e>
 8004b2a:	6821      	ldr	r1, [r4, #0]
 8004b2c:	432e      	orrs	r6, r5
 8004b2e:	f021 0104 	bic.w	r1, r1, #4
 8004b32:	6021      	str	r1, [r4, #0]
 8004b34:	d04b      	beq.n	8004bce <_printf_i+0x1a6>
 8004b36:	4616      	mov	r6, r2
 8004b38:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b3c:	fb03 5711 	mls	r7, r3, r1, r5
 8004b40:	5dc7      	ldrb	r7, [r0, r7]
 8004b42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b46:	462f      	mov	r7, r5
 8004b48:	42bb      	cmp	r3, r7
 8004b4a:	460d      	mov	r5, r1
 8004b4c:	d9f4      	bls.n	8004b38 <_printf_i+0x110>
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d10b      	bne.n	8004b6a <_printf_i+0x142>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	07df      	lsls	r7, r3, #31
 8004b56:	d508      	bpl.n	8004b6a <_printf_i+0x142>
 8004b58:	6923      	ldr	r3, [r4, #16]
 8004b5a:	6861      	ldr	r1, [r4, #4]
 8004b5c:	4299      	cmp	r1, r3
 8004b5e:	bfde      	ittt	le
 8004b60:	2330      	movle	r3, #48	@ 0x30
 8004b62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b6a:	1b92      	subs	r2, r2, r6
 8004b6c:	6122      	str	r2, [r4, #16]
 8004b6e:	f8cd a000 	str.w	sl, [sp]
 8004b72:	464b      	mov	r3, r9
 8004b74:	aa03      	add	r2, sp, #12
 8004b76:	4621      	mov	r1, r4
 8004b78:	4640      	mov	r0, r8
 8004b7a:	f7ff fee7 	bl	800494c <_printf_common>
 8004b7e:	3001      	adds	r0, #1
 8004b80:	d14a      	bne.n	8004c18 <_printf_i+0x1f0>
 8004b82:	f04f 30ff 	mov.w	r0, #4294967295
 8004b86:	b004      	add	sp, #16
 8004b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	f043 0320 	orr.w	r3, r3, #32
 8004b92:	6023      	str	r3, [r4, #0]
 8004b94:	4832      	ldr	r0, [pc, #200]	@ (8004c60 <_printf_i+0x238>)
 8004b96:	2778      	movs	r7, #120	@ 0x78
 8004b98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	6831      	ldr	r1, [r6, #0]
 8004ba0:	061f      	lsls	r7, r3, #24
 8004ba2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ba6:	d402      	bmi.n	8004bae <_printf_i+0x186>
 8004ba8:	065f      	lsls	r7, r3, #25
 8004baa:	bf48      	it	mi
 8004bac:	b2ad      	uxthmi	r5, r5
 8004bae:	6031      	str	r1, [r6, #0]
 8004bb0:	07d9      	lsls	r1, r3, #31
 8004bb2:	bf44      	itt	mi
 8004bb4:	f043 0320 	orrmi.w	r3, r3, #32
 8004bb8:	6023      	strmi	r3, [r4, #0]
 8004bba:	b11d      	cbz	r5, 8004bc4 <_printf_i+0x19c>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	e7ad      	b.n	8004b1c <_printf_i+0xf4>
 8004bc0:	4826      	ldr	r0, [pc, #152]	@ (8004c5c <_printf_i+0x234>)
 8004bc2:	e7e9      	b.n	8004b98 <_printf_i+0x170>
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	f023 0320 	bic.w	r3, r3, #32
 8004bca:	6023      	str	r3, [r4, #0]
 8004bcc:	e7f6      	b.n	8004bbc <_printf_i+0x194>
 8004bce:	4616      	mov	r6, r2
 8004bd0:	e7bd      	b.n	8004b4e <_printf_i+0x126>
 8004bd2:	6833      	ldr	r3, [r6, #0]
 8004bd4:	6825      	ldr	r5, [r4, #0]
 8004bd6:	6961      	ldr	r1, [r4, #20]
 8004bd8:	1d18      	adds	r0, r3, #4
 8004bda:	6030      	str	r0, [r6, #0]
 8004bdc:	062e      	lsls	r6, r5, #24
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	d501      	bpl.n	8004be6 <_printf_i+0x1be>
 8004be2:	6019      	str	r1, [r3, #0]
 8004be4:	e002      	b.n	8004bec <_printf_i+0x1c4>
 8004be6:	0668      	lsls	r0, r5, #25
 8004be8:	d5fb      	bpl.n	8004be2 <_printf_i+0x1ba>
 8004bea:	8019      	strh	r1, [r3, #0]
 8004bec:	2300      	movs	r3, #0
 8004bee:	6123      	str	r3, [r4, #16]
 8004bf0:	4616      	mov	r6, r2
 8004bf2:	e7bc      	b.n	8004b6e <_printf_i+0x146>
 8004bf4:	6833      	ldr	r3, [r6, #0]
 8004bf6:	1d1a      	adds	r2, r3, #4
 8004bf8:	6032      	str	r2, [r6, #0]
 8004bfa:	681e      	ldr	r6, [r3, #0]
 8004bfc:	6862      	ldr	r2, [r4, #4]
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4630      	mov	r0, r6
 8004c02:	f7fb fb05 	bl	8000210 <memchr>
 8004c06:	b108      	cbz	r0, 8004c0c <_printf_i+0x1e4>
 8004c08:	1b80      	subs	r0, r0, r6
 8004c0a:	6060      	str	r0, [r4, #4]
 8004c0c:	6863      	ldr	r3, [r4, #4]
 8004c0e:	6123      	str	r3, [r4, #16]
 8004c10:	2300      	movs	r3, #0
 8004c12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c16:	e7aa      	b.n	8004b6e <_printf_i+0x146>
 8004c18:	6923      	ldr	r3, [r4, #16]
 8004c1a:	4632      	mov	r2, r6
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	4640      	mov	r0, r8
 8004c20:	47d0      	blx	sl
 8004c22:	3001      	adds	r0, #1
 8004c24:	d0ad      	beq.n	8004b82 <_printf_i+0x15a>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	079b      	lsls	r3, r3, #30
 8004c2a:	d413      	bmi.n	8004c54 <_printf_i+0x22c>
 8004c2c:	68e0      	ldr	r0, [r4, #12]
 8004c2e:	9b03      	ldr	r3, [sp, #12]
 8004c30:	4298      	cmp	r0, r3
 8004c32:	bfb8      	it	lt
 8004c34:	4618      	movlt	r0, r3
 8004c36:	e7a6      	b.n	8004b86 <_printf_i+0x15e>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	4632      	mov	r2, r6
 8004c3c:	4649      	mov	r1, r9
 8004c3e:	4640      	mov	r0, r8
 8004c40:	47d0      	blx	sl
 8004c42:	3001      	adds	r0, #1
 8004c44:	d09d      	beq.n	8004b82 <_printf_i+0x15a>
 8004c46:	3501      	adds	r5, #1
 8004c48:	68e3      	ldr	r3, [r4, #12]
 8004c4a:	9903      	ldr	r1, [sp, #12]
 8004c4c:	1a5b      	subs	r3, r3, r1
 8004c4e:	42ab      	cmp	r3, r5
 8004c50:	dcf2      	bgt.n	8004c38 <_printf_i+0x210>
 8004c52:	e7eb      	b.n	8004c2c <_printf_i+0x204>
 8004c54:	2500      	movs	r5, #0
 8004c56:	f104 0619 	add.w	r6, r4, #25
 8004c5a:	e7f5      	b.n	8004c48 <_printf_i+0x220>
 8004c5c:	08006e66 	.word	0x08006e66
 8004c60:	08006e77 	.word	0x08006e77

08004c64 <std>:
 8004c64:	2300      	movs	r3, #0
 8004c66:	b510      	push	{r4, lr}
 8004c68:	4604      	mov	r4, r0
 8004c6a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c72:	6083      	str	r3, [r0, #8]
 8004c74:	8181      	strh	r1, [r0, #12]
 8004c76:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c78:	81c2      	strh	r2, [r0, #14]
 8004c7a:	6183      	str	r3, [r0, #24]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	2208      	movs	r2, #8
 8004c80:	305c      	adds	r0, #92	@ 0x5c
 8004c82:	f000 f9f9 	bl	8005078 <memset>
 8004c86:	4b0d      	ldr	r3, [pc, #52]	@ (8004cbc <std+0x58>)
 8004c88:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc0 <std+0x5c>)
 8004c8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc4 <std+0x60>)
 8004c90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c92:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc8 <std+0x64>)
 8004c94:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c96:	4b0d      	ldr	r3, [pc, #52]	@ (8004ccc <std+0x68>)
 8004c98:	6224      	str	r4, [r4, #32]
 8004c9a:	429c      	cmp	r4, r3
 8004c9c:	d006      	beq.n	8004cac <std+0x48>
 8004c9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ca2:	4294      	cmp	r4, r2
 8004ca4:	d002      	beq.n	8004cac <std+0x48>
 8004ca6:	33d0      	adds	r3, #208	@ 0xd0
 8004ca8:	429c      	cmp	r4, r3
 8004caa:	d105      	bne.n	8004cb8 <std+0x54>
 8004cac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb4:	f000 ba5c 	b.w	8005170 <__retarget_lock_init_recursive>
 8004cb8:	bd10      	pop	{r4, pc}
 8004cba:	bf00      	nop
 8004cbc:	08004ec9 	.word	0x08004ec9
 8004cc0:	08004eeb 	.word	0x08004eeb
 8004cc4:	08004f23 	.word	0x08004f23
 8004cc8:	08004f47 	.word	0x08004f47
 8004ccc:	200002d4 	.word	0x200002d4

08004cd0 <stdio_exit_handler>:
 8004cd0:	4a02      	ldr	r2, [pc, #8]	@ (8004cdc <stdio_exit_handler+0xc>)
 8004cd2:	4903      	ldr	r1, [pc, #12]	@ (8004ce0 <stdio_exit_handler+0x10>)
 8004cd4:	4803      	ldr	r0, [pc, #12]	@ (8004ce4 <stdio_exit_handler+0x14>)
 8004cd6:	f000 b869 	b.w	8004dac <_fwalk_sglue>
 8004cda:	bf00      	nop
 8004cdc:	2000000c 	.word	0x2000000c
 8004ce0:	08006aa9 	.word	0x08006aa9
 8004ce4:	2000001c 	.word	0x2000001c

08004ce8 <cleanup_stdio>:
 8004ce8:	6841      	ldr	r1, [r0, #4]
 8004cea:	4b0c      	ldr	r3, [pc, #48]	@ (8004d1c <cleanup_stdio+0x34>)
 8004cec:	4299      	cmp	r1, r3
 8004cee:	b510      	push	{r4, lr}
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	d001      	beq.n	8004cf8 <cleanup_stdio+0x10>
 8004cf4:	f001 fed8 	bl	8006aa8 <_fflush_r>
 8004cf8:	68a1      	ldr	r1, [r4, #8]
 8004cfa:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <cleanup_stdio+0x38>)
 8004cfc:	4299      	cmp	r1, r3
 8004cfe:	d002      	beq.n	8004d06 <cleanup_stdio+0x1e>
 8004d00:	4620      	mov	r0, r4
 8004d02:	f001 fed1 	bl	8006aa8 <_fflush_r>
 8004d06:	68e1      	ldr	r1, [r4, #12]
 8004d08:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <cleanup_stdio+0x3c>)
 8004d0a:	4299      	cmp	r1, r3
 8004d0c:	d004      	beq.n	8004d18 <cleanup_stdio+0x30>
 8004d0e:	4620      	mov	r0, r4
 8004d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d14:	f001 bec8 	b.w	8006aa8 <_fflush_r>
 8004d18:	bd10      	pop	{r4, pc}
 8004d1a:	bf00      	nop
 8004d1c:	200002d4 	.word	0x200002d4
 8004d20:	2000033c 	.word	0x2000033c
 8004d24:	200003a4 	.word	0x200003a4

08004d28 <global_stdio_init.part.0>:
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d58 <global_stdio_init.part.0+0x30>)
 8004d2c:	4c0b      	ldr	r4, [pc, #44]	@ (8004d5c <global_stdio_init.part.0+0x34>)
 8004d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8004d60 <global_stdio_init.part.0+0x38>)
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	4620      	mov	r0, r4
 8004d34:	2200      	movs	r2, #0
 8004d36:	2104      	movs	r1, #4
 8004d38:	f7ff ff94 	bl	8004c64 <std>
 8004d3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d40:	2201      	movs	r2, #1
 8004d42:	2109      	movs	r1, #9
 8004d44:	f7ff ff8e 	bl	8004c64 <std>
 8004d48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d52:	2112      	movs	r1, #18
 8004d54:	f7ff bf86 	b.w	8004c64 <std>
 8004d58:	2000040c 	.word	0x2000040c
 8004d5c:	200002d4 	.word	0x200002d4
 8004d60:	08004cd1 	.word	0x08004cd1

08004d64 <__sfp_lock_acquire>:
 8004d64:	4801      	ldr	r0, [pc, #4]	@ (8004d6c <__sfp_lock_acquire+0x8>)
 8004d66:	f000 ba04 	b.w	8005172 <__retarget_lock_acquire_recursive>
 8004d6a:	bf00      	nop
 8004d6c:	20000415 	.word	0x20000415

08004d70 <__sfp_lock_release>:
 8004d70:	4801      	ldr	r0, [pc, #4]	@ (8004d78 <__sfp_lock_release+0x8>)
 8004d72:	f000 b9ff 	b.w	8005174 <__retarget_lock_release_recursive>
 8004d76:	bf00      	nop
 8004d78:	20000415 	.word	0x20000415

08004d7c <__sinit>:
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	4604      	mov	r4, r0
 8004d80:	f7ff fff0 	bl	8004d64 <__sfp_lock_acquire>
 8004d84:	6a23      	ldr	r3, [r4, #32]
 8004d86:	b11b      	cbz	r3, 8004d90 <__sinit+0x14>
 8004d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d8c:	f7ff bff0 	b.w	8004d70 <__sfp_lock_release>
 8004d90:	4b04      	ldr	r3, [pc, #16]	@ (8004da4 <__sinit+0x28>)
 8004d92:	6223      	str	r3, [r4, #32]
 8004d94:	4b04      	ldr	r3, [pc, #16]	@ (8004da8 <__sinit+0x2c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1f5      	bne.n	8004d88 <__sinit+0xc>
 8004d9c:	f7ff ffc4 	bl	8004d28 <global_stdio_init.part.0>
 8004da0:	e7f2      	b.n	8004d88 <__sinit+0xc>
 8004da2:	bf00      	nop
 8004da4:	08004ce9 	.word	0x08004ce9
 8004da8:	2000040c 	.word	0x2000040c

08004dac <_fwalk_sglue>:
 8004dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004db0:	4607      	mov	r7, r0
 8004db2:	4688      	mov	r8, r1
 8004db4:	4614      	mov	r4, r2
 8004db6:	2600      	movs	r6, #0
 8004db8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004dbc:	f1b9 0901 	subs.w	r9, r9, #1
 8004dc0:	d505      	bpl.n	8004dce <_fwalk_sglue+0x22>
 8004dc2:	6824      	ldr	r4, [r4, #0]
 8004dc4:	2c00      	cmp	r4, #0
 8004dc6:	d1f7      	bne.n	8004db8 <_fwalk_sglue+0xc>
 8004dc8:	4630      	mov	r0, r6
 8004dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dce:	89ab      	ldrh	r3, [r5, #12]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d907      	bls.n	8004de4 <_fwalk_sglue+0x38>
 8004dd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	d003      	beq.n	8004de4 <_fwalk_sglue+0x38>
 8004ddc:	4629      	mov	r1, r5
 8004dde:	4638      	mov	r0, r7
 8004de0:	47c0      	blx	r8
 8004de2:	4306      	orrs	r6, r0
 8004de4:	3568      	adds	r5, #104	@ 0x68
 8004de6:	e7e9      	b.n	8004dbc <_fwalk_sglue+0x10>

08004de8 <iprintf>:
 8004de8:	b40f      	push	{r0, r1, r2, r3}
 8004dea:	b507      	push	{r0, r1, r2, lr}
 8004dec:	4906      	ldr	r1, [pc, #24]	@ (8004e08 <iprintf+0x20>)
 8004dee:	ab04      	add	r3, sp, #16
 8004df0:	6808      	ldr	r0, [r1, #0]
 8004df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004df6:	6881      	ldr	r1, [r0, #8]
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	f001 fcb9 	bl	8006770 <_vfiprintf_r>
 8004dfe:	b003      	add	sp, #12
 8004e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e04:	b004      	add	sp, #16
 8004e06:	4770      	bx	lr
 8004e08:	20000018 	.word	0x20000018

08004e0c <_puts_r>:
 8004e0c:	6a03      	ldr	r3, [r0, #32]
 8004e0e:	b570      	push	{r4, r5, r6, lr}
 8004e10:	6884      	ldr	r4, [r0, #8]
 8004e12:	4605      	mov	r5, r0
 8004e14:	460e      	mov	r6, r1
 8004e16:	b90b      	cbnz	r3, 8004e1c <_puts_r+0x10>
 8004e18:	f7ff ffb0 	bl	8004d7c <__sinit>
 8004e1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e1e:	07db      	lsls	r3, r3, #31
 8004e20:	d405      	bmi.n	8004e2e <_puts_r+0x22>
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	0598      	lsls	r0, r3, #22
 8004e26:	d402      	bmi.n	8004e2e <_puts_r+0x22>
 8004e28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e2a:	f000 f9a2 	bl	8005172 <__retarget_lock_acquire_recursive>
 8004e2e:	89a3      	ldrh	r3, [r4, #12]
 8004e30:	0719      	lsls	r1, r3, #28
 8004e32:	d502      	bpl.n	8004e3a <_puts_r+0x2e>
 8004e34:	6923      	ldr	r3, [r4, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d135      	bne.n	8004ea6 <_puts_r+0x9a>
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	f000 f8c5 	bl	8004fcc <__swsetup_r>
 8004e42:	b380      	cbz	r0, 8004ea6 <_puts_r+0x9a>
 8004e44:	f04f 35ff 	mov.w	r5, #4294967295
 8004e48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e4a:	07da      	lsls	r2, r3, #31
 8004e4c:	d405      	bmi.n	8004e5a <_puts_r+0x4e>
 8004e4e:	89a3      	ldrh	r3, [r4, #12]
 8004e50:	059b      	lsls	r3, r3, #22
 8004e52:	d402      	bmi.n	8004e5a <_puts_r+0x4e>
 8004e54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e56:	f000 f98d 	bl	8005174 <__retarget_lock_release_recursive>
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	bd70      	pop	{r4, r5, r6, pc}
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	da04      	bge.n	8004e6c <_puts_r+0x60>
 8004e62:	69a2      	ldr	r2, [r4, #24]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	dc17      	bgt.n	8004e98 <_puts_r+0x8c>
 8004e68:	290a      	cmp	r1, #10
 8004e6a:	d015      	beq.n	8004e98 <_puts_r+0x8c>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	6022      	str	r2, [r4, #0]
 8004e72:	7019      	strb	r1, [r3, #0]
 8004e74:	68a3      	ldr	r3, [r4, #8]
 8004e76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	60a3      	str	r3, [r4, #8]
 8004e7e:	2900      	cmp	r1, #0
 8004e80:	d1ed      	bne.n	8004e5e <_puts_r+0x52>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	da11      	bge.n	8004eaa <_puts_r+0x9e>
 8004e86:	4622      	mov	r2, r4
 8004e88:	210a      	movs	r1, #10
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	f000 f85f 	bl	8004f4e <__swbuf_r>
 8004e90:	3001      	adds	r0, #1
 8004e92:	d0d7      	beq.n	8004e44 <_puts_r+0x38>
 8004e94:	250a      	movs	r5, #10
 8004e96:	e7d7      	b.n	8004e48 <_puts_r+0x3c>
 8004e98:	4622      	mov	r2, r4
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f000 f857 	bl	8004f4e <__swbuf_r>
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d1e7      	bne.n	8004e74 <_puts_r+0x68>
 8004ea4:	e7ce      	b.n	8004e44 <_puts_r+0x38>
 8004ea6:	3e01      	subs	r6, #1
 8004ea8:	e7e4      	b.n	8004e74 <_puts_r+0x68>
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	6022      	str	r2, [r4, #0]
 8004eb0:	220a      	movs	r2, #10
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	e7ee      	b.n	8004e94 <_puts_r+0x88>
	...

08004eb8 <puts>:
 8004eb8:	4b02      	ldr	r3, [pc, #8]	@ (8004ec4 <puts+0xc>)
 8004eba:	4601      	mov	r1, r0
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	f7ff bfa5 	b.w	8004e0c <_puts_r>
 8004ec2:	bf00      	nop
 8004ec4:	20000018 	.word	0x20000018

08004ec8 <__sread>:
 8004ec8:	b510      	push	{r4, lr}
 8004eca:	460c      	mov	r4, r1
 8004ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed0:	f000 f900 	bl	80050d4 <_read_r>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	bfab      	itete	ge
 8004ed8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004eda:	89a3      	ldrhlt	r3, [r4, #12]
 8004edc:	181b      	addge	r3, r3, r0
 8004ede:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ee2:	bfac      	ite	ge
 8004ee4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ee6:	81a3      	strhlt	r3, [r4, #12]
 8004ee8:	bd10      	pop	{r4, pc}

08004eea <__swrite>:
 8004eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eee:	461f      	mov	r7, r3
 8004ef0:	898b      	ldrh	r3, [r1, #12]
 8004ef2:	05db      	lsls	r3, r3, #23
 8004ef4:	4605      	mov	r5, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	4616      	mov	r6, r2
 8004efa:	d505      	bpl.n	8004f08 <__swrite+0x1e>
 8004efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f00:	2302      	movs	r3, #2
 8004f02:	2200      	movs	r2, #0
 8004f04:	f000 f8d4 	bl	80050b0 <_lseek_r>
 8004f08:	89a3      	ldrh	r3, [r4, #12]
 8004f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f12:	81a3      	strh	r3, [r4, #12]
 8004f14:	4632      	mov	r2, r6
 8004f16:	463b      	mov	r3, r7
 8004f18:	4628      	mov	r0, r5
 8004f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f1e:	f000 b8eb 	b.w	80050f8 <_write_r>

08004f22 <__sseek>:
 8004f22:	b510      	push	{r4, lr}
 8004f24:	460c      	mov	r4, r1
 8004f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f2a:	f000 f8c1 	bl	80050b0 <_lseek_r>
 8004f2e:	1c43      	adds	r3, r0, #1
 8004f30:	89a3      	ldrh	r3, [r4, #12]
 8004f32:	bf15      	itete	ne
 8004f34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f3e:	81a3      	strheq	r3, [r4, #12]
 8004f40:	bf18      	it	ne
 8004f42:	81a3      	strhne	r3, [r4, #12]
 8004f44:	bd10      	pop	{r4, pc}

08004f46 <__sclose>:
 8004f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f4a:	f000 b8a1 	b.w	8005090 <_close_r>

08004f4e <__swbuf_r>:
 8004f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f50:	460e      	mov	r6, r1
 8004f52:	4614      	mov	r4, r2
 8004f54:	4605      	mov	r5, r0
 8004f56:	b118      	cbz	r0, 8004f60 <__swbuf_r+0x12>
 8004f58:	6a03      	ldr	r3, [r0, #32]
 8004f5a:	b90b      	cbnz	r3, 8004f60 <__swbuf_r+0x12>
 8004f5c:	f7ff ff0e 	bl	8004d7c <__sinit>
 8004f60:	69a3      	ldr	r3, [r4, #24]
 8004f62:	60a3      	str	r3, [r4, #8]
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	071a      	lsls	r2, r3, #28
 8004f68:	d501      	bpl.n	8004f6e <__swbuf_r+0x20>
 8004f6a:	6923      	ldr	r3, [r4, #16]
 8004f6c:	b943      	cbnz	r3, 8004f80 <__swbuf_r+0x32>
 8004f6e:	4621      	mov	r1, r4
 8004f70:	4628      	mov	r0, r5
 8004f72:	f000 f82b 	bl	8004fcc <__swsetup_r>
 8004f76:	b118      	cbz	r0, 8004f80 <__swbuf_r+0x32>
 8004f78:	f04f 37ff 	mov.w	r7, #4294967295
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	6922      	ldr	r2, [r4, #16]
 8004f84:	1a98      	subs	r0, r3, r2
 8004f86:	6963      	ldr	r3, [r4, #20]
 8004f88:	b2f6      	uxtb	r6, r6
 8004f8a:	4283      	cmp	r3, r0
 8004f8c:	4637      	mov	r7, r6
 8004f8e:	dc05      	bgt.n	8004f9c <__swbuf_r+0x4e>
 8004f90:	4621      	mov	r1, r4
 8004f92:	4628      	mov	r0, r5
 8004f94:	f001 fd88 	bl	8006aa8 <_fflush_r>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d1ed      	bne.n	8004f78 <__swbuf_r+0x2a>
 8004f9c:	68a3      	ldr	r3, [r4, #8]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	60a3      	str	r3, [r4, #8]
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	6022      	str	r2, [r4, #0]
 8004fa8:	701e      	strb	r6, [r3, #0]
 8004faa:	6962      	ldr	r2, [r4, #20]
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d004      	beq.n	8004fbc <__swbuf_r+0x6e>
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	07db      	lsls	r3, r3, #31
 8004fb6:	d5e1      	bpl.n	8004f7c <__swbuf_r+0x2e>
 8004fb8:	2e0a      	cmp	r6, #10
 8004fba:	d1df      	bne.n	8004f7c <__swbuf_r+0x2e>
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f001 fd72 	bl	8006aa8 <_fflush_r>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d0d9      	beq.n	8004f7c <__swbuf_r+0x2e>
 8004fc8:	e7d6      	b.n	8004f78 <__swbuf_r+0x2a>
	...

08004fcc <__swsetup_r>:
 8004fcc:	b538      	push	{r3, r4, r5, lr}
 8004fce:	4b29      	ldr	r3, [pc, #164]	@ (8005074 <__swsetup_r+0xa8>)
 8004fd0:	4605      	mov	r5, r0
 8004fd2:	6818      	ldr	r0, [r3, #0]
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	b118      	cbz	r0, 8004fe0 <__swsetup_r+0x14>
 8004fd8:	6a03      	ldr	r3, [r0, #32]
 8004fda:	b90b      	cbnz	r3, 8004fe0 <__swsetup_r+0x14>
 8004fdc:	f7ff fece 	bl	8004d7c <__sinit>
 8004fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fe4:	0719      	lsls	r1, r3, #28
 8004fe6:	d422      	bmi.n	800502e <__swsetup_r+0x62>
 8004fe8:	06da      	lsls	r2, r3, #27
 8004fea:	d407      	bmi.n	8004ffc <__swsetup_r+0x30>
 8004fec:	2209      	movs	r2, #9
 8004fee:	602a      	str	r2, [r5, #0]
 8004ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ff4:	81a3      	strh	r3, [r4, #12]
 8004ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffa:	e033      	b.n	8005064 <__swsetup_r+0x98>
 8004ffc:	0758      	lsls	r0, r3, #29
 8004ffe:	d512      	bpl.n	8005026 <__swsetup_r+0x5a>
 8005000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005002:	b141      	cbz	r1, 8005016 <__swsetup_r+0x4a>
 8005004:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005008:	4299      	cmp	r1, r3
 800500a:	d002      	beq.n	8005012 <__swsetup_r+0x46>
 800500c:	4628      	mov	r0, r5
 800500e:	f000 ff0b 	bl	8005e28 <_free_r>
 8005012:	2300      	movs	r3, #0
 8005014:	6363      	str	r3, [r4, #52]	@ 0x34
 8005016:	89a3      	ldrh	r3, [r4, #12]
 8005018:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800501c:	81a3      	strh	r3, [r4, #12]
 800501e:	2300      	movs	r3, #0
 8005020:	6063      	str	r3, [r4, #4]
 8005022:	6923      	ldr	r3, [r4, #16]
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	f043 0308 	orr.w	r3, r3, #8
 800502c:	81a3      	strh	r3, [r4, #12]
 800502e:	6923      	ldr	r3, [r4, #16]
 8005030:	b94b      	cbnz	r3, 8005046 <__swsetup_r+0x7a>
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800503c:	d003      	beq.n	8005046 <__swsetup_r+0x7a>
 800503e:	4621      	mov	r1, r4
 8005040:	4628      	mov	r0, r5
 8005042:	f001 fd7f 	bl	8006b44 <__smakebuf_r>
 8005046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800504a:	f013 0201 	ands.w	r2, r3, #1
 800504e:	d00a      	beq.n	8005066 <__swsetup_r+0x9a>
 8005050:	2200      	movs	r2, #0
 8005052:	60a2      	str	r2, [r4, #8]
 8005054:	6962      	ldr	r2, [r4, #20]
 8005056:	4252      	negs	r2, r2
 8005058:	61a2      	str	r2, [r4, #24]
 800505a:	6922      	ldr	r2, [r4, #16]
 800505c:	b942      	cbnz	r2, 8005070 <__swsetup_r+0xa4>
 800505e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005062:	d1c5      	bne.n	8004ff0 <__swsetup_r+0x24>
 8005064:	bd38      	pop	{r3, r4, r5, pc}
 8005066:	0799      	lsls	r1, r3, #30
 8005068:	bf58      	it	pl
 800506a:	6962      	ldrpl	r2, [r4, #20]
 800506c:	60a2      	str	r2, [r4, #8]
 800506e:	e7f4      	b.n	800505a <__swsetup_r+0x8e>
 8005070:	2000      	movs	r0, #0
 8005072:	e7f7      	b.n	8005064 <__swsetup_r+0x98>
 8005074:	20000018 	.word	0x20000018

08005078 <memset>:
 8005078:	4402      	add	r2, r0
 800507a:	4603      	mov	r3, r0
 800507c:	4293      	cmp	r3, r2
 800507e:	d100      	bne.n	8005082 <memset+0xa>
 8005080:	4770      	bx	lr
 8005082:	f803 1b01 	strb.w	r1, [r3], #1
 8005086:	e7f9      	b.n	800507c <memset+0x4>

08005088 <_localeconv_r>:
 8005088:	4800      	ldr	r0, [pc, #0]	@ (800508c <_localeconv_r+0x4>)
 800508a:	4770      	bx	lr
 800508c:	20000158 	.word	0x20000158

08005090 <_close_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	4d06      	ldr	r5, [pc, #24]	@ (80050ac <_close_r+0x1c>)
 8005094:	2300      	movs	r3, #0
 8005096:	4604      	mov	r4, r0
 8005098:	4608      	mov	r0, r1
 800509a:	602b      	str	r3, [r5, #0]
 800509c:	f7fc fb47 	bl	800172e <_close>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_close_r+0x1a>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_close_r+0x1a>
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	20000410 	.word	0x20000410

080050b0 <_lseek_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	4d07      	ldr	r5, [pc, #28]	@ (80050d0 <_lseek_r+0x20>)
 80050b4:	4604      	mov	r4, r0
 80050b6:	4608      	mov	r0, r1
 80050b8:	4611      	mov	r1, r2
 80050ba:	2200      	movs	r2, #0
 80050bc:	602a      	str	r2, [r5, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	f7fc fb5c 	bl	800177c <_lseek>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	d102      	bne.n	80050ce <_lseek_r+0x1e>
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	b103      	cbz	r3, 80050ce <_lseek_r+0x1e>
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	bd38      	pop	{r3, r4, r5, pc}
 80050d0:	20000410 	.word	0x20000410

080050d4 <_read_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4d07      	ldr	r5, [pc, #28]	@ (80050f4 <_read_r+0x20>)
 80050d8:	4604      	mov	r4, r0
 80050da:	4608      	mov	r0, r1
 80050dc:	4611      	mov	r1, r2
 80050de:	2200      	movs	r2, #0
 80050e0:	602a      	str	r2, [r5, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f7fc faea 	bl	80016bc <_read>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d102      	bne.n	80050f2 <_read_r+0x1e>
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	b103      	cbz	r3, 80050f2 <_read_r+0x1e>
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	20000410 	.word	0x20000410

080050f8 <_write_r>:
 80050f8:	b538      	push	{r3, r4, r5, lr}
 80050fa:	4d07      	ldr	r5, [pc, #28]	@ (8005118 <_write_r+0x20>)
 80050fc:	4604      	mov	r4, r0
 80050fe:	4608      	mov	r0, r1
 8005100:	4611      	mov	r1, r2
 8005102:	2200      	movs	r2, #0
 8005104:	602a      	str	r2, [r5, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	f7fc faf5 	bl	80016f6 <_write>
 800510c:	1c43      	adds	r3, r0, #1
 800510e:	d102      	bne.n	8005116 <_write_r+0x1e>
 8005110:	682b      	ldr	r3, [r5, #0]
 8005112:	b103      	cbz	r3, 8005116 <_write_r+0x1e>
 8005114:	6023      	str	r3, [r4, #0]
 8005116:	bd38      	pop	{r3, r4, r5, pc}
 8005118:	20000410 	.word	0x20000410

0800511c <__errno>:
 800511c:	4b01      	ldr	r3, [pc, #4]	@ (8005124 <__errno+0x8>)
 800511e:	6818      	ldr	r0, [r3, #0]
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000018 	.word	0x20000018

08005128 <__libc_init_array>:
 8005128:	b570      	push	{r4, r5, r6, lr}
 800512a:	4d0d      	ldr	r5, [pc, #52]	@ (8005160 <__libc_init_array+0x38>)
 800512c:	4c0d      	ldr	r4, [pc, #52]	@ (8005164 <__libc_init_array+0x3c>)
 800512e:	1b64      	subs	r4, r4, r5
 8005130:	10a4      	asrs	r4, r4, #2
 8005132:	2600      	movs	r6, #0
 8005134:	42a6      	cmp	r6, r4
 8005136:	d109      	bne.n	800514c <__libc_init_array+0x24>
 8005138:	4d0b      	ldr	r5, [pc, #44]	@ (8005168 <__libc_init_array+0x40>)
 800513a:	4c0c      	ldr	r4, [pc, #48]	@ (800516c <__libc_init_array+0x44>)
 800513c:	f001 fe2e 	bl	8006d9c <_init>
 8005140:	1b64      	subs	r4, r4, r5
 8005142:	10a4      	asrs	r4, r4, #2
 8005144:	2600      	movs	r6, #0
 8005146:	42a6      	cmp	r6, r4
 8005148:	d105      	bne.n	8005156 <__libc_init_array+0x2e>
 800514a:	bd70      	pop	{r4, r5, r6, pc}
 800514c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005150:	4798      	blx	r3
 8005152:	3601      	adds	r6, #1
 8005154:	e7ee      	b.n	8005134 <__libc_init_array+0xc>
 8005156:	f855 3b04 	ldr.w	r3, [r5], #4
 800515a:	4798      	blx	r3
 800515c:	3601      	adds	r6, #1
 800515e:	e7f2      	b.n	8005146 <__libc_init_array+0x1e>
 8005160:	080071d4 	.word	0x080071d4
 8005164:	080071d4 	.word	0x080071d4
 8005168:	080071d4 	.word	0x080071d4
 800516c:	080071d8 	.word	0x080071d8

08005170 <__retarget_lock_init_recursive>:
 8005170:	4770      	bx	lr

08005172 <__retarget_lock_acquire_recursive>:
 8005172:	4770      	bx	lr

08005174 <__retarget_lock_release_recursive>:
 8005174:	4770      	bx	lr

08005176 <quorem>:
 8005176:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517a:	6903      	ldr	r3, [r0, #16]
 800517c:	690c      	ldr	r4, [r1, #16]
 800517e:	42a3      	cmp	r3, r4
 8005180:	4607      	mov	r7, r0
 8005182:	db7e      	blt.n	8005282 <quorem+0x10c>
 8005184:	3c01      	subs	r4, #1
 8005186:	f101 0814 	add.w	r8, r1, #20
 800518a:	00a3      	lsls	r3, r4, #2
 800518c:	f100 0514 	add.w	r5, r0, #20
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800519c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051a0:	3301      	adds	r3, #1
 80051a2:	429a      	cmp	r2, r3
 80051a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80051ac:	d32e      	bcc.n	800520c <quorem+0x96>
 80051ae:	f04f 0a00 	mov.w	sl, #0
 80051b2:	46c4      	mov	ip, r8
 80051b4:	46ae      	mov	lr, r5
 80051b6:	46d3      	mov	fp, sl
 80051b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80051bc:	b298      	uxth	r0, r3
 80051be:	fb06 a000 	mla	r0, r6, r0, sl
 80051c2:	0c02      	lsrs	r2, r0, #16
 80051c4:	0c1b      	lsrs	r3, r3, #16
 80051c6:	fb06 2303 	mla	r3, r6, r3, r2
 80051ca:	f8de 2000 	ldr.w	r2, [lr]
 80051ce:	b280      	uxth	r0, r0
 80051d0:	b292      	uxth	r2, r2
 80051d2:	1a12      	subs	r2, r2, r0
 80051d4:	445a      	add	r2, fp
 80051d6:	f8de 0000 	ldr.w	r0, [lr]
 80051da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80051de:	b29b      	uxth	r3, r3
 80051e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80051e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80051e8:	b292      	uxth	r2, r2
 80051ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80051ee:	45e1      	cmp	r9, ip
 80051f0:	f84e 2b04 	str.w	r2, [lr], #4
 80051f4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80051f8:	d2de      	bcs.n	80051b8 <quorem+0x42>
 80051fa:	9b00      	ldr	r3, [sp, #0]
 80051fc:	58eb      	ldr	r3, [r5, r3]
 80051fe:	b92b      	cbnz	r3, 800520c <quorem+0x96>
 8005200:	9b01      	ldr	r3, [sp, #4]
 8005202:	3b04      	subs	r3, #4
 8005204:	429d      	cmp	r5, r3
 8005206:	461a      	mov	r2, r3
 8005208:	d32f      	bcc.n	800526a <quorem+0xf4>
 800520a:	613c      	str	r4, [r7, #16]
 800520c:	4638      	mov	r0, r7
 800520e:	f001 f97d 	bl	800650c <__mcmp>
 8005212:	2800      	cmp	r0, #0
 8005214:	db25      	blt.n	8005262 <quorem+0xec>
 8005216:	4629      	mov	r1, r5
 8005218:	2000      	movs	r0, #0
 800521a:	f858 2b04 	ldr.w	r2, [r8], #4
 800521e:	f8d1 c000 	ldr.w	ip, [r1]
 8005222:	fa1f fe82 	uxth.w	lr, r2
 8005226:	fa1f f38c 	uxth.w	r3, ip
 800522a:	eba3 030e 	sub.w	r3, r3, lr
 800522e:	4403      	add	r3, r0
 8005230:	0c12      	lsrs	r2, r2, #16
 8005232:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005236:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800523a:	b29b      	uxth	r3, r3
 800523c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005240:	45c1      	cmp	r9, r8
 8005242:	f841 3b04 	str.w	r3, [r1], #4
 8005246:	ea4f 4022 	mov.w	r0, r2, asr #16
 800524a:	d2e6      	bcs.n	800521a <quorem+0xa4>
 800524c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005250:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005254:	b922      	cbnz	r2, 8005260 <quorem+0xea>
 8005256:	3b04      	subs	r3, #4
 8005258:	429d      	cmp	r5, r3
 800525a:	461a      	mov	r2, r3
 800525c:	d30b      	bcc.n	8005276 <quorem+0x100>
 800525e:	613c      	str	r4, [r7, #16]
 8005260:	3601      	adds	r6, #1
 8005262:	4630      	mov	r0, r6
 8005264:	b003      	add	sp, #12
 8005266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800526a:	6812      	ldr	r2, [r2, #0]
 800526c:	3b04      	subs	r3, #4
 800526e:	2a00      	cmp	r2, #0
 8005270:	d1cb      	bne.n	800520a <quorem+0x94>
 8005272:	3c01      	subs	r4, #1
 8005274:	e7c6      	b.n	8005204 <quorem+0x8e>
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	3b04      	subs	r3, #4
 800527a:	2a00      	cmp	r2, #0
 800527c:	d1ef      	bne.n	800525e <quorem+0xe8>
 800527e:	3c01      	subs	r4, #1
 8005280:	e7ea      	b.n	8005258 <quorem+0xe2>
 8005282:	2000      	movs	r0, #0
 8005284:	e7ee      	b.n	8005264 <quorem+0xee>
	...

08005288 <_dtoa_r>:
 8005288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528c:	69c7      	ldr	r7, [r0, #28]
 800528e:	b097      	sub	sp, #92	@ 0x5c
 8005290:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005294:	ec55 4b10 	vmov	r4, r5, d0
 8005298:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800529a:	9107      	str	r1, [sp, #28]
 800529c:	4681      	mov	r9, r0
 800529e:	920c      	str	r2, [sp, #48]	@ 0x30
 80052a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80052a2:	b97f      	cbnz	r7, 80052c4 <_dtoa_r+0x3c>
 80052a4:	2010      	movs	r0, #16
 80052a6:	f000 fe09 	bl	8005ebc <malloc>
 80052aa:	4602      	mov	r2, r0
 80052ac:	f8c9 001c 	str.w	r0, [r9, #28]
 80052b0:	b920      	cbnz	r0, 80052bc <_dtoa_r+0x34>
 80052b2:	4ba9      	ldr	r3, [pc, #676]	@ (8005558 <_dtoa_r+0x2d0>)
 80052b4:	21ef      	movs	r1, #239	@ 0xef
 80052b6:	48a9      	ldr	r0, [pc, #676]	@ (800555c <_dtoa_r+0x2d4>)
 80052b8:	f001 fcc0 	bl	8006c3c <__assert_func>
 80052bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80052c0:	6007      	str	r7, [r0, #0]
 80052c2:	60c7      	str	r7, [r0, #12]
 80052c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80052c8:	6819      	ldr	r1, [r3, #0]
 80052ca:	b159      	cbz	r1, 80052e4 <_dtoa_r+0x5c>
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	604a      	str	r2, [r1, #4]
 80052d0:	2301      	movs	r3, #1
 80052d2:	4093      	lsls	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
 80052d6:	4648      	mov	r0, r9
 80052d8:	f000 fee6 	bl	80060a8 <_Bfree>
 80052dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	1e2b      	subs	r3, r5, #0
 80052e6:	bfb9      	ittee	lt
 80052e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80052ec:	9305      	strlt	r3, [sp, #20]
 80052ee:	2300      	movge	r3, #0
 80052f0:	6033      	strge	r3, [r6, #0]
 80052f2:	9f05      	ldr	r7, [sp, #20]
 80052f4:	4b9a      	ldr	r3, [pc, #616]	@ (8005560 <_dtoa_r+0x2d8>)
 80052f6:	bfbc      	itt	lt
 80052f8:	2201      	movlt	r2, #1
 80052fa:	6032      	strlt	r2, [r6, #0]
 80052fc:	43bb      	bics	r3, r7
 80052fe:	d112      	bne.n	8005326 <_dtoa_r+0x9e>
 8005300:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005302:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800530c:	4323      	orrs	r3, r4
 800530e:	f000 855a 	beq.w	8005dc6 <_dtoa_r+0xb3e>
 8005312:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005314:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005574 <_dtoa_r+0x2ec>
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 855c 	beq.w	8005dd6 <_dtoa_r+0xb4e>
 800531e:	f10a 0303 	add.w	r3, sl, #3
 8005322:	f000 bd56 	b.w	8005dd2 <_dtoa_r+0xb4a>
 8005326:	ed9d 7b04 	vldr	d7, [sp, #16]
 800532a:	2200      	movs	r2, #0
 800532c:	ec51 0b17 	vmov	r0, r1, d7
 8005330:	2300      	movs	r3, #0
 8005332:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005336:	f7fb fbe7 	bl	8000b08 <__aeabi_dcmpeq>
 800533a:	4680      	mov	r8, r0
 800533c:	b158      	cbz	r0, 8005356 <_dtoa_r+0xce>
 800533e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005340:	2301      	movs	r3, #1
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005346:	b113      	cbz	r3, 800534e <_dtoa_r+0xc6>
 8005348:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800534a:	4b86      	ldr	r3, [pc, #536]	@ (8005564 <_dtoa_r+0x2dc>)
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005578 <_dtoa_r+0x2f0>
 8005352:	f000 bd40 	b.w	8005dd6 <_dtoa_r+0xb4e>
 8005356:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800535a:	aa14      	add	r2, sp, #80	@ 0x50
 800535c:	a915      	add	r1, sp, #84	@ 0x54
 800535e:	4648      	mov	r0, r9
 8005360:	f001 f984 	bl	800666c <__d2b>
 8005364:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005368:	9002      	str	r0, [sp, #8]
 800536a:	2e00      	cmp	r6, #0
 800536c:	d078      	beq.n	8005460 <_dtoa_r+0x1d8>
 800536e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005370:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005378:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800537c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005380:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005384:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005388:	4619      	mov	r1, r3
 800538a:	2200      	movs	r2, #0
 800538c:	4b76      	ldr	r3, [pc, #472]	@ (8005568 <_dtoa_r+0x2e0>)
 800538e:	f7fa ff9b 	bl	80002c8 <__aeabi_dsub>
 8005392:	a36b      	add	r3, pc, #428	@ (adr r3, 8005540 <_dtoa_r+0x2b8>)
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f7fb f94e 	bl	8000638 <__aeabi_dmul>
 800539c:	a36a      	add	r3, pc, #424	@ (adr r3, 8005548 <_dtoa_r+0x2c0>)
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	f7fa ff93 	bl	80002cc <__adddf3>
 80053a6:	4604      	mov	r4, r0
 80053a8:	4630      	mov	r0, r6
 80053aa:	460d      	mov	r5, r1
 80053ac:	f7fb f8da 	bl	8000564 <__aeabi_i2d>
 80053b0:	a367      	add	r3, pc, #412	@ (adr r3, 8005550 <_dtoa_r+0x2c8>)
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	f7fb f93f 	bl	8000638 <__aeabi_dmul>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4620      	mov	r0, r4
 80053c0:	4629      	mov	r1, r5
 80053c2:	f7fa ff83 	bl	80002cc <__adddf3>
 80053c6:	4604      	mov	r4, r0
 80053c8:	460d      	mov	r5, r1
 80053ca:	f7fb fbe5 	bl	8000b98 <__aeabi_d2iz>
 80053ce:	2200      	movs	r2, #0
 80053d0:	4607      	mov	r7, r0
 80053d2:	2300      	movs	r3, #0
 80053d4:	4620      	mov	r0, r4
 80053d6:	4629      	mov	r1, r5
 80053d8:	f7fb fba0 	bl	8000b1c <__aeabi_dcmplt>
 80053dc:	b140      	cbz	r0, 80053f0 <_dtoa_r+0x168>
 80053de:	4638      	mov	r0, r7
 80053e0:	f7fb f8c0 	bl	8000564 <__aeabi_i2d>
 80053e4:	4622      	mov	r2, r4
 80053e6:	462b      	mov	r3, r5
 80053e8:	f7fb fb8e 	bl	8000b08 <__aeabi_dcmpeq>
 80053ec:	b900      	cbnz	r0, 80053f0 <_dtoa_r+0x168>
 80053ee:	3f01      	subs	r7, #1
 80053f0:	2f16      	cmp	r7, #22
 80053f2:	d852      	bhi.n	800549a <_dtoa_r+0x212>
 80053f4:	4b5d      	ldr	r3, [pc, #372]	@ (800556c <_dtoa_r+0x2e4>)
 80053f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005402:	f7fb fb8b 	bl	8000b1c <__aeabi_dcmplt>
 8005406:	2800      	cmp	r0, #0
 8005408:	d049      	beq.n	800549e <_dtoa_r+0x216>
 800540a:	3f01      	subs	r7, #1
 800540c:	2300      	movs	r3, #0
 800540e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005410:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005412:	1b9b      	subs	r3, r3, r6
 8005414:	1e5a      	subs	r2, r3, #1
 8005416:	bf45      	ittet	mi
 8005418:	f1c3 0301 	rsbmi	r3, r3, #1
 800541c:	9300      	strmi	r3, [sp, #0]
 800541e:	2300      	movpl	r3, #0
 8005420:	2300      	movmi	r3, #0
 8005422:	9206      	str	r2, [sp, #24]
 8005424:	bf54      	ite	pl
 8005426:	9300      	strpl	r3, [sp, #0]
 8005428:	9306      	strmi	r3, [sp, #24]
 800542a:	2f00      	cmp	r7, #0
 800542c:	db39      	blt.n	80054a2 <_dtoa_r+0x21a>
 800542e:	9b06      	ldr	r3, [sp, #24]
 8005430:	970d      	str	r7, [sp, #52]	@ 0x34
 8005432:	443b      	add	r3, r7
 8005434:	9306      	str	r3, [sp, #24]
 8005436:	2300      	movs	r3, #0
 8005438:	9308      	str	r3, [sp, #32]
 800543a:	9b07      	ldr	r3, [sp, #28]
 800543c:	2b09      	cmp	r3, #9
 800543e:	d863      	bhi.n	8005508 <_dtoa_r+0x280>
 8005440:	2b05      	cmp	r3, #5
 8005442:	bfc4      	itt	gt
 8005444:	3b04      	subgt	r3, #4
 8005446:	9307      	strgt	r3, [sp, #28]
 8005448:	9b07      	ldr	r3, [sp, #28]
 800544a:	f1a3 0302 	sub.w	r3, r3, #2
 800544e:	bfcc      	ite	gt
 8005450:	2400      	movgt	r4, #0
 8005452:	2401      	movle	r4, #1
 8005454:	2b03      	cmp	r3, #3
 8005456:	d863      	bhi.n	8005520 <_dtoa_r+0x298>
 8005458:	e8df f003 	tbb	[pc, r3]
 800545c:	2b375452 	.word	0x2b375452
 8005460:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005464:	441e      	add	r6, r3
 8005466:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800546a:	2b20      	cmp	r3, #32
 800546c:	bfc1      	itttt	gt
 800546e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005472:	409f      	lslgt	r7, r3
 8005474:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005478:	fa24 f303 	lsrgt.w	r3, r4, r3
 800547c:	bfd6      	itet	le
 800547e:	f1c3 0320 	rsble	r3, r3, #32
 8005482:	ea47 0003 	orrgt.w	r0, r7, r3
 8005486:	fa04 f003 	lslle.w	r0, r4, r3
 800548a:	f7fb f85b 	bl	8000544 <__aeabi_ui2d>
 800548e:	2201      	movs	r2, #1
 8005490:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005494:	3e01      	subs	r6, #1
 8005496:	9212      	str	r2, [sp, #72]	@ 0x48
 8005498:	e776      	b.n	8005388 <_dtoa_r+0x100>
 800549a:	2301      	movs	r3, #1
 800549c:	e7b7      	b.n	800540e <_dtoa_r+0x186>
 800549e:	9010      	str	r0, [sp, #64]	@ 0x40
 80054a0:	e7b6      	b.n	8005410 <_dtoa_r+0x188>
 80054a2:	9b00      	ldr	r3, [sp, #0]
 80054a4:	1bdb      	subs	r3, r3, r7
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	427b      	negs	r3, r7
 80054aa:	9308      	str	r3, [sp, #32]
 80054ac:	2300      	movs	r3, #0
 80054ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80054b0:	e7c3      	b.n	800543a <_dtoa_r+0x1b2>
 80054b2:	2301      	movs	r3, #1
 80054b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80054b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80054b8:	eb07 0b03 	add.w	fp, r7, r3
 80054bc:	f10b 0301 	add.w	r3, fp, #1
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	9303      	str	r3, [sp, #12]
 80054c4:	bfb8      	it	lt
 80054c6:	2301      	movlt	r3, #1
 80054c8:	e006      	b.n	80054d8 <_dtoa_r+0x250>
 80054ca:	2301      	movs	r3, #1
 80054cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	dd28      	ble.n	8005526 <_dtoa_r+0x29e>
 80054d4:	469b      	mov	fp, r3
 80054d6:	9303      	str	r3, [sp, #12]
 80054d8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80054dc:	2100      	movs	r1, #0
 80054de:	2204      	movs	r2, #4
 80054e0:	f102 0514 	add.w	r5, r2, #20
 80054e4:	429d      	cmp	r5, r3
 80054e6:	d926      	bls.n	8005536 <_dtoa_r+0x2ae>
 80054e8:	6041      	str	r1, [r0, #4]
 80054ea:	4648      	mov	r0, r9
 80054ec:	f000 fd9c 	bl	8006028 <_Balloc>
 80054f0:	4682      	mov	sl, r0
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d142      	bne.n	800557c <_dtoa_r+0x2f4>
 80054f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005570 <_dtoa_r+0x2e8>)
 80054f8:	4602      	mov	r2, r0
 80054fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80054fe:	e6da      	b.n	80052b6 <_dtoa_r+0x2e>
 8005500:	2300      	movs	r3, #0
 8005502:	e7e3      	b.n	80054cc <_dtoa_r+0x244>
 8005504:	2300      	movs	r3, #0
 8005506:	e7d5      	b.n	80054b4 <_dtoa_r+0x22c>
 8005508:	2401      	movs	r4, #1
 800550a:	2300      	movs	r3, #0
 800550c:	9307      	str	r3, [sp, #28]
 800550e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005510:	f04f 3bff 	mov.w	fp, #4294967295
 8005514:	2200      	movs	r2, #0
 8005516:	f8cd b00c 	str.w	fp, [sp, #12]
 800551a:	2312      	movs	r3, #18
 800551c:	920c      	str	r2, [sp, #48]	@ 0x30
 800551e:	e7db      	b.n	80054d8 <_dtoa_r+0x250>
 8005520:	2301      	movs	r3, #1
 8005522:	9309      	str	r3, [sp, #36]	@ 0x24
 8005524:	e7f4      	b.n	8005510 <_dtoa_r+0x288>
 8005526:	f04f 0b01 	mov.w	fp, #1
 800552a:	f8cd b00c 	str.w	fp, [sp, #12]
 800552e:	465b      	mov	r3, fp
 8005530:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005534:	e7d0      	b.n	80054d8 <_dtoa_r+0x250>
 8005536:	3101      	adds	r1, #1
 8005538:	0052      	lsls	r2, r2, #1
 800553a:	e7d1      	b.n	80054e0 <_dtoa_r+0x258>
 800553c:	f3af 8000 	nop.w
 8005540:	636f4361 	.word	0x636f4361
 8005544:	3fd287a7 	.word	0x3fd287a7
 8005548:	8b60c8b3 	.word	0x8b60c8b3
 800554c:	3fc68a28 	.word	0x3fc68a28
 8005550:	509f79fb 	.word	0x509f79fb
 8005554:	3fd34413 	.word	0x3fd34413
 8005558:	08006e95 	.word	0x08006e95
 800555c:	08006eac 	.word	0x08006eac
 8005560:	7ff00000 	.word	0x7ff00000
 8005564:	08006e65 	.word	0x08006e65
 8005568:	3ff80000 	.word	0x3ff80000
 800556c:	08007000 	.word	0x08007000
 8005570:	08006f04 	.word	0x08006f04
 8005574:	08006e91 	.word	0x08006e91
 8005578:	08006e64 	.word	0x08006e64
 800557c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005580:	6018      	str	r0, [r3, #0]
 8005582:	9b03      	ldr	r3, [sp, #12]
 8005584:	2b0e      	cmp	r3, #14
 8005586:	f200 80a1 	bhi.w	80056cc <_dtoa_r+0x444>
 800558a:	2c00      	cmp	r4, #0
 800558c:	f000 809e 	beq.w	80056cc <_dtoa_r+0x444>
 8005590:	2f00      	cmp	r7, #0
 8005592:	dd33      	ble.n	80055fc <_dtoa_r+0x374>
 8005594:	4b9c      	ldr	r3, [pc, #624]	@ (8005808 <_dtoa_r+0x580>)
 8005596:	f007 020f 	and.w	r2, r7, #15
 800559a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800559e:	ed93 7b00 	vldr	d7, [r3]
 80055a2:	05f8      	lsls	r0, r7, #23
 80055a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80055a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80055ac:	d516      	bpl.n	80055dc <_dtoa_r+0x354>
 80055ae:	4b97      	ldr	r3, [pc, #604]	@ (800580c <_dtoa_r+0x584>)
 80055b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055b8:	f7fb f968 	bl	800088c <__aeabi_ddiv>
 80055bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055c0:	f004 040f 	and.w	r4, r4, #15
 80055c4:	2603      	movs	r6, #3
 80055c6:	4d91      	ldr	r5, [pc, #580]	@ (800580c <_dtoa_r+0x584>)
 80055c8:	b954      	cbnz	r4, 80055e0 <_dtoa_r+0x358>
 80055ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80055ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055d2:	f7fb f95b 	bl	800088c <__aeabi_ddiv>
 80055d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055da:	e028      	b.n	800562e <_dtoa_r+0x3a6>
 80055dc:	2602      	movs	r6, #2
 80055de:	e7f2      	b.n	80055c6 <_dtoa_r+0x33e>
 80055e0:	07e1      	lsls	r1, r4, #31
 80055e2:	d508      	bpl.n	80055f6 <_dtoa_r+0x36e>
 80055e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80055e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055ec:	f7fb f824 	bl	8000638 <__aeabi_dmul>
 80055f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80055f4:	3601      	adds	r6, #1
 80055f6:	1064      	asrs	r4, r4, #1
 80055f8:	3508      	adds	r5, #8
 80055fa:	e7e5      	b.n	80055c8 <_dtoa_r+0x340>
 80055fc:	f000 80af 	beq.w	800575e <_dtoa_r+0x4d6>
 8005600:	427c      	negs	r4, r7
 8005602:	4b81      	ldr	r3, [pc, #516]	@ (8005808 <_dtoa_r+0x580>)
 8005604:	4d81      	ldr	r5, [pc, #516]	@ (800580c <_dtoa_r+0x584>)
 8005606:	f004 020f 	and.w	r2, r4, #15
 800560a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005612:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005616:	f7fb f80f 	bl	8000638 <__aeabi_dmul>
 800561a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800561e:	1124      	asrs	r4, r4, #4
 8005620:	2300      	movs	r3, #0
 8005622:	2602      	movs	r6, #2
 8005624:	2c00      	cmp	r4, #0
 8005626:	f040 808f 	bne.w	8005748 <_dtoa_r+0x4c0>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1d3      	bne.n	80055d6 <_dtoa_r+0x34e>
 800562e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005630:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 8094 	beq.w	8005762 <_dtoa_r+0x4da>
 800563a:	4b75      	ldr	r3, [pc, #468]	@ (8005810 <_dtoa_r+0x588>)
 800563c:	2200      	movs	r2, #0
 800563e:	4620      	mov	r0, r4
 8005640:	4629      	mov	r1, r5
 8005642:	f7fb fa6b 	bl	8000b1c <__aeabi_dcmplt>
 8005646:	2800      	cmp	r0, #0
 8005648:	f000 808b 	beq.w	8005762 <_dtoa_r+0x4da>
 800564c:	9b03      	ldr	r3, [sp, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 8087 	beq.w	8005762 <_dtoa_r+0x4da>
 8005654:	f1bb 0f00 	cmp.w	fp, #0
 8005658:	dd34      	ble.n	80056c4 <_dtoa_r+0x43c>
 800565a:	4620      	mov	r0, r4
 800565c:	4b6d      	ldr	r3, [pc, #436]	@ (8005814 <_dtoa_r+0x58c>)
 800565e:	2200      	movs	r2, #0
 8005660:	4629      	mov	r1, r5
 8005662:	f7fa ffe9 	bl	8000638 <__aeabi_dmul>
 8005666:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800566a:	f107 38ff 	add.w	r8, r7, #4294967295
 800566e:	3601      	adds	r6, #1
 8005670:	465c      	mov	r4, fp
 8005672:	4630      	mov	r0, r6
 8005674:	f7fa ff76 	bl	8000564 <__aeabi_i2d>
 8005678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800567c:	f7fa ffdc 	bl	8000638 <__aeabi_dmul>
 8005680:	4b65      	ldr	r3, [pc, #404]	@ (8005818 <_dtoa_r+0x590>)
 8005682:	2200      	movs	r2, #0
 8005684:	f7fa fe22 	bl	80002cc <__adddf3>
 8005688:	4605      	mov	r5, r0
 800568a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800568e:	2c00      	cmp	r4, #0
 8005690:	d16a      	bne.n	8005768 <_dtoa_r+0x4e0>
 8005692:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005696:	4b61      	ldr	r3, [pc, #388]	@ (800581c <_dtoa_r+0x594>)
 8005698:	2200      	movs	r2, #0
 800569a:	f7fa fe15 	bl	80002c8 <__aeabi_dsub>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056a6:	462a      	mov	r2, r5
 80056a8:	4633      	mov	r3, r6
 80056aa:	f7fb fa55 	bl	8000b58 <__aeabi_dcmpgt>
 80056ae:	2800      	cmp	r0, #0
 80056b0:	f040 8298 	bne.w	8005be4 <_dtoa_r+0x95c>
 80056b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056b8:	462a      	mov	r2, r5
 80056ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80056be:	f7fb fa2d 	bl	8000b1c <__aeabi_dcmplt>
 80056c2:	bb38      	cbnz	r0, 8005714 <_dtoa_r+0x48c>
 80056c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80056c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80056cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f2c0 8157 	blt.w	8005982 <_dtoa_r+0x6fa>
 80056d4:	2f0e      	cmp	r7, #14
 80056d6:	f300 8154 	bgt.w	8005982 <_dtoa_r+0x6fa>
 80056da:	4b4b      	ldr	r3, [pc, #300]	@ (8005808 <_dtoa_r+0x580>)
 80056dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80056e0:	ed93 7b00 	vldr	d7, [r3]
 80056e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	ed8d 7b00 	vstr	d7, [sp]
 80056ec:	f280 80e5 	bge.w	80058ba <_dtoa_r+0x632>
 80056f0:	9b03      	ldr	r3, [sp, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f300 80e1 	bgt.w	80058ba <_dtoa_r+0x632>
 80056f8:	d10c      	bne.n	8005714 <_dtoa_r+0x48c>
 80056fa:	4b48      	ldr	r3, [pc, #288]	@ (800581c <_dtoa_r+0x594>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	ec51 0b17 	vmov	r0, r1, d7
 8005702:	f7fa ff99 	bl	8000638 <__aeabi_dmul>
 8005706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800570a:	f7fb fa1b 	bl	8000b44 <__aeabi_dcmpge>
 800570e:	2800      	cmp	r0, #0
 8005710:	f000 8266 	beq.w	8005be0 <_dtoa_r+0x958>
 8005714:	2400      	movs	r4, #0
 8005716:	4625      	mov	r5, r4
 8005718:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800571a:	4656      	mov	r6, sl
 800571c:	ea6f 0803 	mvn.w	r8, r3
 8005720:	2700      	movs	r7, #0
 8005722:	4621      	mov	r1, r4
 8005724:	4648      	mov	r0, r9
 8005726:	f000 fcbf 	bl	80060a8 <_Bfree>
 800572a:	2d00      	cmp	r5, #0
 800572c:	f000 80bd 	beq.w	80058aa <_dtoa_r+0x622>
 8005730:	b12f      	cbz	r7, 800573e <_dtoa_r+0x4b6>
 8005732:	42af      	cmp	r7, r5
 8005734:	d003      	beq.n	800573e <_dtoa_r+0x4b6>
 8005736:	4639      	mov	r1, r7
 8005738:	4648      	mov	r0, r9
 800573a:	f000 fcb5 	bl	80060a8 <_Bfree>
 800573e:	4629      	mov	r1, r5
 8005740:	4648      	mov	r0, r9
 8005742:	f000 fcb1 	bl	80060a8 <_Bfree>
 8005746:	e0b0      	b.n	80058aa <_dtoa_r+0x622>
 8005748:	07e2      	lsls	r2, r4, #31
 800574a:	d505      	bpl.n	8005758 <_dtoa_r+0x4d0>
 800574c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005750:	f7fa ff72 	bl	8000638 <__aeabi_dmul>
 8005754:	3601      	adds	r6, #1
 8005756:	2301      	movs	r3, #1
 8005758:	1064      	asrs	r4, r4, #1
 800575a:	3508      	adds	r5, #8
 800575c:	e762      	b.n	8005624 <_dtoa_r+0x39c>
 800575e:	2602      	movs	r6, #2
 8005760:	e765      	b.n	800562e <_dtoa_r+0x3a6>
 8005762:	9c03      	ldr	r4, [sp, #12]
 8005764:	46b8      	mov	r8, r7
 8005766:	e784      	b.n	8005672 <_dtoa_r+0x3ea>
 8005768:	4b27      	ldr	r3, [pc, #156]	@ (8005808 <_dtoa_r+0x580>)
 800576a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800576c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005770:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005774:	4454      	add	r4, sl
 8005776:	2900      	cmp	r1, #0
 8005778:	d054      	beq.n	8005824 <_dtoa_r+0x59c>
 800577a:	4929      	ldr	r1, [pc, #164]	@ (8005820 <_dtoa_r+0x598>)
 800577c:	2000      	movs	r0, #0
 800577e:	f7fb f885 	bl	800088c <__aeabi_ddiv>
 8005782:	4633      	mov	r3, r6
 8005784:	462a      	mov	r2, r5
 8005786:	f7fa fd9f 	bl	80002c8 <__aeabi_dsub>
 800578a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800578e:	4656      	mov	r6, sl
 8005790:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005794:	f7fb fa00 	bl	8000b98 <__aeabi_d2iz>
 8005798:	4605      	mov	r5, r0
 800579a:	f7fa fee3 	bl	8000564 <__aeabi_i2d>
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057a6:	f7fa fd8f 	bl	80002c8 <__aeabi_dsub>
 80057aa:	3530      	adds	r5, #48	@ 0x30
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057b4:	f806 5b01 	strb.w	r5, [r6], #1
 80057b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80057bc:	f7fb f9ae 	bl	8000b1c <__aeabi_dcmplt>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d172      	bne.n	80058aa <_dtoa_r+0x622>
 80057c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057c8:	4911      	ldr	r1, [pc, #68]	@ (8005810 <_dtoa_r+0x588>)
 80057ca:	2000      	movs	r0, #0
 80057cc:	f7fa fd7c 	bl	80002c8 <__aeabi_dsub>
 80057d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80057d4:	f7fb f9a2 	bl	8000b1c <__aeabi_dcmplt>
 80057d8:	2800      	cmp	r0, #0
 80057da:	f040 80b4 	bne.w	8005946 <_dtoa_r+0x6be>
 80057de:	42a6      	cmp	r6, r4
 80057e0:	f43f af70 	beq.w	80056c4 <_dtoa_r+0x43c>
 80057e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80057e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005814 <_dtoa_r+0x58c>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	f7fa ff24 	bl	8000638 <__aeabi_dmul>
 80057f0:	4b08      	ldr	r3, [pc, #32]	@ (8005814 <_dtoa_r+0x58c>)
 80057f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80057f6:	2200      	movs	r2, #0
 80057f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057fc:	f7fa ff1c 	bl	8000638 <__aeabi_dmul>
 8005800:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005804:	e7c4      	b.n	8005790 <_dtoa_r+0x508>
 8005806:	bf00      	nop
 8005808:	08007000 	.word	0x08007000
 800580c:	08006fd8 	.word	0x08006fd8
 8005810:	3ff00000 	.word	0x3ff00000
 8005814:	40240000 	.word	0x40240000
 8005818:	401c0000 	.word	0x401c0000
 800581c:	40140000 	.word	0x40140000
 8005820:	3fe00000 	.word	0x3fe00000
 8005824:	4631      	mov	r1, r6
 8005826:	4628      	mov	r0, r5
 8005828:	f7fa ff06 	bl	8000638 <__aeabi_dmul>
 800582c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005830:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005832:	4656      	mov	r6, sl
 8005834:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005838:	f7fb f9ae 	bl	8000b98 <__aeabi_d2iz>
 800583c:	4605      	mov	r5, r0
 800583e:	f7fa fe91 	bl	8000564 <__aeabi_i2d>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800584a:	f7fa fd3d 	bl	80002c8 <__aeabi_dsub>
 800584e:	3530      	adds	r5, #48	@ 0x30
 8005850:	f806 5b01 	strb.w	r5, [r6], #1
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	42a6      	cmp	r6, r4
 800585a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	d124      	bne.n	80058ae <_dtoa_r+0x626>
 8005864:	4baf      	ldr	r3, [pc, #700]	@ (8005b24 <_dtoa_r+0x89c>)
 8005866:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800586a:	f7fa fd2f 	bl	80002cc <__adddf3>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005876:	f7fb f96f 	bl	8000b58 <__aeabi_dcmpgt>
 800587a:	2800      	cmp	r0, #0
 800587c:	d163      	bne.n	8005946 <_dtoa_r+0x6be>
 800587e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005882:	49a8      	ldr	r1, [pc, #672]	@ (8005b24 <_dtoa_r+0x89c>)
 8005884:	2000      	movs	r0, #0
 8005886:	f7fa fd1f 	bl	80002c8 <__aeabi_dsub>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005892:	f7fb f943 	bl	8000b1c <__aeabi_dcmplt>
 8005896:	2800      	cmp	r0, #0
 8005898:	f43f af14 	beq.w	80056c4 <_dtoa_r+0x43c>
 800589c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800589e:	1e73      	subs	r3, r6, #1
 80058a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80058a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80058a6:	2b30      	cmp	r3, #48	@ 0x30
 80058a8:	d0f8      	beq.n	800589c <_dtoa_r+0x614>
 80058aa:	4647      	mov	r7, r8
 80058ac:	e03b      	b.n	8005926 <_dtoa_r+0x69e>
 80058ae:	4b9e      	ldr	r3, [pc, #632]	@ (8005b28 <_dtoa_r+0x8a0>)
 80058b0:	f7fa fec2 	bl	8000638 <__aeabi_dmul>
 80058b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058b8:	e7bc      	b.n	8005834 <_dtoa_r+0x5ac>
 80058ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80058be:	4656      	mov	r6, sl
 80058c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058c4:	4620      	mov	r0, r4
 80058c6:	4629      	mov	r1, r5
 80058c8:	f7fa ffe0 	bl	800088c <__aeabi_ddiv>
 80058cc:	f7fb f964 	bl	8000b98 <__aeabi_d2iz>
 80058d0:	4680      	mov	r8, r0
 80058d2:	f7fa fe47 	bl	8000564 <__aeabi_i2d>
 80058d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058da:	f7fa fead 	bl	8000638 <__aeabi_dmul>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	4620      	mov	r0, r4
 80058e4:	4629      	mov	r1, r5
 80058e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80058ea:	f7fa fced 	bl	80002c8 <__aeabi_dsub>
 80058ee:	f806 4b01 	strb.w	r4, [r6], #1
 80058f2:	9d03      	ldr	r5, [sp, #12]
 80058f4:	eba6 040a 	sub.w	r4, r6, sl
 80058f8:	42a5      	cmp	r5, r4
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	d133      	bne.n	8005968 <_dtoa_r+0x6e0>
 8005900:	f7fa fce4 	bl	80002cc <__adddf3>
 8005904:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005908:	4604      	mov	r4, r0
 800590a:	460d      	mov	r5, r1
 800590c:	f7fb f924 	bl	8000b58 <__aeabi_dcmpgt>
 8005910:	b9c0      	cbnz	r0, 8005944 <_dtoa_r+0x6bc>
 8005912:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005916:	4620      	mov	r0, r4
 8005918:	4629      	mov	r1, r5
 800591a:	f7fb f8f5 	bl	8000b08 <__aeabi_dcmpeq>
 800591e:	b110      	cbz	r0, 8005926 <_dtoa_r+0x69e>
 8005920:	f018 0f01 	tst.w	r8, #1
 8005924:	d10e      	bne.n	8005944 <_dtoa_r+0x6bc>
 8005926:	9902      	ldr	r1, [sp, #8]
 8005928:	4648      	mov	r0, r9
 800592a:	f000 fbbd 	bl	80060a8 <_Bfree>
 800592e:	2300      	movs	r3, #0
 8005930:	7033      	strb	r3, [r6, #0]
 8005932:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005934:	3701      	adds	r7, #1
 8005936:	601f      	str	r7, [r3, #0]
 8005938:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 824b 	beq.w	8005dd6 <_dtoa_r+0xb4e>
 8005940:	601e      	str	r6, [r3, #0]
 8005942:	e248      	b.n	8005dd6 <_dtoa_r+0xb4e>
 8005944:	46b8      	mov	r8, r7
 8005946:	4633      	mov	r3, r6
 8005948:	461e      	mov	r6, r3
 800594a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800594e:	2a39      	cmp	r2, #57	@ 0x39
 8005950:	d106      	bne.n	8005960 <_dtoa_r+0x6d8>
 8005952:	459a      	cmp	sl, r3
 8005954:	d1f8      	bne.n	8005948 <_dtoa_r+0x6c0>
 8005956:	2230      	movs	r2, #48	@ 0x30
 8005958:	f108 0801 	add.w	r8, r8, #1
 800595c:	f88a 2000 	strb.w	r2, [sl]
 8005960:	781a      	ldrb	r2, [r3, #0]
 8005962:	3201      	adds	r2, #1
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	e7a0      	b.n	80058aa <_dtoa_r+0x622>
 8005968:	4b6f      	ldr	r3, [pc, #444]	@ (8005b28 <_dtoa_r+0x8a0>)
 800596a:	2200      	movs	r2, #0
 800596c:	f7fa fe64 	bl	8000638 <__aeabi_dmul>
 8005970:	2200      	movs	r2, #0
 8005972:	2300      	movs	r3, #0
 8005974:	4604      	mov	r4, r0
 8005976:	460d      	mov	r5, r1
 8005978:	f7fb f8c6 	bl	8000b08 <__aeabi_dcmpeq>
 800597c:	2800      	cmp	r0, #0
 800597e:	d09f      	beq.n	80058c0 <_dtoa_r+0x638>
 8005980:	e7d1      	b.n	8005926 <_dtoa_r+0x69e>
 8005982:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005984:	2a00      	cmp	r2, #0
 8005986:	f000 80ea 	beq.w	8005b5e <_dtoa_r+0x8d6>
 800598a:	9a07      	ldr	r2, [sp, #28]
 800598c:	2a01      	cmp	r2, #1
 800598e:	f300 80cd 	bgt.w	8005b2c <_dtoa_r+0x8a4>
 8005992:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005994:	2a00      	cmp	r2, #0
 8005996:	f000 80c1 	beq.w	8005b1c <_dtoa_r+0x894>
 800599a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800599e:	9c08      	ldr	r4, [sp, #32]
 80059a0:	9e00      	ldr	r6, [sp, #0]
 80059a2:	9a00      	ldr	r2, [sp, #0]
 80059a4:	441a      	add	r2, r3
 80059a6:	9200      	str	r2, [sp, #0]
 80059a8:	9a06      	ldr	r2, [sp, #24]
 80059aa:	2101      	movs	r1, #1
 80059ac:	441a      	add	r2, r3
 80059ae:	4648      	mov	r0, r9
 80059b0:	9206      	str	r2, [sp, #24]
 80059b2:	f000 fc2d 	bl	8006210 <__i2b>
 80059b6:	4605      	mov	r5, r0
 80059b8:	b166      	cbz	r6, 80059d4 <_dtoa_r+0x74c>
 80059ba:	9b06      	ldr	r3, [sp, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	dd09      	ble.n	80059d4 <_dtoa_r+0x74c>
 80059c0:	42b3      	cmp	r3, r6
 80059c2:	9a00      	ldr	r2, [sp, #0]
 80059c4:	bfa8      	it	ge
 80059c6:	4633      	movge	r3, r6
 80059c8:	1ad2      	subs	r2, r2, r3
 80059ca:	9200      	str	r2, [sp, #0]
 80059cc:	9a06      	ldr	r2, [sp, #24]
 80059ce:	1af6      	subs	r6, r6, r3
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	9306      	str	r3, [sp, #24]
 80059d4:	9b08      	ldr	r3, [sp, #32]
 80059d6:	b30b      	cbz	r3, 8005a1c <_dtoa_r+0x794>
 80059d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 80c6 	beq.w	8005b6c <_dtoa_r+0x8e4>
 80059e0:	2c00      	cmp	r4, #0
 80059e2:	f000 80c0 	beq.w	8005b66 <_dtoa_r+0x8de>
 80059e6:	4629      	mov	r1, r5
 80059e8:	4622      	mov	r2, r4
 80059ea:	4648      	mov	r0, r9
 80059ec:	f000 fcc8 	bl	8006380 <__pow5mult>
 80059f0:	9a02      	ldr	r2, [sp, #8]
 80059f2:	4601      	mov	r1, r0
 80059f4:	4605      	mov	r5, r0
 80059f6:	4648      	mov	r0, r9
 80059f8:	f000 fc20 	bl	800623c <__multiply>
 80059fc:	9902      	ldr	r1, [sp, #8]
 80059fe:	4680      	mov	r8, r0
 8005a00:	4648      	mov	r0, r9
 8005a02:	f000 fb51 	bl	80060a8 <_Bfree>
 8005a06:	9b08      	ldr	r3, [sp, #32]
 8005a08:	1b1b      	subs	r3, r3, r4
 8005a0a:	9308      	str	r3, [sp, #32]
 8005a0c:	f000 80b1 	beq.w	8005b72 <_dtoa_r+0x8ea>
 8005a10:	9a08      	ldr	r2, [sp, #32]
 8005a12:	4641      	mov	r1, r8
 8005a14:	4648      	mov	r0, r9
 8005a16:	f000 fcb3 	bl	8006380 <__pow5mult>
 8005a1a:	9002      	str	r0, [sp, #8]
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	4648      	mov	r0, r9
 8005a20:	f000 fbf6 	bl	8006210 <__i2b>
 8005a24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a26:	4604      	mov	r4, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 81d8 	beq.w	8005dde <_dtoa_r+0xb56>
 8005a2e:	461a      	mov	r2, r3
 8005a30:	4601      	mov	r1, r0
 8005a32:	4648      	mov	r0, r9
 8005a34:	f000 fca4 	bl	8006380 <__pow5mult>
 8005a38:	9b07      	ldr	r3, [sp, #28]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	f300 809f 	bgt.w	8005b80 <_dtoa_r+0x8f8>
 8005a42:	9b04      	ldr	r3, [sp, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f040 8097 	bne.w	8005b78 <_dtoa_r+0x8f0>
 8005a4a:	9b05      	ldr	r3, [sp, #20]
 8005a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f040 8093 	bne.w	8005b7c <_dtoa_r+0x8f4>
 8005a56:	9b05      	ldr	r3, [sp, #20]
 8005a58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a5c:	0d1b      	lsrs	r3, r3, #20
 8005a5e:	051b      	lsls	r3, r3, #20
 8005a60:	b133      	cbz	r3, 8005a70 <_dtoa_r+0x7e8>
 8005a62:	9b00      	ldr	r3, [sp, #0]
 8005a64:	3301      	adds	r3, #1
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	9b06      	ldr	r3, [sp, #24]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	9306      	str	r3, [sp, #24]
 8005a6e:	2301      	movs	r3, #1
 8005a70:	9308      	str	r3, [sp, #32]
 8005a72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 81b8 	beq.w	8005dea <_dtoa_r+0xb62>
 8005a7a:	6923      	ldr	r3, [r4, #16]
 8005a7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a80:	6918      	ldr	r0, [r3, #16]
 8005a82:	f000 fb79 	bl	8006178 <__hi0bits>
 8005a86:	f1c0 0020 	rsb	r0, r0, #32
 8005a8a:	9b06      	ldr	r3, [sp, #24]
 8005a8c:	4418      	add	r0, r3
 8005a8e:	f010 001f 	ands.w	r0, r0, #31
 8005a92:	f000 8082 	beq.w	8005b9a <_dtoa_r+0x912>
 8005a96:	f1c0 0320 	rsb	r3, r0, #32
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	dd73      	ble.n	8005b86 <_dtoa_r+0x8fe>
 8005a9e:	9b00      	ldr	r3, [sp, #0]
 8005aa0:	f1c0 001c 	rsb	r0, r0, #28
 8005aa4:	4403      	add	r3, r0
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	9b06      	ldr	r3, [sp, #24]
 8005aaa:	4403      	add	r3, r0
 8005aac:	4406      	add	r6, r0
 8005aae:	9306      	str	r3, [sp, #24]
 8005ab0:	9b00      	ldr	r3, [sp, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	dd05      	ble.n	8005ac2 <_dtoa_r+0x83a>
 8005ab6:	9902      	ldr	r1, [sp, #8]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	4648      	mov	r0, r9
 8005abc:	f000 fcba 	bl	8006434 <__lshift>
 8005ac0:	9002      	str	r0, [sp, #8]
 8005ac2:	9b06      	ldr	r3, [sp, #24]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	dd05      	ble.n	8005ad4 <_dtoa_r+0x84c>
 8005ac8:	4621      	mov	r1, r4
 8005aca:	461a      	mov	r2, r3
 8005acc:	4648      	mov	r0, r9
 8005ace:	f000 fcb1 	bl	8006434 <__lshift>
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d061      	beq.n	8005b9e <_dtoa_r+0x916>
 8005ada:	9802      	ldr	r0, [sp, #8]
 8005adc:	4621      	mov	r1, r4
 8005ade:	f000 fd15 	bl	800650c <__mcmp>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	da5b      	bge.n	8005b9e <_dtoa_r+0x916>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	9902      	ldr	r1, [sp, #8]
 8005aea:	220a      	movs	r2, #10
 8005aec:	4648      	mov	r0, r9
 8005aee:	f000 fafd 	bl	80060ec <__multadd>
 8005af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005af4:	9002      	str	r0, [sp, #8]
 8005af6:	f107 38ff 	add.w	r8, r7, #4294967295
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 8177 	beq.w	8005dee <_dtoa_r+0xb66>
 8005b00:	4629      	mov	r1, r5
 8005b02:	2300      	movs	r3, #0
 8005b04:	220a      	movs	r2, #10
 8005b06:	4648      	mov	r0, r9
 8005b08:	f000 faf0 	bl	80060ec <__multadd>
 8005b0c:	f1bb 0f00 	cmp.w	fp, #0
 8005b10:	4605      	mov	r5, r0
 8005b12:	dc6f      	bgt.n	8005bf4 <_dtoa_r+0x96c>
 8005b14:	9b07      	ldr	r3, [sp, #28]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	dc49      	bgt.n	8005bae <_dtoa_r+0x926>
 8005b1a:	e06b      	b.n	8005bf4 <_dtoa_r+0x96c>
 8005b1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005b1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005b22:	e73c      	b.n	800599e <_dtoa_r+0x716>
 8005b24:	3fe00000 	.word	0x3fe00000
 8005b28:	40240000 	.word	0x40240000
 8005b2c:	9b03      	ldr	r3, [sp, #12]
 8005b2e:	1e5c      	subs	r4, r3, #1
 8005b30:	9b08      	ldr	r3, [sp, #32]
 8005b32:	42a3      	cmp	r3, r4
 8005b34:	db09      	blt.n	8005b4a <_dtoa_r+0x8c2>
 8005b36:	1b1c      	subs	r4, r3, r4
 8005b38:	9b03      	ldr	r3, [sp, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f6bf af30 	bge.w	80059a0 <_dtoa_r+0x718>
 8005b40:	9b00      	ldr	r3, [sp, #0]
 8005b42:	9a03      	ldr	r2, [sp, #12]
 8005b44:	1a9e      	subs	r6, r3, r2
 8005b46:	2300      	movs	r3, #0
 8005b48:	e72b      	b.n	80059a2 <_dtoa_r+0x71a>
 8005b4a:	9b08      	ldr	r3, [sp, #32]
 8005b4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005b4e:	9408      	str	r4, [sp, #32]
 8005b50:	1ae3      	subs	r3, r4, r3
 8005b52:	441a      	add	r2, r3
 8005b54:	9e00      	ldr	r6, [sp, #0]
 8005b56:	9b03      	ldr	r3, [sp, #12]
 8005b58:	920d      	str	r2, [sp, #52]	@ 0x34
 8005b5a:	2400      	movs	r4, #0
 8005b5c:	e721      	b.n	80059a2 <_dtoa_r+0x71a>
 8005b5e:	9c08      	ldr	r4, [sp, #32]
 8005b60:	9e00      	ldr	r6, [sp, #0]
 8005b62:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005b64:	e728      	b.n	80059b8 <_dtoa_r+0x730>
 8005b66:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005b6a:	e751      	b.n	8005a10 <_dtoa_r+0x788>
 8005b6c:	9a08      	ldr	r2, [sp, #32]
 8005b6e:	9902      	ldr	r1, [sp, #8]
 8005b70:	e750      	b.n	8005a14 <_dtoa_r+0x78c>
 8005b72:	f8cd 8008 	str.w	r8, [sp, #8]
 8005b76:	e751      	b.n	8005a1c <_dtoa_r+0x794>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e779      	b.n	8005a70 <_dtoa_r+0x7e8>
 8005b7c:	9b04      	ldr	r3, [sp, #16]
 8005b7e:	e777      	b.n	8005a70 <_dtoa_r+0x7e8>
 8005b80:	2300      	movs	r3, #0
 8005b82:	9308      	str	r3, [sp, #32]
 8005b84:	e779      	b.n	8005a7a <_dtoa_r+0x7f2>
 8005b86:	d093      	beq.n	8005ab0 <_dtoa_r+0x828>
 8005b88:	9a00      	ldr	r2, [sp, #0]
 8005b8a:	331c      	adds	r3, #28
 8005b8c:	441a      	add	r2, r3
 8005b8e:	9200      	str	r2, [sp, #0]
 8005b90:	9a06      	ldr	r2, [sp, #24]
 8005b92:	441a      	add	r2, r3
 8005b94:	441e      	add	r6, r3
 8005b96:	9206      	str	r2, [sp, #24]
 8005b98:	e78a      	b.n	8005ab0 <_dtoa_r+0x828>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	e7f4      	b.n	8005b88 <_dtoa_r+0x900>
 8005b9e:	9b03      	ldr	r3, [sp, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	46b8      	mov	r8, r7
 8005ba4:	dc20      	bgt.n	8005be8 <_dtoa_r+0x960>
 8005ba6:	469b      	mov	fp, r3
 8005ba8:	9b07      	ldr	r3, [sp, #28]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	dd1e      	ble.n	8005bec <_dtoa_r+0x964>
 8005bae:	f1bb 0f00 	cmp.w	fp, #0
 8005bb2:	f47f adb1 	bne.w	8005718 <_dtoa_r+0x490>
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	465b      	mov	r3, fp
 8005bba:	2205      	movs	r2, #5
 8005bbc:	4648      	mov	r0, r9
 8005bbe:	f000 fa95 	bl	80060ec <__multadd>
 8005bc2:	4601      	mov	r1, r0
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	9802      	ldr	r0, [sp, #8]
 8005bc8:	f000 fca0 	bl	800650c <__mcmp>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	f77f ada3 	ble.w	8005718 <_dtoa_r+0x490>
 8005bd2:	4656      	mov	r6, sl
 8005bd4:	2331      	movs	r3, #49	@ 0x31
 8005bd6:	f806 3b01 	strb.w	r3, [r6], #1
 8005bda:	f108 0801 	add.w	r8, r8, #1
 8005bde:	e59f      	b.n	8005720 <_dtoa_r+0x498>
 8005be0:	9c03      	ldr	r4, [sp, #12]
 8005be2:	46b8      	mov	r8, r7
 8005be4:	4625      	mov	r5, r4
 8005be6:	e7f4      	b.n	8005bd2 <_dtoa_r+0x94a>
 8005be8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 8101 	beq.w	8005df6 <_dtoa_r+0xb6e>
 8005bf4:	2e00      	cmp	r6, #0
 8005bf6:	dd05      	ble.n	8005c04 <_dtoa_r+0x97c>
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	4632      	mov	r2, r6
 8005bfc:	4648      	mov	r0, r9
 8005bfe:	f000 fc19 	bl	8006434 <__lshift>
 8005c02:	4605      	mov	r5, r0
 8005c04:	9b08      	ldr	r3, [sp, #32]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d05c      	beq.n	8005cc4 <_dtoa_r+0xa3c>
 8005c0a:	6869      	ldr	r1, [r5, #4]
 8005c0c:	4648      	mov	r0, r9
 8005c0e:	f000 fa0b 	bl	8006028 <_Balloc>
 8005c12:	4606      	mov	r6, r0
 8005c14:	b928      	cbnz	r0, 8005c22 <_dtoa_r+0x99a>
 8005c16:	4b82      	ldr	r3, [pc, #520]	@ (8005e20 <_dtoa_r+0xb98>)
 8005c18:	4602      	mov	r2, r0
 8005c1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005c1e:	f7ff bb4a 	b.w	80052b6 <_dtoa_r+0x2e>
 8005c22:	692a      	ldr	r2, [r5, #16]
 8005c24:	3202      	adds	r2, #2
 8005c26:	0092      	lsls	r2, r2, #2
 8005c28:	f105 010c 	add.w	r1, r5, #12
 8005c2c:	300c      	adds	r0, #12
 8005c2e:	f000 fff7 	bl	8006c20 <memcpy>
 8005c32:	2201      	movs	r2, #1
 8005c34:	4631      	mov	r1, r6
 8005c36:	4648      	mov	r0, r9
 8005c38:	f000 fbfc 	bl	8006434 <__lshift>
 8005c3c:	f10a 0301 	add.w	r3, sl, #1
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	eb0a 030b 	add.w	r3, sl, fp
 8005c46:	9308      	str	r3, [sp, #32]
 8005c48:	9b04      	ldr	r3, [sp, #16]
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	462f      	mov	r7, r5
 8005c50:	9306      	str	r3, [sp, #24]
 8005c52:	4605      	mov	r5, r0
 8005c54:	9b00      	ldr	r3, [sp, #0]
 8005c56:	9802      	ldr	r0, [sp, #8]
 8005c58:	4621      	mov	r1, r4
 8005c5a:	f103 3bff 	add.w	fp, r3, #4294967295
 8005c5e:	f7ff fa8a 	bl	8005176 <quorem>
 8005c62:	4603      	mov	r3, r0
 8005c64:	3330      	adds	r3, #48	@ 0x30
 8005c66:	9003      	str	r0, [sp, #12]
 8005c68:	4639      	mov	r1, r7
 8005c6a:	9802      	ldr	r0, [sp, #8]
 8005c6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c6e:	f000 fc4d 	bl	800650c <__mcmp>
 8005c72:	462a      	mov	r2, r5
 8005c74:	9004      	str	r0, [sp, #16]
 8005c76:	4621      	mov	r1, r4
 8005c78:	4648      	mov	r0, r9
 8005c7a:	f000 fc63 	bl	8006544 <__mdiff>
 8005c7e:	68c2      	ldr	r2, [r0, #12]
 8005c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c82:	4606      	mov	r6, r0
 8005c84:	bb02      	cbnz	r2, 8005cc8 <_dtoa_r+0xa40>
 8005c86:	4601      	mov	r1, r0
 8005c88:	9802      	ldr	r0, [sp, #8]
 8005c8a:	f000 fc3f 	bl	800650c <__mcmp>
 8005c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c90:	4602      	mov	r2, r0
 8005c92:	4631      	mov	r1, r6
 8005c94:	4648      	mov	r0, r9
 8005c96:	920c      	str	r2, [sp, #48]	@ 0x30
 8005c98:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c9a:	f000 fa05 	bl	80060a8 <_Bfree>
 8005c9e:	9b07      	ldr	r3, [sp, #28]
 8005ca0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ca2:	9e00      	ldr	r6, [sp, #0]
 8005ca4:	ea42 0103 	orr.w	r1, r2, r3
 8005ca8:	9b06      	ldr	r3, [sp, #24]
 8005caa:	4319      	orrs	r1, r3
 8005cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cae:	d10d      	bne.n	8005ccc <_dtoa_r+0xa44>
 8005cb0:	2b39      	cmp	r3, #57	@ 0x39
 8005cb2:	d027      	beq.n	8005d04 <_dtoa_r+0xa7c>
 8005cb4:	9a04      	ldr	r2, [sp, #16]
 8005cb6:	2a00      	cmp	r2, #0
 8005cb8:	dd01      	ble.n	8005cbe <_dtoa_r+0xa36>
 8005cba:	9b03      	ldr	r3, [sp, #12]
 8005cbc:	3331      	adds	r3, #49	@ 0x31
 8005cbe:	f88b 3000 	strb.w	r3, [fp]
 8005cc2:	e52e      	b.n	8005722 <_dtoa_r+0x49a>
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	e7b9      	b.n	8005c3c <_dtoa_r+0x9b4>
 8005cc8:	2201      	movs	r2, #1
 8005cca:	e7e2      	b.n	8005c92 <_dtoa_r+0xa0a>
 8005ccc:	9904      	ldr	r1, [sp, #16]
 8005cce:	2900      	cmp	r1, #0
 8005cd0:	db04      	blt.n	8005cdc <_dtoa_r+0xa54>
 8005cd2:	9807      	ldr	r0, [sp, #28]
 8005cd4:	4301      	orrs	r1, r0
 8005cd6:	9806      	ldr	r0, [sp, #24]
 8005cd8:	4301      	orrs	r1, r0
 8005cda:	d120      	bne.n	8005d1e <_dtoa_r+0xa96>
 8005cdc:	2a00      	cmp	r2, #0
 8005cde:	ddee      	ble.n	8005cbe <_dtoa_r+0xa36>
 8005ce0:	9902      	ldr	r1, [sp, #8]
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	4648      	mov	r0, r9
 8005ce8:	f000 fba4 	bl	8006434 <__lshift>
 8005cec:	4621      	mov	r1, r4
 8005cee:	9002      	str	r0, [sp, #8]
 8005cf0:	f000 fc0c 	bl	800650c <__mcmp>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	9b00      	ldr	r3, [sp, #0]
 8005cf8:	dc02      	bgt.n	8005d00 <_dtoa_r+0xa78>
 8005cfa:	d1e0      	bne.n	8005cbe <_dtoa_r+0xa36>
 8005cfc:	07da      	lsls	r2, r3, #31
 8005cfe:	d5de      	bpl.n	8005cbe <_dtoa_r+0xa36>
 8005d00:	2b39      	cmp	r3, #57	@ 0x39
 8005d02:	d1da      	bne.n	8005cba <_dtoa_r+0xa32>
 8005d04:	2339      	movs	r3, #57	@ 0x39
 8005d06:	f88b 3000 	strb.w	r3, [fp]
 8005d0a:	4633      	mov	r3, r6
 8005d0c:	461e      	mov	r6, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005d14:	2a39      	cmp	r2, #57	@ 0x39
 8005d16:	d04e      	beq.n	8005db6 <_dtoa_r+0xb2e>
 8005d18:	3201      	adds	r2, #1
 8005d1a:	701a      	strb	r2, [r3, #0]
 8005d1c:	e501      	b.n	8005722 <_dtoa_r+0x49a>
 8005d1e:	2a00      	cmp	r2, #0
 8005d20:	dd03      	ble.n	8005d2a <_dtoa_r+0xaa2>
 8005d22:	2b39      	cmp	r3, #57	@ 0x39
 8005d24:	d0ee      	beq.n	8005d04 <_dtoa_r+0xa7c>
 8005d26:	3301      	adds	r3, #1
 8005d28:	e7c9      	b.n	8005cbe <_dtoa_r+0xa36>
 8005d2a:	9a00      	ldr	r2, [sp, #0]
 8005d2c:	9908      	ldr	r1, [sp, #32]
 8005d2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005d32:	428a      	cmp	r2, r1
 8005d34:	d028      	beq.n	8005d88 <_dtoa_r+0xb00>
 8005d36:	9902      	ldr	r1, [sp, #8]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	220a      	movs	r2, #10
 8005d3c:	4648      	mov	r0, r9
 8005d3e:	f000 f9d5 	bl	80060ec <__multadd>
 8005d42:	42af      	cmp	r7, r5
 8005d44:	9002      	str	r0, [sp, #8]
 8005d46:	f04f 0300 	mov.w	r3, #0
 8005d4a:	f04f 020a 	mov.w	r2, #10
 8005d4e:	4639      	mov	r1, r7
 8005d50:	4648      	mov	r0, r9
 8005d52:	d107      	bne.n	8005d64 <_dtoa_r+0xadc>
 8005d54:	f000 f9ca 	bl	80060ec <__multadd>
 8005d58:	4607      	mov	r7, r0
 8005d5a:	4605      	mov	r5, r0
 8005d5c:	9b00      	ldr	r3, [sp, #0]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	e777      	b.n	8005c54 <_dtoa_r+0x9cc>
 8005d64:	f000 f9c2 	bl	80060ec <__multadd>
 8005d68:	4629      	mov	r1, r5
 8005d6a:	4607      	mov	r7, r0
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	220a      	movs	r2, #10
 8005d70:	4648      	mov	r0, r9
 8005d72:	f000 f9bb 	bl	80060ec <__multadd>
 8005d76:	4605      	mov	r5, r0
 8005d78:	e7f0      	b.n	8005d5c <_dtoa_r+0xad4>
 8005d7a:	f1bb 0f00 	cmp.w	fp, #0
 8005d7e:	bfcc      	ite	gt
 8005d80:	465e      	movgt	r6, fp
 8005d82:	2601      	movle	r6, #1
 8005d84:	4456      	add	r6, sl
 8005d86:	2700      	movs	r7, #0
 8005d88:	9902      	ldr	r1, [sp, #8]
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	4648      	mov	r0, r9
 8005d90:	f000 fb50 	bl	8006434 <__lshift>
 8005d94:	4621      	mov	r1, r4
 8005d96:	9002      	str	r0, [sp, #8]
 8005d98:	f000 fbb8 	bl	800650c <__mcmp>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	dcb4      	bgt.n	8005d0a <_dtoa_r+0xa82>
 8005da0:	d102      	bne.n	8005da8 <_dtoa_r+0xb20>
 8005da2:	9b00      	ldr	r3, [sp, #0]
 8005da4:	07db      	lsls	r3, r3, #31
 8005da6:	d4b0      	bmi.n	8005d0a <_dtoa_r+0xa82>
 8005da8:	4633      	mov	r3, r6
 8005daa:	461e      	mov	r6, r3
 8005dac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005db0:	2a30      	cmp	r2, #48	@ 0x30
 8005db2:	d0fa      	beq.n	8005daa <_dtoa_r+0xb22>
 8005db4:	e4b5      	b.n	8005722 <_dtoa_r+0x49a>
 8005db6:	459a      	cmp	sl, r3
 8005db8:	d1a8      	bne.n	8005d0c <_dtoa_r+0xa84>
 8005dba:	2331      	movs	r3, #49	@ 0x31
 8005dbc:	f108 0801 	add.w	r8, r8, #1
 8005dc0:	f88a 3000 	strb.w	r3, [sl]
 8005dc4:	e4ad      	b.n	8005722 <_dtoa_r+0x49a>
 8005dc6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005dc8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005e24 <_dtoa_r+0xb9c>
 8005dcc:	b11b      	cbz	r3, 8005dd6 <_dtoa_r+0xb4e>
 8005dce:	f10a 0308 	add.w	r3, sl, #8
 8005dd2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	4650      	mov	r0, sl
 8005dd8:	b017      	add	sp, #92	@ 0x5c
 8005dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dde:	9b07      	ldr	r3, [sp, #28]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	f77f ae2e 	ble.w	8005a42 <_dtoa_r+0x7ba>
 8005de6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005de8:	9308      	str	r3, [sp, #32]
 8005dea:	2001      	movs	r0, #1
 8005dec:	e64d      	b.n	8005a8a <_dtoa_r+0x802>
 8005dee:	f1bb 0f00 	cmp.w	fp, #0
 8005df2:	f77f aed9 	ble.w	8005ba8 <_dtoa_r+0x920>
 8005df6:	4656      	mov	r6, sl
 8005df8:	9802      	ldr	r0, [sp, #8]
 8005dfa:	4621      	mov	r1, r4
 8005dfc:	f7ff f9bb 	bl	8005176 <quorem>
 8005e00:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005e04:	f806 3b01 	strb.w	r3, [r6], #1
 8005e08:	eba6 020a 	sub.w	r2, r6, sl
 8005e0c:	4593      	cmp	fp, r2
 8005e0e:	ddb4      	ble.n	8005d7a <_dtoa_r+0xaf2>
 8005e10:	9902      	ldr	r1, [sp, #8]
 8005e12:	2300      	movs	r3, #0
 8005e14:	220a      	movs	r2, #10
 8005e16:	4648      	mov	r0, r9
 8005e18:	f000 f968 	bl	80060ec <__multadd>
 8005e1c:	9002      	str	r0, [sp, #8]
 8005e1e:	e7eb      	b.n	8005df8 <_dtoa_r+0xb70>
 8005e20:	08006f04 	.word	0x08006f04
 8005e24:	08006e88 	.word	0x08006e88

08005e28 <_free_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	4605      	mov	r5, r0
 8005e2c:	2900      	cmp	r1, #0
 8005e2e:	d041      	beq.n	8005eb4 <_free_r+0x8c>
 8005e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e34:	1f0c      	subs	r4, r1, #4
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bfb8      	it	lt
 8005e3a:	18e4      	addlt	r4, r4, r3
 8005e3c:	f000 f8e8 	bl	8006010 <__malloc_lock>
 8005e40:	4a1d      	ldr	r2, [pc, #116]	@ (8005eb8 <_free_r+0x90>)
 8005e42:	6813      	ldr	r3, [r2, #0]
 8005e44:	b933      	cbnz	r3, 8005e54 <_free_r+0x2c>
 8005e46:	6063      	str	r3, [r4, #4]
 8005e48:	6014      	str	r4, [r2, #0]
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e50:	f000 b8e4 	b.w	800601c <__malloc_unlock>
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	d908      	bls.n	8005e6a <_free_r+0x42>
 8005e58:	6820      	ldr	r0, [r4, #0]
 8005e5a:	1821      	adds	r1, r4, r0
 8005e5c:	428b      	cmp	r3, r1
 8005e5e:	bf01      	itttt	eq
 8005e60:	6819      	ldreq	r1, [r3, #0]
 8005e62:	685b      	ldreq	r3, [r3, #4]
 8005e64:	1809      	addeq	r1, r1, r0
 8005e66:	6021      	streq	r1, [r4, #0]
 8005e68:	e7ed      	b.n	8005e46 <_free_r+0x1e>
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	b10b      	cbz	r3, 8005e74 <_free_r+0x4c>
 8005e70:	42a3      	cmp	r3, r4
 8005e72:	d9fa      	bls.n	8005e6a <_free_r+0x42>
 8005e74:	6811      	ldr	r1, [r2, #0]
 8005e76:	1850      	adds	r0, r2, r1
 8005e78:	42a0      	cmp	r0, r4
 8005e7a:	d10b      	bne.n	8005e94 <_free_r+0x6c>
 8005e7c:	6820      	ldr	r0, [r4, #0]
 8005e7e:	4401      	add	r1, r0
 8005e80:	1850      	adds	r0, r2, r1
 8005e82:	4283      	cmp	r3, r0
 8005e84:	6011      	str	r1, [r2, #0]
 8005e86:	d1e0      	bne.n	8005e4a <_free_r+0x22>
 8005e88:	6818      	ldr	r0, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	6053      	str	r3, [r2, #4]
 8005e8e:	4408      	add	r0, r1
 8005e90:	6010      	str	r0, [r2, #0]
 8005e92:	e7da      	b.n	8005e4a <_free_r+0x22>
 8005e94:	d902      	bls.n	8005e9c <_free_r+0x74>
 8005e96:	230c      	movs	r3, #12
 8005e98:	602b      	str	r3, [r5, #0]
 8005e9a:	e7d6      	b.n	8005e4a <_free_r+0x22>
 8005e9c:	6820      	ldr	r0, [r4, #0]
 8005e9e:	1821      	adds	r1, r4, r0
 8005ea0:	428b      	cmp	r3, r1
 8005ea2:	bf04      	itt	eq
 8005ea4:	6819      	ldreq	r1, [r3, #0]
 8005ea6:	685b      	ldreq	r3, [r3, #4]
 8005ea8:	6063      	str	r3, [r4, #4]
 8005eaa:	bf04      	itt	eq
 8005eac:	1809      	addeq	r1, r1, r0
 8005eae:	6021      	streq	r1, [r4, #0]
 8005eb0:	6054      	str	r4, [r2, #4]
 8005eb2:	e7ca      	b.n	8005e4a <_free_r+0x22>
 8005eb4:	bd38      	pop	{r3, r4, r5, pc}
 8005eb6:	bf00      	nop
 8005eb8:	2000041c 	.word	0x2000041c

08005ebc <malloc>:
 8005ebc:	4b02      	ldr	r3, [pc, #8]	@ (8005ec8 <malloc+0xc>)
 8005ebe:	4601      	mov	r1, r0
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	f000 b825 	b.w	8005f10 <_malloc_r>
 8005ec6:	bf00      	nop
 8005ec8:	20000018 	.word	0x20000018

08005ecc <sbrk_aligned>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	4e0f      	ldr	r6, [pc, #60]	@ (8005f0c <sbrk_aligned+0x40>)
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	6831      	ldr	r1, [r6, #0]
 8005ed4:	4605      	mov	r5, r0
 8005ed6:	b911      	cbnz	r1, 8005ede <sbrk_aligned+0x12>
 8005ed8:	f000 fe92 	bl	8006c00 <_sbrk_r>
 8005edc:	6030      	str	r0, [r6, #0]
 8005ede:	4621      	mov	r1, r4
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f000 fe8d 	bl	8006c00 <_sbrk_r>
 8005ee6:	1c43      	adds	r3, r0, #1
 8005ee8:	d103      	bne.n	8005ef2 <sbrk_aligned+0x26>
 8005eea:	f04f 34ff 	mov.w	r4, #4294967295
 8005eee:	4620      	mov	r0, r4
 8005ef0:	bd70      	pop	{r4, r5, r6, pc}
 8005ef2:	1cc4      	adds	r4, r0, #3
 8005ef4:	f024 0403 	bic.w	r4, r4, #3
 8005ef8:	42a0      	cmp	r0, r4
 8005efa:	d0f8      	beq.n	8005eee <sbrk_aligned+0x22>
 8005efc:	1a21      	subs	r1, r4, r0
 8005efe:	4628      	mov	r0, r5
 8005f00:	f000 fe7e 	bl	8006c00 <_sbrk_r>
 8005f04:	3001      	adds	r0, #1
 8005f06:	d1f2      	bne.n	8005eee <sbrk_aligned+0x22>
 8005f08:	e7ef      	b.n	8005eea <sbrk_aligned+0x1e>
 8005f0a:	bf00      	nop
 8005f0c:	20000418 	.word	0x20000418

08005f10 <_malloc_r>:
 8005f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f14:	1ccd      	adds	r5, r1, #3
 8005f16:	f025 0503 	bic.w	r5, r5, #3
 8005f1a:	3508      	adds	r5, #8
 8005f1c:	2d0c      	cmp	r5, #12
 8005f1e:	bf38      	it	cc
 8005f20:	250c      	movcc	r5, #12
 8005f22:	2d00      	cmp	r5, #0
 8005f24:	4606      	mov	r6, r0
 8005f26:	db01      	blt.n	8005f2c <_malloc_r+0x1c>
 8005f28:	42a9      	cmp	r1, r5
 8005f2a:	d904      	bls.n	8005f36 <_malloc_r+0x26>
 8005f2c:	230c      	movs	r3, #12
 8005f2e:	6033      	str	r3, [r6, #0]
 8005f30:	2000      	movs	r0, #0
 8005f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800600c <_malloc_r+0xfc>
 8005f3a:	f000 f869 	bl	8006010 <__malloc_lock>
 8005f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005f42:	461c      	mov	r4, r3
 8005f44:	bb44      	cbnz	r4, 8005f98 <_malloc_r+0x88>
 8005f46:	4629      	mov	r1, r5
 8005f48:	4630      	mov	r0, r6
 8005f4a:	f7ff ffbf 	bl	8005ecc <sbrk_aligned>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	4604      	mov	r4, r0
 8005f52:	d158      	bne.n	8006006 <_malloc_r+0xf6>
 8005f54:	f8d8 4000 	ldr.w	r4, [r8]
 8005f58:	4627      	mov	r7, r4
 8005f5a:	2f00      	cmp	r7, #0
 8005f5c:	d143      	bne.n	8005fe6 <_malloc_r+0xd6>
 8005f5e:	2c00      	cmp	r4, #0
 8005f60:	d04b      	beq.n	8005ffa <_malloc_r+0xea>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	4639      	mov	r1, r7
 8005f66:	4630      	mov	r0, r6
 8005f68:	eb04 0903 	add.w	r9, r4, r3
 8005f6c:	f000 fe48 	bl	8006c00 <_sbrk_r>
 8005f70:	4581      	cmp	r9, r0
 8005f72:	d142      	bne.n	8005ffa <_malloc_r+0xea>
 8005f74:	6821      	ldr	r1, [r4, #0]
 8005f76:	1a6d      	subs	r5, r5, r1
 8005f78:	4629      	mov	r1, r5
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	f7ff ffa6 	bl	8005ecc <sbrk_aligned>
 8005f80:	3001      	adds	r0, #1
 8005f82:	d03a      	beq.n	8005ffa <_malloc_r+0xea>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	442b      	add	r3, r5
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	bb62      	cbnz	r2, 8005fec <_malloc_r+0xdc>
 8005f92:	f8c8 7000 	str.w	r7, [r8]
 8005f96:	e00f      	b.n	8005fb8 <_malloc_r+0xa8>
 8005f98:	6822      	ldr	r2, [r4, #0]
 8005f9a:	1b52      	subs	r2, r2, r5
 8005f9c:	d420      	bmi.n	8005fe0 <_malloc_r+0xd0>
 8005f9e:	2a0b      	cmp	r2, #11
 8005fa0:	d917      	bls.n	8005fd2 <_malloc_r+0xc2>
 8005fa2:	1961      	adds	r1, r4, r5
 8005fa4:	42a3      	cmp	r3, r4
 8005fa6:	6025      	str	r5, [r4, #0]
 8005fa8:	bf18      	it	ne
 8005faa:	6059      	strne	r1, [r3, #4]
 8005fac:	6863      	ldr	r3, [r4, #4]
 8005fae:	bf08      	it	eq
 8005fb0:	f8c8 1000 	streq.w	r1, [r8]
 8005fb4:	5162      	str	r2, [r4, r5]
 8005fb6:	604b      	str	r3, [r1, #4]
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f000 f82f 	bl	800601c <__malloc_unlock>
 8005fbe:	f104 000b 	add.w	r0, r4, #11
 8005fc2:	1d23      	adds	r3, r4, #4
 8005fc4:	f020 0007 	bic.w	r0, r0, #7
 8005fc8:	1ac2      	subs	r2, r0, r3
 8005fca:	bf1c      	itt	ne
 8005fcc:	1a1b      	subne	r3, r3, r0
 8005fce:	50a3      	strne	r3, [r4, r2]
 8005fd0:	e7af      	b.n	8005f32 <_malloc_r+0x22>
 8005fd2:	6862      	ldr	r2, [r4, #4]
 8005fd4:	42a3      	cmp	r3, r4
 8005fd6:	bf0c      	ite	eq
 8005fd8:	f8c8 2000 	streq.w	r2, [r8]
 8005fdc:	605a      	strne	r2, [r3, #4]
 8005fde:	e7eb      	b.n	8005fb8 <_malloc_r+0xa8>
 8005fe0:	4623      	mov	r3, r4
 8005fe2:	6864      	ldr	r4, [r4, #4]
 8005fe4:	e7ae      	b.n	8005f44 <_malloc_r+0x34>
 8005fe6:	463c      	mov	r4, r7
 8005fe8:	687f      	ldr	r7, [r7, #4]
 8005fea:	e7b6      	b.n	8005f5a <_malloc_r+0x4a>
 8005fec:	461a      	mov	r2, r3
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	42a3      	cmp	r3, r4
 8005ff2:	d1fb      	bne.n	8005fec <_malloc_r+0xdc>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	6053      	str	r3, [r2, #4]
 8005ff8:	e7de      	b.n	8005fb8 <_malloc_r+0xa8>
 8005ffa:	230c      	movs	r3, #12
 8005ffc:	6033      	str	r3, [r6, #0]
 8005ffe:	4630      	mov	r0, r6
 8006000:	f000 f80c 	bl	800601c <__malloc_unlock>
 8006004:	e794      	b.n	8005f30 <_malloc_r+0x20>
 8006006:	6005      	str	r5, [r0, #0]
 8006008:	e7d6      	b.n	8005fb8 <_malloc_r+0xa8>
 800600a:	bf00      	nop
 800600c:	2000041c 	.word	0x2000041c

08006010 <__malloc_lock>:
 8006010:	4801      	ldr	r0, [pc, #4]	@ (8006018 <__malloc_lock+0x8>)
 8006012:	f7ff b8ae 	b.w	8005172 <__retarget_lock_acquire_recursive>
 8006016:	bf00      	nop
 8006018:	20000414 	.word	0x20000414

0800601c <__malloc_unlock>:
 800601c:	4801      	ldr	r0, [pc, #4]	@ (8006024 <__malloc_unlock+0x8>)
 800601e:	f7ff b8a9 	b.w	8005174 <__retarget_lock_release_recursive>
 8006022:	bf00      	nop
 8006024:	20000414 	.word	0x20000414

08006028 <_Balloc>:
 8006028:	b570      	push	{r4, r5, r6, lr}
 800602a:	69c6      	ldr	r6, [r0, #28]
 800602c:	4604      	mov	r4, r0
 800602e:	460d      	mov	r5, r1
 8006030:	b976      	cbnz	r6, 8006050 <_Balloc+0x28>
 8006032:	2010      	movs	r0, #16
 8006034:	f7ff ff42 	bl	8005ebc <malloc>
 8006038:	4602      	mov	r2, r0
 800603a:	61e0      	str	r0, [r4, #28]
 800603c:	b920      	cbnz	r0, 8006048 <_Balloc+0x20>
 800603e:	4b18      	ldr	r3, [pc, #96]	@ (80060a0 <_Balloc+0x78>)
 8006040:	4818      	ldr	r0, [pc, #96]	@ (80060a4 <_Balloc+0x7c>)
 8006042:	216b      	movs	r1, #107	@ 0x6b
 8006044:	f000 fdfa 	bl	8006c3c <__assert_func>
 8006048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800604c:	6006      	str	r6, [r0, #0]
 800604e:	60c6      	str	r6, [r0, #12]
 8006050:	69e6      	ldr	r6, [r4, #28]
 8006052:	68f3      	ldr	r3, [r6, #12]
 8006054:	b183      	cbz	r3, 8006078 <_Balloc+0x50>
 8006056:	69e3      	ldr	r3, [r4, #28]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800605e:	b9b8      	cbnz	r0, 8006090 <_Balloc+0x68>
 8006060:	2101      	movs	r1, #1
 8006062:	fa01 f605 	lsl.w	r6, r1, r5
 8006066:	1d72      	adds	r2, r6, #5
 8006068:	0092      	lsls	r2, r2, #2
 800606a:	4620      	mov	r0, r4
 800606c:	f000 fe04 	bl	8006c78 <_calloc_r>
 8006070:	b160      	cbz	r0, 800608c <_Balloc+0x64>
 8006072:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006076:	e00e      	b.n	8006096 <_Balloc+0x6e>
 8006078:	2221      	movs	r2, #33	@ 0x21
 800607a:	2104      	movs	r1, #4
 800607c:	4620      	mov	r0, r4
 800607e:	f000 fdfb 	bl	8006c78 <_calloc_r>
 8006082:	69e3      	ldr	r3, [r4, #28]
 8006084:	60f0      	str	r0, [r6, #12]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e4      	bne.n	8006056 <_Balloc+0x2e>
 800608c:	2000      	movs	r0, #0
 800608e:	bd70      	pop	{r4, r5, r6, pc}
 8006090:	6802      	ldr	r2, [r0, #0]
 8006092:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006096:	2300      	movs	r3, #0
 8006098:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800609c:	e7f7      	b.n	800608e <_Balloc+0x66>
 800609e:	bf00      	nop
 80060a0:	08006e95 	.word	0x08006e95
 80060a4:	08006f15 	.word	0x08006f15

080060a8 <_Bfree>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	69c6      	ldr	r6, [r0, #28]
 80060ac:	4605      	mov	r5, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	b976      	cbnz	r6, 80060d0 <_Bfree+0x28>
 80060b2:	2010      	movs	r0, #16
 80060b4:	f7ff ff02 	bl	8005ebc <malloc>
 80060b8:	4602      	mov	r2, r0
 80060ba:	61e8      	str	r0, [r5, #28]
 80060bc:	b920      	cbnz	r0, 80060c8 <_Bfree+0x20>
 80060be:	4b09      	ldr	r3, [pc, #36]	@ (80060e4 <_Bfree+0x3c>)
 80060c0:	4809      	ldr	r0, [pc, #36]	@ (80060e8 <_Bfree+0x40>)
 80060c2:	218f      	movs	r1, #143	@ 0x8f
 80060c4:	f000 fdba 	bl	8006c3c <__assert_func>
 80060c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060cc:	6006      	str	r6, [r0, #0]
 80060ce:	60c6      	str	r6, [r0, #12]
 80060d0:	b13c      	cbz	r4, 80060e2 <_Bfree+0x3a>
 80060d2:	69eb      	ldr	r3, [r5, #28]
 80060d4:	6862      	ldr	r2, [r4, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060dc:	6021      	str	r1, [r4, #0]
 80060de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80060e2:	bd70      	pop	{r4, r5, r6, pc}
 80060e4:	08006e95 	.word	0x08006e95
 80060e8:	08006f15 	.word	0x08006f15

080060ec <__multadd>:
 80060ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f0:	690d      	ldr	r5, [r1, #16]
 80060f2:	4607      	mov	r7, r0
 80060f4:	460c      	mov	r4, r1
 80060f6:	461e      	mov	r6, r3
 80060f8:	f101 0c14 	add.w	ip, r1, #20
 80060fc:	2000      	movs	r0, #0
 80060fe:	f8dc 3000 	ldr.w	r3, [ip]
 8006102:	b299      	uxth	r1, r3
 8006104:	fb02 6101 	mla	r1, r2, r1, r6
 8006108:	0c1e      	lsrs	r6, r3, #16
 800610a:	0c0b      	lsrs	r3, r1, #16
 800610c:	fb02 3306 	mla	r3, r2, r6, r3
 8006110:	b289      	uxth	r1, r1
 8006112:	3001      	adds	r0, #1
 8006114:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006118:	4285      	cmp	r5, r0
 800611a:	f84c 1b04 	str.w	r1, [ip], #4
 800611e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006122:	dcec      	bgt.n	80060fe <__multadd+0x12>
 8006124:	b30e      	cbz	r6, 800616a <__multadd+0x7e>
 8006126:	68a3      	ldr	r3, [r4, #8]
 8006128:	42ab      	cmp	r3, r5
 800612a:	dc19      	bgt.n	8006160 <__multadd+0x74>
 800612c:	6861      	ldr	r1, [r4, #4]
 800612e:	4638      	mov	r0, r7
 8006130:	3101      	adds	r1, #1
 8006132:	f7ff ff79 	bl	8006028 <_Balloc>
 8006136:	4680      	mov	r8, r0
 8006138:	b928      	cbnz	r0, 8006146 <__multadd+0x5a>
 800613a:	4602      	mov	r2, r0
 800613c:	4b0c      	ldr	r3, [pc, #48]	@ (8006170 <__multadd+0x84>)
 800613e:	480d      	ldr	r0, [pc, #52]	@ (8006174 <__multadd+0x88>)
 8006140:	21ba      	movs	r1, #186	@ 0xba
 8006142:	f000 fd7b 	bl	8006c3c <__assert_func>
 8006146:	6922      	ldr	r2, [r4, #16]
 8006148:	3202      	adds	r2, #2
 800614a:	f104 010c 	add.w	r1, r4, #12
 800614e:	0092      	lsls	r2, r2, #2
 8006150:	300c      	adds	r0, #12
 8006152:	f000 fd65 	bl	8006c20 <memcpy>
 8006156:	4621      	mov	r1, r4
 8006158:	4638      	mov	r0, r7
 800615a:	f7ff ffa5 	bl	80060a8 <_Bfree>
 800615e:	4644      	mov	r4, r8
 8006160:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006164:	3501      	adds	r5, #1
 8006166:	615e      	str	r6, [r3, #20]
 8006168:	6125      	str	r5, [r4, #16]
 800616a:	4620      	mov	r0, r4
 800616c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006170:	08006f04 	.word	0x08006f04
 8006174:	08006f15 	.word	0x08006f15

08006178 <__hi0bits>:
 8006178:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800617c:	4603      	mov	r3, r0
 800617e:	bf36      	itet	cc
 8006180:	0403      	lslcc	r3, r0, #16
 8006182:	2000      	movcs	r0, #0
 8006184:	2010      	movcc	r0, #16
 8006186:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800618a:	bf3c      	itt	cc
 800618c:	021b      	lslcc	r3, r3, #8
 800618e:	3008      	addcc	r0, #8
 8006190:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006194:	bf3c      	itt	cc
 8006196:	011b      	lslcc	r3, r3, #4
 8006198:	3004      	addcc	r0, #4
 800619a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619e:	bf3c      	itt	cc
 80061a0:	009b      	lslcc	r3, r3, #2
 80061a2:	3002      	addcc	r0, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	db05      	blt.n	80061b4 <__hi0bits+0x3c>
 80061a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80061ac:	f100 0001 	add.w	r0, r0, #1
 80061b0:	bf08      	it	eq
 80061b2:	2020      	moveq	r0, #32
 80061b4:	4770      	bx	lr

080061b6 <__lo0bits>:
 80061b6:	6803      	ldr	r3, [r0, #0]
 80061b8:	4602      	mov	r2, r0
 80061ba:	f013 0007 	ands.w	r0, r3, #7
 80061be:	d00b      	beq.n	80061d8 <__lo0bits+0x22>
 80061c0:	07d9      	lsls	r1, r3, #31
 80061c2:	d421      	bmi.n	8006208 <__lo0bits+0x52>
 80061c4:	0798      	lsls	r0, r3, #30
 80061c6:	bf49      	itett	mi
 80061c8:	085b      	lsrmi	r3, r3, #1
 80061ca:	089b      	lsrpl	r3, r3, #2
 80061cc:	2001      	movmi	r0, #1
 80061ce:	6013      	strmi	r3, [r2, #0]
 80061d0:	bf5c      	itt	pl
 80061d2:	6013      	strpl	r3, [r2, #0]
 80061d4:	2002      	movpl	r0, #2
 80061d6:	4770      	bx	lr
 80061d8:	b299      	uxth	r1, r3
 80061da:	b909      	cbnz	r1, 80061e0 <__lo0bits+0x2a>
 80061dc:	0c1b      	lsrs	r3, r3, #16
 80061de:	2010      	movs	r0, #16
 80061e0:	b2d9      	uxtb	r1, r3
 80061e2:	b909      	cbnz	r1, 80061e8 <__lo0bits+0x32>
 80061e4:	3008      	adds	r0, #8
 80061e6:	0a1b      	lsrs	r3, r3, #8
 80061e8:	0719      	lsls	r1, r3, #28
 80061ea:	bf04      	itt	eq
 80061ec:	091b      	lsreq	r3, r3, #4
 80061ee:	3004      	addeq	r0, #4
 80061f0:	0799      	lsls	r1, r3, #30
 80061f2:	bf04      	itt	eq
 80061f4:	089b      	lsreq	r3, r3, #2
 80061f6:	3002      	addeq	r0, #2
 80061f8:	07d9      	lsls	r1, r3, #31
 80061fa:	d403      	bmi.n	8006204 <__lo0bits+0x4e>
 80061fc:	085b      	lsrs	r3, r3, #1
 80061fe:	f100 0001 	add.w	r0, r0, #1
 8006202:	d003      	beq.n	800620c <__lo0bits+0x56>
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	4770      	bx	lr
 8006208:	2000      	movs	r0, #0
 800620a:	4770      	bx	lr
 800620c:	2020      	movs	r0, #32
 800620e:	4770      	bx	lr

08006210 <__i2b>:
 8006210:	b510      	push	{r4, lr}
 8006212:	460c      	mov	r4, r1
 8006214:	2101      	movs	r1, #1
 8006216:	f7ff ff07 	bl	8006028 <_Balloc>
 800621a:	4602      	mov	r2, r0
 800621c:	b928      	cbnz	r0, 800622a <__i2b+0x1a>
 800621e:	4b05      	ldr	r3, [pc, #20]	@ (8006234 <__i2b+0x24>)
 8006220:	4805      	ldr	r0, [pc, #20]	@ (8006238 <__i2b+0x28>)
 8006222:	f240 1145 	movw	r1, #325	@ 0x145
 8006226:	f000 fd09 	bl	8006c3c <__assert_func>
 800622a:	2301      	movs	r3, #1
 800622c:	6144      	str	r4, [r0, #20]
 800622e:	6103      	str	r3, [r0, #16]
 8006230:	bd10      	pop	{r4, pc}
 8006232:	bf00      	nop
 8006234:	08006f04 	.word	0x08006f04
 8006238:	08006f15 	.word	0x08006f15

0800623c <__multiply>:
 800623c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006240:	4617      	mov	r7, r2
 8006242:	690a      	ldr	r2, [r1, #16]
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	429a      	cmp	r2, r3
 8006248:	bfa8      	it	ge
 800624a:	463b      	movge	r3, r7
 800624c:	4689      	mov	r9, r1
 800624e:	bfa4      	itt	ge
 8006250:	460f      	movge	r7, r1
 8006252:	4699      	movge	r9, r3
 8006254:	693d      	ldr	r5, [r7, #16]
 8006256:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	eb05 060a 	add.w	r6, r5, sl
 8006262:	42b3      	cmp	r3, r6
 8006264:	b085      	sub	sp, #20
 8006266:	bfb8      	it	lt
 8006268:	3101      	addlt	r1, #1
 800626a:	f7ff fedd 	bl	8006028 <_Balloc>
 800626e:	b930      	cbnz	r0, 800627e <__multiply+0x42>
 8006270:	4602      	mov	r2, r0
 8006272:	4b41      	ldr	r3, [pc, #260]	@ (8006378 <__multiply+0x13c>)
 8006274:	4841      	ldr	r0, [pc, #260]	@ (800637c <__multiply+0x140>)
 8006276:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800627a:	f000 fcdf 	bl	8006c3c <__assert_func>
 800627e:	f100 0414 	add.w	r4, r0, #20
 8006282:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006286:	4623      	mov	r3, r4
 8006288:	2200      	movs	r2, #0
 800628a:	4573      	cmp	r3, lr
 800628c:	d320      	bcc.n	80062d0 <__multiply+0x94>
 800628e:	f107 0814 	add.w	r8, r7, #20
 8006292:	f109 0114 	add.w	r1, r9, #20
 8006296:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800629a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800629e:	9302      	str	r3, [sp, #8]
 80062a0:	1beb      	subs	r3, r5, r7
 80062a2:	3b15      	subs	r3, #21
 80062a4:	f023 0303 	bic.w	r3, r3, #3
 80062a8:	3304      	adds	r3, #4
 80062aa:	3715      	adds	r7, #21
 80062ac:	42bd      	cmp	r5, r7
 80062ae:	bf38      	it	cc
 80062b0:	2304      	movcc	r3, #4
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	9b02      	ldr	r3, [sp, #8]
 80062b6:	9103      	str	r1, [sp, #12]
 80062b8:	428b      	cmp	r3, r1
 80062ba:	d80c      	bhi.n	80062d6 <__multiply+0x9a>
 80062bc:	2e00      	cmp	r6, #0
 80062be:	dd03      	ble.n	80062c8 <__multiply+0x8c>
 80062c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d055      	beq.n	8006374 <__multiply+0x138>
 80062c8:	6106      	str	r6, [r0, #16]
 80062ca:	b005      	add	sp, #20
 80062cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d0:	f843 2b04 	str.w	r2, [r3], #4
 80062d4:	e7d9      	b.n	800628a <__multiply+0x4e>
 80062d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80062da:	f1ba 0f00 	cmp.w	sl, #0
 80062de:	d01f      	beq.n	8006320 <__multiply+0xe4>
 80062e0:	46c4      	mov	ip, r8
 80062e2:	46a1      	mov	r9, r4
 80062e4:	2700      	movs	r7, #0
 80062e6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80062ea:	f8d9 3000 	ldr.w	r3, [r9]
 80062ee:	fa1f fb82 	uxth.w	fp, r2
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	fb0a 330b 	mla	r3, sl, fp, r3
 80062f8:	443b      	add	r3, r7
 80062fa:	f8d9 7000 	ldr.w	r7, [r9]
 80062fe:	0c12      	lsrs	r2, r2, #16
 8006300:	0c3f      	lsrs	r7, r7, #16
 8006302:	fb0a 7202 	mla	r2, sl, r2, r7
 8006306:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800630a:	b29b      	uxth	r3, r3
 800630c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006310:	4565      	cmp	r5, ip
 8006312:	f849 3b04 	str.w	r3, [r9], #4
 8006316:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800631a:	d8e4      	bhi.n	80062e6 <__multiply+0xaa>
 800631c:	9b01      	ldr	r3, [sp, #4]
 800631e:	50e7      	str	r7, [r4, r3]
 8006320:	9b03      	ldr	r3, [sp, #12]
 8006322:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006326:	3104      	adds	r1, #4
 8006328:	f1b9 0f00 	cmp.w	r9, #0
 800632c:	d020      	beq.n	8006370 <__multiply+0x134>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	4647      	mov	r7, r8
 8006332:	46a4      	mov	ip, r4
 8006334:	f04f 0a00 	mov.w	sl, #0
 8006338:	f8b7 b000 	ldrh.w	fp, [r7]
 800633c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006340:	fb09 220b 	mla	r2, r9, fp, r2
 8006344:	4452      	add	r2, sl
 8006346:	b29b      	uxth	r3, r3
 8006348:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800634c:	f84c 3b04 	str.w	r3, [ip], #4
 8006350:	f857 3b04 	ldr.w	r3, [r7], #4
 8006354:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006358:	f8bc 3000 	ldrh.w	r3, [ip]
 800635c:	fb09 330a 	mla	r3, r9, sl, r3
 8006360:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006364:	42bd      	cmp	r5, r7
 8006366:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800636a:	d8e5      	bhi.n	8006338 <__multiply+0xfc>
 800636c:	9a01      	ldr	r2, [sp, #4]
 800636e:	50a3      	str	r3, [r4, r2]
 8006370:	3404      	adds	r4, #4
 8006372:	e79f      	b.n	80062b4 <__multiply+0x78>
 8006374:	3e01      	subs	r6, #1
 8006376:	e7a1      	b.n	80062bc <__multiply+0x80>
 8006378:	08006f04 	.word	0x08006f04
 800637c:	08006f15 	.word	0x08006f15

08006380 <__pow5mult>:
 8006380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006384:	4615      	mov	r5, r2
 8006386:	f012 0203 	ands.w	r2, r2, #3
 800638a:	4607      	mov	r7, r0
 800638c:	460e      	mov	r6, r1
 800638e:	d007      	beq.n	80063a0 <__pow5mult+0x20>
 8006390:	4c25      	ldr	r4, [pc, #148]	@ (8006428 <__pow5mult+0xa8>)
 8006392:	3a01      	subs	r2, #1
 8006394:	2300      	movs	r3, #0
 8006396:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800639a:	f7ff fea7 	bl	80060ec <__multadd>
 800639e:	4606      	mov	r6, r0
 80063a0:	10ad      	asrs	r5, r5, #2
 80063a2:	d03d      	beq.n	8006420 <__pow5mult+0xa0>
 80063a4:	69fc      	ldr	r4, [r7, #28]
 80063a6:	b97c      	cbnz	r4, 80063c8 <__pow5mult+0x48>
 80063a8:	2010      	movs	r0, #16
 80063aa:	f7ff fd87 	bl	8005ebc <malloc>
 80063ae:	4602      	mov	r2, r0
 80063b0:	61f8      	str	r0, [r7, #28]
 80063b2:	b928      	cbnz	r0, 80063c0 <__pow5mult+0x40>
 80063b4:	4b1d      	ldr	r3, [pc, #116]	@ (800642c <__pow5mult+0xac>)
 80063b6:	481e      	ldr	r0, [pc, #120]	@ (8006430 <__pow5mult+0xb0>)
 80063b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80063bc:	f000 fc3e 	bl	8006c3c <__assert_func>
 80063c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063c4:	6004      	str	r4, [r0, #0]
 80063c6:	60c4      	str	r4, [r0, #12]
 80063c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80063cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063d0:	b94c      	cbnz	r4, 80063e6 <__pow5mult+0x66>
 80063d2:	f240 2171 	movw	r1, #625	@ 0x271
 80063d6:	4638      	mov	r0, r7
 80063d8:	f7ff ff1a 	bl	8006210 <__i2b>
 80063dc:	2300      	movs	r3, #0
 80063de:	f8c8 0008 	str.w	r0, [r8, #8]
 80063e2:	4604      	mov	r4, r0
 80063e4:	6003      	str	r3, [r0, #0]
 80063e6:	f04f 0900 	mov.w	r9, #0
 80063ea:	07eb      	lsls	r3, r5, #31
 80063ec:	d50a      	bpl.n	8006404 <__pow5mult+0x84>
 80063ee:	4631      	mov	r1, r6
 80063f0:	4622      	mov	r2, r4
 80063f2:	4638      	mov	r0, r7
 80063f4:	f7ff ff22 	bl	800623c <__multiply>
 80063f8:	4631      	mov	r1, r6
 80063fa:	4680      	mov	r8, r0
 80063fc:	4638      	mov	r0, r7
 80063fe:	f7ff fe53 	bl	80060a8 <_Bfree>
 8006402:	4646      	mov	r6, r8
 8006404:	106d      	asrs	r5, r5, #1
 8006406:	d00b      	beq.n	8006420 <__pow5mult+0xa0>
 8006408:	6820      	ldr	r0, [r4, #0]
 800640a:	b938      	cbnz	r0, 800641c <__pow5mult+0x9c>
 800640c:	4622      	mov	r2, r4
 800640e:	4621      	mov	r1, r4
 8006410:	4638      	mov	r0, r7
 8006412:	f7ff ff13 	bl	800623c <__multiply>
 8006416:	6020      	str	r0, [r4, #0]
 8006418:	f8c0 9000 	str.w	r9, [r0]
 800641c:	4604      	mov	r4, r0
 800641e:	e7e4      	b.n	80063ea <__pow5mult+0x6a>
 8006420:	4630      	mov	r0, r6
 8006422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006426:	bf00      	nop
 8006428:	08006fc8 	.word	0x08006fc8
 800642c:	08006e95 	.word	0x08006e95
 8006430:	08006f15 	.word	0x08006f15

08006434 <__lshift>:
 8006434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006438:	460c      	mov	r4, r1
 800643a:	6849      	ldr	r1, [r1, #4]
 800643c:	6923      	ldr	r3, [r4, #16]
 800643e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006442:	68a3      	ldr	r3, [r4, #8]
 8006444:	4607      	mov	r7, r0
 8006446:	4691      	mov	r9, r2
 8006448:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800644c:	f108 0601 	add.w	r6, r8, #1
 8006450:	42b3      	cmp	r3, r6
 8006452:	db0b      	blt.n	800646c <__lshift+0x38>
 8006454:	4638      	mov	r0, r7
 8006456:	f7ff fde7 	bl	8006028 <_Balloc>
 800645a:	4605      	mov	r5, r0
 800645c:	b948      	cbnz	r0, 8006472 <__lshift+0x3e>
 800645e:	4602      	mov	r2, r0
 8006460:	4b28      	ldr	r3, [pc, #160]	@ (8006504 <__lshift+0xd0>)
 8006462:	4829      	ldr	r0, [pc, #164]	@ (8006508 <__lshift+0xd4>)
 8006464:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006468:	f000 fbe8 	bl	8006c3c <__assert_func>
 800646c:	3101      	adds	r1, #1
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	e7ee      	b.n	8006450 <__lshift+0x1c>
 8006472:	2300      	movs	r3, #0
 8006474:	f100 0114 	add.w	r1, r0, #20
 8006478:	f100 0210 	add.w	r2, r0, #16
 800647c:	4618      	mov	r0, r3
 800647e:	4553      	cmp	r3, sl
 8006480:	db33      	blt.n	80064ea <__lshift+0xb6>
 8006482:	6920      	ldr	r0, [r4, #16]
 8006484:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006488:	f104 0314 	add.w	r3, r4, #20
 800648c:	f019 091f 	ands.w	r9, r9, #31
 8006490:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006494:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006498:	d02b      	beq.n	80064f2 <__lshift+0xbe>
 800649a:	f1c9 0e20 	rsb	lr, r9, #32
 800649e:	468a      	mov	sl, r1
 80064a0:	2200      	movs	r2, #0
 80064a2:	6818      	ldr	r0, [r3, #0]
 80064a4:	fa00 f009 	lsl.w	r0, r0, r9
 80064a8:	4310      	orrs	r0, r2
 80064aa:	f84a 0b04 	str.w	r0, [sl], #4
 80064ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80064b2:	459c      	cmp	ip, r3
 80064b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80064b8:	d8f3      	bhi.n	80064a2 <__lshift+0x6e>
 80064ba:	ebac 0304 	sub.w	r3, ip, r4
 80064be:	3b15      	subs	r3, #21
 80064c0:	f023 0303 	bic.w	r3, r3, #3
 80064c4:	3304      	adds	r3, #4
 80064c6:	f104 0015 	add.w	r0, r4, #21
 80064ca:	4560      	cmp	r0, ip
 80064cc:	bf88      	it	hi
 80064ce:	2304      	movhi	r3, #4
 80064d0:	50ca      	str	r2, [r1, r3]
 80064d2:	b10a      	cbz	r2, 80064d8 <__lshift+0xa4>
 80064d4:	f108 0602 	add.w	r6, r8, #2
 80064d8:	3e01      	subs	r6, #1
 80064da:	4638      	mov	r0, r7
 80064dc:	612e      	str	r6, [r5, #16]
 80064de:	4621      	mov	r1, r4
 80064e0:	f7ff fde2 	bl	80060a8 <_Bfree>
 80064e4:	4628      	mov	r0, r5
 80064e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80064ee:	3301      	adds	r3, #1
 80064f0:	e7c5      	b.n	800647e <__lshift+0x4a>
 80064f2:	3904      	subs	r1, #4
 80064f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80064fc:	459c      	cmp	ip, r3
 80064fe:	d8f9      	bhi.n	80064f4 <__lshift+0xc0>
 8006500:	e7ea      	b.n	80064d8 <__lshift+0xa4>
 8006502:	bf00      	nop
 8006504:	08006f04 	.word	0x08006f04
 8006508:	08006f15 	.word	0x08006f15

0800650c <__mcmp>:
 800650c:	690a      	ldr	r2, [r1, #16]
 800650e:	4603      	mov	r3, r0
 8006510:	6900      	ldr	r0, [r0, #16]
 8006512:	1a80      	subs	r0, r0, r2
 8006514:	b530      	push	{r4, r5, lr}
 8006516:	d10e      	bne.n	8006536 <__mcmp+0x2a>
 8006518:	3314      	adds	r3, #20
 800651a:	3114      	adds	r1, #20
 800651c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006520:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006524:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006528:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800652c:	4295      	cmp	r5, r2
 800652e:	d003      	beq.n	8006538 <__mcmp+0x2c>
 8006530:	d205      	bcs.n	800653e <__mcmp+0x32>
 8006532:	f04f 30ff 	mov.w	r0, #4294967295
 8006536:	bd30      	pop	{r4, r5, pc}
 8006538:	42a3      	cmp	r3, r4
 800653a:	d3f3      	bcc.n	8006524 <__mcmp+0x18>
 800653c:	e7fb      	b.n	8006536 <__mcmp+0x2a>
 800653e:	2001      	movs	r0, #1
 8006540:	e7f9      	b.n	8006536 <__mcmp+0x2a>
	...

08006544 <__mdiff>:
 8006544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006548:	4689      	mov	r9, r1
 800654a:	4606      	mov	r6, r0
 800654c:	4611      	mov	r1, r2
 800654e:	4648      	mov	r0, r9
 8006550:	4614      	mov	r4, r2
 8006552:	f7ff ffdb 	bl	800650c <__mcmp>
 8006556:	1e05      	subs	r5, r0, #0
 8006558:	d112      	bne.n	8006580 <__mdiff+0x3c>
 800655a:	4629      	mov	r1, r5
 800655c:	4630      	mov	r0, r6
 800655e:	f7ff fd63 	bl	8006028 <_Balloc>
 8006562:	4602      	mov	r2, r0
 8006564:	b928      	cbnz	r0, 8006572 <__mdiff+0x2e>
 8006566:	4b3f      	ldr	r3, [pc, #252]	@ (8006664 <__mdiff+0x120>)
 8006568:	f240 2137 	movw	r1, #567	@ 0x237
 800656c:	483e      	ldr	r0, [pc, #248]	@ (8006668 <__mdiff+0x124>)
 800656e:	f000 fb65 	bl	8006c3c <__assert_func>
 8006572:	2301      	movs	r3, #1
 8006574:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006578:	4610      	mov	r0, r2
 800657a:	b003      	add	sp, #12
 800657c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006580:	bfbc      	itt	lt
 8006582:	464b      	movlt	r3, r9
 8006584:	46a1      	movlt	r9, r4
 8006586:	4630      	mov	r0, r6
 8006588:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800658c:	bfba      	itte	lt
 800658e:	461c      	movlt	r4, r3
 8006590:	2501      	movlt	r5, #1
 8006592:	2500      	movge	r5, #0
 8006594:	f7ff fd48 	bl	8006028 <_Balloc>
 8006598:	4602      	mov	r2, r0
 800659a:	b918      	cbnz	r0, 80065a4 <__mdiff+0x60>
 800659c:	4b31      	ldr	r3, [pc, #196]	@ (8006664 <__mdiff+0x120>)
 800659e:	f240 2145 	movw	r1, #581	@ 0x245
 80065a2:	e7e3      	b.n	800656c <__mdiff+0x28>
 80065a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80065a8:	6926      	ldr	r6, [r4, #16]
 80065aa:	60c5      	str	r5, [r0, #12]
 80065ac:	f109 0310 	add.w	r3, r9, #16
 80065b0:	f109 0514 	add.w	r5, r9, #20
 80065b4:	f104 0e14 	add.w	lr, r4, #20
 80065b8:	f100 0b14 	add.w	fp, r0, #20
 80065bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80065c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	46d9      	mov	r9, fp
 80065c8:	f04f 0c00 	mov.w	ip, #0
 80065cc:	9b01      	ldr	r3, [sp, #4]
 80065ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80065d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	fa1f f38a 	uxth.w	r3, sl
 80065dc:	4619      	mov	r1, r3
 80065de:	b283      	uxth	r3, r0
 80065e0:	1acb      	subs	r3, r1, r3
 80065e2:	0c00      	lsrs	r0, r0, #16
 80065e4:	4463      	add	r3, ip
 80065e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80065ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80065f4:	4576      	cmp	r6, lr
 80065f6:	f849 3b04 	str.w	r3, [r9], #4
 80065fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80065fe:	d8e5      	bhi.n	80065cc <__mdiff+0x88>
 8006600:	1b33      	subs	r3, r6, r4
 8006602:	3b15      	subs	r3, #21
 8006604:	f023 0303 	bic.w	r3, r3, #3
 8006608:	3415      	adds	r4, #21
 800660a:	3304      	adds	r3, #4
 800660c:	42a6      	cmp	r6, r4
 800660e:	bf38      	it	cc
 8006610:	2304      	movcc	r3, #4
 8006612:	441d      	add	r5, r3
 8006614:	445b      	add	r3, fp
 8006616:	461e      	mov	r6, r3
 8006618:	462c      	mov	r4, r5
 800661a:	4544      	cmp	r4, r8
 800661c:	d30e      	bcc.n	800663c <__mdiff+0xf8>
 800661e:	f108 0103 	add.w	r1, r8, #3
 8006622:	1b49      	subs	r1, r1, r5
 8006624:	f021 0103 	bic.w	r1, r1, #3
 8006628:	3d03      	subs	r5, #3
 800662a:	45a8      	cmp	r8, r5
 800662c:	bf38      	it	cc
 800662e:	2100      	movcc	r1, #0
 8006630:	440b      	add	r3, r1
 8006632:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006636:	b191      	cbz	r1, 800665e <__mdiff+0x11a>
 8006638:	6117      	str	r7, [r2, #16]
 800663a:	e79d      	b.n	8006578 <__mdiff+0x34>
 800663c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006640:	46e6      	mov	lr, ip
 8006642:	0c08      	lsrs	r0, r1, #16
 8006644:	fa1c fc81 	uxtah	ip, ip, r1
 8006648:	4471      	add	r1, lr
 800664a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800664e:	b289      	uxth	r1, r1
 8006650:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006654:	f846 1b04 	str.w	r1, [r6], #4
 8006658:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800665c:	e7dd      	b.n	800661a <__mdiff+0xd6>
 800665e:	3f01      	subs	r7, #1
 8006660:	e7e7      	b.n	8006632 <__mdiff+0xee>
 8006662:	bf00      	nop
 8006664:	08006f04 	.word	0x08006f04
 8006668:	08006f15 	.word	0x08006f15

0800666c <__d2b>:
 800666c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006670:	460f      	mov	r7, r1
 8006672:	2101      	movs	r1, #1
 8006674:	ec59 8b10 	vmov	r8, r9, d0
 8006678:	4616      	mov	r6, r2
 800667a:	f7ff fcd5 	bl	8006028 <_Balloc>
 800667e:	4604      	mov	r4, r0
 8006680:	b930      	cbnz	r0, 8006690 <__d2b+0x24>
 8006682:	4602      	mov	r2, r0
 8006684:	4b23      	ldr	r3, [pc, #140]	@ (8006714 <__d2b+0xa8>)
 8006686:	4824      	ldr	r0, [pc, #144]	@ (8006718 <__d2b+0xac>)
 8006688:	f240 310f 	movw	r1, #783	@ 0x30f
 800668c:	f000 fad6 	bl	8006c3c <__assert_func>
 8006690:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006694:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006698:	b10d      	cbz	r5, 800669e <__d2b+0x32>
 800669a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	f1b8 0300 	subs.w	r3, r8, #0
 80066a4:	d023      	beq.n	80066ee <__d2b+0x82>
 80066a6:	4668      	mov	r0, sp
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	f7ff fd84 	bl	80061b6 <__lo0bits>
 80066ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80066b2:	b1d0      	cbz	r0, 80066ea <__d2b+0x7e>
 80066b4:	f1c0 0320 	rsb	r3, r0, #32
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	430b      	orrs	r3, r1
 80066be:	40c2      	lsrs	r2, r0
 80066c0:	6163      	str	r3, [r4, #20]
 80066c2:	9201      	str	r2, [sp, #4]
 80066c4:	9b01      	ldr	r3, [sp, #4]
 80066c6:	61a3      	str	r3, [r4, #24]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	bf0c      	ite	eq
 80066cc:	2201      	moveq	r2, #1
 80066ce:	2202      	movne	r2, #2
 80066d0:	6122      	str	r2, [r4, #16]
 80066d2:	b1a5      	cbz	r5, 80066fe <__d2b+0x92>
 80066d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80066d8:	4405      	add	r5, r0
 80066da:	603d      	str	r5, [r7, #0]
 80066dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80066e0:	6030      	str	r0, [r6, #0]
 80066e2:	4620      	mov	r0, r4
 80066e4:	b003      	add	sp, #12
 80066e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066ea:	6161      	str	r1, [r4, #20]
 80066ec:	e7ea      	b.n	80066c4 <__d2b+0x58>
 80066ee:	a801      	add	r0, sp, #4
 80066f0:	f7ff fd61 	bl	80061b6 <__lo0bits>
 80066f4:	9b01      	ldr	r3, [sp, #4]
 80066f6:	6163      	str	r3, [r4, #20]
 80066f8:	3020      	adds	r0, #32
 80066fa:	2201      	movs	r2, #1
 80066fc:	e7e8      	b.n	80066d0 <__d2b+0x64>
 80066fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006702:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006706:	6038      	str	r0, [r7, #0]
 8006708:	6918      	ldr	r0, [r3, #16]
 800670a:	f7ff fd35 	bl	8006178 <__hi0bits>
 800670e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006712:	e7e5      	b.n	80066e0 <__d2b+0x74>
 8006714:	08006f04 	.word	0x08006f04
 8006718:	08006f15 	.word	0x08006f15

0800671c <__sfputc_r>:
 800671c:	6893      	ldr	r3, [r2, #8]
 800671e:	3b01      	subs	r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	b410      	push	{r4}
 8006724:	6093      	str	r3, [r2, #8]
 8006726:	da08      	bge.n	800673a <__sfputc_r+0x1e>
 8006728:	6994      	ldr	r4, [r2, #24]
 800672a:	42a3      	cmp	r3, r4
 800672c:	db01      	blt.n	8006732 <__sfputc_r+0x16>
 800672e:	290a      	cmp	r1, #10
 8006730:	d103      	bne.n	800673a <__sfputc_r+0x1e>
 8006732:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006736:	f7fe bc0a 	b.w	8004f4e <__swbuf_r>
 800673a:	6813      	ldr	r3, [r2, #0]
 800673c:	1c58      	adds	r0, r3, #1
 800673e:	6010      	str	r0, [r2, #0]
 8006740:	7019      	strb	r1, [r3, #0]
 8006742:	4608      	mov	r0, r1
 8006744:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006748:	4770      	bx	lr

0800674a <__sfputs_r>:
 800674a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674c:	4606      	mov	r6, r0
 800674e:	460f      	mov	r7, r1
 8006750:	4614      	mov	r4, r2
 8006752:	18d5      	adds	r5, r2, r3
 8006754:	42ac      	cmp	r4, r5
 8006756:	d101      	bne.n	800675c <__sfputs_r+0x12>
 8006758:	2000      	movs	r0, #0
 800675a:	e007      	b.n	800676c <__sfputs_r+0x22>
 800675c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006760:	463a      	mov	r2, r7
 8006762:	4630      	mov	r0, r6
 8006764:	f7ff ffda 	bl	800671c <__sfputc_r>
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	d1f3      	bne.n	8006754 <__sfputs_r+0xa>
 800676c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006770 <_vfiprintf_r>:
 8006770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	460d      	mov	r5, r1
 8006776:	b09d      	sub	sp, #116	@ 0x74
 8006778:	4614      	mov	r4, r2
 800677a:	4698      	mov	r8, r3
 800677c:	4606      	mov	r6, r0
 800677e:	b118      	cbz	r0, 8006788 <_vfiprintf_r+0x18>
 8006780:	6a03      	ldr	r3, [r0, #32]
 8006782:	b90b      	cbnz	r3, 8006788 <_vfiprintf_r+0x18>
 8006784:	f7fe fafa 	bl	8004d7c <__sinit>
 8006788:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800678a:	07d9      	lsls	r1, r3, #31
 800678c:	d405      	bmi.n	800679a <_vfiprintf_r+0x2a>
 800678e:	89ab      	ldrh	r3, [r5, #12]
 8006790:	059a      	lsls	r2, r3, #22
 8006792:	d402      	bmi.n	800679a <_vfiprintf_r+0x2a>
 8006794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006796:	f7fe fcec 	bl	8005172 <__retarget_lock_acquire_recursive>
 800679a:	89ab      	ldrh	r3, [r5, #12]
 800679c:	071b      	lsls	r3, r3, #28
 800679e:	d501      	bpl.n	80067a4 <_vfiprintf_r+0x34>
 80067a0:	692b      	ldr	r3, [r5, #16]
 80067a2:	b99b      	cbnz	r3, 80067cc <_vfiprintf_r+0x5c>
 80067a4:	4629      	mov	r1, r5
 80067a6:	4630      	mov	r0, r6
 80067a8:	f7fe fc10 	bl	8004fcc <__swsetup_r>
 80067ac:	b170      	cbz	r0, 80067cc <_vfiprintf_r+0x5c>
 80067ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067b0:	07dc      	lsls	r4, r3, #31
 80067b2:	d504      	bpl.n	80067be <_vfiprintf_r+0x4e>
 80067b4:	f04f 30ff 	mov.w	r0, #4294967295
 80067b8:	b01d      	add	sp, #116	@ 0x74
 80067ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067be:	89ab      	ldrh	r3, [r5, #12]
 80067c0:	0598      	lsls	r0, r3, #22
 80067c2:	d4f7      	bmi.n	80067b4 <_vfiprintf_r+0x44>
 80067c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067c6:	f7fe fcd5 	bl	8005174 <__retarget_lock_release_recursive>
 80067ca:	e7f3      	b.n	80067b4 <_vfiprintf_r+0x44>
 80067cc:	2300      	movs	r3, #0
 80067ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80067d0:	2320      	movs	r3, #32
 80067d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80067da:	2330      	movs	r3, #48	@ 0x30
 80067dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800698c <_vfiprintf_r+0x21c>
 80067e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067e4:	f04f 0901 	mov.w	r9, #1
 80067e8:	4623      	mov	r3, r4
 80067ea:	469a      	mov	sl, r3
 80067ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067f0:	b10a      	cbz	r2, 80067f6 <_vfiprintf_r+0x86>
 80067f2:	2a25      	cmp	r2, #37	@ 0x25
 80067f4:	d1f9      	bne.n	80067ea <_vfiprintf_r+0x7a>
 80067f6:	ebba 0b04 	subs.w	fp, sl, r4
 80067fa:	d00b      	beq.n	8006814 <_vfiprintf_r+0xa4>
 80067fc:	465b      	mov	r3, fp
 80067fe:	4622      	mov	r2, r4
 8006800:	4629      	mov	r1, r5
 8006802:	4630      	mov	r0, r6
 8006804:	f7ff ffa1 	bl	800674a <__sfputs_r>
 8006808:	3001      	adds	r0, #1
 800680a:	f000 80a7 	beq.w	800695c <_vfiprintf_r+0x1ec>
 800680e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006810:	445a      	add	r2, fp
 8006812:	9209      	str	r2, [sp, #36]	@ 0x24
 8006814:	f89a 3000 	ldrb.w	r3, [sl]
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 809f 	beq.w	800695c <_vfiprintf_r+0x1ec>
 800681e:	2300      	movs	r3, #0
 8006820:	f04f 32ff 	mov.w	r2, #4294967295
 8006824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006828:	f10a 0a01 	add.w	sl, sl, #1
 800682c:	9304      	str	r3, [sp, #16]
 800682e:	9307      	str	r3, [sp, #28]
 8006830:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006834:	931a      	str	r3, [sp, #104]	@ 0x68
 8006836:	4654      	mov	r4, sl
 8006838:	2205      	movs	r2, #5
 800683a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800683e:	4853      	ldr	r0, [pc, #332]	@ (800698c <_vfiprintf_r+0x21c>)
 8006840:	f7f9 fce6 	bl	8000210 <memchr>
 8006844:	9a04      	ldr	r2, [sp, #16]
 8006846:	b9d8      	cbnz	r0, 8006880 <_vfiprintf_r+0x110>
 8006848:	06d1      	lsls	r1, r2, #27
 800684a:	bf44      	itt	mi
 800684c:	2320      	movmi	r3, #32
 800684e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006852:	0713      	lsls	r3, r2, #28
 8006854:	bf44      	itt	mi
 8006856:	232b      	movmi	r3, #43	@ 0x2b
 8006858:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800685c:	f89a 3000 	ldrb.w	r3, [sl]
 8006860:	2b2a      	cmp	r3, #42	@ 0x2a
 8006862:	d015      	beq.n	8006890 <_vfiprintf_r+0x120>
 8006864:	9a07      	ldr	r2, [sp, #28]
 8006866:	4654      	mov	r4, sl
 8006868:	2000      	movs	r0, #0
 800686a:	f04f 0c0a 	mov.w	ip, #10
 800686e:	4621      	mov	r1, r4
 8006870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006874:	3b30      	subs	r3, #48	@ 0x30
 8006876:	2b09      	cmp	r3, #9
 8006878:	d94b      	bls.n	8006912 <_vfiprintf_r+0x1a2>
 800687a:	b1b0      	cbz	r0, 80068aa <_vfiprintf_r+0x13a>
 800687c:	9207      	str	r2, [sp, #28]
 800687e:	e014      	b.n	80068aa <_vfiprintf_r+0x13a>
 8006880:	eba0 0308 	sub.w	r3, r0, r8
 8006884:	fa09 f303 	lsl.w	r3, r9, r3
 8006888:	4313      	orrs	r3, r2
 800688a:	9304      	str	r3, [sp, #16]
 800688c:	46a2      	mov	sl, r4
 800688e:	e7d2      	b.n	8006836 <_vfiprintf_r+0xc6>
 8006890:	9b03      	ldr	r3, [sp, #12]
 8006892:	1d19      	adds	r1, r3, #4
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	9103      	str	r1, [sp, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	bfbb      	ittet	lt
 800689c:	425b      	neglt	r3, r3
 800689e:	f042 0202 	orrlt.w	r2, r2, #2
 80068a2:	9307      	strge	r3, [sp, #28]
 80068a4:	9307      	strlt	r3, [sp, #28]
 80068a6:	bfb8      	it	lt
 80068a8:	9204      	strlt	r2, [sp, #16]
 80068aa:	7823      	ldrb	r3, [r4, #0]
 80068ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80068ae:	d10a      	bne.n	80068c6 <_vfiprintf_r+0x156>
 80068b0:	7863      	ldrb	r3, [r4, #1]
 80068b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80068b4:	d132      	bne.n	800691c <_vfiprintf_r+0x1ac>
 80068b6:	9b03      	ldr	r3, [sp, #12]
 80068b8:	1d1a      	adds	r2, r3, #4
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	9203      	str	r2, [sp, #12]
 80068be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068c2:	3402      	adds	r4, #2
 80068c4:	9305      	str	r3, [sp, #20]
 80068c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800699c <_vfiprintf_r+0x22c>
 80068ca:	7821      	ldrb	r1, [r4, #0]
 80068cc:	2203      	movs	r2, #3
 80068ce:	4650      	mov	r0, sl
 80068d0:	f7f9 fc9e 	bl	8000210 <memchr>
 80068d4:	b138      	cbz	r0, 80068e6 <_vfiprintf_r+0x176>
 80068d6:	9b04      	ldr	r3, [sp, #16]
 80068d8:	eba0 000a 	sub.w	r0, r0, sl
 80068dc:	2240      	movs	r2, #64	@ 0x40
 80068de:	4082      	lsls	r2, r0
 80068e0:	4313      	orrs	r3, r2
 80068e2:	3401      	adds	r4, #1
 80068e4:	9304      	str	r3, [sp, #16]
 80068e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ea:	4829      	ldr	r0, [pc, #164]	@ (8006990 <_vfiprintf_r+0x220>)
 80068ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068f0:	2206      	movs	r2, #6
 80068f2:	f7f9 fc8d 	bl	8000210 <memchr>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	d03f      	beq.n	800697a <_vfiprintf_r+0x20a>
 80068fa:	4b26      	ldr	r3, [pc, #152]	@ (8006994 <_vfiprintf_r+0x224>)
 80068fc:	bb1b      	cbnz	r3, 8006946 <_vfiprintf_r+0x1d6>
 80068fe:	9b03      	ldr	r3, [sp, #12]
 8006900:	3307      	adds	r3, #7
 8006902:	f023 0307 	bic.w	r3, r3, #7
 8006906:	3308      	adds	r3, #8
 8006908:	9303      	str	r3, [sp, #12]
 800690a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800690c:	443b      	add	r3, r7
 800690e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006910:	e76a      	b.n	80067e8 <_vfiprintf_r+0x78>
 8006912:	fb0c 3202 	mla	r2, ip, r2, r3
 8006916:	460c      	mov	r4, r1
 8006918:	2001      	movs	r0, #1
 800691a:	e7a8      	b.n	800686e <_vfiprintf_r+0xfe>
 800691c:	2300      	movs	r3, #0
 800691e:	3401      	adds	r4, #1
 8006920:	9305      	str	r3, [sp, #20]
 8006922:	4619      	mov	r1, r3
 8006924:	f04f 0c0a 	mov.w	ip, #10
 8006928:	4620      	mov	r0, r4
 800692a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800692e:	3a30      	subs	r2, #48	@ 0x30
 8006930:	2a09      	cmp	r2, #9
 8006932:	d903      	bls.n	800693c <_vfiprintf_r+0x1cc>
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0c6      	beq.n	80068c6 <_vfiprintf_r+0x156>
 8006938:	9105      	str	r1, [sp, #20]
 800693a:	e7c4      	b.n	80068c6 <_vfiprintf_r+0x156>
 800693c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006940:	4604      	mov	r4, r0
 8006942:	2301      	movs	r3, #1
 8006944:	e7f0      	b.n	8006928 <_vfiprintf_r+0x1b8>
 8006946:	ab03      	add	r3, sp, #12
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	462a      	mov	r2, r5
 800694c:	4b12      	ldr	r3, [pc, #72]	@ (8006998 <_vfiprintf_r+0x228>)
 800694e:	a904      	add	r1, sp, #16
 8006950:	4630      	mov	r0, r6
 8006952:	f7fd fdd1 	bl	80044f8 <_printf_float>
 8006956:	4607      	mov	r7, r0
 8006958:	1c78      	adds	r0, r7, #1
 800695a:	d1d6      	bne.n	800690a <_vfiprintf_r+0x19a>
 800695c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800695e:	07d9      	lsls	r1, r3, #31
 8006960:	d405      	bmi.n	800696e <_vfiprintf_r+0x1fe>
 8006962:	89ab      	ldrh	r3, [r5, #12]
 8006964:	059a      	lsls	r2, r3, #22
 8006966:	d402      	bmi.n	800696e <_vfiprintf_r+0x1fe>
 8006968:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800696a:	f7fe fc03 	bl	8005174 <__retarget_lock_release_recursive>
 800696e:	89ab      	ldrh	r3, [r5, #12]
 8006970:	065b      	lsls	r3, r3, #25
 8006972:	f53f af1f 	bmi.w	80067b4 <_vfiprintf_r+0x44>
 8006976:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006978:	e71e      	b.n	80067b8 <_vfiprintf_r+0x48>
 800697a:	ab03      	add	r3, sp, #12
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	462a      	mov	r2, r5
 8006980:	4b05      	ldr	r3, [pc, #20]	@ (8006998 <_vfiprintf_r+0x228>)
 8006982:	a904      	add	r1, sp, #16
 8006984:	4630      	mov	r0, r6
 8006986:	f7fe f84f 	bl	8004a28 <_printf_i>
 800698a:	e7e4      	b.n	8006956 <_vfiprintf_r+0x1e6>
 800698c:	08006f6e 	.word	0x08006f6e
 8006990:	08006f78 	.word	0x08006f78
 8006994:	080044f9 	.word	0x080044f9
 8006998:	0800674b 	.word	0x0800674b
 800699c:	08006f74 	.word	0x08006f74

080069a0 <__sflush_r>:
 80069a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a8:	0716      	lsls	r6, r2, #28
 80069aa:	4605      	mov	r5, r0
 80069ac:	460c      	mov	r4, r1
 80069ae:	d454      	bmi.n	8006a5a <__sflush_r+0xba>
 80069b0:	684b      	ldr	r3, [r1, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	dc02      	bgt.n	80069bc <__sflush_r+0x1c>
 80069b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	dd48      	ble.n	8006a4e <__sflush_r+0xae>
 80069bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069be:	2e00      	cmp	r6, #0
 80069c0:	d045      	beq.n	8006a4e <__sflush_r+0xae>
 80069c2:	2300      	movs	r3, #0
 80069c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80069c8:	682f      	ldr	r7, [r5, #0]
 80069ca:	6a21      	ldr	r1, [r4, #32]
 80069cc:	602b      	str	r3, [r5, #0]
 80069ce:	d030      	beq.n	8006a32 <__sflush_r+0x92>
 80069d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80069d2:	89a3      	ldrh	r3, [r4, #12]
 80069d4:	0759      	lsls	r1, r3, #29
 80069d6:	d505      	bpl.n	80069e4 <__sflush_r+0x44>
 80069d8:	6863      	ldr	r3, [r4, #4]
 80069da:	1ad2      	subs	r2, r2, r3
 80069dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80069de:	b10b      	cbz	r3, 80069e4 <__sflush_r+0x44>
 80069e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069e2:	1ad2      	subs	r2, r2, r3
 80069e4:	2300      	movs	r3, #0
 80069e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069e8:	6a21      	ldr	r1, [r4, #32]
 80069ea:	4628      	mov	r0, r5
 80069ec:	47b0      	blx	r6
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	89a3      	ldrh	r3, [r4, #12]
 80069f2:	d106      	bne.n	8006a02 <__sflush_r+0x62>
 80069f4:	6829      	ldr	r1, [r5, #0]
 80069f6:	291d      	cmp	r1, #29
 80069f8:	d82b      	bhi.n	8006a52 <__sflush_r+0xb2>
 80069fa:	4a2a      	ldr	r2, [pc, #168]	@ (8006aa4 <__sflush_r+0x104>)
 80069fc:	40ca      	lsrs	r2, r1
 80069fe:	07d6      	lsls	r6, r2, #31
 8006a00:	d527      	bpl.n	8006a52 <__sflush_r+0xb2>
 8006a02:	2200      	movs	r2, #0
 8006a04:	6062      	str	r2, [r4, #4]
 8006a06:	04d9      	lsls	r1, r3, #19
 8006a08:	6922      	ldr	r2, [r4, #16]
 8006a0a:	6022      	str	r2, [r4, #0]
 8006a0c:	d504      	bpl.n	8006a18 <__sflush_r+0x78>
 8006a0e:	1c42      	adds	r2, r0, #1
 8006a10:	d101      	bne.n	8006a16 <__sflush_r+0x76>
 8006a12:	682b      	ldr	r3, [r5, #0]
 8006a14:	b903      	cbnz	r3, 8006a18 <__sflush_r+0x78>
 8006a16:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a1a:	602f      	str	r7, [r5, #0]
 8006a1c:	b1b9      	cbz	r1, 8006a4e <__sflush_r+0xae>
 8006a1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a22:	4299      	cmp	r1, r3
 8006a24:	d002      	beq.n	8006a2c <__sflush_r+0x8c>
 8006a26:	4628      	mov	r0, r5
 8006a28:	f7ff f9fe 	bl	8005e28 <_free_r>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a30:	e00d      	b.n	8006a4e <__sflush_r+0xae>
 8006a32:	2301      	movs	r3, #1
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b0      	blx	r6
 8006a38:	4602      	mov	r2, r0
 8006a3a:	1c50      	adds	r0, r2, #1
 8006a3c:	d1c9      	bne.n	80069d2 <__sflush_r+0x32>
 8006a3e:	682b      	ldr	r3, [r5, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0c6      	beq.n	80069d2 <__sflush_r+0x32>
 8006a44:	2b1d      	cmp	r3, #29
 8006a46:	d001      	beq.n	8006a4c <__sflush_r+0xac>
 8006a48:	2b16      	cmp	r3, #22
 8006a4a:	d11e      	bne.n	8006a8a <__sflush_r+0xea>
 8006a4c:	602f      	str	r7, [r5, #0]
 8006a4e:	2000      	movs	r0, #0
 8006a50:	e022      	b.n	8006a98 <__sflush_r+0xf8>
 8006a52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a56:	b21b      	sxth	r3, r3
 8006a58:	e01b      	b.n	8006a92 <__sflush_r+0xf2>
 8006a5a:	690f      	ldr	r7, [r1, #16]
 8006a5c:	2f00      	cmp	r7, #0
 8006a5e:	d0f6      	beq.n	8006a4e <__sflush_r+0xae>
 8006a60:	0793      	lsls	r3, r2, #30
 8006a62:	680e      	ldr	r6, [r1, #0]
 8006a64:	bf08      	it	eq
 8006a66:	694b      	ldreq	r3, [r1, #20]
 8006a68:	600f      	str	r7, [r1, #0]
 8006a6a:	bf18      	it	ne
 8006a6c:	2300      	movne	r3, #0
 8006a6e:	eba6 0807 	sub.w	r8, r6, r7
 8006a72:	608b      	str	r3, [r1, #8]
 8006a74:	f1b8 0f00 	cmp.w	r8, #0
 8006a78:	dde9      	ble.n	8006a4e <__sflush_r+0xae>
 8006a7a:	6a21      	ldr	r1, [r4, #32]
 8006a7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a7e:	4643      	mov	r3, r8
 8006a80:	463a      	mov	r2, r7
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b0      	blx	r6
 8006a86:	2800      	cmp	r0, #0
 8006a88:	dc08      	bgt.n	8006a9c <__sflush_r+0xfc>
 8006a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a92:	81a3      	strh	r3, [r4, #12]
 8006a94:	f04f 30ff 	mov.w	r0, #4294967295
 8006a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a9c:	4407      	add	r7, r0
 8006a9e:	eba8 0800 	sub.w	r8, r8, r0
 8006aa2:	e7e7      	b.n	8006a74 <__sflush_r+0xd4>
 8006aa4:	20400001 	.word	0x20400001

08006aa8 <_fflush_r>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	690b      	ldr	r3, [r1, #16]
 8006aac:	4605      	mov	r5, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	b913      	cbnz	r3, 8006ab8 <_fflush_r+0x10>
 8006ab2:	2500      	movs	r5, #0
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	b118      	cbz	r0, 8006ac2 <_fflush_r+0x1a>
 8006aba:	6a03      	ldr	r3, [r0, #32]
 8006abc:	b90b      	cbnz	r3, 8006ac2 <_fflush_r+0x1a>
 8006abe:	f7fe f95d 	bl	8004d7c <__sinit>
 8006ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f3      	beq.n	8006ab2 <_fflush_r+0xa>
 8006aca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006acc:	07d0      	lsls	r0, r2, #31
 8006ace:	d404      	bmi.n	8006ada <_fflush_r+0x32>
 8006ad0:	0599      	lsls	r1, r3, #22
 8006ad2:	d402      	bmi.n	8006ada <_fflush_r+0x32>
 8006ad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ad6:	f7fe fb4c 	bl	8005172 <__retarget_lock_acquire_recursive>
 8006ada:	4628      	mov	r0, r5
 8006adc:	4621      	mov	r1, r4
 8006ade:	f7ff ff5f 	bl	80069a0 <__sflush_r>
 8006ae2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ae4:	07da      	lsls	r2, r3, #31
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	d4e4      	bmi.n	8006ab4 <_fflush_r+0xc>
 8006aea:	89a3      	ldrh	r3, [r4, #12]
 8006aec:	059b      	lsls	r3, r3, #22
 8006aee:	d4e1      	bmi.n	8006ab4 <_fflush_r+0xc>
 8006af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006af2:	f7fe fb3f 	bl	8005174 <__retarget_lock_release_recursive>
 8006af6:	e7dd      	b.n	8006ab4 <_fflush_r+0xc>

08006af8 <__swhatbuf_r>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	460c      	mov	r4, r1
 8006afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b00:	2900      	cmp	r1, #0
 8006b02:	b096      	sub	sp, #88	@ 0x58
 8006b04:	4615      	mov	r5, r2
 8006b06:	461e      	mov	r6, r3
 8006b08:	da0d      	bge.n	8006b26 <__swhatbuf_r+0x2e>
 8006b0a:	89a3      	ldrh	r3, [r4, #12]
 8006b0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b10:	f04f 0100 	mov.w	r1, #0
 8006b14:	bf14      	ite	ne
 8006b16:	2340      	movne	r3, #64	@ 0x40
 8006b18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	6031      	str	r1, [r6, #0]
 8006b20:	602b      	str	r3, [r5, #0]
 8006b22:	b016      	add	sp, #88	@ 0x58
 8006b24:	bd70      	pop	{r4, r5, r6, pc}
 8006b26:	466a      	mov	r2, sp
 8006b28:	f000 f848 	bl	8006bbc <_fstat_r>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	dbec      	blt.n	8006b0a <__swhatbuf_r+0x12>
 8006b30:	9901      	ldr	r1, [sp, #4]
 8006b32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b3a:	4259      	negs	r1, r3
 8006b3c:	4159      	adcs	r1, r3
 8006b3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b42:	e7eb      	b.n	8006b1c <__swhatbuf_r+0x24>

08006b44 <__smakebuf_r>:
 8006b44:	898b      	ldrh	r3, [r1, #12]
 8006b46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b48:	079d      	lsls	r5, r3, #30
 8006b4a:	4606      	mov	r6, r0
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	d507      	bpl.n	8006b60 <__smakebuf_r+0x1c>
 8006b50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	6123      	str	r3, [r4, #16]
 8006b58:	2301      	movs	r3, #1
 8006b5a:	6163      	str	r3, [r4, #20]
 8006b5c:	b003      	add	sp, #12
 8006b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b60:	ab01      	add	r3, sp, #4
 8006b62:	466a      	mov	r2, sp
 8006b64:	f7ff ffc8 	bl	8006af8 <__swhatbuf_r>
 8006b68:	9f00      	ldr	r7, [sp, #0]
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	4630      	mov	r0, r6
 8006b70:	f7ff f9ce 	bl	8005f10 <_malloc_r>
 8006b74:	b948      	cbnz	r0, 8006b8a <__smakebuf_r+0x46>
 8006b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b7a:	059a      	lsls	r2, r3, #22
 8006b7c:	d4ee      	bmi.n	8006b5c <__smakebuf_r+0x18>
 8006b7e:	f023 0303 	bic.w	r3, r3, #3
 8006b82:	f043 0302 	orr.w	r3, r3, #2
 8006b86:	81a3      	strh	r3, [r4, #12]
 8006b88:	e7e2      	b.n	8006b50 <__smakebuf_r+0xc>
 8006b8a:	89a3      	ldrh	r3, [r4, #12]
 8006b8c:	6020      	str	r0, [r4, #0]
 8006b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b92:	81a3      	strh	r3, [r4, #12]
 8006b94:	9b01      	ldr	r3, [sp, #4]
 8006b96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b9a:	b15b      	cbz	r3, 8006bb4 <__smakebuf_r+0x70>
 8006b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f000 f81d 	bl	8006be0 <_isatty_r>
 8006ba6:	b128      	cbz	r0, 8006bb4 <__smakebuf_r+0x70>
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	f023 0303 	bic.w	r3, r3, #3
 8006bae:	f043 0301 	orr.w	r3, r3, #1
 8006bb2:	81a3      	strh	r3, [r4, #12]
 8006bb4:	89a3      	ldrh	r3, [r4, #12]
 8006bb6:	431d      	orrs	r5, r3
 8006bb8:	81a5      	strh	r5, [r4, #12]
 8006bba:	e7cf      	b.n	8006b5c <__smakebuf_r+0x18>

08006bbc <_fstat_r>:
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	4d07      	ldr	r5, [pc, #28]	@ (8006bdc <_fstat_r+0x20>)
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	602b      	str	r3, [r5, #0]
 8006bca:	f7fa fdbc 	bl	8001746 <_fstat>
 8006bce:	1c43      	adds	r3, r0, #1
 8006bd0:	d102      	bne.n	8006bd8 <_fstat_r+0x1c>
 8006bd2:	682b      	ldr	r3, [r5, #0]
 8006bd4:	b103      	cbz	r3, 8006bd8 <_fstat_r+0x1c>
 8006bd6:	6023      	str	r3, [r4, #0]
 8006bd8:	bd38      	pop	{r3, r4, r5, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000410 	.word	0x20000410

08006be0 <_isatty_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4d06      	ldr	r5, [pc, #24]	@ (8006bfc <_isatty_r+0x1c>)
 8006be4:	2300      	movs	r3, #0
 8006be6:	4604      	mov	r4, r0
 8006be8:	4608      	mov	r0, r1
 8006bea:	602b      	str	r3, [r5, #0]
 8006bec:	f7fa fdbb 	bl	8001766 <_isatty>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d102      	bne.n	8006bfa <_isatty_r+0x1a>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	b103      	cbz	r3, 8006bfa <_isatty_r+0x1a>
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	20000410 	.word	0x20000410

08006c00 <_sbrk_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4d06      	ldr	r5, [pc, #24]	@ (8006c1c <_sbrk_r+0x1c>)
 8006c04:	2300      	movs	r3, #0
 8006c06:	4604      	mov	r4, r0
 8006c08:	4608      	mov	r0, r1
 8006c0a:	602b      	str	r3, [r5, #0]
 8006c0c:	f7fa fdc4 	bl	8001798 <_sbrk>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d102      	bne.n	8006c1a <_sbrk_r+0x1a>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	b103      	cbz	r3, 8006c1a <_sbrk_r+0x1a>
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	20000410 	.word	0x20000410

08006c20 <memcpy>:
 8006c20:	440a      	add	r2, r1
 8006c22:	4291      	cmp	r1, r2
 8006c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c28:	d100      	bne.n	8006c2c <memcpy+0xc>
 8006c2a:	4770      	bx	lr
 8006c2c:	b510      	push	{r4, lr}
 8006c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c36:	4291      	cmp	r1, r2
 8006c38:	d1f9      	bne.n	8006c2e <memcpy+0xe>
 8006c3a:	bd10      	pop	{r4, pc}

08006c3c <__assert_func>:
 8006c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c3e:	4614      	mov	r4, r2
 8006c40:	461a      	mov	r2, r3
 8006c42:	4b09      	ldr	r3, [pc, #36]	@ (8006c68 <__assert_func+0x2c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4605      	mov	r5, r0
 8006c48:	68d8      	ldr	r0, [r3, #12]
 8006c4a:	b14c      	cbz	r4, 8006c60 <__assert_func+0x24>
 8006c4c:	4b07      	ldr	r3, [pc, #28]	@ (8006c6c <__assert_func+0x30>)
 8006c4e:	9100      	str	r1, [sp, #0]
 8006c50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c54:	4906      	ldr	r1, [pc, #24]	@ (8006c70 <__assert_func+0x34>)
 8006c56:	462b      	mov	r3, r5
 8006c58:	f000 f842 	bl	8006ce0 <fiprintf>
 8006c5c:	f000 f852 	bl	8006d04 <abort>
 8006c60:	4b04      	ldr	r3, [pc, #16]	@ (8006c74 <__assert_func+0x38>)
 8006c62:	461c      	mov	r4, r3
 8006c64:	e7f3      	b.n	8006c4e <__assert_func+0x12>
 8006c66:	bf00      	nop
 8006c68:	20000018 	.word	0x20000018
 8006c6c:	08006f89 	.word	0x08006f89
 8006c70:	08006f96 	.word	0x08006f96
 8006c74:	08006fc4 	.word	0x08006fc4

08006c78 <_calloc_r>:
 8006c78:	b570      	push	{r4, r5, r6, lr}
 8006c7a:	fba1 5402 	umull	r5, r4, r1, r2
 8006c7e:	b934      	cbnz	r4, 8006c8e <_calloc_r+0x16>
 8006c80:	4629      	mov	r1, r5
 8006c82:	f7ff f945 	bl	8005f10 <_malloc_r>
 8006c86:	4606      	mov	r6, r0
 8006c88:	b928      	cbnz	r0, 8006c96 <_calloc_r+0x1e>
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	bd70      	pop	{r4, r5, r6, pc}
 8006c8e:	220c      	movs	r2, #12
 8006c90:	6002      	str	r2, [r0, #0]
 8006c92:	2600      	movs	r6, #0
 8006c94:	e7f9      	b.n	8006c8a <_calloc_r+0x12>
 8006c96:	462a      	mov	r2, r5
 8006c98:	4621      	mov	r1, r4
 8006c9a:	f7fe f9ed 	bl	8005078 <memset>
 8006c9e:	e7f4      	b.n	8006c8a <_calloc_r+0x12>

08006ca0 <__ascii_mbtowc>:
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	b901      	cbnz	r1, 8006ca6 <__ascii_mbtowc+0x6>
 8006ca4:	a901      	add	r1, sp, #4
 8006ca6:	b142      	cbz	r2, 8006cba <__ascii_mbtowc+0x1a>
 8006ca8:	b14b      	cbz	r3, 8006cbe <__ascii_mbtowc+0x1e>
 8006caa:	7813      	ldrb	r3, [r2, #0]
 8006cac:	600b      	str	r3, [r1, #0]
 8006cae:	7812      	ldrb	r2, [r2, #0]
 8006cb0:	1e10      	subs	r0, r2, #0
 8006cb2:	bf18      	it	ne
 8006cb4:	2001      	movne	r0, #1
 8006cb6:	b002      	add	sp, #8
 8006cb8:	4770      	bx	lr
 8006cba:	4610      	mov	r0, r2
 8006cbc:	e7fb      	b.n	8006cb6 <__ascii_mbtowc+0x16>
 8006cbe:	f06f 0001 	mvn.w	r0, #1
 8006cc2:	e7f8      	b.n	8006cb6 <__ascii_mbtowc+0x16>

08006cc4 <__ascii_wctomb>:
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	4608      	mov	r0, r1
 8006cc8:	b141      	cbz	r1, 8006cdc <__ascii_wctomb+0x18>
 8006cca:	2aff      	cmp	r2, #255	@ 0xff
 8006ccc:	d904      	bls.n	8006cd8 <__ascii_wctomb+0x14>
 8006cce:	228a      	movs	r2, #138	@ 0x8a
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd6:	4770      	bx	lr
 8006cd8:	700a      	strb	r2, [r1, #0]
 8006cda:	2001      	movs	r0, #1
 8006cdc:	4770      	bx	lr
	...

08006ce0 <fiprintf>:
 8006ce0:	b40e      	push	{r1, r2, r3}
 8006ce2:	b503      	push	{r0, r1, lr}
 8006ce4:	4601      	mov	r1, r0
 8006ce6:	ab03      	add	r3, sp, #12
 8006ce8:	4805      	ldr	r0, [pc, #20]	@ (8006d00 <fiprintf+0x20>)
 8006cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cee:	6800      	ldr	r0, [r0, #0]
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	f7ff fd3d 	bl	8006770 <_vfiprintf_r>
 8006cf6:	b002      	add	sp, #8
 8006cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cfc:	b003      	add	sp, #12
 8006cfe:	4770      	bx	lr
 8006d00:	20000018 	.word	0x20000018

08006d04 <abort>:
 8006d04:	b508      	push	{r3, lr}
 8006d06:	2006      	movs	r0, #6
 8006d08:	f000 f82c 	bl	8006d64 <raise>
 8006d0c:	2001      	movs	r0, #1
 8006d0e:	f7fa fcca 	bl	80016a6 <_exit>

08006d12 <_raise_r>:
 8006d12:	291f      	cmp	r1, #31
 8006d14:	b538      	push	{r3, r4, r5, lr}
 8006d16:	4605      	mov	r5, r0
 8006d18:	460c      	mov	r4, r1
 8006d1a:	d904      	bls.n	8006d26 <_raise_r+0x14>
 8006d1c:	2316      	movs	r3, #22
 8006d1e:	6003      	str	r3, [r0, #0]
 8006d20:	f04f 30ff 	mov.w	r0, #4294967295
 8006d24:	bd38      	pop	{r3, r4, r5, pc}
 8006d26:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006d28:	b112      	cbz	r2, 8006d30 <_raise_r+0x1e>
 8006d2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d2e:	b94b      	cbnz	r3, 8006d44 <_raise_r+0x32>
 8006d30:	4628      	mov	r0, r5
 8006d32:	f000 f831 	bl	8006d98 <_getpid_r>
 8006d36:	4622      	mov	r2, r4
 8006d38:	4601      	mov	r1, r0
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d40:	f000 b818 	b.w	8006d74 <_kill_r>
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d00a      	beq.n	8006d5e <_raise_r+0x4c>
 8006d48:	1c59      	adds	r1, r3, #1
 8006d4a:	d103      	bne.n	8006d54 <_raise_r+0x42>
 8006d4c:	2316      	movs	r3, #22
 8006d4e:	6003      	str	r3, [r0, #0]
 8006d50:	2001      	movs	r0, #1
 8006d52:	e7e7      	b.n	8006d24 <_raise_r+0x12>
 8006d54:	2100      	movs	r1, #0
 8006d56:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	4798      	blx	r3
 8006d5e:	2000      	movs	r0, #0
 8006d60:	e7e0      	b.n	8006d24 <_raise_r+0x12>
	...

08006d64 <raise>:
 8006d64:	4b02      	ldr	r3, [pc, #8]	@ (8006d70 <raise+0xc>)
 8006d66:	4601      	mov	r1, r0
 8006d68:	6818      	ldr	r0, [r3, #0]
 8006d6a:	f7ff bfd2 	b.w	8006d12 <_raise_r>
 8006d6e:	bf00      	nop
 8006d70:	20000018 	.word	0x20000018

08006d74 <_kill_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4d07      	ldr	r5, [pc, #28]	@ (8006d94 <_kill_r+0x20>)
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	4611      	mov	r1, r2
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	f7fa fc80 	bl	8001686 <_kill>
 8006d86:	1c43      	adds	r3, r0, #1
 8006d88:	d102      	bne.n	8006d90 <_kill_r+0x1c>
 8006d8a:	682b      	ldr	r3, [r5, #0]
 8006d8c:	b103      	cbz	r3, 8006d90 <_kill_r+0x1c>
 8006d8e:	6023      	str	r3, [r4, #0]
 8006d90:	bd38      	pop	{r3, r4, r5, pc}
 8006d92:	bf00      	nop
 8006d94:	20000410 	.word	0x20000410

08006d98 <_getpid_r>:
 8006d98:	f7fa bc6d 	b.w	8001676 <_getpid>

08006d9c <_init>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	bf00      	nop
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr

08006da8 <_fini>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	bf00      	nop
 8006dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dae:	bc08      	pop	{r3}
 8006db0:	469e      	mov	lr, r3
 8006db2:	4770      	bx	lr
