
mpu6050_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009140  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08009310  08009310  0000a310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009754  08009754  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009754  08009754  0000a754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800975c  0800975c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800975c  0800975c  0000a75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009760  08009760  0000a760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009764  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001d4  08009938  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08009938  0000b4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef08  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233a  00000000  00000000  0001a10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0001c448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000936  00000000  00000000  0001d038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002659b  00000000  00000000  0001d96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112ef  00000000  00000000  00043f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e93ac  00000000  00000000  000551f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e5a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040fc  00000000  00000000  0013e5e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001426e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080092f8 	.word	0x080092f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	080092f8 	.word	0x080092f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <MPU6050_DMA_Init>:
/* Sensitivity constants for FS = ±2g and ±250 dps (as in init) */
static const float ACC_LSB_PER_G = 16384.0f;    // ±2g
static const float GYRO_LSB_PER_DPS = 131.0f;   // ±250°/s

int MPU6050_DMA_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af04      	add	r7, sp, #16
    uint8_t who = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef hs;

    /* read WHO_AM_I (blocking) */
    hs = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &who, 1, 200);
 8000f1e:	23c8      	movs	r3, #200	@ 0xc8
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	2301      	movs	r3, #1
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	1dbb      	adds	r3, r7, #6
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	2275      	movs	r2, #117	@ 0x75
 8000f2e:	21d0      	movs	r1, #208	@ 0xd0
 8000f30:	4841      	ldr	r0, [pc, #260]	@ (8001038 <MPU6050_DMA_Init+0x124>)
 8000f32:	f001 fee5 	bl	8002d00 <HAL_I2C_Mem_Read>
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
    if (hs != HAL_OK) return -1;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <MPU6050_DMA_Init+0x32>
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	e073      	b.n	800102e <MPU6050_DMA_Init+0x11a>
    if (who != 0x68) return -2;
 8000f46:	79bb      	ldrb	r3, [r7, #6]
 8000f48:	2b68      	cmp	r3, #104	@ 0x68
 8000f4a:	d002      	beq.n	8000f52 <MPU6050_DMA_Init+0x3e>
 8000f4c:	f06f 0301 	mvn.w	r3, #1
 8000f50:	e06d      	b.n	800102e <MPU6050_DMA_Init+0x11a>

    /* Wake up device */
    uint8_t data;
    data = 0x00; // clear sleep bit
 8000f52:	2300      	movs	r3, #0
 8000f54:	717b      	strb	r3, [r7, #5]
    hs = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 200);
 8000f56:	23c8      	movs	r3, #200	@ 0xc8
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	1d7b      	adds	r3, r7, #5
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2301      	movs	r3, #1
 8000f64:	226b      	movs	r2, #107	@ 0x6b
 8000f66:	21d0      	movs	r1, #208	@ 0xd0
 8000f68:	4833      	ldr	r0, [pc, #204]	@ (8001038 <MPU6050_DMA_Init+0x124>)
 8000f6a:	f001 fdb5 	bl	8002ad8 <HAL_I2C_Mem_Write>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
    if (hs != HAL_OK) return -3;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d002      	beq.n	8000f7e <MPU6050_DMA_Init+0x6a>
 8000f78:	f06f 0302 	mvn.w	r3, #2
 8000f7c:	e057      	b.n	800102e <MPU6050_DMA_Init+0x11a>
    HAL_Delay(20);
 8000f7e:	2014      	movs	r0, #20
 8000f80:	f000 fe78 	bl	8001c74 <HAL_Delay>

    /* sample rate divider for 1kHz sample: SMPLRT_DIV = 7 -> 8k/(1+7)=1k */
    data = 0x07;
 8000f84:	2307      	movs	r3, #7
 8000f86:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_SMPRT_DIV, I2C_MEMADD_SIZE_8BIT, &data, 1, 200);
 8000f88:	23c8      	movs	r3, #200	@ 0xc8
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	1d7b      	adds	r3, r7, #5
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	2219      	movs	r2, #25
 8000f98:	21d0      	movs	r1, #208	@ 0xd0
 8000f9a:	4827      	ldr	r0, [pc, #156]	@ (8001038 <MPU6050_DMA_Init+0x124>)
 8000f9c:	f001 fd9c 	bl	8002ad8 <HAL_I2C_Mem_Write>

    /* config: DLPF off */
    data = 0x00;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 200);
 8000fa4:	23c8      	movs	r3, #200	@ 0xc8
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	1d7b      	adds	r3, r7, #5
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	221a      	movs	r2, #26
 8000fb4:	21d0      	movs	r1, #208	@ 0xd0
 8000fb6:	4820      	ldr	r0, [pc, #128]	@ (8001038 <MPU6050_DMA_Init+0x124>)
 8000fb8:	f001 fd8e 	bl	8002ad8 <HAL_I2C_Mem_Write>

    /* gyro FS = ±250 dps */
    data = 0x00;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 200);
 8000fc0:	23c8      	movs	r3, #200	@ 0xc8
 8000fc2:	9302      	str	r3, [sp, #8]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	9301      	str	r3, [sp, #4]
 8000fc8:	1d7b      	adds	r3, r7, #5
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	221b      	movs	r2, #27
 8000fd0:	21d0      	movs	r1, #208	@ 0xd0
 8000fd2:	4819      	ldr	r0, [pc, #100]	@ (8001038 <MPU6050_DMA_Init+0x124>)
 8000fd4:	f001 fd80 	bl	8002ad8 <HAL_I2C_Mem_Write>

    /* accel FS = ±2g */
    data = 0x00;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 200);
 8000fdc:	23c8      	movs	r3, #200	@ 0xc8
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	1d7b      	adds	r3, r7, #5
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	221c      	movs	r2, #28
 8000fec:	21d0      	movs	r1, #208	@ 0xd0
 8000fee:	4812      	ldr	r0, [pc, #72]	@ (8001038 <MPU6050_DMA_Init+0x124>)
 8000ff0:	f001 fd72 	bl	8002ad8 <HAL_I2C_Mem_Write>

    /* enable Data Ready interrupt (optional) */
    data = 0x01; // data ready
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_INT_ENABLE, I2C_MEMADD_SIZE_8BIT, &data, 1, 200);
 8000ff8:	23c8      	movs	r3, #200	@ 0xc8
 8000ffa:	9302      	str	r3, [sp, #8]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	1d7b      	adds	r3, r7, #5
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2301      	movs	r3, #1
 8001006:	2238      	movs	r2, #56	@ 0x38
 8001008:	21d0      	movs	r1, #208	@ 0xd0
 800100a:	480b      	ldr	r0, [pc, #44]	@ (8001038 <MPU6050_DMA_Init+0x124>)
 800100c:	f001 fd64 	bl	8002ad8 <HAL_I2C_Mem_Write>

    HAL_Delay(10);
 8001010:	200a      	movs	r0, #10
 8001012:	f000 fe2f 	bl	8001c74 <HAL_Delay>
    mpu_dma_done = 0;
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <MPU6050_DMA_Init+0x128>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
    mpu_dma_error = 0;
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <MPU6050_DMA_Init+0x12c>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
    memset(&mpu_last_data, 0, sizeof(mpu_last_data));
 8001022:	222c      	movs	r2, #44	@ 0x2c
 8001024:	2100      	movs	r1, #0
 8001026:	4807      	ldr	r0, [pc, #28]	@ (8001044 <MPU6050_DMA_Init+0x130>)
 8001028:	f006 fad2 	bl	80075d0 <memset>

    return 0;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000022c 	.word	0x2000022c
 800103c:	200001fe 	.word	0x200001fe
 8001040:	200001ff 	.word	0x200001ff
 8001044:	20000200 	.word	0x20000200

08001048 <MPU6050_DMA_StartRead>:

HAL_StatusTypeDef MPU6050_DMA_StartRead(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af02      	add	r7, sp, #8
    mpu_dma_done = 0;
 800104e:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <MPU6050_DMA_StartRead+0x30>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
    mpu_dma_error = 0;
 8001054:	4b09      	ldr	r3, [pc, #36]	@ (800107c <MPU6050_DMA_StartRead+0x34>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
    /* Non-blocking DMA read 14 bytes */
    return HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, mpu_dma_buf, 14);
 800105a:	230e      	movs	r3, #14
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <MPU6050_DMA_StartRead+0x38>)
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	223b      	movs	r2, #59	@ 0x3b
 8001066:	21d0      	movs	r1, #208	@ 0xd0
 8001068:	4806      	ldr	r0, [pc, #24]	@ (8001084 <MPU6050_DMA_StartRead+0x3c>)
 800106a:	f001 ff63 	bl	8002f34 <HAL_I2C_Mem_Read_DMA>
 800106e:	4603      	mov	r3, r0
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200001fe 	.word	0x200001fe
 800107c:	200001ff 	.word	0x200001ff
 8001080:	200001f0 	.word	0x200001f0
 8001084:	2000022c 	.word	0x2000022c

08001088 <MPU6050_DMA_DataReady>:

uint8_t MPU6050_DMA_DataReady(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
    return mpu_dma_done;
 800108c:	4b03      	ldr	r3, [pc, #12]	@ (800109c <MPU6050_DMA_DataReady+0x14>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b2db      	uxtb	r3, r3
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	200001fe 	.word	0x200001fe

080010a0 <MPU6050_DMA_ProcessData>:

void MPU6050_DMA_ProcessData(MPU6050_Data_t *out)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    if (!mpu_dma_done) return;
 80010a8:	4b64      	ldr	r3, [pc, #400]	@ (800123c <MPU6050_DMA_ProcessData+0x19c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 80c0 	beq.w	8001234 <MPU6050_DMA_ProcessData+0x194>

    /* copy raw */
    out->acc_x_raw = (int16_t)((mpu_dma_buf[0] << 8) | mpu_dma_buf[1]);
 80010b4:	4b62      	ldr	r3, [pc, #392]	@ (8001240 <MPU6050_DMA_ProcessData+0x1a0>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	4b60      	ldr	r3, [pc, #384]	@ (8001240 <MPU6050_DMA_ProcessData+0x1a0>)
 80010c0:	785b      	ldrb	r3, [r3, #1]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	801a      	strh	r2, [r3, #0]
    out->acc_y_raw = (int16_t)((mpu_dma_buf[2] << 8) | mpu_dma_buf[3]);
 80010cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001240 <MPU6050_DMA_ProcessData+0x1a0>)
 80010ce:	789b      	ldrb	r3, [r3, #2]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001240 <MPU6050_DMA_ProcessData+0x1a0>)
 80010d8:	78db      	ldrb	r3, [r3, #3]
 80010da:	b21b      	sxth	r3, r3
 80010dc:	4313      	orrs	r3, r2
 80010de:	b21a      	sxth	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	805a      	strh	r2, [r3, #2]
    out->acc_z_raw = (int16_t)((mpu_dma_buf[4] << 8) | mpu_dma_buf[5]);
 80010e4:	4b56      	ldr	r3, [pc, #344]	@ (8001240 <MPU6050_DMA_ProcessData+0x1a0>)
 80010e6:	791b      	ldrb	r3, [r3, #4]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	4b54      	ldr	r3, [pc, #336]	@ (8001240 <MPU6050_DMA_ProcessData+0x1a0>)
 80010f0:	795b      	ldrb	r3, [r3, #5]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	809a      	strh	r2, [r3, #4]
    out->temp_raw  = (int16_t)((mpu_dma_buf[6] << 8) | mpu_dma_buf[7]);
 80010fc:	4b50      	ldr	r3, [pc, #320]	@ (8001240 <MPU6050_DMA_ProcessData+0x1a0>)
 80010fe:	799b      	ldrb	r3, [r3, #6]
 8001100:	b21b      	sxth	r3, r3
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b4e      	ldr	r3, [pc, #312]	@ (8001240 <MPU6050_DMA_ProcessData+0x1a0>)
 8001108:	79db      	ldrb	r3, [r3, #7]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21a      	sxth	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	80da      	strh	r2, [r3, #6]
    out->gyro_x_raw = (int16_t)((mpu_dma_buf[8] << 8) | mpu_dma_buf[9]);
 8001114:	4b4a      	ldr	r3, [pc, #296]	@ (8001240 <MPU6050_DMA_ProcessData+0x1a0>)
 8001116:	7a1b      	ldrb	r3, [r3, #8]
 8001118:	b21b      	sxth	r3, r3
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	4b48      	ldr	r3, [pc, #288]	@ (8001240 <MPU6050_DMA_ProcessData+0x1a0>)
 8001120:	7a5b      	ldrb	r3, [r3, #9]
 8001122:	b21b      	sxth	r3, r3
 8001124:	4313      	orrs	r3, r2
 8001126:	b21a      	sxth	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	811a      	strh	r2, [r3, #8]
    out->gyro_y_raw = (int16_t)((mpu_dma_buf[10] << 8) | mpu_dma_buf[11]);
 800112c:	4b44      	ldr	r3, [pc, #272]	@ (8001240 <MPU6050_DMA_ProcessData+0x1a0>)
 800112e:	7a9b      	ldrb	r3, [r3, #10]
 8001130:	b21b      	sxth	r3, r3
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21a      	sxth	r2, r3
 8001136:	4b42      	ldr	r3, [pc, #264]	@ (8001240 <MPU6050_DMA_ProcessData+0x1a0>)
 8001138:	7adb      	ldrb	r3, [r3, #11]
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21a      	sxth	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	815a      	strh	r2, [r3, #10]
    out->gyro_z_raw = (int16_t)((mpu_dma_buf[12] << 8) | mpu_dma_buf[13]);
 8001144:	4b3e      	ldr	r3, [pc, #248]	@ (8001240 <MPU6050_DMA_ProcessData+0x1a0>)
 8001146:	7b1b      	ldrb	r3, [r3, #12]
 8001148:	b21b      	sxth	r3, r3
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	b21a      	sxth	r2, r3
 800114e:	4b3c      	ldr	r3, [pc, #240]	@ (8001240 <MPU6050_DMA_ProcessData+0x1a0>)
 8001150:	7b5b      	ldrb	r3, [r3, #13]
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b21a      	sxth	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	819a      	strh	r2, [r3, #12]

    /* convert */
    out->acc_x_g = ((float)out->acc_x_raw) / ACC_LSB_PER_G;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116a:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001244 <MPU6050_DMA_ProcessData+0x1a4>
 800116e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	edc3 7a04 	vstr	s15, [r3, #16]
    out->acc_y_g = ((float)out->acc_y_raw) / ACC_LSB_PER_G;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001186:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8001244 <MPU6050_DMA_ProcessData+0x1a4>
 800118a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	edc3 7a05 	vstr	s15, [r3, #20]
    out->acc_z_g = ((float)out->acc_z_raw) / ACC_LSB_PER_G;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a2:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001244 <MPU6050_DMA_ProcessData+0x1a4>
 80011a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	edc3 7a06 	vstr	s15, [r3, #24]

    out->temperature_c = ((float)out->temp_raw) / 340.0f + 36.53f;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011be:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001248 <MPU6050_DMA_ProcessData+0x1a8>
 80011c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c6:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800124c <MPU6050_DMA_ProcessData+0x1ac>
 80011ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edc3 7a07 	vstr	s15, [r3, #28]

    out->gyro_x_dps = ((float)out->gyro_x_raw) / GYRO_LSB_PER_DPS;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e2:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001250 <MPU6050_DMA_ProcessData+0x1b0>
 80011e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	edc3 7a08 	vstr	s15, [r3, #32]
    out->gyro_y_dps = ((float)out->gyro_y_raw) / GYRO_LSB_PER_DPS;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fe:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001250 <MPU6050_DMA_ProcessData+0x1b0>
 8001202:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    out->gyro_z_dps = ((float)out->gyro_z_raw) / GYRO_LSB_PER_DPS;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121a:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001250 <MPU6050_DMA_ProcessData+0x1b0>
 800121e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    /* store last */
    memcpy((void*)&mpu_last_data, out, sizeof(MPU6050_Data_t));
 8001228:	222c      	movs	r2, #44	@ 0x2c
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4809      	ldr	r0, [pc, #36]	@ (8001254 <MPU6050_DMA_ProcessData+0x1b4>)
 800122e:	f006 fa4e 	bl	80076ce <memcpy>
 8001232:	e000      	b.n	8001236 <MPU6050_DMA_ProcessData+0x196>
    if (!mpu_dma_done) return;
 8001234:	bf00      	nop

    /* clear done flag if you want single-shot; keep it set for consumer to read */
    // mpu_dma_done = 0; // do not clear here; consumer may clear or call StartRead again
}
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200001fe 	.word	0x200001fe
 8001240:	200001f0 	.word	0x200001f0
 8001244:	46800000 	.word	0x46800000
 8001248:	43aa0000 	.word	0x43aa0000
 800124c:	42121eb8 	.word	0x42121eb8
 8001250:	43030000 	.word	0x43030000
 8001254:	20000200 	.word	0x20000200

08001258 <MPU6050_DMA_I2C_RxCpltCallback>:
    return (MPU6050_Data_t *)&mpu_last_data;
}

/* This function should be called from HAL_I2C_MemRxCpltCallback in stm32xx_hal_msp.c or weak callback */
void MPU6050_DMA_I2C_RxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    if (hi2c == &hi2c1) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a06      	ldr	r2, [pc, #24]	@ (800127c <MPU6050_DMA_I2C_RxCpltCallback+0x24>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d102      	bne.n	800126e <MPU6050_DMA_I2C_RxCpltCallback+0x16>
        mpu_dma_done = 1;
 8001268:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <MPU6050_DMA_I2C_RxCpltCallback+0x28>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
    }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	2000022c 	.word	0x2000022c
 8001280:	200001fe 	.word	0x200001fe

08001284 <MPU6050_DMA_I2C_ErrorCallback>:

/* Optional: error callback */
void MPU6050_DMA_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
    if (hi2c == &hi2c1) {
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a07      	ldr	r2, [pc, #28]	@ (80012ac <MPU6050_DMA_I2C_ErrorCallback+0x28>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d105      	bne.n	80012a0 <MPU6050_DMA_I2C_ErrorCallback+0x1c>
        mpu_dma_error = 1;
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <MPU6050_DMA_I2C_ErrorCallback+0x2c>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
        mpu_dma_done = 0;
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <MPU6050_DMA_I2C_ErrorCallback+0x30>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
    }
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	2000022c 	.word	0x2000022c
 80012b0:	200001ff 	.word	0x200001ff
 80012b4:	200001fe 	.word	0x200001fe

080012b8 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
    uint8_t c = (uint8_t)ch;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart1, &c, 1, HAL_MAX_DELAY);
 80012c6:	f107 010f 	add.w	r1, r7, #15
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	2201      	movs	r2, #1
 80012d0:	4803      	ldr	r0, [pc, #12]	@ (80012e0 <__io_putchar+0x28>)
 80012d2:	f004 fe65 	bl	8005fa0 <HAL_UART_Transmit>
    return ch;
 80012d6:	687b      	ldr	r3, [r7, #4]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200002e0 	.word	0x200002e0

080012e4 <HAL_I2C_MemRxCpltCallback>:
	return __io_putchar(ch);
}

/* Callback from HAL when I2C DMA complete (forward to driver) */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
    MPU6050_DMA_I2C_RxCpltCallback(hi2c);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ffb3 	bl	8001258 <MPU6050_DMA_I2C_RxCpltCallback>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
    MPU6050_DMA_I2C_ErrorCallback(hi2c);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffbe 	bl	8001284 <MPU6050_DMA_I2C_ErrorCallback>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001314:	b09e      	sub	sp, #120	@ 0x78
 8001316:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001318:	f000 fc4f 	bl	8001bba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131c:	f000 f894 	bl	8001448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001320:	f000 f98e 	bl	8001640 <MX_GPIO_Init>
  MX_DMA_Init();
 8001324:	f000 f96e 	bl	8001604 <MX_DMA_Init>
  MX_I2C1_Init();
 8001328:	f000 f8fc 	bl	8001524 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800132c:	f000 f93a 	bl	80015a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(50);
 8001330:	2032      	movs	r0, #50	@ 0x32
 8001332:	f000 fc9f 	bl	8001c74 <HAL_Delay>
  printf("\r\nMPU6050 DMA TEST\r\n");
 8001336:	483e      	ldr	r0, [pc, #248]	@ (8001430 <main+0x120>)
 8001338:	f006 f86a 	bl	8007410 <puts>
  if (MPU6050_DMA_Init() != 0) {
 800133c:	f7ff fdea 	bl	8000f14 <MPU6050_DMA_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <main+0x46>
	  printf("MPU6050 init failed!\r\n");
 8001346:	483b      	ldr	r0, [pc, #236]	@ (8001434 <main+0x124>)
 8001348:	f006 f862 	bl	8007410 <puts>
	  while (1) { HAL_Delay(1000); }
 800134c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001350:	f000 fc90 	bl	8001c74 <HAL_Delay>
 8001354:	e7fa      	b.n	800134c <main+0x3c>
  }
      printf("MPU6050 init OK\r\n");
 8001356:	4838      	ldr	r0, [pc, #224]	@ (8001438 <main+0x128>)
 8001358:	f006 f85a 	bl	8007410 <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  /* Start a DMA read (single shot) */
	  if (MPU6050_DMA_StartRead() == HAL_OK) {
 800135c:	f7ff fe74 	bl	8001048 <MPU6050_DMA_StartRead>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d15d      	bne.n	8001422 <main+0x112>
		  /* wait for completion with timeout */
		  uint32_t t0 = HAL_GetTick();
 8001366:	f000 fc79 	bl	8001c5c <HAL_GetTick>
 800136a:	6478      	str	r0, [r7, #68]	@ 0x44
		  while (!MPU6050_DMA_DataReady() && (HAL_GetTick() - t0) < 50) {
 800136c:	bf00      	nop
 800136e:	f7ff fe8b 	bl	8001088 <MPU6050_DMA_DataReady>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d106      	bne.n	8001386 <main+0x76>
 8001378:	f000 fc70 	bl	8001c5c <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b31      	cmp	r3, #49	@ 0x31
 8001384:	d9f3      	bls.n	800136e <main+0x5e>
			  /* optionally sleep or do other tasks */
			  }
		  if (MPU6050_DMA_DataReady()) {
 8001386:	f7ff fe7f 	bl	8001088 <MPU6050_DMA_DataReady>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d044      	beq.n	800141a <main+0x10a>
			  MPU6050_DMA_ProcessData(&data);
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe83 	bl	80010a0 <MPU6050_DMA_ProcessData>
			  printf("Acc: %.3f, %.3f, %.3f g  Gyro: %.2f, %.2f, %.2f dps  T: %.2f C\r\n",
					  data.acc_x_g, data.acc_y_g, data.acc_z_g,
 800139a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
			  printf("Acc: %.3f, %.3f, %.3f g  Gyro: %.2f, %.2f, %.2f dps  T: %.2f C\r\n",
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f8f3 	bl	8000588 <__aeabi_f2d>
 80013a2:	e9c7 0104 	strd	r0, r1, [r7, #16]
					  data.acc_x_g, data.acc_y_g, data.acc_z_g,
 80013a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
			  printf("Acc: %.3f, %.3f, %.3f g  Gyro: %.2f, %.2f, %.2f dps  T: %.2f C\r\n",
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8ed 	bl	8000588 <__aeabi_f2d>
 80013ae:	4680      	mov	r8, r0
 80013b0:	4689      	mov	r9, r1
					  data.acc_x_g, data.acc_y_g, data.acc_z_g,
 80013b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
			  printf("Acc: %.3f, %.3f, %.3f g  Gyro: %.2f, %.2f, %.2f dps  T: %.2f C\r\n",
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f8e7 	bl	8000588 <__aeabi_f2d>
 80013ba:	4682      	mov	sl, r0
 80013bc:	468b      	mov	fp, r1
					  data.gyro_x_dps, data.gyro_y_dps, data.gyro_z_dps,
 80013be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
			  printf("Acc: %.3f, %.3f, %.3f g  Gyro: %.2f, %.2f, %.2f dps  T: %.2f C\r\n",
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8e1 	bl	8000588 <__aeabi_f2d>
 80013c6:	e9c7 0102 	strd	r0, r1, [r7, #8]
					  data.gyro_x_dps, data.gyro_y_dps, data.gyro_z_dps,
 80013ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
			  printf("Acc: %.3f, %.3f, %.3f g  Gyro: %.2f, %.2f, %.2f dps  T: %.2f C\r\n",
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8db 	bl	8000588 <__aeabi_f2d>
 80013d2:	e9c7 0100 	strd	r0, r1, [r7]
					  data.gyro_x_dps, data.gyro_y_dps, data.gyro_z_dps,
 80013d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
			  printf("Acc: %.3f, %.3f, %.3f g  Gyro: %.2f, %.2f, %.2f dps  T: %.2f C\r\n",
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f8d5 	bl	8000588 <__aeabi_f2d>
 80013de:	4604      	mov	r4, r0
 80013e0:	460d      	mov	r5, r1
					  data.temperature_c);
 80013e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
			  printf("Acc: %.3f, %.3f, %.3f g  Gyro: %.2f, %.2f, %.2f dps  T: %.2f C\r\n",
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f8cf 	bl	8000588 <__aeabi_f2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80013f2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80013f6:	ed97 7b00 	vldr	d7, [r7]
 80013fa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80013fe:	ed97 7b02 	vldr	d7, [r7, #8]
 8001402:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001406:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800140a:	e9cd 8900 	strd	r8, r9, [sp]
 800140e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001412:	480a      	ldr	r0, [pc, #40]	@ (800143c <main+0x12c>)
 8001414:	f005 ff94 	bl	8007340 <iprintf>
 8001418:	e006      	b.n	8001428 <main+0x118>
		  } else {
			  printf("DMA timeout or error\n");
 800141a:	4809      	ldr	r0, [pc, #36]	@ (8001440 <main+0x130>)
 800141c:	f005 fff8 	bl	8007410 <puts>
 8001420:	e002      	b.n	8001428 <main+0x118>
		  }
	  } else {
		  printf("StartRead HAL error\n");
 8001422:	4808      	ldr	r0, [pc, #32]	@ (8001444 <main+0x134>)
 8001424:	f005 fff4 	bl	8007410 <puts>
	  }

	  HAL_Delay(200); /* sample 5 Hz here; tune as needed */
 8001428:	20c8      	movs	r0, #200	@ 0xc8
 800142a:	f000 fc23 	bl	8001c74 <HAL_Delay>
	  if (MPU6050_DMA_StartRead() == HAL_OK) {
 800142e:	e795      	b.n	800135c <main+0x4c>
 8001430:	08009310 	.word	0x08009310
 8001434:	08009324 	.word	0x08009324
 8001438:	0800933c 	.word	0x0800933c
 800143c:	08009350 	.word	0x08009350
 8001440:	08009394 	.word	0x08009394
 8001444:	080093ac 	.word	0x080093ac

08001448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b094      	sub	sp, #80	@ 0x50
 800144c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	2230      	movs	r2, #48	@ 0x30
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f006 f8ba 	bl	80075d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800146c:	4b2b      	ldr	r3, [pc, #172]	@ (800151c <SystemClock_Config+0xd4>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	4a2a      	ldr	r2, [pc, #168]	@ (800151c <SystemClock_Config+0xd4>)
 8001472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001476:	6413      	str	r3, [r2, #64]	@ 0x40
 8001478:	4b28      	ldr	r3, [pc, #160]	@ (800151c <SystemClock_Config+0xd4>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001484:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <SystemClock_Config+0xd8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a25      	ldr	r2, [pc, #148]	@ (8001520 <SystemClock_Config+0xd8>)
 800148a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <SystemClock_Config+0xd8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a6:	2302      	movs	r3, #2
 80014a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014b0:	2319      	movs	r3, #25
 80014b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80014b4:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80014b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ba:	2302      	movs	r3, #2
 80014bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80014be:	2309      	movs	r3, #9
 80014c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 fca2 	bl	8004e10 <HAL_RCC_OscConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80014d2:	f000 f8f9 	bl	80016c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014d6:	f003 fc4b 	bl	8004d70 <HAL_PWREx_EnableOverDrive>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80014e0:	f000 f8f2 	bl	80016c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e4:	230f      	movs	r3, #15
 80014e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e8:	2302      	movs	r3, #2
 80014ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	2107      	movs	r1, #7
 8001502:	4618      	mov	r0, r3
 8001504:	f003 ff28 	bl	8005358 <HAL_RCC_ClockConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800150e:	f000 f8db 	bl	80016c8 <Error_Handler>
  }
}
 8001512:	bf00      	nop
 8001514:	3750      	adds	r7, #80	@ 0x50
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40007000 	.word	0x40007000

08001524 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001528:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <MX_I2C1_Init+0x74>)
 800152a:	4a1c      	ldr	r2, [pc, #112]	@ (800159c <MX_I2C1_Init+0x78>)
 800152c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800152e:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <MX_I2C1_Init+0x74>)
 8001530:	4a1b      	ldr	r2, [pc, #108]	@ (80015a0 <MX_I2C1_Init+0x7c>)
 8001532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001534:	4b18      	ldr	r3, [pc, #96]	@ (8001598 <MX_I2C1_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153a:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <MX_I2C1_Init+0x74>)
 800153c:	2201      	movs	r2, #1
 800153e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001540:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <MX_I2C1_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001546:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <MX_I2C1_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <MX_I2C1_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <MX_I2C1_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001558:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <MX_I2C1_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800155e:	480e      	ldr	r0, [pc, #56]	@ (8001598 <MX_I2C1_Init+0x74>)
 8001560:	f001 fa1e 	bl	80029a0 <HAL_I2C_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800156a:	f000 f8ad 	bl	80016c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800156e:	2100      	movs	r1, #0
 8001570:	4809      	ldr	r0, [pc, #36]	@ (8001598 <MX_I2C1_Init+0x74>)
 8001572:	f003 fb65 	bl	8004c40 <HAL_I2CEx_ConfigAnalogFilter>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800157c:	f000 f8a4 	bl	80016c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001580:	2100      	movs	r1, #0
 8001582:	4805      	ldr	r0, [pc, #20]	@ (8001598 <MX_I2C1_Init+0x74>)
 8001584:	f003 fba7 	bl	8004cd6 <HAL_I2CEx_ConfigDigitalFilter>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800158e:	f000 f89b 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000022c 	.word	0x2000022c
 800159c:	40005400 	.word	0x40005400
 80015a0:	6000030d 	.word	0x6000030d

080015a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015a8:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <MX_USART1_UART_Init+0x58>)
 80015aa:	4a15      	ldr	r2, [pc, #84]	@ (8001600 <MX_USART1_UART_Init+0x5c>)
 80015ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ae:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <MX_USART1_UART_Init+0x58>)
 80015b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <MX_USART1_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <MX_USART1_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <MX_USART1_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <MX_USART1_UART_Init+0x58>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <MX_USART1_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <MX_USART1_UART_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015da:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <MX_USART1_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <MX_USART1_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_USART1_UART_Init+0x58>)
 80015e8:	f004 fc8c 	bl	8005f04 <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015f2:	f000 f869 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200002e0 	.word	0x200002e0
 8001600:	40011000 	.word	0x40011000

08001604 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800160a:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <MX_DMA_Init+0x38>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	4a0b      	ldr	r2, [pc, #44]	@ (800163c <MX_DMA_Init+0x38>)
 8001610:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001614:	6313      	str	r3, [r2, #48]	@ 0x30
 8001616:	4b09      	ldr	r3, [pc, #36]	@ (800163c <MX_DMA_Init+0x38>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	200b      	movs	r0, #11
 8001628:	f000 fc23 	bl	8001e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800162c:	200b      	movs	r0, #11
 800162e:	f000 fc3c 	bl	8001eaa <HAL_NVIC_EnableIRQ>

}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <MX_GPIO_Init+0x80>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a19      	ldr	r2, [pc, #100]	@ (80016c0 <MX_GPIO_Init+0x80>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <MX_GPIO_Init+0x80>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <MX_GPIO_Init+0x80>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a13      	ldr	r2, [pc, #76]	@ (80016c0 <MX_GPIO_Init+0x80>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <MX_GPIO_Init+0x80>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_GPIO_Init+0x80>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <MX_GPIO_Init+0x80>)
 800168c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001690:	6313      	str	r3, [r2, #48]	@ 0x30
 8001692:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <MX_GPIO_Init+0x80>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800169e:	2301      	movs	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	4619      	mov	r1, r3
 80016b2:	4804      	ldr	r0, [pc, #16]	@ (80016c4 <MX_GPIO_Init+0x84>)
 80016b4:	f000 ffc8 	bl	8002648 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016b8:	bf00      	nop
 80016ba:	3720      	adds	r7, #32
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <Error_Handler+0x8>

080016d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <HAL_MspInit+0x44>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	4a0e      	ldr	r2, [pc, #56]	@ (8001718 <HAL_MspInit+0x44>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <HAL_MspInit+0x44>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <HAL_MspInit+0x44>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f6:	4a08      	ldr	r2, [pc, #32]	@ (8001718 <HAL_MspInit+0x44>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_MspInit+0x44>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800

0800171c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b0aa      	sub	sp, #168	@ 0xa8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	2284      	movs	r2, #132	@ 0x84
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f005 ff47 	bl	80075d0 <memset>
  if(hi2c->Instance==I2C1)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a39      	ldr	r2, [pc, #228]	@ (800182c <HAL_I2C_MspInit+0x110>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d16a      	bne.n	8001822 <HAL_I2C_MspInit+0x106>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800174c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001750:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001752:	2300      	movs	r3, #0
 8001754:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	4618      	mov	r0, r3
 800175c:	f003 ffe2 	bl	8005724 <HAL_RCCEx_PeriphCLKConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001766:	f7ff ffaf 	bl	80016c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	4b31      	ldr	r3, [pc, #196]	@ (8001830 <HAL_I2C_MspInit+0x114>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a30      	ldr	r2, [pc, #192]	@ (8001830 <HAL_I2C_MspInit+0x114>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b2e      	ldr	r3, [pc, #184]	@ (8001830 <HAL_I2C_MspInit+0x114>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001782:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001786:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800178a:	2312      	movs	r3, #18
 800178c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800179c:	2304      	movs	r3, #4
 800179e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80017a6:	4619      	mov	r1, r3
 80017a8:	4822      	ldr	r0, [pc, #136]	@ (8001834 <HAL_I2C_MspInit+0x118>)
 80017aa:	f000 ff4d 	bl	8002648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ae:	4b20      	ldr	r3, [pc, #128]	@ (8001830 <HAL_I2C_MspInit+0x114>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001830 <HAL_I2C_MspInit+0x114>)
 80017b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <HAL_I2C_MspInit+0x114>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80017c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <HAL_I2C_MspInit+0x11c>)
 80017c8:	4a1c      	ldr	r2, [pc, #112]	@ (800183c <HAL_I2C_MspInit+0x120>)
 80017ca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <HAL_I2C_MspInit+0x11c>)
 80017ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d4:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <HAL_I2C_MspInit+0x11c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017da:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <HAL_I2C_MspInit+0x11c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017e0:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <HAL_I2C_MspInit+0x11c>)
 80017e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017e6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017e8:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <HAL_I2C_MspInit+0x11c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ee:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <HAL_I2C_MspInit+0x11c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80017f4:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <HAL_I2C_MspInit+0x11c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <HAL_I2C_MspInit+0x11c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001800:	4b0d      	ldr	r3, [pc, #52]	@ (8001838 <HAL_I2C_MspInit+0x11c>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001806:	480c      	ldr	r0, [pc, #48]	@ (8001838 <HAL_I2C_MspInit+0x11c>)
 8001808:	f000 fb6a 	bl	8001ee0 <HAL_DMA_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8001812:	f7ff ff59 	bl	80016c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a07      	ldr	r2, [pc, #28]	@ (8001838 <HAL_I2C_MspInit+0x11c>)
 800181a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800181c:	4a06      	ldr	r2, [pc, #24]	@ (8001838 <HAL_I2C_MspInit+0x11c>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001822:	bf00      	nop
 8001824:	37a8      	adds	r7, #168	@ 0xa8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40005400 	.word	0x40005400
 8001830:	40023800 	.word	0x40023800
 8001834:	40020400 	.word	0x40020400
 8001838:	20000280 	.word	0x20000280
 800183c:	40026010 	.word	0x40026010

08001840 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b0ac      	sub	sp, #176	@ 0xb0
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001858:	f107 0318 	add.w	r3, r7, #24
 800185c:	2284      	movs	r2, #132	@ 0x84
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f005 feb5 	bl	80075d0 <memset>
  if(huart->Instance==USART1)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a32      	ldr	r2, [pc, #200]	@ (8001934 <HAL_UART_MspInit+0xf4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d15c      	bne.n	800192a <HAL_UART_MspInit+0xea>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001870:	2340      	movs	r3, #64	@ 0x40
 8001872:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001874:	2300      	movs	r3, #0
 8001876:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001878:	f107 0318 	add.w	r3, r7, #24
 800187c:	4618      	mov	r0, r3
 800187e:	f003 ff51 	bl	8005724 <HAL_RCCEx_PeriphCLKConfig>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001888:	f7ff ff1e 	bl	80016c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800188c:	4b2a      	ldr	r3, [pc, #168]	@ (8001938 <HAL_UART_MspInit+0xf8>)
 800188e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001890:	4a29      	ldr	r2, [pc, #164]	@ (8001938 <HAL_UART_MspInit+0xf8>)
 8001892:	f043 0310 	orr.w	r3, r3, #16
 8001896:	6453      	str	r3, [r2, #68]	@ 0x44
 8001898:	4b27      	ldr	r3, [pc, #156]	@ (8001938 <HAL_UART_MspInit+0xf8>)
 800189a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a4:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <HAL_UART_MspInit+0xf8>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a8:	4a23      	ldr	r2, [pc, #140]	@ (8001938 <HAL_UART_MspInit+0xf8>)
 80018aa:	f043 0302 	orr.w	r3, r3, #2
 80018ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b0:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <HAL_UART_MspInit+0xf8>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001938 <HAL_UART_MspInit+0xf8>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001938 <HAL_UART_MspInit+0xf8>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <HAL_UART_MspInit+0xf8>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018d4:	2380      	movs	r3, #128	@ 0x80
 80018d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ec:	2307      	movs	r3, #7
 80018ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018f6:	4619      	mov	r1, r3
 80018f8:	4810      	ldr	r0, [pc, #64]	@ (800193c <HAL_UART_MspInit+0xfc>)
 80018fa:	f000 fea5 	bl	8002648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001902:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001918:	2307      	movs	r3, #7
 800191a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001922:	4619      	mov	r1, r3
 8001924:	4806      	ldr	r0, [pc, #24]	@ (8001940 <HAL_UART_MspInit+0x100>)
 8001926:	f000 fe8f 	bl	8002648 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800192a:	bf00      	nop
 800192c:	37b0      	adds	r7, #176	@ 0xb0
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40011000 	.word	0x40011000
 8001938:	40023800 	.word	0x40023800
 800193c:	40020400 	.word	0x40020400
 8001940:	40020000 	.word	0x40020000

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <NMI_Handler+0x4>

0800194c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <MemManage_Handler+0x4>

0800195c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <UsageFault_Handler+0x4>

0800196c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199a:	f000 f94b 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <DMA1_Stream0_IRQHandler+0x10>)
 80019aa:	f000 fbc9 	bl	8002140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000280 	.word	0x20000280

080019b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return 1;
 80019bc:	2301      	movs	r3, #1
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_kill>:

int _kill(int pid, int sig)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019d2:	f005 fe4f 	bl	8007674 <__errno>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2216      	movs	r2, #22
 80019da:	601a      	str	r2, [r3, #0]
  return -1;
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_exit>:

void _exit (int status)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ffe7 	bl	80019c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019fa:	bf00      	nop
 80019fc:	e7fd      	b.n	80019fa <_exit+0x12>

080019fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e00a      	b.n	8001a26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a10:	f3af 8000 	nop.w
 8001a14:	4601      	mov	r1, r0
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	60ba      	str	r2, [r7, #8]
 8001a1c:	b2ca      	uxtb	r2, r1
 8001a1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3301      	adds	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	dbf0      	blt.n	8001a10 <_read+0x12>
  }

  return len;
 8001a2e:	687b      	ldr	r3, [r7, #4]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	e009      	b.n	8001a5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	60ba      	str	r2, [r7, #8]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fc30 	bl	80012b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	dbf1      	blt.n	8001a4a <_write+0x12>
  }
  return len;
 8001a66:	687b      	ldr	r3, [r7, #4]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_close>:

int _close(int file)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a98:	605a      	str	r2, [r3, #4]
  return 0;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_isatty>:

int _isatty(int file)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ab0:	2301      	movs	r3, #1
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	@ (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d207      	bcs.n	8001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b08:	f005 fdb4 	bl	8007674 <__errno>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	220c      	movs	r2, #12
 8001b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	e009      	b.n	8001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b18:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a05      	ldr	r2, [pc, #20]	@ (8001b3c <_sbrk+0x64>)
 8001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20050000 	.word	0x20050000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	20000368 	.word	0x20000368
 8001b40:	200004c0 	.word	0x200004c0

08001b44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <SystemInit+0x20>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <SystemInit+0x20>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ba0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b6c:	f7ff ffea 	bl	8001b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b70:	480c      	ldr	r0, [pc, #48]	@ (8001ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b72:	490d      	ldr	r1, [pc, #52]	@ (8001ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b88:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b96:	f005 fd73 	bl	8007680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9a:	f7ff fbb9 	bl	8001310 <main>
  bx  lr    
 8001b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ba0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001bac:	08009764 	.word	0x08009764
  ldr r2, =_sbss
 8001bb0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001bb4:	200004bc 	.word	0x200004bc

08001bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC_IRQHandler>

08001bba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbe:	2003      	movs	r0, #3
 8001bc0:	f000 f94c 	bl	8001e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc4:	200f      	movs	r0, #15
 8001bc6:	f000 f805 	bl	8001bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bca:	f7ff fd83 	bl	80016d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <HAL_InitTick+0x54>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <HAL_InitTick+0x58>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f967 	bl	8001ec6 <HAL_SYSTICK_Config>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00e      	b.n	8001c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d80a      	bhi.n	8001c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f000 f92f 	bl	8001e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c14:	4a06      	ldr	r2, [pc, #24]	@ (8001c30 <HAL_InitTick+0x5c>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000008 	.word	0x20000008
 8001c58:	2000036c 	.word	0x2000036c

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	2000036c 	.word	0x2000036c

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff ffee 	bl	8001c5c <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d005      	beq.n	8001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_Delay+0x44>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff ffde 	bl	8001c5c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <HAL_Delay+0x28>
  {
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <__NVIC_SetPriorityGrouping+0x40>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cea:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <__NVIC_SetPriorityGrouping+0x40>)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	60d3      	str	r3, [r2, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00
 8001d00:	05fa0000 	.word	0x05fa0000

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	@ (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4907      	ldr	r1, [pc, #28]	@ (8001d58 <__NVIC_EnableIRQ+0x38>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000e100 	.word	0xe000e100

08001d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db0a      	blt.n	8001d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	490c      	ldr	r1, [pc, #48]	@ (8001da8 <__NVIC_SetPriority+0x4c>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d84:	e00a      	b.n	8001d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4908      	ldr	r1, [pc, #32]	@ (8001dac <__NVIC_SetPriority+0x50>)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3b04      	subs	r3, #4
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	440b      	add	r3, r1
 8001d9a:	761a      	strb	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000e100 	.word	0xe000e100
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	@ 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f1c3 0307 	rsb	r3, r3, #7
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	bf28      	it	cs
 8001dce:	2304      	movcs	r3, #4
 8001dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d902      	bls.n	8001de0 <NVIC_EncodePriority+0x30>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	e000      	b.n	8001de2 <NVIC_EncodePriority+0x32>
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	43d9      	mvns	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	4313      	orrs	r3, r2
         );
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	@ 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e28:	d301      	bcc.n	8001e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00f      	b.n	8001e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <SysTick_Config+0x40>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e36:	210f      	movs	r1, #15
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f7ff ff8e 	bl	8001d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <SysTick_Config+0x40>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e46:	4b04      	ldr	r3, [pc, #16]	@ (8001e58 <SysTick_Config+0x40>)
 8001e48:	2207      	movs	r2, #7
 8001e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	e000e010 	.word	0xe000e010

08001e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff29 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e84:	f7ff ff3e 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f7ff ff8e 	bl	8001db0 <NVIC_EncodePriority>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff5d 	bl	8001d5c <__NVIC_SetPriority>
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff31 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ffa2 	bl	8001e18 <SysTick_Config>
 8001ed4:	4603      	mov	r3, r0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff feb6 	bl	8001c5c <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e099      	b.n	8002030 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0201 	bic.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1c:	e00f      	b.n	8001f3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f1e:	f7ff fe9d 	bl	8001c5c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b05      	cmp	r3, #5
 8001f2a:	d908      	bls.n	8001f3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2203      	movs	r2, #3
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e078      	b.n	8002030 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1e8      	bne.n	8001f1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	4b38      	ldr	r3, [pc, #224]	@ (8002038 <HAL_DMA_Init+0x158>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d107      	bne.n	8001fa8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f023 0307 	bic.w	r3, r3, #7
 8001fbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d117      	bne.n	8002002 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00e      	beq.n	8002002 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fab3 	bl	8002550 <DMA_CheckFifoParam>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2240      	movs	r2, #64	@ 0x40
 8001ff4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ffe:	2301      	movs	r3, #1
 8002000:	e016      	b.n	8002030 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fa6a 	bl	80024e4 <DMA_CalcBaseAndBitshift>
 8002010:	4603      	mov	r3, r0
 8002012:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002018:	223f      	movs	r2, #63	@ 0x3f
 800201a:	409a      	lsls	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	f010803f 	.word	0xf010803f

0800203c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002052:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_DMA_Start_IT+0x26>
 800205e:	2302      	movs	r3, #2
 8002060:	e048      	b.n	80020f4 <HAL_DMA_Start_IT+0xb8>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d137      	bne.n	80020e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2202      	movs	r2, #2
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f9fc 	bl	8002488 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002094:	223f      	movs	r2, #63	@ 0x3f
 8002096:	409a      	lsls	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0216 	orr.w	r2, r2, #22
 80020aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020ba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0208 	orr.w	r2, r2, #8
 80020d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e005      	b.n	80020f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
 80020f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d004      	beq.n	800211a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2280      	movs	r2, #128	@ 0x80
 8002114:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e00c      	b.n	8002134 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2205      	movs	r2, #5
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0201 	bic.w	r2, r2, #1
 8002130:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800214c:	4b8e      	ldr	r3, [pc, #568]	@ (8002388 <HAL_DMA_IRQHandler+0x248>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a8e      	ldr	r2, [pc, #568]	@ (800238c <HAL_DMA_IRQHandler+0x24c>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	0a9b      	lsrs	r3, r3, #10
 8002158:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216a:	2208      	movs	r2, #8
 800216c:	409a      	lsls	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d01a      	beq.n	80021ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0204 	bic.w	r2, r2, #4
 8002192:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002198:	2208      	movs	r2, #8
 800219a:	409a      	lsls	r2, r3
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a4:	f043 0201 	orr.w	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b0:	2201      	movs	r2, #1
 80021b2:	409a      	lsls	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d012      	beq.n	80021e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00b      	beq.n	80021e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ce:	2201      	movs	r2, #1
 80021d0:	409a      	lsls	r2, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021da:	f043 0202 	orr.w	r2, r3, #2
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e6:	2204      	movs	r2, #4
 80021e8:	409a      	lsls	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d012      	beq.n	8002218 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00b      	beq.n	8002218 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002204:	2204      	movs	r2, #4
 8002206:	409a      	lsls	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002210:	f043 0204 	orr.w	r2, r3, #4
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221c:	2210      	movs	r2, #16
 800221e:	409a      	lsls	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d043      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d03c      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223a:	2210      	movs	r2, #16
 800223c:	409a      	lsls	r2, r3
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d018      	beq.n	8002282 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d108      	bne.n	8002270 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d024      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
 800226e:	e01f      	b.n	80022b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01b      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
 8002280:	e016      	b.n	80022b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d107      	bne.n	80022a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0208 	bic.w	r2, r2, #8
 800229e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b4:	2220      	movs	r2, #32
 80022b6:	409a      	lsls	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 808f 	beq.w	80023e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 8087 	beq.w	80023e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d6:	2220      	movs	r2, #32
 80022d8:	409a      	lsls	r2, r3
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b05      	cmp	r3, #5
 80022e8:	d136      	bne.n	8002358 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0216 	bic.w	r2, r2, #22
 80022f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002308:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d103      	bne.n	800231a <HAL_DMA_IRQHandler+0x1da>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0208 	bic.w	r2, r2, #8
 8002328:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232e:	223f      	movs	r2, #63	@ 0x3f
 8002330:	409a      	lsls	r2, r3
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800234a:	2b00      	cmp	r3, #0
 800234c:	d07e      	beq.n	800244c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	4798      	blx	r3
        }
        return;
 8002356:	e079      	b.n	800244c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01d      	beq.n	80023a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10d      	bne.n	8002390 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002378:	2b00      	cmp	r3, #0
 800237a:	d031      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	4798      	blx	r3
 8002384:	e02c      	b.n	80023e0 <HAL_DMA_IRQHandler+0x2a0>
 8002386:	bf00      	nop
 8002388:	20000000 	.word	0x20000000
 800238c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002394:	2b00      	cmp	r3, #0
 8002396:	d023      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	4798      	blx	r3
 80023a0:	e01e      	b.n	80023e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10f      	bne.n	80023d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0210 	bic.w	r2, r2, #16
 80023be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d032      	beq.n	800244e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d022      	beq.n	800243a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2205      	movs	r2, #5
 80023f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	3301      	adds	r3, #1
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	429a      	cmp	r2, r3
 8002416:	d307      	bcc.n	8002428 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f2      	bne.n	800240c <HAL_DMA_IRQHandler+0x2cc>
 8002426:	e000      	b.n	800242a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002428:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
 800244a:	e000      	b.n	800244e <HAL_DMA_IRQHandler+0x30e>
        return;
 800244c:	bf00      	nop
    }
  }
}
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002462:	b2db      	uxtb	r3, r3
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b40      	cmp	r3, #64	@ 0x40
 80024b4:	d108      	bne.n	80024c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024c6:	e007      	b.n	80024d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	60da      	str	r2, [r3, #12]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	3b10      	subs	r3, #16
 80024f4:	4a13      	ldr	r2, [pc, #76]	@ (8002544 <DMA_CalcBaseAndBitshift+0x60>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024fe:	4a12      	ldr	r2, [pc, #72]	@ (8002548 <DMA_CalcBaseAndBitshift+0x64>)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b03      	cmp	r3, #3
 8002510:	d908      	bls.n	8002524 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <DMA_CalcBaseAndBitshift+0x68>)
 800251a:	4013      	ands	r3, r2
 800251c:	1d1a      	adds	r2, r3, #4
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	659a      	str	r2, [r3, #88]	@ 0x58
 8002522:	e006      	b.n	8002532 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	4b08      	ldr	r3, [pc, #32]	@ (800254c <DMA_CalcBaseAndBitshift+0x68>)
 800252c:	4013      	ands	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	aaaaaaab 	.word	0xaaaaaaab
 8002548:	080093d8 	.word	0x080093d8
 800254c:	fffffc00 	.word	0xfffffc00

08002550 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002560:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d11f      	bne.n	80025aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d856      	bhi.n	800261e <DMA_CheckFifoParam+0xce>
 8002570:	a201      	add	r2, pc, #4	@ (adr r2, 8002578 <DMA_CheckFifoParam+0x28>)
 8002572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002576:	bf00      	nop
 8002578:	08002589 	.word	0x08002589
 800257c:	0800259b 	.word	0x0800259b
 8002580:	08002589 	.word	0x08002589
 8002584:	0800261f 	.word	0x0800261f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d046      	beq.n	8002622 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002598:	e043      	b.n	8002622 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025a2:	d140      	bne.n	8002626 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a8:	e03d      	b.n	8002626 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025b2:	d121      	bne.n	80025f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d837      	bhi.n	800262a <DMA_CheckFifoParam+0xda>
 80025ba:	a201      	add	r2, pc, #4	@ (adr r2, 80025c0 <DMA_CheckFifoParam+0x70>)
 80025bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c0:	080025d1 	.word	0x080025d1
 80025c4:	080025d7 	.word	0x080025d7
 80025c8:	080025d1 	.word	0x080025d1
 80025cc:	080025e9 	.word	0x080025e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      break;
 80025d4:	e030      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d025      	beq.n	800262e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e6:	e022      	b.n	800262e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025f0:	d11f      	bne.n	8002632 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025f6:	e01c      	b.n	8002632 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d903      	bls.n	8002606 <DMA_CheckFifoParam+0xb6>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d003      	beq.n	800260c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002604:	e018      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
      break;
 800260a:	e015      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00e      	beq.n	8002636 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
      break;
 800261c:	e00b      	b.n	8002636 <DMA_CheckFifoParam+0xe6>
      break;
 800261e:	bf00      	nop
 8002620:	e00a      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
      break;
 8002622:	bf00      	nop
 8002624:	e008      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
      break;
 8002626:	bf00      	nop
 8002628:	e006      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
      break;
 800262a:	bf00      	nop
 800262c:	e004      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
      break;
 800262e:	bf00      	nop
 8002630:	e002      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
      break;   
 8002632:	bf00      	nop
 8002634:	e000      	b.n	8002638 <DMA_CheckFifoParam+0xe8>
      break;
 8002636:	bf00      	nop
    }
  } 
  
  return status; 
 8002638:	7bfb      	ldrb	r3, [r7, #15]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop

08002648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	@ 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	e175      	b.n	8002954 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002668:	2201      	movs	r2, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	429a      	cmp	r2, r3
 8002682:	f040 8164 	bne.w	800294e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d005      	beq.n	800269e <HAL_GPIO_Init+0x56>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d130      	bne.n	8002700 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026d4:	2201      	movs	r2, #1
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 0201 	and.w	r2, r3, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b03      	cmp	r3, #3
 800270a:	d017      	beq.n	800273c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	2203      	movs	r2, #3
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d123      	bne.n	8002790 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	08da      	lsrs	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3208      	adds	r2, #8
 8002750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	220f      	movs	r2, #15
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	08da      	lsrs	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3208      	adds	r2, #8
 800278a:	69b9      	ldr	r1, [r7, #24]
 800278c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0203 	and.w	r2, r3, #3
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80be 	beq.w	800294e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d2:	4b66      	ldr	r3, [pc, #408]	@ (800296c <HAL_GPIO_Init+0x324>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	4a65      	ldr	r2, [pc, #404]	@ (800296c <HAL_GPIO_Init+0x324>)
 80027d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027de:	4b63      	ldr	r3, [pc, #396]	@ (800296c <HAL_GPIO_Init+0x324>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027ea:	4a61      	ldr	r2, [pc, #388]	@ (8002970 <HAL_GPIO_Init+0x328>)
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	089b      	lsrs	r3, r3, #2
 80027f0:	3302      	adds	r3, #2
 80027f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	220f      	movs	r2, #15
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a58      	ldr	r2, [pc, #352]	@ (8002974 <HAL_GPIO_Init+0x32c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d037      	beq.n	8002886 <HAL_GPIO_Init+0x23e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a57      	ldr	r2, [pc, #348]	@ (8002978 <HAL_GPIO_Init+0x330>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d031      	beq.n	8002882 <HAL_GPIO_Init+0x23a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a56      	ldr	r2, [pc, #344]	@ (800297c <HAL_GPIO_Init+0x334>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d02b      	beq.n	800287e <HAL_GPIO_Init+0x236>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a55      	ldr	r2, [pc, #340]	@ (8002980 <HAL_GPIO_Init+0x338>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d025      	beq.n	800287a <HAL_GPIO_Init+0x232>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a54      	ldr	r2, [pc, #336]	@ (8002984 <HAL_GPIO_Init+0x33c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d01f      	beq.n	8002876 <HAL_GPIO_Init+0x22e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a53      	ldr	r2, [pc, #332]	@ (8002988 <HAL_GPIO_Init+0x340>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d019      	beq.n	8002872 <HAL_GPIO_Init+0x22a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a52      	ldr	r2, [pc, #328]	@ (800298c <HAL_GPIO_Init+0x344>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d013      	beq.n	800286e <HAL_GPIO_Init+0x226>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a51      	ldr	r2, [pc, #324]	@ (8002990 <HAL_GPIO_Init+0x348>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00d      	beq.n	800286a <HAL_GPIO_Init+0x222>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a50      	ldr	r2, [pc, #320]	@ (8002994 <HAL_GPIO_Init+0x34c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <HAL_GPIO_Init+0x21e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4f      	ldr	r2, [pc, #316]	@ (8002998 <HAL_GPIO_Init+0x350>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d101      	bne.n	8002862 <HAL_GPIO_Init+0x21a>
 800285e:	2309      	movs	r3, #9
 8002860:	e012      	b.n	8002888 <HAL_GPIO_Init+0x240>
 8002862:	230a      	movs	r3, #10
 8002864:	e010      	b.n	8002888 <HAL_GPIO_Init+0x240>
 8002866:	2308      	movs	r3, #8
 8002868:	e00e      	b.n	8002888 <HAL_GPIO_Init+0x240>
 800286a:	2307      	movs	r3, #7
 800286c:	e00c      	b.n	8002888 <HAL_GPIO_Init+0x240>
 800286e:	2306      	movs	r3, #6
 8002870:	e00a      	b.n	8002888 <HAL_GPIO_Init+0x240>
 8002872:	2305      	movs	r3, #5
 8002874:	e008      	b.n	8002888 <HAL_GPIO_Init+0x240>
 8002876:	2304      	movs	r3, #4
 8002878:	e006      	b.n	8002888 <HAL_GPIO_Init+0x240>
 800287a:	2303      	movs	r3, #3
 800287c:	e004      	b.n	8002888 <HAL_GPIO_Init+0x240>
 800287e:	2302      	movs	r3, #2
 8002880:	e002      	b.n	8002888 <HAL_GPIO_Init+0x240>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_GPIO_Init+0x240>
 8002886:	2300      	movs	r3, #0
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	f002 0203 	and.w	r2, r2, #3
 800288e:	0092      	lsls	r2, r2, #2
 8002890:	4093      	lsls	r3, r2
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002898:	4935      	ldr	r1, [pc, #212]	@ (8002970 <HAL_GPIO_Init+0x328>)
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	3302      	adds	r3, #2
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028a6:	4b3d      	ldr	r3, [pc, #244]	@ (800299c <HAL_GPIO_Init+0x354>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ca:	4a34      	ldr	r2, [pc, #208]	@ (800299c <HAL_GPIO_Init+0x354>)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d0:	4b32      	ldr	r3, [pc, #200]	@ (800299c <HAL_GPIO_Init+0x354>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f4:	4a29      	ldr	r2, [pc, #164]	@ (800299c <HAL_GPIO_Init+0x354>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028fa:	4b28      	ldr	r3, [pc, #160]	@ (800299c <HAL_GPIO_Init+0x354>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800291e:	4a1f      	ldr	r2, [pc, #124]	@ (800299c <HAL_GPIO_Init+0x354>)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002924:	4b1d      	ldr	r3, [pc, #116]	@ (800299c <HAL_GPIO_Init+0x354>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002948:	4a14      	ldr	r2, [pc, #80]	@ (800299c <HAL_GPIO_Init+0x354>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3301      	adds	r3, #1
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	2b0f      	cmp	r3, #15
 8002958:	f67f ae86 	bls.w	8002668 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	3724      	adds	r7, #36	@ 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800
 8002970:	40013800 	.word	0x40013800
 8002974:	40020000 	.word	0x40020000
 8002978:	40020400 	.word	0x40020400
 800297c:	40020800 	.word	0x40020800
 8002980:	40020c00 	.word	0x40020c00
 8002984:	40021000 	.word	0x40021000
 8002988:	40021400 	.word	0x40021400
 800298c:	40021800 	.word	0x40021800
 8002990:	40021c00 	.word	0x40021c00
 8002994:	40022000 	.word	0x40022000
 8002998:	40022400 	.word	0x40022400
 800299c:	40013c00 	.word	0x40013c00

080029a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e08b      	b.n	8002aca <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe fea8 	bl	800171c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	@ 0x24
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d107      	bne.n	8002a1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	e006      	b.n	8002a28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d108      	bne.n	8002a42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	e007      	b.n	8002a52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad4 <HAL_I2C_Init+0x134>)
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69d9      	ldr	r1, [r3, #28]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1a      	ldr	r2, [r3, #32]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	02008000 	.word	0x02008000

08002ad8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	817b      	strh	r3, [r7, #10]
 8002aea:	460b      	mov	r3, r1
 8002aec:	813b      	strh	r3, [r7, #8]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	f040 80f9 	bne.w	8002cf2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_I2C_Mem_Write+0x34>
 8002b06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d105      	bne.n	8002b18 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b12:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0ed      	b.n	8002cf4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_I2C_Mem_Write+0x4e>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e0e6      	b.n	8002cf4 <HAL_I2C_Mem_Write+0x21c>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b2e:	f7ff f895 	bl	8001c5c <HAL_GetTick>
 8002b32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	2319      	movs	r3, #25
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f001 fda5 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0d1      	b.n	8002cf4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2221      	movs	r2, #33	@ 0x21
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2240      	movs	r2, #64	@ 0x40
 8002b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a3a      	ldr	r2, [r7, #32]
 8002b6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b78:	88f8      	ldrh	r0, [r7, #6]
 8002b7a:	893a      	ldrh	r2, [r7, #8]
 8002b7c:	8979      	ldrh	r1, [r7, #10]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	4603      	mov	r3, r0
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 ff43 	bl	8003a14 <I2C_RequestMemoryWrite>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0a9      	b.n	8002cf4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2bff      	cmp	r3, #255	@ 0xff
 8002ba8:	d90e      	bls.n	8002bc8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	22ff      	movs	r2, #255	@ 0xff
 8002bae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	8979      	ldrh	r1, [r7, #10]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f001 ff29 	bl	8004a18 <I2C_TransferConfig>
 8002bc6:	e00f      	b.n	8002be8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	8979      	ldrh	r1, [r7, #10]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f001 ff18 	bl	8004a18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f001 fda8 	bl	8004742 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e07b      	b.n	8002cf4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d034      	beq.n	8002ca0 <HAL_I2C_Mem_Write+0x1c8>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d130      	bne.n	8002ca0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c44:	2200      	movs	r2, #0
 8002c46:	2180      	movs	r1, #128	@ 0x80
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f001 fd21 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e04d      	b.n	8002cf4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2bff      	cmp	r3, #255	@ 0xff
 8002c60:	d90e      	bls.n	8002c80 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	22ff      	movs	r2, #255	@ 0xff
 8002c66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	8979      	ldrh	r1, [r7, #10]
 8002c70:	2300      	movs	r3, #0
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f001 fecd 	bl	8004a18 <I2C_TransferConfig>
 8002c7e:	e00f      	b.n	8002ca0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	8979      	ldrh	r1, [r7, #10]
 8002c92:	2300      	movs	r3, #0
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f001 febc 	bl	8004a18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d19e      	bne.n	8002be8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f001 fd8e 	bl	80047d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e01a      	b.n	8002cf4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6859      	ldr	r1, [r3, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cfc <HAL_I2C_Mem_Write+0x224>)
 8002cd2:	400b      	ands	r3, r1
 8002cd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e000      	b.n	8002cf4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
  }
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	fe00e800 	.word	0xfe00e800

08002d00 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	4608      	mov	r0, r1
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4603      	mov	r3, r0
 8002d10:	817b      	strh	r3, [r7, #10]
 8002d12:	460b      	mov	r3, r1
 8002d14:	813b      	strh	r3, [r7, #8]
 8002d16:	4613      	mov	r3, r2
 8002d18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	f040 80fd 	bne.w	8002f22 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_I2C_Mem_Read+0x34>
 8002d2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d3a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0f1      	b.n	8002f24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_I2C_Mem_Read+0x4e>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e0ea      	b.n	8002f24 <HAL_I2C_Mem_Read+0x224>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d56:	f7fe ff81 	bl	8001c5c <HAL_GetTick>
 8002d5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2319      	movs	r3, #25
 8002d62:	2201      	movs	r2, #1
 8002d64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f001 fc91 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0d5      	b.n	8002f24 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2222      	movs	r2, #34	@ 0x22
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2240      	movs	r2, #64	@ 0x40
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a3a      	ldr	r2, [r7, #32]
 8002d92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002da0:	88f8      	ldrh	r0, [r7, #6]
 8002da2:	893a      	ldrh	r2, [r7, #8]
 8002da4:	8979      	ldrh	r1, [r7, #10]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	4603      	mov	r3, r0
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fe83 	bl	8003abc <I2C_RequestMemoryRead>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0ad      	b.n	8002f24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2bff      	cmp	r3, #255	@ 0xff
 8002dd0:	d90e      	bls.n	8002df0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	8979      	ldrh	r1, [r7, #10]
 8002de0:	4b52      	ldr	r3, [pc, #328]	@ (8002f2c <HAL_I2C_Mem_Read+0x22c>)
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f001 fe15 	bl	8004a18 <I2C_TransferConfig>
 8002dee:	e00f      	b.n	8002e10 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	8979      	ldrh	r1, [r7, #10]
 8002e02:	4b4a      	ldr	r3, [pc, #296]	@ (8002f2c <HAL_I2C_Mem_Read+0x22c>)
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f001 fe04 	bl	8004a18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e16:	2200      	movs	r2, #0
 8002e18:	2104      	movs	r1, #4
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f001 fc38 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e07c      	b.n	8002f24 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d034      	beq.n	8002ed0 <HAL_I2C_Mem_Read+0x1d0>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d130      	bne.n	8002ed0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e74:	2200      	movs	r2, #0
 8002e76:	2180      	movs	r1, #128	@ 0x80
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f001 fc09 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e04d      	b.n	8002f24 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2bff      	cmp	r3, #255	@ 0xff
 8002e90:	d90e      	bls.n	8002eb0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	8979      	ldrh	r1, [r7, #10]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f001 fdb5 	bl	8004a18 <I2C_TransferConfig>
 8002eae:	e00f      	b.n	8002ed0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	8979      	ldrh	r1, [r7, #10]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f001 fda4 	bl	8004a18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d19a      	bne.n	8002e10 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f001 fc76 	bl	80047d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e01a      	b.n	8002f24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b0b      	ldr	r3, [pc, #44]	@ (8002f30 <HAL_I2C_Mem_Read+0x230>)
 8002f02:	400b      	ands	r3, r1
 8002f04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e000      	b.n	8002f24 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f22:	2302      	movs	r3, #2
  }
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	80002400 	.word	0x80002400
 8002f30:	fe00e800 	.word	0xfe00e800

08002f34 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	4611      	mov	r1, r2
 8002f40:	461a      	mov	r2, r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	817b      	strh	r3, [r7, #10]
 8002f46:	460b      	mov	r3, r1
 8002f48:	813b      	strh	r3, [r7, #8]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	f040 80c2 	bne.w	80030e0 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_I2C_Mem_Read_DMA+0x34>
 8002f62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d105      	bne.n	8002f74 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f6e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0b6      	b.n	80030e2 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f82:	d101      	bne.n	8002f88 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
 8002f86:	e0ac      	b.n	80030e2 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_I2C_Mem_Read_DMA+0x62>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e0a5      	b.n	80030e2 <HAL_I2C_Mem_Read_DMA+0x1ae>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2222      	movs	r2, #34	@ 0x22
 8002fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2240      	movs	r2, #64	@ 0x40
 8002faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a3a      	ldr	r2, [r7, #32]
 8002fb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4a4a      	ldr	r2, [pc, #296]	@ (80030ec <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8002fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4a49      	ldr	r2, [pc, #292]	@ (80030f0 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8002fca:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8002fcc:	897a      	ldrh	r2, [r7, #10]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2bff      	cmp	r3, #255	@ 0xff
 8002fda:	d903      	bls.n	8002fe4 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	22ff      	movs	r2, #255	@ 0xff
 8002fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002fe2:	e004      	b.n	8002fee <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d109      	bne.n	8003008 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ff4:	893b      	ldrh	r3, [r7, #8]
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f04f 32ff 	mov.w	r2, #4294967295
 8003004:	651a      	str	r2, [r3, #80]	@ 0x50
 8003006:	e00b      	b.n	8003020 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003008:	893b      	ldrh	r3, [r7, #8]
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	b29b      	uxth	r3, r3
 800300e:	b2da      	uxtb	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003016:	893b      	ldrh	r3, [r7, #8]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003024:	2b00      	cmp	r3, #0
 8003026:	d020      	beq.n	800306a <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302c:	4a31      	ldr	r2, [pc, #196]	@ (80030f4 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 800302e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003034:	4a30      	ldr	r2, [pc, #192]	@ (80030f8 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8003036:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303c:	2200      	movs	r2, #0
 800303e:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003044:	2200      	movs	r2, #0
 8003046:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3324      	adds	r3, #36	@ 0x24
 8003052:	4619      	mov	r1, r3
 8003054:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800305a:	f7fe ffef 	bl	800203c <HAL_DMA_Start_IT>
 800305e:	4603      	mov	r3, r0
 8003060:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003062:	7dfb      	ldrb	r3, [r7, #23]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d127      	bne.n	80030b8 <HAL_I2C_Mem_Read_DMA+0x184>
 8003068:	e013      	b.n	8003092 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e027      	b.n	80030e2 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	8979      	ldrh	r1, [r7, #10]
 8003098:	4b18      	ldr	r3, [pc, #96]	@ (80030fc <HAL_I2C_Mem_Read_DMA+0x1c8>)
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	2300      	movs	r3, #0
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f001 fcba 	bl	8004a18 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030ac:	2101      	movs	r1, #1
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f001 fce4 	bl	8004a7c <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e014      	b.n	80030e2 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030cc:	f043 0210 	orr.w	r2, r3, #16
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
  }
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	ffff0000 	.word	0xffff0000
 80030f0:	080035b5 	.word	0x080035b5
 80030f4:	0800452f 	.word	0x0800452f
 80030f8:	080045e1 	.word	0x080045e1
 80030fc:	80002000 	.word	0x80002000

08003100 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	70fb      	strb	r3, [r7, #3]
 800315c:	4613      	mov	r3, r2
 800315e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <I2C_Slave_ISR_IT+0x24>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e0ed      	b.n	80033a8 <I2C_Slave_ISR_IT+0x200>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d004      	beq.n	80031f6 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80031ec:	6939      	ldr	r1, [r7, #16]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fea2 	bl	8003f38 <I2C_ITSlaveCplt>
 80031f4:	e0d3      	b.n	800339e <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d04d      	beq.n	800329e <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800320a:	2b00      	cmp	r3, #0
 800320c:	d047      	beq.n	800329e <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d128      	bne.n	800326a <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b28      	cmp	r3, #40	@ 0x28
 8003222:	d108      	bne.n	8003236 <I2C_Slave_ISR_IT+0x8e>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800322a:	d104      	bne.n	8003236 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800322c:	6939      	ldr	r1, [r7, #16]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 ffec 	bl	800420c <I2C_ITListenCplt>
 8003234:	e032      	b.n	800329c <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b29      	cmp	r3, #41	@ 0x29
 8003240:	d10e      	bne.n	8003260 <I2C_Slave_ISR_IT+0xb8>
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003248:	d00a      	beq.n	8003260 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2210      	movs	r2, #16
 8003250:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f001 f947 	bl	80044e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fd44 	bl	8003ce6 <I2C_ITSlaveSeqCplt>
 800325e:	e01d      	b.n	800329c <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2210      	movs	r2, #16
 8003266:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003268:	e096      	b.n	8003398 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2210      	movs	r2, #16
 8003270:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003276:	f043 0204 	orr.w	r2, r3, #4
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d004      	beq.n	800328e <I2C_Slave_ISR_IT+0xe6>
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800328a:	f040 8085 	bne.w	8003398 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	4619      	mov	r1, r3
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f001 f80f 	bl	80042b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800329a:	e07d      	b.n	8003398 <I2C_Slave_ISR_IT+0x1f0>
 800329c:	e07c      	b.n	8003398 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	089b      	lsrs	r3, r3, #2
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d030      	beq.n	800330c <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	089b      	lsrs	r3, r3, #2
 80032ae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d02a      	beq.n	800330c <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d018      	beq.n	80032f2 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d14f      	bne.n	800339c <I2C_Slave_ISR_IT+0x1f4>
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003302:	d04b      	beq.n	800339c <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fcee 	bl	8003ce6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800330a:	e047      	b.n	800339c <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	08db      	lsrs	r3, r3, #3
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	08db      	lsrs	r3, r3, #3
 800331c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003324:	6939      	ldr	r1, [r7, #16]
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 fc1c 	bl	8003b64 <I2C_ITAddrCplt>
 800332c:	e037      	b.n	800339e <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d031      	beq.n	800339e <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003342:	2b00      	cmp	r3, #0
 8003344:	d02b      	beq.n	800339e <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d018      	beq.n	8003382 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	781a      	ldrb	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003380:	e00d      	b.n	800339e <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003388:	d002      	beq.n	8003390 <I2C_Slave_ISR_IT+0x1e8>
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d106      	bne.n	800339e <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fca8 	bl	8003ce6 <I2C_ITSlaveSeqCplt>
 8003396:	e002      	b.n	800339e <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8003398:	bf00      	nop
 800339a:	e000      	b.n	800339e <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800339c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <I2C_Master_ISR_DMA+0x1a>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e0f0      	b.n	80035ac <I2C_Master_ISR_DMA+0x1fc>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d017      	beq.n	800340e <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d011      	beq.n	800340e <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2210      	movs	r2, #16
 80033f0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f6:	f043 0204 	orr.w	r2, r3, #4
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80033fe:	2120      	movs	r1, #32
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f001 fb3b 	bl	8004a7c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f001 f86d 	bl	80044e6 <I2C_Flush_TXDR>
 800340c:	e0c9      	b.n	80035a2 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	09db      	lsrs	r3, r3, #7
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 8081 	beq.w	800351e <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	099b      	lsrs	r3, r3, #6
 8003420:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003424:	2b00      	cmp	r3, #0
 8003426:	d07a      	beq.n	800351e <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003436:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d05c      	beq.n	80034fc <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	b29b      	uxth	r3, r3
 800344a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800344e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	2bff      	cmp	r3, #255	@ 0xff
 8003458:	d914      	bls.n	8003484 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d103      	bne.n	8003476 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003474:	e002      	b.n	800347c <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	22ff      	movs	r2, #255	@ 0xff
 800347a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800347c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	e010      	b.n	80034a6 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003492:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003496:	d003      	beq.n	80034a0 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	e002      	b.n	80034a6 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80034a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034a4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	8a79      	ldrh	r1, [r7, #18]
 80034ae:	2300      	movs	r3, #0
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f001 faaf 	bl	8004a18 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b22      	cmp	r3, #34	@ 0x22
 80034d6:	d108      	bne.n	80034ea <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034e6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80034e8:	e05b      	b.n	80035a2 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80034fa:	e052      	b.n	80035a2 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003506:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800350a:	d003      	beq.n	8003514 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fbad 	bl	8003c6c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003512:	e046      	b.n	80035a2 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003514:	2140      	movs	r1, #64	@ 0x40
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fece 	bl	80042b8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800351c:	e041      	b.n	80035a2 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	099b      	lsrs	r3, r3, #6
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d029      	beq.n	800357e <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	099b      	lsrs	r3, r3, #6
 800352e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003532:	2b00      	cmp	r3, #0
 8003534:	d023      	beq.n	800357e <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d119      	bne.n	8003574 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800354e:	d027      	beq.n	80035a0 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003554:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003558:	d108      	bne.n	800356c <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003568:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800356a:	e019      	b.n	80035a0 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fb7d 	bl	8003c6c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003572:	e015      	b.n	80035a0 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003574:	2140      	movs	r1, #64	@ 0x40
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fe9e 	bl	80042b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800357c:	e010      	b.n	80035a0 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fc03 	bl	8003da4 <I2C_ITMasterCplt>
 800359e:	e000      	b.n	80035a2 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 80035a0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80035c0:	4b94      	ldr	r3, [pc, #592]	@ (8003814 <I2C_Mem_ISR_DMA+0x260>)
 80035c2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <I2C_Mem_ISR_DMA+0x1e>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e139      	b.n	8003846 <I2C_Mem_ISR_DMA+0x292>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	091b      	lsrs	r3, r3, #4
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d017      	beq.n	8003616 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d011      	beq.n	8003616 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2210      	movs	r2, #16
 80035f8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fe:	f043 0204 	orr.w	r2, r3, #4
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003606:	2120      	movs	r1, #32
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f001 fa37 	bl	8004a7c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 ff69 	bl	80044e6 <I2C_Flush_TXDR>
 8003614:	e112      	b.n	800383c <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	085b      	lsrs	r3, r3, #1
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00f      	beq.n	8003642 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003636:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f04f 32ff 	mov.w	r2, #4294967295
 800363e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003640:	e0fc      	b.n	800383c <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	09db      	lsrs	r3, r3, #7
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d06e      	beq.n	800372c <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003656:	2b00      	cmp	r3, #0
 8003658:	d068      	beq.n	800372c <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800365a:	2101      	movs	r1, #1
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f001 fa91 	bl	8004b84 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003662:	2110      	movs	r1, #16
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f001 fa09 	bl	8004a7c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d056      	beq.n	8003722 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	2bff      	cmp	r3, #255	@ 0xff
 800367c:	d91e      	bls.n	80036bc <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	0c1b      	lsrs	r3, r3, #16
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d103      	bne.n	800369a <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003698:	e002      	b.n	80036a0 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	22ff      	movs	r2, #255	@ 0xff
 800369e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036a4:	b299      	uxth	r1, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	2300      	movs	r3, #0
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f001 f9af 	bl	8004a18 <I2C_TransferConfig>
 80036ba:	e011      	b.n	80036e0 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ca:	b299      	uxth	r1, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	2300      	movs	r3, #0
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f001 f99c 	bl	8004a18 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b22      	cmp	r3, #34	@ 0x22
 80036fc:	d108      	bne.n	8003710 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800370c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800370e:	e095      	b.n	800383c <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800371e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003720:	e08c      	b.n	800383c <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003722:	2140      	movs	r1, #64	@ 0x40
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fdc7 	bl	80042b8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800372a:	e087      	b.n	800383c <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	099b      	lsrs	r3, r3, #6
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d071      	beq.n	800381c <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	099b      	lsrs	r3, r3, #6
 800373c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003740:	2b00      	cmp	r3, #0
 8003742:	d06b      	beq.n	800381c <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003744:	2101      	movs	r1, #1
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f001 fa1c 	bl	8004b84 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800374c:	2110      	movs	r1, #16
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f001 f994 	bl	8004a7c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b22      	cmp	r3, #34	@ 0x22
 800375e:	d101      	bne.n	8003764 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8003760:	4b2d      	ldr	r3, [pc, #180]	@ (8003818 <I2C_Mem_ISR_DMA+0x264>)
 8003762:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	2bff      	cmp	r3, #255	@ 0xff
 800376c:	d91e      	bls.n	80037ac <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	0c1b      	lsrs	r3, r3, #16
 8003776:	b2db      	uxtb	r3, r3
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b01      	cmp	r3, #1
 8003780:	d103      	bne.n	800378a <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003788:	e002      	b.n	8003790 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	22ff      	movs	r2, #255	@ 0xff
 800378e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003794:	b299      	uxth	r1, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379a:	b2da      	uxtb	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f001 f937 	bl	8004a18 <I2C_TransferConfig>
 80037aa:	e011      	b.n	80037d0 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ba:	b299      	uxth	r1, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f001 f924 	bl	8004a18 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b22      	cmp	r3, #34	@ 0x22
 80037ec:	d108      	bne.n	8003800 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037fc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037fe:	e01d      	b.n	800383c <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800380e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003810:	e014      	b.n	800383c <I2C_Mem_ISR_DMA+0x288>
 8003812:	bf00      	nop
 8003814:	80002000 	.word	0x80002000
 8003818:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d009      	beq.n	800383c <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fab4 	bl	8003da4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop

08003850 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <I2C_Slave_ISR_DMA+0x24>
 8003870:	2302      	movs	r3, #2
 8003872:	e0ca      	b.n	8003a0a <I2C_Slave_ISR_DMA+0x1ba>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fb4e 	bl	8003f38 <I2C_ITSlaveCplt>
 800389c:	e0b0      	b.n	8003a00 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 809a 	beq.w	80039e0 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	091b      	lsrs	r3, r3, #4
 80038b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8093 	beq.w	80039e0 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	0b9b      	lsrs	r3, r3, #14
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d105      	bne.n	80038d2 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	0bdb      	lsrs	r3, r3, #15
 80038ca:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d07f      	beq.n	80039d2 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00d      	beq.n	80038f6 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	0bdb      	lsrs	r3, r3, #15
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80038f2:	2301      	movs	r3, #1
 80038f4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00d      	beq.n	800391a <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	0b9b      	lsrs	r3, r3, #14
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8003916:	2301      	movs	r3, #1
 8003918:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d128      	bne.n	8003972 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b28      	cmp	r3, #40	@ 0x28
 800392a:	d108      	bne.n	800393e <I2C_Slave_ISR_DMA+0xee>
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003932:	d104      	bne.n	800393e <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fc68 	bl	800420c <I2C_ITListenCplt>
 800393c:	e048      	b.n	80039d0 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b29      	cmp	r3, #41	@ 0x29
 8003948:	d10e      	bne.n	8003968 <I2C_Slave_ISR_DMA+0x118>
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003950:	d00a      	beq.n	8003968 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2210      	movs	r2, #16
 8003958:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fdc3 	bl	80044e6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f9c0 	bl	8003ce6 <I2C_ITSlaveSeqCplt>
 8003966:	e033      	b.n	80039d0 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2210      	movs	r2, #16
 800396e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003970:	e034      	b.n	80039dc <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2210      	movs	r2, #16
 8003978:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397e:	f043 0204 	orr.w	r2, r3, #4
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800398c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <I2C_Slave_ISR_DMA+0x14c>
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800399a:	d11f      	bne.n	80039dc <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	2b21      	cmp	r3, #33	@ 0x21
 80039a0:	d002      	beq.n	80039a8 <I2C_Slave_ISR_DMA+0x158>
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
 80039a4:	2b29      	cmp	r3, #41	@ 0x29
 80039a6:	d103      	bne.n	80039b0 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2221      	movs	r2, #33	@ 0x21
 80039ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80039ae:	e008      	b.n	80039c2 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	2b22      	cmp	r3, #34	@ 0x22
 80039b4:	d002      	beq.n	80039bc <I2C_Slave_ISR_DMA+0x16c>
 80039b6:	7dfb      	ldrb	r3, [r7, #23]
 80039b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80039ba:	d102      	bne.n	80039c2 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2222      	movs	r2, #34	@ 0x22
 80039c0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	4619      	mov	r1, r3
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fc75 	bl	80042b8 <I2C_ITError>
      if (treatdmanack == 1U)
 80039ce:	e005      	b.n	80039dc <I2C_Slave_ISR_DMA+0x18c>
 80039d0:	e004      	b.n	80039dc <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2210      	movs	r2, #16
 80039d8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80039da:	e011      	b.n	8003a00 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80039dc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80039de:	e00f      	b.n	8003a00 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	08db      	lsrs	r3, r3, #3
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d009      	beq.n	8003a00 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	08db      	lsrs	r3, r3, #3
 80039f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f8b2 	bl	8003b64 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3720      	adds	r7, #32
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	4611      	mov	r1, r2
 8003a20:	461a      	mov	r2, r3
 8003a22:	4603      	mov	r3, r0
 8003a24:	817b      	strh	r3, [r7, #10]
 8003a26:	460b      	mov	r3, r1
 8003a28:	813b      	strh	r3, [r7, #8]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	8979      	ldrh	r1, [r7, #10]
 8003a34:	4b20      	ldr	r3, [pc, #128]	@ (8003ab8 <I2C_RequestMemoryWrite+0xa4>)
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 ffeb 	bl	8004a18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	69b9      	ldr	r1, [r7, #24]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fe7b 	bl	8004742 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e02c      	b.n	8003ab0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a5c:	893b      	ldrh	r3, [r7, #8]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a66:	e015      	b.n	8003a94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a68:	893b      	ldrh	r3, [r7, #8]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	69b9      	ldr	r1, [r7, #24]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fe61 	bl	8004742 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e012      	b.n	8003ab0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a8a:	893b      	ldrh	r3, [r7, #8]
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2180      	movs	r1, #128	@ 0x80
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fdf6 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	80002000 	.word	0x80002000

08003abc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	817b      	strh	r3, [r7, #10]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	813b      	strh	r3, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	8979      	ldrh	r1, [r7, #10]
 8003adc:	4b20      	ldr	r3, [pc, #128]	@ (8003b60 <I2C_RequestMemoryRead+0xa4>)
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 ff98 	bl	8004a18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae8:	69fa      	ldr	r2, [r7, #28]
 8003aea:	69b9      	ldr	r1, [r7, #24]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fe28 	bl	8004742 <I2C_WaitOnTXISFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e02c      	b.n	8003b56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d105      	bne.n	8003b0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b02:	893b      	ldrh	r3, [r7, #8]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b0c:	e015      	b.n	8003b3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b0e:	893b      	ldrh	r3, [r7, #8]
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	69b9      	ldr	r1, [r7, #24]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fe0e 	bl	8004742 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e012      	b.n	8003b56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b30:	893b      	ldrh	r3, [r7, #8]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	2200      	movs	r2, #0
 8003b42:	2140      	movs	r1, #64	@ 0x40
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 fda3 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	80002000 	.word	0x80002000

08003b64 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b7a:	2b28      	cmp	r3, #40	@ 0x28
 8003b7c:	d16a      	bne.n	8003c54 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	0c1b      	lsrs	r3, r3, #16
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003b9c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003baa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003bb8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d138      	bne.n	8003c34 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003bc2:	897b      	ldrh	r3, [r7, #10]
 8003bc4:	09db      	lsrs	r3, r3, #7
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	89bb      	ldrh	r3, [r7, #12]
 8003bca:	4053      	eors	r3, r2
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f003 0306 	and.w	r3, r3, #6
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d11c      	bne.n	8003c10 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003bd6:	897b      	ldrh	r3, [r7, #10]
 8003bd8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d13b      	bne.n	8003c64 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2208      	movs	r2, #8
 8003bf8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c02:	89ba      	ldrh	r2, [r7, #12]
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	4619      	mov	r1, r3
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff faa1 	bl	8003150 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003c0e:	e029      	b.n	8003c64 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003c10:	893b      	ldrh	r3, [r7, #8]
 8003c12:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003c14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 ffb3 	bl	8004b84 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c26:	89ba      	ldrh	r2, [r7, #12]
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff fa8f 	bl	8003150 <HAL_I2C_AddrCallback>
}
 8003c32:	e017      	b.n	8003c64 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003c34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 ffa3 	bl	8004b84 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c46:	89ba      	ldrh	r2, [r7, #12]
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff fa7f 	bl	8003150 <HAL_I2C_AddrCallback>
}
 8003c52:	e007      	b.n	8003c64 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2208      	movs	r2, #8
 8003c5a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003c64:	bf00      	nop
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b21      	cmp	r3, #33	@ 0x21
 8003c86:	d115      	bne.n	8003cb4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2211      	movs	r2, #17
 8003c94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 ff70 	bl	8004b84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff fa27 	bl	8003100 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cb2:	e014      	b.n	8003cde <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2212      	movs	r2, #18
 8003cc0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003cc8:	2102      	movs	r1, #2
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 ff5a 	bl	8004b84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff fa1b 	bl	8003114 <HAL_I2C_MasterRxCpltCallback>
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	0b9b      	lsrs	r3, r3, #14
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	e00d      	b.n	8003d38 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	0bdb      	lsrs	r3, r3, #15
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d36:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b29      	cmp	r3, #41	@ 0x29
 8003d42:	d112      	bne.n	8003d6a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2228      	movs	r2, #40	@ 0x28
 8003d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2221      	movs	r2, #33	@ 0x21
 8003d50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d52:	2101      	movs	r1, #1
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 ff15 	bl	8004b84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff f9e0 	bl	8003128 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d68:	e017      	b.n	8003d9a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d74:	d111      	bne.n	8003d9a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2228      	movs	r2, #40	@ 0x28
 8003d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2222      	movs	r2, #34	@ 0x22
 8003d82:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d84:	2102      	movs	r1, #2
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fefc 	bl	8004b84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff f9d1 	bl	800313c <HAL_I2C_SlaveRxCpltCallback>
}
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2220      	movs	r2, #32
 8003db8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b21      	cmp	r3, #33	@ 0x21
 8003dc4:	d107      	bne.n	8003dd6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fedb 	bl	8004b84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2211      	movs	r2, #17
 8003dd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003dd4:	e00c      	b.n	8003df0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b22      	cmp	r3, #34	@ 0x22
 8003de0:	d106      	bne.n	8003df0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003de2:	2102      	movs	r1, #2
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fecd 	bl	8004b84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2212      	movs	r2, #18
 8003dee:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6859      	ldr	r1, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4b4d      	ldr	r3, [pc, #308]	@ (8003f30 <I2C_ITMasterCplt+0x18c>)
 8003dfc:	400b      	ands	r3, r1
 8003dfe:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a4a      	ldr	r2, [pc, #296]	@ (8003f34 <I2C_ITMasterCplt+0x190>)
 8003e0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	091b      	lsrs	r3, r3, #4
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e24:	f043 0204 	orr.w	r2, r3, #4
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b60      	cmp	r3, #96	@ 0x60
 8003e36:	d10b      	bne.n	8003e50 <I2C_ITMasterCplt+0xac>
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	089b      	lsrs	r3, r3, #2
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fb48 	bl	80044e6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b60      	cmp	r3, #96	@ 0x60
 8003e66:	d002      	beq.n	8003e6e <I2C_ITMasterCplt+0xca>
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d006      	beq.n	8003e7c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e72:	4619      	mov	r1, r3
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fa1f 	bl	80042b8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e7a:	e054      	b.n	8003f26 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b21      	cmp	r3, #33	@ 0x21
 8003e86:	d124      	bne.n	8003ed2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ea0:	d10b      	bne.n	8003eba <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff f964 	bl	8003180 <HAL_I2C_MemTxCpltCallback>
}
 8003eb8:	e035      	b.n	8003f26 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff f918 	bl	8003100 <HAL_I2C_MasterTxCpltCallback>
}
 8003ed0:	e029      	b.n	8003f26 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b22      	cmp	r3, #34	@ 0x22
 8003edc:	d123      	bne.n	8003f26 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b40      	cmp	r3, #64	@ 0x40
 8003ef6:	d10b      	bne.n	8003f10 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7fd f9eb 	bl	80012e4 <HAL_I2C_MemRxCpltCallback>
}
 8003f0e:	e00a      	b.n	8003f26 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff f8f7 	bl	8003114 <HAL_I2C_MasterRxCpltCallback>
}
 8003f26:	bf00      	nop
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	fe00e800 	.word	0xfe00e800
 8003f34:	ffff0000 	.word	0xffff0000

08003f38 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f5a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2220      	movs	r2, #32
 8003f62:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f64:	7afb      	ldrb	r3, [r7, #11]
 8003f66:	2b21      	cmp	r3, #33	@ 0x21
 8003f68:	d002      	beq.n	8003f70 <I2C_ITSlaveCplt+0x38>
 8003f6a:	7afb      	ldrb	r3, [r7, #11]
 8003f6c:	2b29      	cmp	r3, #41	@ 0x29
 8003f6e:	d108      	bne.n	8003f82 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003f70:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fe05 	bl	8004b84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2221      	movs	r2, #33	@ 0x21
 8003f7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f80:	e019      	b.n	8003fb6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f82:	7afb      	ldrb	r3, [r7, #11]
 8003f84:	2b22      	cmp	r3, #34	@ 0x22
 8003f86:	d002      	beq.n	8003f8e <I2C_ITSlaveCplt+0x56>
 8003f88:	7afb      	ldrb	r3, [r7, #11]
 8003f8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f8c:	d108      	bne.n	8003fa0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003f8e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fdf6 	bl	8004b84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2222      	movs	r2, #34	@ 0x22
 8003f9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f9e:	e00a      	b.n	8003fb6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003fa0:	7afb      	ldrb	r3, [r7, #11]
 8003fa2:	2b28      	cmp	r3, #40	@ 0x28
 8003fa4:	d107      	bne.n	8003fb6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003fa6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fdea 	bl	8004b84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fc4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6859      	ldr	r1, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b8c      	ldr	r3, [pc, #560]	@ (8004204 <I2C_ITSlaveCplt+0x2cc>)
 8003fd2:	400b      	ands	r3, r1
 8003fd4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fa85 	bl	80044e6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	0b9b      	lsrs	r3, r3, #14
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d013      	beq.n	8004010 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ff6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d020      	beq.n	8004042 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	b29a      	uxth	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800400e:	e018      	b.n	8004042 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	0bdb      	lsrs	r3, r3, #15
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d012      	beq.n	8004042 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800402a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d006      	beq.n	8004042 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	b29a      	uxth	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	089b      	lsrs	r3, r3, #2
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d020      	beq.n	8004090 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f023 0304 	bic.w	r3, r3, #4
 8004054:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00c      	beq.n	8004090 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409e:	f043 0204 	orr.w	r2, r3, #4
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d04a      	beq.n	8004148 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d044      	beq.n	8004148 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d128      	bne.n	800411a <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b28      	cmp	r3, #40	@ 0x28
 80040d2:	d108      	bne.n	80040e6 <I2C_ITSlaveCplt+0x1ae>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040da:	d104      	bne.n	80040e6 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80040dc:	6979      	ldr	r1, [r7, #20]
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f894 	bl	800420c <I2C_ITListenCplt>
 80040e4:	e030      	b.n	8004148 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b29      	cmp	r3, #41	@ 0x29
 80040f0:	d10e      	bne.n	8004110 <I2C_ITSlaveCplt+0x1d8>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040f8:	d00a      	beq.n	8004110 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2210      	movs	r2, #16
 8004100:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f9ef 	bl	80044e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff fdec 	bl	8003ce6 <I2C_ITSlaveSeqCplt>
 800410e:	e01b      	b.n	8004148 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2210      	movs	r2, #16
 8004116:	61da      	str	r2, [r3, #28]
 8004118:	e016      	b.n	8004148 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2210      	movs	r2, #16
 8004120:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	f043 0204 	orr.w	r2, r3, #4
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <I2C_ITSlaveCplt+0x204>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800413a:	d105      	bne.n	8004148 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004140:	4619      	mov	r1, r3
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f8b8 	bl	80042b8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415a:	2b00      	cmp	r3, #0
 800415c:	d010      	beq.n	8004180 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004162:	4619      	mov	r1, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f8a7 	bl	80042b8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b28      	cmp	r3, #40	@ 0x28
 8004174:	d141      	bne.n	80041fa <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004176:	6979      	ldr	r1, [r7, #20]
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f847 	bl	800420c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800417e:	e03c      	b.n	80041fa <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004188:	d014      	beq.n	80041b4 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff fdab 	bl	8003ce6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a1d      	ldr	r2, [pc, #116]	@ (8004208 <I2C_ITSlaveCplt+0x2d0>)
 8004194:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7fe ffdd 	bl	800316c <HAL_I2C_ListenCpltCallback>
}
 80041b2:	e022      	b.n	80041fa <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b22      	cmp	r3, #34	@ 0x22
 80041be:	d10e      	bne.n	80041de <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fe ffb0 	bl	800313c <HAL_I2C_SlaveRxCpltCallback>
}
 80041dc:	e00d      	b.n	80041fa <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7fe ff97 	bl	8003128 <HAL_I2C_SlaveTxCpltCallback>
}
 80041fa:	bf00      	nop
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	fe00e800 	.word	0xfe00e800
 8004208:	ffff0000 	.word	0xffff0000

0800420c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a26      	ldr	r2, [pc, #152]	@ (80042b4 <I2C_ITListenCplt+0xa8>)
 800421a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	089b      	lsrs	r3, r3, #2
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d022      	beq.n	800428a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004260:	2b00      	cmp	r3, #0
 8004262:	d012      	beq.n	800428a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	f043 0204 	orr.w	r2, r3, #4
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800428a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fc78 	bl	8004b84 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2210      	movs	r2, #16
 800429a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7fe ff61 	bl	800316c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	ffff0000 	.word	0xffff0000

080042b8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042c8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a6d      	ldr	r2, [pc, #436]	@ (800448c <I2C_ITError+0x1d4>)
 80042d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	2b28      	cmp	r3, #40	@ 0x28
 80042ee:	d005      	beq.n	80042fc <I2C_ITError+0x44>
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b29      	cmp	r3, #41	@ 0x29
 80042f4:	d002      	beq.n	80042fc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80042fa:	d10b      	bne.n	8004314 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042fc:	2103      	movs	r1, #3
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fc40 	bl	8004b84 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2228      	movs	r2, #40	@ 0x28
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a60      	ldr	r2, [pc, #384]	@ (8004490 <I2C_ITError+0x1d8>)
 8004310:	635a      	str	r2, [r3, #52]	@ 0x34
 8004312:	e030      	b.n	8004376 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004314:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fc33 	bl	8004b84 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f8e1 	bl	80044e6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b60      	cmp	r3, #96	@ 0x60
 800432e:	d01f      	beq.n	8004370 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b20      	cmp	r3, #32
 8004344:	d114      	bne.n	8004370 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f003 0310 	and.w	r3, r3, #16
 8004350:	2b10      	cmp	r3, #16
 8004352:	d109      	bne.n	8004368 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2210      	movs	r2, #16
 800435a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004360:	f043 0204 	orr.w	r2, r3, #4
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2220      	movs	r2, #32
 800436e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004380:	2b00      	cmp	r3, #0
 8004382:	d039      	beq.n	80043f8 <I2C_ITError+0x140>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b11      	cmp	r3, #17
 8004388:	d002      	beq.n	8004390 <I2C_ITError+0xd8>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b21      	cmp	r3, #33	@ 0x21
 800438e:	d133      	bne.n	80043f8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800439a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800439e:	d107      	bne.n	80043b0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80043ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe f84d 	bl	8002454 <HAL_DMA_GetState>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d017      	beq.n	80043f0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c4:	4a33      	ldr	r2, [pc, #204]	@ (8004494 <I2C_ITError+0x1dc>)
 80043c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fd fe91 	bl	80020fc <HAL_DMA_Abort_IT>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d04d      	beq.n	800447c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043ea:	4610      	mov	r0, r2
 80043ec:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043ee:	e045      	b.n	800447c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f851 	bl	8004498 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043f6:	e041      	b.n	800447c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d039      	beq.n	8004474 <I2C_ITError+0x1bc>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b12      	cmp	r3, #18
 8004404:	d002      	beq.n	800440c <I2C_ITError+0x154>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b22      	cmp	r3, #34	@ 0x22
 800440a:	d133      	bne.n	8004474 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004416:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800441a:	d107      	bne.n	800442c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800442a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004430:	4618      	mov	r0, r3
 8004432:	f7fe f80f 	bl	8002454 <HAL_DMA_GetState>
 8004436:	4603      	mov	r3, r0
 8004438:	2b01      	cmp	r3, #1
 800443a:	d017      	beq.n	800446c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004440:	4a14      	ldr	r2, [pc, #80]	@ (8004494 <I2C_ITError+0x1dc>)
 8004442:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004450:	4618      	mov	r0, r3
 8004452:	f7fd fe53 	bl	80020fc <HAL_DMA_Abort_IT>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d011      	beq.n	8004480 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004466:	4610      	mov	r0, r2
 8004468:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800446a:	e009      	b.n	8004480 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f813 	bl	8004498 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004472:	e005      	b.n	8004480 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f80f 	bl	8004498 <I2C_TreatErrorCallback>
  }
}
 800447a:	e002      	b.n	8004482 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800447c:	bf00      	nop
 800447e:	e000      	b.n	8004482 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004480:	bf00      	nop
}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	ffff0000 	.word	0xffff0000
 8004490:	080031a9 	.word	0x080031a9
 8004494:	08004655 	.word	0x08004655

08004498 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b60      	cmp	r3, #96	@ 0x60
 80044aa:	d10e      	bne.n	80044ca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fe fe66 	bl	8003194 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044c8:	e009      	b.n	80044de <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7fc ff0e 	bl	80012fa <HAL_I2C_ErrorCallback>
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d103      	bne.n	8004504 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2200      	movs	r2, #0
 8004502:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b01      	cmp	r3, #1
 8004510:	d007      	beq.n	8004522 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699a      	ldr	r2, [r3, #24]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0201 	orr.w	r2, r2, #1
 8004520:	619a      	str	r2, [r3, #24]
  }
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800454a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d104      	bne.n	8004560 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004556:	2120      	movs	r1, #32
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 fa8f 	bl	8004a7c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800455e:	e03b      	b.n	80045d8 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004568:	441a      	add	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	2bff      	cmp	r3, #255	@ 0xff
 8004576:	d911      	bls.n	800459c <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d103      	bne.n	8004594 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004592:	e008      	b.n	80045a6 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	22ff      	movs	r2, #255	@ 0xff
 8004598:	851a      	strh	r2, [r3, #40]	@ 0x28
 800459a:	e004      	b.n	80045a6 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3324      	adds	r3, #36	@ 0x24
 80045b0:	4619      	mov	r1, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80045bc:	f7fd fd3e 	bl	800203c <HAL_DMA_Start_IT>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d004      	beq.n	80045d0 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80045c6:	2110      	movs	r1, #16
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f7ff fe75 	bl	80042b8 <I2C_ITError>
}
 80045ce:	e003      	b.n	80045d8 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80045d0:	2140      	movs	r1, #64	@ 0x40
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 fa52 	bl	8004a7c <I2C_Enable_IRQ>
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d007      	beq.n	800460a <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8004606:	2301      	movs	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d007      	beq.n	8004622 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 800461e:	2301      	movs	r3, #1
 8004620:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fd ff24 	bl	8002470 <HAL_DMA_GetError>
 8004628:	4603      	mov	r3, r0
 800462a:	2b02      	cmp	r3, #2
 800462c:	d00e      	beq.n	800464c <I2C_DMAError+0x6c>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00b      	beq.n	800464c <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004642:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004644:	2110      	movs	r1, #16
 8004646:	68b8      	ldr	r0, [r7, #8]
 8004648:	f7ff fe36 	bl	80042b8 <I2C_ITError>
  }
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004660:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466e:	2200      	movs	r2, #0
 8004670:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800467e:	2200      	movs	r2, #0
 8004680:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f7ff ff08 	bl	8004498 <I2C_TreatErrorCallback>
}
 8004688:	bf00      	nop
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046a0:	e03b      	b.n	800471a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	6839      	ldr	r1, [r7, #0]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f8d6 	bl	8004858 <I2C_IsErrorOccurred>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e041      	b.n	800473a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d02d      	beq.n	800471a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046be:	f7fd facd 	bl	8001c5c <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d302      	bcc.n	80046d4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d122      	bne.n	800471a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4013      	ands	r3, r2
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	bf0c      	ite	eq
 80046e4:	2301      	moveq	r3, #1
 80046e6:	2300      	movne	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	461a      	mov	r2, r3
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d113      	bne.n	800471a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f6:	f043 0220 	orr.w	r2, r3, #32
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e00f      	b.n	800473a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699a      	ldr	r2, [r3, #24]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4013      	ands	r3, r2
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	429a      	cmp	r2, r3
 8004728:	bf0c      	ite	eq
 800472a:	2301      	moveq	r3, #1
 800472c:	2300      	movne	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	429a      	cmp	r2, r3
 8004736:	d0b4      	beq.n	80046a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800474e:	e033      	b.n	80047b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f87f 	bl	8004858 <I2C_IsErrorOccurred>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e031      	b.n	80047c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d025      	beq.n	80047b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476c:	f7fd fa76 	bl	8001c5c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	429a      	cmp	r2, r3
 800477a:	d302      	bcc.n	8004782 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d11a      	bne.n	80047b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b02      	cmp	r3, #2
 800478e:	d013      	beq.n	80047b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004794:	f043 0220 	orr.w	r2, r3, #32
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e007      	b.n	80047c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d1c4      	bne.n	8004750 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047dc:	e02f      	b.n	800483e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f838 	bl	8004858 <I2C_IsErrorOccurred>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e02d      	b.n	800484e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f2:	f7fd fa33 	bl	8001c5c <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d302      	bcc.n	8004808 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d11a      	bne.n	800483e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b20      	cmp	r3, #32
 8004814:	d013      	beq.n	800483e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e007      	b.n	800484e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b20      	cmp	r3, #32
 800484a:	d1c8      	bne.n	80047de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	@ 0x28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004872:	2300      	movs	r3, #0
 8004874:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	d068      	beq.n	8004956 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2210      	movs	r2, #16
 800488a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800488c:	e049      	b.n	8004922 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004894:	d045      	beq.n	8004922 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004896:	f7fd f9e1 	bl	8001c5c <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d302      	bcc.n	80048ac <I2C_IsErrorOccurred+0x54>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d13a      	bne.n	8004922 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ce:	d121      	bne.n	8004914 <I2C_IsErrorOccurred+0xbc>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048d6:	d01d      	beq.n	8004914 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80048d8:	7cfb      	ldrb	r3, [r7, #19]
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d01a      	beq.n	8004914 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048ee:	f7fd f9b5 	bl	8001c5c <HAL_GetTick>
 80048f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048f4:	e00e      	b.n	8004914 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048f6:	f7fd f9b1 	bl	8001c5c <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b19      	cmp	r3, #25
 8004902:	d907      	bls.n	8004914 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	f043 0320 	orr.w	r3, r3, #32
 800490a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004912:	e006      	b.n	8004922 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b20      	cmp	r3, #32
 8004920:	d1e9      	bne.n	80048f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b20      	cmp	r3, #32
 800492e:	d003      	beq.n	8004938 <I2C_IsErrorOccurred+0xe0>
 8004930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0aa      	beq.n	800488e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800493c:	2b00      	cmp	r3, #0
 800493e:	d103      	bne.n	8004948 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2220      	movs	r2, #32
 8004946:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	f043 0304 	orr.w	r3, r3, #4
 800494e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00b      	beq.n	8004980 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	f043 0301 	orr.w	r3, r3, #1
 800496e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004978:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	f043 0308 	orr.w	r3, r3, #8
 8004990:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800499a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00b      	beq.n	80049c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	f043 0302 	orr.w	r3, r3, #2
 80049b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80049c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01c      	beq.n	8004a06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f7ff fd8a 	bl	80044e6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004a14 <I2C_IsErrorOccurred+0x1bc>)
 80049de:	400b      	ands	r3, r1
 80049e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	431a      	orrs	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004a06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3728      	adds	r7, #40	@ 0x28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	fe00e800 	.word	0xfe00e800

08004a18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	460b      	mov	r3, r1
 8004a24:	817b      	strh	r3, [r7, #10]
 8004a26:	4613      	mov	r3, r2
 8004a28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a2a:	897b      	ldrh	r3, [r7, #10]
 8004a2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a30:	7a7b      	ldrb	r3, [r7, #9]
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a38:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a46:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	0d5b      	lsrs	r3, r3, #21
 8004a52:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004a56:	4b08      	ldr	r3, [pc, #32]	@ (8004a78 <I2C_TransferConfig+0x60>)
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	ea02 0103 	and.w	r1, r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	03ff63ff 	.word	0x03ff63ff

08004a7c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a90:	4a39      	ldr	r2, [pc, #228]	@ (8004b78 <I2C_Enable_IRQ+0xfc>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d032      	beq.n	8004afc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004a9a:	4a38      	ldr	r2, [pc, #224]	@ (8004b7c <I2C_Enable_IRQ+0x100>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d02d      	beq.n	8004afc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004aa4:	4a36      	ldr	r2, [pc, #216]	@ (8004b80 <I2C_Enable_IRQ+0x104>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d028      	beq.n	8004afc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004aaa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	da03      	bge.n	8004aba <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004ab8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004aba:	887b      	ldrh	r3, [r7, #2]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004aca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004acc:	887b      	ldrh	r3, [r7, #2]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004adc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004ade:	887b      	ldrh	r3, [r7, #2]
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	d103      	bne.n	8004aec <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004aea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004aec:	887b      	ldrh	r3, [r7, #2]
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	d133      	bne.n	8004b5a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f043 0320 	orr.w	r3, r3, #32
 8004af8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004afa:	e02e      	b.n	8004b5a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004afc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	da03      	bge.n	8004b0c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004b0a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b0c:	887b      	ldrh	r3, [r7, #2]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004b1c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004b1e:	887b      	ldrh	r3, [r7, #2]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004b2e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004b30:	887b      	ldrh	r3, [r7, #2]
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d103      	bne.n	8004b3e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004b3c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b3e:	887b      	ldrh	r3, [r7, #2]
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d103      	bne.n	8004b4c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004b4a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b4c:	887b      	ldrh	r3, [r7, #2]
 8004b4e:	2b40      	cmp	r3, #64	@ 0x40
 8004b50:	d103      	bne.n	8004b5a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b58:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6819      	ldr	r1, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]
}
 8004b6a:	bf00      	nop
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	080033b1 	.word	0x080033b1
 8004b7c:	08003851 	.word	0x08003851
 8004b80:	080035b5 	.word	0x080035b5

08004b84 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b94:	887b      	ldrh	r3, [r7, #2]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00f      	beq.n	8004bbe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004ba4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bb2:	2b28      	cmp	r3, #40	@ 0x28
 8004bb4:	d003      	beq.n	8004bbe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004bbc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004bbe:	887b      	ldrh	r3, [r7, #2]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00f      	beq.n	8004be8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004bce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bdc:	2b28      	cmp	r3, #40	@ 0x28
 8004bde:	d003      	beq.n	8004be8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004be6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004be8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	da03      	bge.n	8004bf8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004bf6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004bf8:	887b      	ldrh	r3, [r7, #2]
 8004bfa:	2b10      	cmp	r3, #16
 8004bfc:	d103      	bne.n	8004c06 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004c04:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c06:	887b      	ldrh	r3, [r7, #2]
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d103      	bne.n	8004c14 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f043 0320 	orr.w	r3, r3, #32
 8004c12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004c14:	887b      	ldrh	r3, [r7, #2]
 8004c16:	2b40      	cmp	r3, #64	@ 0x40
 8004c18:	d103      	bne.n	8004c22 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c20:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6819      	ldr	r1, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	43da      	mvns	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	400a      	ands	r2, r1
 8004c32:	601a      	str	r2, [r3, #0]
}
 8004c34:	bf00      	nop
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	d138      	bne.n	8004cc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e032      	b.n	8004cca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2224      	movs	r2, #36	@ 0x24
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0201 	bic.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6819      	ldr	r1, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e000      	b.n	8004cca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cc8:	2302      	movs	r3, #2
  }
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b085      	sub	sp, #20
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d139      	bne.n	8004d60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e033      	b.n	8004d62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2224      	movs	r2, #36	@ 0x24
 8004d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	021b      	lsls	r3, r3, #8
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e000      	b.n	8004d62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
  }
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d7a:	4b23      	ldr	r3, [pc, #140]	@ (8004e08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	4a22      	ldr	r2, [pc, #136]	@ (8004e08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d86:	4b20      	ldr	r3, [pc, #128]	@ (8004e08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d92:	4b1e      	ldr	r3, [pc, #120]	@ (8004e0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1d      	ldr	r2, [pc, #116]	@ (8004e0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d9c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d9e:	f7fc ff5d 	bl	8001c5c <HAL_GetTick>
 8004da2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004da4:	e009      	b.n	8004dba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004da6:	f7fc ff59 	bl	8001c5c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004db4:	d901      	bls.n	8004dba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e022      	b.n	8004e00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004dba:	4b14      	ldr	r3, [pc, #80]	@ (8004e0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc6:	d1ee      	bne.n	8004da6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004dc8:	4b10      	ldr	r3, [pc, #64]	@ (8004e0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a0f      	ldr	r2, [pc, #60]	@ (8004e0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dd2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dd4:	f7fc ff42 	bl	8001c5c <HAL_GetTick>
 8004dd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004dda:	e009      	b.n	8004df0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ddc:	f7fc ff3e 	bl	8001c5c <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004dea:	d901      	bls.n	8004df0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e007      	b.n	8004e00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004df0:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dfc:	d1ee      	bne.n	8004ddc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	40007000 	.word	0x40007000

08004e10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e291      	b.n	800534a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 8087 	beq.w	8004f42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e34:	4b96      	ldr	r3, [pc, #600]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 030c 	and.w	r3, r3, #12
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d00c      	beq.n	8004e5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e40:	4b93      	ldr	r3, [pc, #588]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 030c 	and.w	r3, r3, #12
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d112      	bne.n	8004e72 <HAL_RCC_OscConfig+0x62>
 8004e4c:	4b90      	ldr	r3, [pc, #576]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e58:	d10b      	bne.n	8004e72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e5a:	4b8d      	ldr	r3, [pc, #564]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d06c      	beq.n	8004f40 <HAL_RCC_OscConfig+0x130>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d168      	bne.n	8004f40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e26b      	b.n	800534a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e7a:	d106      	bne.n	8004e8a <HAL_RCC_OscConfig+0x7a>
 8004e7c:	4b84      	ldr	r3, [pc, #528]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a83      	ldr	r2, [pc, #524]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e02e      	b.n	8004ee8 <HAL_RCC_OscConfig+0xd8>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10c      	bne.n	8004eac <HAL_RCC_OscConfig+0x9c>
 8004e92:	4b7f      	ldr	r3, [pc, #508]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a7e      	ldr	r2, [pc, #504]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	4b7c      	ldr	r3, [pc, #496]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a7b      	ldr	r2, [pc, #492]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004ea4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	e01d      	b.n	8004ee8 <HAL_RCC_OscConfig+0xd8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0xc0>
 8004eb6:	4b76      	ldr	r3, [pc, #472]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a75      	ldr	r2, [pc, #468]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004ebc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	4b73      	ldr	r3, [pc, #460]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a72      	ldr	r2, [pc, #456]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	e00b      	b.n	8004ee8 <HAL_RCC_OscConfig+0xd8>
 8004ed0:	4b6f      	ldr	r3, [pc, #444]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a6e      	ldr	r2, [pc, #440]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eda:	6013      	str	r3, [r2, #0]
 8004edc:	4b6c      	ldr	r3, [pc, #432]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a6b      	ldr	r2, [pc, #428]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004ee2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d013      	beq.n	8004f18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fc feb4 	bl	8001c5c <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef8:	f7fc feb0 	bl	8001c5c <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b64      	cmp	r3, #100	@ 0x64
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e21f      	b.n	800534a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0a:	4b61      	ldr	r3, [pc, #388]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f0      	beq.n	8004ef8 <HAL_RCC_OscConfig+0xe8>
 8004f16:	e014      	b.n	8004f42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fc fea0 	bl	8001c5c <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f20:	f7fc fe9c 	bl	8001c5c <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b64      	cmp	r3, #100	@ 0x64
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e20b      	b.n	800534a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f32:	4b57      	ldr	r3, [pc, #348]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0x110>
 8004f3e:	e000      	b.n	8004f42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d069      	beq.n	8005022 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f4e:	4b50      	ldr	r3, [pc, #320]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00b      	beq.n	8004f72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f5a:	4b4d      	ldr	r3, [pc, #308]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d11c      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x190>
 8004f66:	4b4a      	ldr	r3, [pc, #296]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d116      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f72:	4b47      	ldr	r3, [pc, #284]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <HAL_RCC_OscConfig+0x17a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d001      	beq.n	8004f8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e1df      	b.n	800534a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8a:	4b41      	ldr	r3, [pc, #260]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	493d      	ldr	r1, [pc, #244]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9e:	e040      	b.n	8005022 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d023      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fa8:	4b39      	ldr	r3, [pc, #228]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a38      	ldr	r2, [pc, #224]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb4:	f7fc fe52 	bl	8001c5c <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fbc:	f7fc fe4e 	bl	8001c5c <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e1bd      	b.n	800534a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fce:	4b30      	ldr	r3, [pc, #192]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fda:	4b2d      	ldr	r3, [pc, #180]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4929      	ldr	r1, [pc, #164]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	600b      	str	r3, [r1, #0]
 8004fee:	e018      	b.n	8005022 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ff0:	4b27      	ldr	r3, [pc, #156]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a26      	ldr	r2, [pc, #152]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8004ff6:	f023 0301 	bic.w	r3, r3, #1
 8004ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffc:	f7fc fe2e 	bl	8001c5c <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005004:	f7fc fe2a 	bl	8001c5c <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e199      	b.n	800534a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005016:	4b1e      	ldr	r3, [pc, #120]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d038      	beq.n	80050a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d019      	beq.n	800506a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005036:	4b16      	ldr	r3, [pc, #88]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8005038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800503a:	4a15      	ldr	r2, [pc, #84]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005042:	f7fc fe0b 	bl	8001c5c <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800504a:	f7fc fe07 	bl	8001c5c <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e176      	b.n	800534a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800505c:	4b0c      	ldr	r3, [pc, #48]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 800505e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f0      	beq.n	800504a <HAL_RCC_OscConfig+0x23a>
 8005068:	e01a      	b.n	80050a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800506a:	4b09      	ldr	r3, [pc, #36]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 800506c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800506e:	4a08      	ldr	r2, [pc, #32]	@ (8005090 <HAL_RCC_OscConfig+0x280>)
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005076:	f7fc fdf1 	bl	8001c5c <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800507c:	e00a      	b.n	8005094 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800507e:	f7fc fded 	bl	8001c5c <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d903      	bls.n	8005094 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e15c      	b.n	800534a <HAL_RCC_OscConfig+0x53a>
 8005090:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005094:	4b91      	ldr	r3, [pc, #580]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 8005096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1ee      	bne.n	800507e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80a4 	beq.w	80051f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ae:	4b8b      	ldr	r3, [pc, #556]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10d      	bne.n	80050d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ba:	4b88      	ldr	r3, [pc, #544]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	4a87      	ldr	r2, [pc, #540]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 80050c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80050c6:	4b85      	ldr	r3, [pc, #532]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ce:	60bb      	str	r3, [r7, #8]
 80050d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d2:	2301      	movs	r3, #1
 80050d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050d6:	4b82      	ldr	r3, [pc, #520]	@ (80052e0 <HAL_RCC_OscConfig+0x4d0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d118      	bne.n	8005114 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80050e2:	4b7f      	ldr	r3, [pc, #508]	@ (80052e0 <HAL_RCC_OscConfig+0x4d0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a7e      	ldr	r2, [pc, #504]	@ (80052e0 <HAL_RCC_OscConfig+0x4d0>)
 80050e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ee:	f7fc fdb5 	bl	8001c5c <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f6:	f7fc fdb1 	bl	8001c5c <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b64      	cmp	r3, #100	@ 0x64
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e120      	b.n	800534a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005108:	4b75      	ldr	r3, [pc, #468]	@ (80052e0 <HAL_RCC_OscConfig+0x4d0>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d106      	bne.n	800512a <HAL_RCC_OscConfig+0x31a>
 800511c:	4b6f      	ldr	r3, [pc, #444]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 800511e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005120:	4a6e      	ldr	r2, [pc, #440]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	6713      	str	r3, [r2, #112]	@ 0x70
 8005128:	e02d      	b.n	8005186 <HAL_RCC_OscConfig+0x376>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10c      	bne.n	800514c <HAL_RCC_OscConfig+0x33c>
 8005132:	4b6a      	ldr	r3, [pc, #424]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005136:	4a69      	ldr	r2, [pc, #420]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 8005138:	f023 0301 	bic.w	r3, r3, #1
 800513c:	6713      	str	r3, [r2, #112]	@ 0x70
 800513e:	4b67      	ldr	r3, [pc, #412]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005142:	4a66      	ldr	r2, [pc, #408]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 8005144:	f023 0304 	bic.w	r3, r3, #4
 8005148:	6713      	str	r3, [r2, #112]	@ 0x70
 800514a:	e01c      	b.n	8005186 <HAL_RCC_OscConfig+0x376>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b05      	cmp	r3, #5
 8005152:	d10c      	bne.n	800516e <HAL_RCC_OscConfig+0x35e>
 8005154:	4b61      	ldr	r3, [pc, #388]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005158:	4a60      	ldr	r2, [pc, #384]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 800515a:	f043 0304 	orr.w	r3, r3, #4
 800515e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005160:	4b5e      	ldr	r3, [pc, #376]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005164:	4a5d      	ldr	r2, [pc, #372]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	6713      	str	r3, [r2, #112]	@ 0x70
 800516c:	e00b      	b.n	8005186 <HAL_RCC_OscConfig+0x376>
 800516e:	4b5b      	ldr	r3, [pc, #364]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005172:	4a5a      	ldr	r2, [pc, #360]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	6713      	str	r3, [r2, #112]	@ 0x70
 800517a:	4b58      	ldr	r3, [pc, #352]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517e:	4a57      	ldr	r2, [pc, #348]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 8005180:	f023 0304 	bic.w	r3, r3, #4
 8005184:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d015      	beq.n	80051ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518e:	f7fc fd65 	bl	8001c5c <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005194:	e00a      	b.n	80051ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005196:	f7fc fd61 	bl	8001c5c <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e0ce      	b.n	800534a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ac:	4b4b      	ldr	r3, [pc, #300]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 80051ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0ee      	beq.n	8005196 <HAL_RCC_OscConfig+0x386>
 80051b8:	e014      	b.n	80051e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ba:	f7fc fd4f 	bl	8001c5c <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c0:	e00a      	b.n	80051d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c2:	f7fc fd4b 	bl	8001c5c <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e0b8      	b.n	800534a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d8:	4b40      	ldr	r3, [pc, #256]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 80051da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1ee      	bne.n	80051c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d105      	bne.n	80051f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ea:	4b3c      	ldr	r3, [pc, #240]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ee:	4a3b      	ldr	r2, [pc, #236]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 80051f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051f4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 80a4 	beq.w	8005348 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005200:	4b36      	ldr	r3, [pc, #216]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 030c 	and.w	r3, r3, #12
 8005208:	2b08      	cmp	r3, #8
 800520a:	d06b      	beq.n	80052e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	2b02      	cmp	r3, #2
 8005212:	d149      	bne.n	80052a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005214:	4b31      	ldr	r3, [pc, #196]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a30      	ldr	r2, [pc, #192]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 800521a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800521e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005220:	f7fc fd1c 	bl	8001c5c <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005228:	f7fc fd18 	bl	8001c5c <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e087      	b.n	800534a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523a:	4b28      	ldr	r3, [pc, #160]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69da      	ldr	r2, [r3, #28]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005254:	019b      	lsls	r3, r3, #6
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525c:	085b      	lsrs	r3, r3, #1
 800525e:	3b01      	subs	r3, #1
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005268:	061b      	lsls	r3, r3, #24
 800526a:	4313      	orrs	r3, r2
 800526c:	4a1b      	ldr	r2, [pc, #108]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 800526e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005272:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005274:	4b19      	ldr	r3, [pc, #100]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a18      	ldr	r2, [pc, #96]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 800527a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800527e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7fc fcec 	bl	8001c5c <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005288:	f7fc fce8 	bl	8001c5c <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e057      	b.n	800534a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800529a:	4b10      	ldr	r3, [pc, #64]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f0      	beq.n	8005288 <HAL_RCC_OscConfig+0x478>
 80052a6:	e04f      	b.n	8005348 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a8:	4b0c      	ldr	r3, [pc, #48]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a0b      	ldr	r2, [pc, #44]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 80052ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b4:	f7fc fcd2 	bl	8001c5c <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052bc:	f7fc fcce 	bl	8001c5c <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e03d      	b.n	800534a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ce:	4b03      	ldr	r3, [pc, #12]	@ (80052dc <HAL_RCC_OscConfig+0x4cc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCC_OscConfig+0x4ac>
 80052da:	e035      	b.n	8005348 <HAL_RCC_OscConfig+0x538>
 80052dc:	40023800 	.word	0x40023800
 80052e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80052e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005354 <HAL_RCC_OscConfig+0x544>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d028      	beq.n	8005344 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d121      	bne.n	8005344 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530a:	429a      	cmp	r2, r3
 800530c:	d11a      	bne.n	8005344 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005314:	4013      	ands	r3, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800531a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800531c:	4293      	cmp	r3, r2
 800531e:	d111      	bne.n	8005344 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532a:	085b      	lsrs	r3, r3, #1
 800532c:	3b01      	subs	r3, #1
 800532e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005330:	429a      	cmp	r2, r3
 8005332:	d107      	bne.n	8005344 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005340:	429a      	cmp	r2, r3
 8005342:	d001      	beq.n	8005348 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40023800 	.word	0x40023800

08005358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e0d0      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005370:	4b6a      	ldr	r3, [pc, #424]	@ (800551c <HAL_RCC_ClockConfig+0x1c4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d910      	bls.n	80053a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537e:	4b67      	ldr	r3, [pc, #412]	@ (800551c <HAL_RCC_ClockConfig+0x1c4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f023 020f 	bic.w	r2, r3, #15
 8005386:	4965      	ldr	r1, [pc, #404]	@ (800551c <HAL_RCC_ClockConfig+0x1c4>)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	4313      	orrs	r3, r2
 800538c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	4b63      	ldr	r3, [pc, #396]	@ (800551c <HAL_RCC_ClockConfig+0x1c4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0b8      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d020      	beq.n	80053ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053b8:	4b59      	ldr	r3, [pc, #356]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	4a58      	ldr	r2, [pc, #352]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 80053be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053d0:	4b53      	ldr	r3, [pc, #332]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	4a52      	ldr	r2, [pc, #328]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 80053d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053dc:	4b50      	ldr	r3, [pc, #320]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	494d      	ldr	r1, [pc, #308]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d040      	beq.n	800547c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d107      	bne.n	8005412 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005402:	4b47      	ldr	r3, [pc, #284]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d115      	bne.n	800543a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e07f      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d107      	bne.n	800542a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800541a:	4b41      	ldr	r3, [pc, #260]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e073      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800542a:	4b3d      	ldr	r3, [pc, #244]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e06b      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800543a:	4b39      	ldr	r3, [pc, #228]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f023 0203 	bic.w	r2, r3, #3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	4936      	ldr	r1, [pc, #216]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 8005448:	4313      	orrs	r3, r2
 800544a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800544c:	f7fc fc06 	bl	8001c5c <HAL_GetTick>
 8005450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005452:	e00a      	b.n	800546a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005454:	f7fc fc02 	bl	8001c5c <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005462:	4293      	cmp	r3, r2
 8005464:	d901      	bls.n	800546a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e053      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546a:	4b2d      	ldr	r3, [pc, #180]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 020c 	and.w	r2, r3, #12
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	429a      	cmp	r2, r3
 800547a:	d1eb      	bne.n	8005454 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800547c:	4b27      	ldr	r3, [pc, #156]	@ (800551c <HAL_RCC_ClockConfig+0x1c4>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d210      	bcs.n	80054ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548a:	4b24      	ldr	r3, [pc, #144]	@ (800551c <HAL_RCC_ClockConfig+0x1c4>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f023 020f 	bic.w	r2, r3, #15
 8005492:	4922      	ldr	r1, [pc, #136]	@ (800551c <HAL_RCC_ClockConfig+0x1c4>)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	4313      	orrs	r3, r2
 8005498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800549a:	4b20      	ldr	r3, [pc, #128]	@ (800551c <HAL_RCC_ClockConfig+0x1c4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d001      	beq.n	80054ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e032      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054b8:	4b19      	ldr	r3, [pc, #100]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4916      	ldr	r1, [pc, #88]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d009      	beq.n	80054ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054d6:	4b12      	ldr	r3, [pc, #72]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	490e      	ldr	r1, [pc, #56]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054ea:	f000 f821 	bl	8005530 <HAL_RCC_GetSysClockFreq>
 80054ee:	4602      	mov	r2, r0
 80054f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	490a      	ldr	r1, [pc, #40]	@ (8005524 <HAL_RCC_ClockConfig+0x1cc>)
 80054fc:	5ccb      	ldrb	r3, [r1, r3]
 80054fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005502:	4a09      	ldr	r2, [pc, #36]	@ (8005528 <HAL_RCC_ClockConfig+0x1d0>)
 8005504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005506:	4b09      	ldr	r3, [pc, #36]	@ (800552c <HAL_RCC_ClockConfig+0x1d4>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f7fc fb62 	bl	8001bd4 <HAL_InitTick>

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40023c00 	.word	0x40023c00
 8005520:	40023800 	.word	0x40023800
 8005524:	080093c0 	.word	0x080093c0
 8005528:	20000000 	.word	0x20000000
 800552c:	20000004 	.word	0x20000004

08005530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005534:	b090      	sub	sp, #64	@ 0x40
 8005536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005538:	2300      	movs	r3, #0
 800553a:	637b      	str	r3, [r7, #52]	@ 0x34
 800553c:	2300      	movs	r3, #0
 800553e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005540:	2300      	movs	r3, #0
 8005542:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005548:	4b59      	ldr	r3, [pc, #356]	@ (80056b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 030c 	and.w	r3, r3, #12
 8005550:	2b08      	cmp	r3, #8
 8005552:	d00d      	beq.n	8005570 <HAL_RCC_GetSysClockFreq+0x40>
 8005554:	2b08      	cmp	r3, #8
 8005556:	f200 80a1 	bhi.w	800569c <HAL_RCC_GetSysClockFreq+0x16c>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <HAL_RCC_GetSysClockFreq+0x34>
 800555e:	2b04      	cmp	r3, #4
 8005560:	d003      	beq.n	800556a <HAL_RCC_GetSysClockFreq+0x3a>
 8005562:	e09b      	b.n	800569c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005564:	4b53      	ldr	r3, [pc, #332]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005566:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005568:	e09b      	b.n	80056a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800556a:	4b53      	ldr	r3, [pc, #332]	@ (80056b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800556c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800556e:	e098      	b.n	80056a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005570:	4b4f      	ldr	r3, [pc, #316]	@ (80056b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005578:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800557a:	4b4d      	ldr	r3, [pc, #308]	@ (80056b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d028      	beq.n	80055d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005586:	4b4a      	ldr	r3, [pc, #296]	@ (80056b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	099b      	lsrs	r3, r3, #6
 800558c:	2200      	movs	r2, #0
 800558e:	623b      	str	r3, [r7, #32]
 8005590:	627a      	str	r2, [r7, #36]	@ 0x24
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005598:	2100      	movs	r1, #0
 800559a:	4b47      	ldr	r3, [pc, #284]	@ (80056b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800559c:	fb03 f201 	mul.w	r2, r3, r1
 80055a0:	2300      	movs	r3, #0
 80055a2:	fb00 f303 	mul.w	r3, r0, r3
 80055a6:	4413      	add	r3, r2
 80055a8:	4a43      	ldr	r2, [pc, #268]	@ (80056b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80055aa:	fba0 1202 	umull	r1, r2, r0, r2
 80055ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055b0:	460a      	mov	r2, r1
 80055b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80055b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055b6:	4413      	add	r3, r2
 80055b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055bc:	2200      	movs	r2, #0
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	61fa      	str	r2, [r7, #28]
 80055c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80055ca:	f7fb fb0d 	bl	8000be8 <__aeabi_uldivmod>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4613      	mov	r3, r2
 80055d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055d6:	e053      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055d8:	4b35      	ldr	r3, [pc, #212]	@ (80056b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	099b      	lsrs	r3, r3, #6
 80055de:	2200      	movs	r2, #0
 80055e0:	613b      	str	r3, [r7, #16]
 80055e2:	617a      	str	r2, [r7, #20]
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80055ea:	f04f 0b00 	mov.w	fp, #0
 80055ee:	4652      	mov	r2, sl
 80055f0:	465b      	mov	r3, fp
 80055f2:	f04f 0000 	mov.w	r0, #0
 80055f6:	f04f 0100 	mov.w	r1, #0
 80055fa:	0159      	lsls	r1, r3, #5
 80055fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005600:	0150      	lsls	r0, r2, #5
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	ebb2 080a 	subs.w	r8, r2, sl
 800560a:	eb63 090b 	sbc.w	r9, r3, fp
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800561a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800561e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005622:	ebb2 0408 	subs.w	r4, r2, r8
 8005626:	eb63 0509 	sbc.w	r5, r3, r9
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	f04f 0300 	mov.w	r3, #0
 8005632:	00eb      	lsls	r3, r5, #3
 8005634:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005638:	00e2      	lsls	r2, r4, #3
 800563a:	4614      	mov	r4, r2
 800563c:	461d      	mov	r5, r3
 800563e:	eb14 030a 	adds.w	r3, r4, sl
 8005642:	603b      	str	r3, [r7, #0]
 8005644:	eb45 030b 	adc.w	r3, r5, fp
 8005648:	607b      	str	r3, [r7, #4]
 800564a:	f04f 0200 	mov.w	r2, #0
 800564e:	f04f 0300 	mov.w	r3, #0
 8005652:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005656:	4629      	mov	r1, r5
 8005658:	028b      	lsls	r3, r1, #10
 800565a:	4621      	mov	r1, r4
 800565c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005660:	4621      	mov	r1, r4
 8005662:	028a      	lsls	r2, r1, #10
 8005664:	4610      	mov	r0, r2
 8005666:	4619      	mov	r1, r3
 8005668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566a:	2200      	movs	r2, #0
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	60fa      	str	r2, [r7, #12]
 8005670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005674:	f7fb fab8 	bl	8000be8 <__aeabi_uldivmod>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4613      	mov	r3, r2
 800567e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005680:	4b0b      	ldr	r3, [pc, #44]	@ (80056b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	0c1b      	lsrs	r3, r3, #16
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	3301      	adds	r3, #1
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005690:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005694:	fbb2 f3f3 	udiv	r3, r2, r3
 8005698:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800569a:	e002      	b.n	80056a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800569c:	4b05      	ldr	r3, [pc, #20]	@ (80056b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800569e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3740      	adds	r7, #64	@ 0x40
 80056a8:	46bd      	mov	sp, r7
 80056aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ae:	bf00      	nop
 80056b0:	40023800 	.word	0x40023800
 80056b4:	00f42400 	.word	0x00f42400
 80056b8:	017d7840 	.word	0x017d7840

080056bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056c0:	4b03      	ldr	r3, [pc, #12]	@ (80056d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80056c2:	681b      	ldr	r3, [r3, #0]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	20000000 	.word	0x20000000

080056d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056d8:	f7ff fff0 	bl	80056bc <HAL_RCC_GetHCLKFreq>
 80056dc:	4602      	mov	r2, r0
 80056de:	4b05      	ldr	r3, [pc, #20]	@ (80056f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	0a9b      	lsrs	r3, r3, #10
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	4903      	ldr	r1, [pc, #12]	@ (80056f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056ea:	5ccb      	ldrb	r3, [r1, r3]
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40023800 	.word	0x40023800
 80056f8:	080093d0 	.word	0x080093d0

080056fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005700:	f7ff ffdc 	bl	80056bc <HAL_RCC_GetHCLKFreq>
 8005704:	4602      	mov	r2, r0
 8005706:	4b05      	ldr	r3, [pc, #20]	@ (800571c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	0b5b      	lsrs	r3, r3, #13
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	4903      	ldr	r1, [pc, #12]	@ (8005720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005712:	5ccb      	ldrb	r3, [r1, r3]
 8005714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005718:	4618      	mov	r0, r3
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40023800 	.word	0x40023800
 8005720:	080093d0 	.word	0x080093d0

08005724 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005730:	2300      	movs	r3, #0
 8005732:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800573c:	2300      	movs	r3, #0
 800573e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d012      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800574c:	4b69      	ldr	r3, [pc, #420]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	4a68      	ldr	r2, [pc, #416]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005752:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005756:	6093      	str	r3, [r2, #8]
 8005758:	4b66      	ldr	r3, [pc, #408]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005760:	4964      	ldr	r1, [pc, #400]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005762:	4313      	orrs	r3, r2
 8005764:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800576e:	2301      	movs	r3, #1
 8005770:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d017      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800577e:	4b5d      	ldr	r3, [pc, #372]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005780:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005784:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800578c:	4959      	ldr	r1, [pc, #356]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005798:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800579c:	d101      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800579e:	2301      	movs	r3, #1
 80057a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80057aa:	2301      	movs	r3, #1
 80057ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d017      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057ba:	4b4e      	ldr	r3, [pc, #312]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c8:	494a      	ldr	r1, [pc, #296]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057d8:	d101      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80057da:	2301      	movs	r3, #1
 80057dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80057e6:	2301      	movs	r3, #1
 80057e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80057f6:	2301      	movs	r3, #1
 80057f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 808b 	beq.w	800591e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005808:	4b3a      	ldr	r3, [pc, #232]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800580a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580c:	4a39      	ldr	r2, [pc, #228]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800580e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005812:	6413      	str	r3, [r2, #64]	@ 0x40
 8005814:	4b37      	ldr	r3, [pc, #220]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005820:	4b35      	ldr	r3, [pc, #212]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a34      	ldr	r2, [pc, #208]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800582a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800582c:	f7fc fa16 	bl	8001c5c <HAL_GetTick>
 8005830:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005832:	e008      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005834:	f7fc fa12 	bl	8001c5c <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b64      	cmp	r3, #100	@ 0x64
 8005840:	d901      	bls.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e357      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005846:	4b2c      	ldr	r3, [pc, #176]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0f0      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005852:	4b28      	ldr	r3, [pc, #160]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005856:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800585a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d035      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	429a      	cmp	r2, r3
 800586e:	d02e      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005870:	4b20      	ldr	r3, [pc, #128]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005874:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005878:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800587a:	4b1e      	ldr	r3, [pc, #120]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587e:	4a1d      	ldr	r2, [pc, #116]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005884:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005886:	4b1b      	ldr	r3, [pc, #108]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588a:	4a1a      	ldr	r2, [pc, #104]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800588c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005890:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005892:	4a18      	ldr	r2, [pc, #96]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005898:	4b16      	ldr	r3, [pc, #88]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800589a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d114      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fc f9da 	bl	8001c5c <HAL_GetTick>
 80058a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058aa:	e00a      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ac:	f7fc f9d6 	bl	8001c5c <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e319      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c2:	4b0c      	ldr	r3, [pc, #48]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0ee      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058da:	d111      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80058dc:	4b05      	ldr	r3, [pc, #20]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80058e8:	4b04      	ldr	r3, [pc, #16]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80058ea:	400b      	ands	r3, r1
 80058ec:	4901      	ldr	r1, [pc, #4]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	608b      	str	r3, [r1, #8]
 80058f2:	e00b      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80058f4:	40023800 	.word	0x40023800
 80058f8:	40007000 	.word	0x40007000
 80058fc:	0ffffcff 	.word	0x0ffffcff
 8005900:	4baa      	ldr	r3, [pc, #680]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	4aa9      	ldr	r2, [pc, #676]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005906:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800590a:	6093      	str	r3, [r2, #8]
 800590c:	4ba7      	ldr	r3, [pc, #668]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800590e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005918:	49a4      	ldr	r1, [pc, #656]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800591a:	4313      	orrs	r3, r2
 800591c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0310 	and.w	r3, r3, #16
 8005926:	2b00      	cmp	r3, #0
 8005928:	d010      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800592a:	4ba0      	ldr	r3, [pc, #640]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800592c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005930:	4a9e      	ldr	r2, [pc, #632]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005932:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005936:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800593a:	4b9c      	ldr	r3, [pc, #624]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800593c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005944:	4999      	ldr	r1, [pc, #612]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005958:	4b94      	ldr	r3, [pc, #592]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800595e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005966:	4991      	ldr	r1, [pc, #580]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800597a:	4b8c      	ldr	r3, [pc, #560]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800597c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005980:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005988:	4988      	ldr	r1, [pc, #544]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800599c:	4b83      	ldr	r3, [pc, #524]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800599e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059aa:	4980      	ldr	r1, [pc, #512]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059be:	4b7b      	ldr	r3, [pc, #492]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059cc:	4977      	ldr	r1, [pc, #476]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059e0:	4b72      	ldr	r3, [pc, #456]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e6:	f023 0203 	bic.w	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ee:	496f      	ldr	r1, [pc, #444]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a02:	4b6a      	ldr	r3, [pc, #424]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a08:	f023 020c 	bic.w	r2, r3, #12
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a10:	4966      	ldr	r1, [pc, #408]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00a      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a24:	4b61      	ldr	r3, [pc, #388]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a2a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a32:	495e      	ldr	r1, [pc, #376]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a46:	4b59      	ldr	r3, [pc, #356]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a54:	4955      	ldr	r1, [pc, #340]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a68:	4b50      	ldr	r3, [pc, #320]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a6e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a76:	494d      	ldr	r1, [pc, #308]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005a8a:	4b48      	ldr	r3, [pc, #288]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a90:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a98:	4944      	ldr	r1, [pc, #272]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005aac:	4b3f      	ldr	r3, [pc, #252]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aba:	493c      	ldr	r1, [pc, #240]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005ace:	4b37      	ldr	r3, [pc, #220]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005adc:	4933      	ldr	r1, [pc, #204]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005af0:	4b2e      	ldr	r3, [pc, #184]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005afe:	492b      	ldr	r1, [pc, #172]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d011      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b12:	4b26      	ldr	r3, [pc, #152]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b18:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b20:	4922      	ldr	r1, [pc, #136]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b30:	d101      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005b32:	2301      	movs	r3, #1
 8005b34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0308 	and.w	r3, r3, #8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005b42:	2301      	movs	r3, #1
 8005b44:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b52:	4b16      	ldr	r3, [pc, #88]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b58:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b60:	4912      	ldr	r1, [pc, #72]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00b      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b74:	4b0d      	ldr	r3, [pc, #52]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b84:	4909      	ldr	r1, [pc, #36]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d006      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 80d9 	beq.w	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ba0:	4b02      	ldr	r3, [pc, #8]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a01      	ldr	r2, [pc, #4]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ba6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005baa:	e001      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005bac:	40023800 	.word	0x40023800
 8005bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bb2:	f7fc f853 	bl	8001c5c <HAL_GetTick>
 8005bb6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bb8:	e008      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bba:	f7fc f84f 	bl	8001c5c <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b64      	cmp	r3, #100	@ 0x64
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e194      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bcc:	4b6c      	ldr	r3, [pc, #432]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1f0      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d021      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d11d      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005bec:	4b64      	ldr	r3, [pc, #400]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bf2:	0c1b      	lsrs	r3, r3, #16
 8005bf4:	f003 0303 	and.w	r3, r3, #3
 8005bf8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005bfa:	4b61      	ldr	r3, [pc, #388]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c00:	0e1b      	lsrs	r3, r3, #24
 8005c02:	f003 030f 	and.w	r3, r3, #15
 8005c06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	019a      	lsls	r2, r3, #6
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	041b      	lsls	r3, r3, #16
 8005c12:	431a      	orrs	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	061b      	lsls	r3, r3, #24
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	071b      	lsls	r3, r3, #28
 8005c20:	4957      	ldr	r1, [pc, #348]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d004      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c3c:	d00a      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d02e      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c52:	d129      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c54:	4b4a      	ldr	r3, [pc, #296]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c5a:	0c1b      	lsrs	r3, r3, #16
 8005c5c:	f003 0303 	and.w	r3, r3, #3
 8005c60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c62:	4b47      	ldr	r3, [pc, #284]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c68:	0f1b      	lsrs	r3, r3, #28
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	019a      	lsls	r2, r3, #6
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	041b      	lsls	r3, r3, #16
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	061b      	lsls	r3, r3, #24
 8005c82:	431a      	orrs	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	071b      	lsls	r3, r3, #28
 8005c88:	493d      	ldr	r1, [pc, #244]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c90:	4b3b      	ldr	r3, [pc, #236]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c96:	f023 021f 	bic.w	r2, r3, #31
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	4937      	ldr	r1, [pc, #220]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01d      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005cb4:	4b32      	ldr	r3, [pc, #200]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cba:	0e1b      	lsrs	r3, r3, #24
 8005cbc:	f003 030f 	and.w	r3, r3, #15
 8005cc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cc8:	0f1b      	lsrs	r3, r3, #28
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	019a      	lsls	r2, r3, #6
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	041b      	lsls	r3, r3, #16
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	061b      	lsls	r3, r3, #24
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	071b      	lsls	r3, r3, #28
 8005ce8:	4925      	ldr	r1, [pc, #148]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d011      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	019a      	lsls	r2, r3, #6
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	041b      	lsls	r3, r3, #16
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	061b      	lsls	r3, r3, #24
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	071b      	lsls	r3, r3, #28
 8005d18:	4919      	ldr	r1, [pc, #100]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d20:	4b17      	ldr	r3, [pc, #92]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a16      	ldr	r2, [pc, #88]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d2c:	f7fb ff96 	bl	8001c5c <HAL_GetTick>
 8005d30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d32:	e008      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d34:	f7fb ff92 	bl	8001c5c <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b64      	cmp	r3, #100	@ 0x64
 8005d40:	d901      	bls.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e0d7      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d46:	4b0e      	ldr	r3, [pc, #56]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0f0      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	f040 80cd 	bne.w	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d5a:	4b09      	ldr	r3, [pc, #36]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a08      	ldr	r2, [pc, #32]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d66:	f7fb ff79 	bl	8001c5c <HAL_GetTick>
 8005d6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d6c:	e00a      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d6e:	f7fb ff75 	bl	8001c5c <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b64      	cmp	r3, #100	@ 0x64
 8005d7a:	d903      	bls.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e0ba      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005d80:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d84:	4b5e      	ldr	r3, [pc, #376]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d90:	d0ed      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d009      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d02e      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d12a      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005dba:	4b51      	ldr	r3, [pc, #324]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc0:	0c1b      	lsrs	r3, r3, #16
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dce:	0f1b      	lsrs	r3, r3, #28
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	019a      	lsls	r2, r3, #6
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	041b      	lsls	r3, r3, #16
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	061b      	lsls	r3, r3, #24
 8005de8:	431a      	orrs	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	071b      	lsls	r3, r3, #28
 8005dee:	4944      	ldr	r1, [pc, #272]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005df6:	4b42      	ldr	r3, [pc, #264]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dfc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e04:	3b01      	subs	r3, #1
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	493d      	ldr	r1, [pc, #244]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d022      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e24:	d11d      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e26:	4b36      	ldr	r3, [pc, #216]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2c:	0e1b      	lsrs	r3, r3, #24
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e34:	4b32      	ldr	r3, [pc, #200]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3a:	0f1b      	lsrs	r3, r3, #28
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	019a      	lsls	r2, r3, #6
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	041b      	lsls	r3, r3, #16
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	061b      	lsls	r3, r3, #24
 8005e54:	431a      	orrs	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	071b      	lsls	r3, r3, #28
 8005e5a:	4929      	ldr	r1, [pc, #164]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d028      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e6e:	4b24      	ldr	r3, [pc, #144]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e74:	0e1b      	lsrs	r3, r3, #24
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e7c:	4b20      	ldr	r3, [pc, #128]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e82:	0c1b      	lsrs	r3, r3, #16
 8005e84:	f003 0303 	and.w	r3, r3, #3
 8005e88:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	019a      	lsls	r2, r3, #6
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	041b      	lsls	r3, r3, #16
 8005e94:	431a      	orrs	r2, r3
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	061b      	lsls	r3, r3, #24
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	071b      	lsls	r3, r3, #28
 8005ea2:	4917      	ldr	r1, [pc, #92]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005eaa:	4b15      	ldr	r3, [pc, #84]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005eb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb8:	4911      	ldr	r1, [pc, #68]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a0e      	ldr	r2, [pc, #56]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ecc:	f7fb fec6 	bl	8001c5c <HAL_GetTick>
 8005ed0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ed4:	f7fb fec2 	bl	8001c5c <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b64      	cmp	r3, #100	@ 0x64
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e007      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ee6:	4b06      	ldr	r3, [pc, #24]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005eee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef2:	d1ef      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3720      	adds	r7, #32
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40023800 	.word	0x40023800

08005f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e040      	b.n	8005f98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fb fc8a 	bl	8001840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2224      	movs	r2, #36	@ 0x24
 8005f30:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0201 	bic.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fb16 	bl	800657c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f8af 	bl	80060b4 <UART_SetConfig>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e01b      	b.n	8005f98 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0201 	orr.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fb95 	bl	80066c0 <UART_CheckIdleState>
 8005f96:	4603      	mov	r3, r0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08a      	sub	sp, #40	@ 0x28
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	603b      	str	r3, [r7, #0]
 8005fac:	4613      	mov	r3, r2
 8005fae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	d177      	bne.n	80060a8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_UART_Transmit+0x24>
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e070      	b.n	80060aa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2221      	movs	r2, #33	@ 0x21
 8005fd4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fd6:	f7fb fe41 	bl	8001c5c <HAL_GetTick>
 8005fda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	88fa      	ldrh	r2, [r7, #6]
 8005fe0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	88fa      	ldrh	r2, [r7, #6]
 8005fe8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ff4:	d108      	bne.n	8006008 <HAL_UART_Transmit+0x68>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d104      	bne.n	8006008 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	61bb      	str	r3, [r7, #24]
 8006006:	e003      	b.n	8006010 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800600c:	2300      	movs	r3, #0
 800600e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006010:	e02f      	b.n	8006072 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2200      	movs	r2, #0
 800601a:	2180      	movs	r1, #128	@ 0x80
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 fba6 	bl	800676e <UART_WaitOnFlagUntilTimeout>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d004      	beq.n	8006032 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e03b      	b.n	80060aa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10b      	bne.n	8006050 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006046:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	3302      	adds	r3, #2
 800604c:	61bb      	str	r3, [r7, #24]
 800604e:	e007      	b.n	8006060 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	781a      	ldrb	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	3301      	adds	r3, #1
 800605e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1c9      	bne.n	8006012 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2200      	movs	r2, #0
 8006086:	2140      	movs	r1, #64	@ 0x40
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 fb70 	bl	800676e <UART_WaitOnFlagUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d004      	beq.n	800609e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2220      	movs	r2, #32
 8006098:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e005      	b.n	80060aa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2220      	movs	r2, #32
 80060a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	e000      	b.n	80060aa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80060a8:	2302      	movs	r3, #2
  }
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3720      	adds	r7, #32
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	431a      	orrs	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4ba6      	ldr	r3, [pc, #664]	@ (8006378 <UART_SetConfig+0x2c4>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	6979      	ldr	r1, [r7, #20]
 80060e8:	430b      	orrs	r3, r1
 80060ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	4313      	orrs	r3, r2
 8006110:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	430a      	orrs	r2, r1
 8006124:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a94      	ldr	r2, [pc, #592]	@ (800637c <UART_SetConfig+0x2c8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d120      	bne.n	8006172 <UART_SetConfig+0xbe>
 8006130:	4b93      	ldr	r3, [pc, #588]	@ (8006380 <UART_SetConfig+0x2cc>)
 8006132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	2b03      	cmp	r3, #3
 800613c:	d816      	bhi.n	800616c <UART_SetConfig+0xb8>
 800613e:	a201      	add	r2, pc, #4	@ (adr r2, 8006144 <UART_SetConfig+0x90>)
 8006140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006144:	08006155 	.word	0x08006155
 8006148:	08006161 	.word	0x08006161
 800614c:	0800615b 	.word	0x0800615b
 8006150:	08006167 	.word	0x08006167
 8006154:	2301      	movs	r3, #1
 8006156:	77fb      	strb	r3, [r7, #31]
 8006158:	e150      	b.n	80063fc <UART_SetConfig+0x348>
 800615a:	2302      	movs	r3, #2
 800615c:	77fb      	strb	r3, [r7, #31]
 800615e:	e14d      	b.n	80063fc <UART_SetConfig+0x348>
 8006160:	2304      	movs	r3, #4
 8006162:	77fb      	strb	r3, [r7, #31]
 8006164:	e14a      	b.n	80063fc <UART_SetConfig+0x348>
 8006166:	2308      	movs	r3, #8
 8006168:	77fb      	strb	r3, [r7, #31]
 800616a:	e147      	b.n	80063fc <UART_SetConfig+0x348>
 800616c:	2310      	movs	r3, #16
 800616e:	77fb      	strb	r3, [r7, #31]
 8006170:	e144      	b.n	80063fc <UART_SetConfig+0x348>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a83      	ldr	r2, [pc, #524]	@ (8006384 <UART_SetConfig+0x2d0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d132      	bne.n	80061e2 <UART_SetConfig+0x12e>
 800617c:	4b80      	ldr	r3, [pc, #512]	@ (8006380 <UART_SetConfig+0x2cc>)
 800617e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006182:	f003 030c 	and.w	r3, r3, #12
 8006186:	2b0c      	cmp	r3, #12
 8006188:	d828      	bhi.n	80061dc <UART_SetConfig+0x128>
 800618a:	a201      	add	r2, pc, #4	@ (adr r2, 8006190 <UART_SetConfig+0xdc>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	080061c5 	.word	0x080061c5
 8006194:	080061dd 	.word	0x080061dd
 8006198:	080061dd 	.word	0x080061dd
 800619c:	080061dd 	.word	0x080061dd
 80061a0:	080061d1 	.word	0x080061d1
 80061a4:	080061dd 	.word	0x080061dd
 80061a8:	080061dd 	.word	0x080061dd
 80061ac:	080061dd 	.word	0x080061dd
 80061b0:	080061cb 	.word	0x080061cb
 80061b4:	080061dd 	.word	0x080061dd
 80061b8:	080061dd 	.word	0x080061dd
 80061bc:	080061dd 	.word	0x080061dd
 80061c0:	080061d7 	.word	0x080061d7
 80061c4:	2300      	movs	r3, #0
 80061c6:	77fb      	strb	r3, [r7, #31]
 80061c8:	e118      	b.n	80063fc <UART_SetConfig+0x348>
 80061ca:	2302      	movs	r3, #2
 80061cc:	77fb      	strb	r3, [r7, #31]
 80061ce:	e115      	b.n	80063fc <UART_SetConfig+0x348>
 80061d0:	2304      	movs	r3, #4
 80061d2:	77fb      	strb	r3, [r7, #31]
 80061d4:	e112      	b.n	80063fc <UART_SetConfig+0x348>
 80061d6:	2308      	movs	r3, #8
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e10f      	b.n	80063fc <UART_SetConfig+0x348>
 80061dc:	2310      	movs	r3, #16
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e10c      	b.n	80063fc <UART_SetConfig+0x348>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a68      	ldr	r2, [pc, #416]	@ (8006388 <UART_SetConfig+0x2d4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d120      	bne.n	800622e <UART_SetConfig+0x17a>
 80061ec:	4b64      	ldr	r3, [pc, #400]	@ (8006380 <UART_SetConfig+0x2cc>)
 80061ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80061f6:	2b30      	cmp	r3, #48	@ 0x30
 80061f8:	d013      	beq.n	8006222 <UART_SetConfig+0x16e>
 80061fa:	2b30      	cmp	r3, #48	@ 0x30
 80061fc:	d814      	bhi.n	8006228 <UART_SetConfig+0x174>
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d009      	beq.n	8006216 <UART_SetConfig+0x162>
 8006202:	2b20      	cmp	r3, #32
 8006204:	d810      	bhi.n	8006228 <UART_SetConfig+0x174>
 8006206:	2b00      	cmp	r3, #0
 8006208:	d002      	beq.n	8006210 <UART_SetConfig+0x15c>
 800620a:	2b10      	cmp	r3, #16
 800620c:	d006      	beq.n	800621c <UART_SetConfig+0x168>
 800620e:	e00b      	b.n	8006228 <UART_SetConfig+0x174>
 8006210:	2300      	movs	r3, #0
 8006212:	77fb      	strb	r3, [r7, #31]
 8006214:	e0f2      	b.n	80063fc <UART_SetConfig+0x348>
 8006216:	2302      	movs	r3, #2
 8006218:	77fb      	strb	r3, [r7, #31]
 800621a:	e0ef      	b.n	80063fc <UART_SetConfig+0x348>
 800621c:	2304      	movs	r3, #4
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e0ec      	b.n	80063fc <UART_SetConfig+0x348>
 8006222:	2308      	movs	r3, #8
 8006224:	77fb      	strb	r3, [r7, #31]
 8006226:	e0e9      	b.n	80063fc <UART_SetConfig+0x348>
 8006228:	2310      	movs	r3, #16
 800622a:	77fb      	strb	r3, [r7, #31]
 800622c:	e0e6      	b.n	80063fc <UART_SetConfig+0x348>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a56      	ldr	r2, [pc, #344]	@ (800638c <UART_SetConfig+0x2d8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d120      	bne.n	800627a <UART_SetConfig+0x1c6>
 8006238:	4b51      	ldr	r3, [pc, #324]	@ (8006380 <UART_SetConfig+0x2cc>)
 800623a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800623e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006242:	2bc0      	cmp	r3, #192	@ 0xc0
 8006244:	d013      	beq.n	800626e <UART_SetConfig+0x1ba>
 8006246:	2bc0      	cmp	r3, #192	@ 0xc0
 8006248:	d814      	bhi.n	8006274 <UART_SetConfig+0x1c0>
 800624a:	2b80      	cmp	r3, #128	@ 0x80
 800624c:	d009      	beq.n	8006262 <UART_SetConfig+0x1ae>
 800624e:	2b80      	cmp	r3, #128	@ 0x80
 8006250:	d810      	bhi.n	8006274 <UART_SetConfig+0x1c0>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <UART_SetConfig+0x1a8>
 8006256:	2b40      	cmp	r3, #64	@ 0x40
 8006258:	d006      	beq.n	8006268 <UART_SetConfig+0x1b4>
 800625a:	e00b      	b.n	8006274 <UART_SetConfig+0x1c0>
 800625c:	2300      	movs	r3, #0
 800625e:	77fb      	strb	r3, [r7, #31]
 8006260:	e0cc      	b.n	80063fc <UART_SetConfig+0x348>
 8006262:	2302      	movs	r3, #2
 8006264:	77fb      	strb	r3, [r7, #31]
 8006266:	e0c9      	b.n	80063fc <UART_SetConfig+0x348>
 8006268:	2304      	movs	r3, #4
 800626a:	77fb      	strb	r3, [r7, #31]
 800626c:	e0c6      	b.n	80063fc <UART_SetConfig+0x348>
 800626e:	2308      	movs	r3, #8
 8006270:	77fb      	strb	r3, [r7, #31]
 8006272:	e0c3      	b.n	80063fc <UART_SetConfig+0x348>
 8006274:	2310      	movs	r3, #16
 8006276:	77fb      	strb	r3, [r7, #31]
 8006278:	e0c0      	b.n	80063fc <UART_SetConfig+0x348>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a44      	ldr	r2, [pc, #272]	@ (8006390 <UART_SetConfig+0x2dc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d125      	bne.n	80062d0 <UART_SetConfig+0x21c>
 8006284:	4b3e      	ldr	r3, [pc, #248]	@ (8006380 <UART_SetConfig+0x2cc>)
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800628a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800628e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006292:	d017      	beq.n	80062c4 <UART_SetConfig+0x210>
 8006294:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006298:	d817      	bhi.n	80062ca <UART_SetConfig+0x216>
 800629a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800629e:	d00b      	beq.n	80062b8 <UART_SetConfig+0x204>
 80062a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062a4:	d811      	bhi.n	80062ca <UART_SetConfig+0x216>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <UART_SetConfig+0x1fe>
 80062aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ae:	d006      	beq.n	80062be <UART_SetConfig+0x20a>
 80062b0:	e00b      	b.n	80062ca <UART_SetConfig+0x216>
 80062b2:	2300      	movs	r3, #0
 80062b4:	77fb      	strb	r3, [r7, #31]
 80062b6:	e0a1      	b.n	80063fc <UART_SetConfig+0x348>
 80062b8:	2302      	movs	r3, #2
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	e09e      	b.n	80063fc <UART_SetConfig+0x348>
 80062be:	2304      	movs	r3, #4
 80062c0:	77fb      	strb	r3, [r7, #31]
 80062c2:	e09b      	b.n	80063fc <UART_SetConfig+0x348>
 80062c4:	2308      	movs	r3, #8
 80062c6:	77fb      	strb	r3, [r7, #31]
 80062c8:	e098      	b.n	80063fc <UART_SetConfig+0x348>
 80062ca:	2310      	movs	r3, #16
 80062cc:	77fb      	strb	r3, [r7, #31]
 80062ce:	e095      	b.n	80063fc <UART_SetConfig+0x348>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a2f      	ldr	r2, [pc, #188]	@ (8006394 <UART_SetConfig+0x2e0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d125      	bne.n	8006326 <UART_SetConfig+0x272>
 80062da:	4b29      	ldr	r3, [pc, #164]	@ (8006380 <UART_SetConfig+0x2cc>)
 80062dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80062e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062e8:	d017      	beq.n	800631a <UART_SetConfig+0x266>
 80062ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062ee:	d817      	bhi.n	8006320 <UART_SetConfig+0x26c>
 80062f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062f4:	d00b      	beq.n	800630e <UART_SetConfig+0x25a>
 80062f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062fa:	d811      	bhi.n	8006320 <UART_SetConfig+0x26c>
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <UART_SetConfig+0x254>
 8006300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006304:	d006      	beq.n	8006314 <UART_SetConfig+0x260>
 8006306:	e00b      	b.n	8006320 <UART_SetConfig+0x26c>
 8006308:	2301      	movs	r3, #1
 800630a:	77fb      	strb	r3, [r7, #31]
 800630c:	e076      	b.n	80063fc <UART_SetConfig+0x348>
 800630e:	2302      	movs	r3, #2
 8006310:	77fb      	strb	r3, [r7, #31]
 8006312:	e073      	b.n	80063fc <UART_SetConfig+0x348>
 8006314:	2304      	movs	r3, #4
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e070      	b.n	80063fc <UART_SetConfig+0x348>
 800631a:	2308      	movs	r3, #8
 800631c:	77fb      	strb	r3, [r7, #31]
 800631e:	e06d      	b.n	80063fc <UART_SetConfig+0x348>
 8006320:	2310      	movs	r3, #16
 8006322:	77fb      	strb	r3, [r7, #31]
 8006324:	e06a      	b.n	80063fc <UART_SetConfig+0x348>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a1b      	ldr	r2, [pc, #108]	@ (8006398 <UART_SetConfig+0x2e4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d138      	bne.n	80063a2 <UART_SetConfig+0x2ee>
 8006330:	4b13      	ldr	r3, [pc, #76]	@ (8006380 <UART_SetConfig+0x2cc>)
 8006332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006336:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800633a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800633e:	d017      	beq.n	8006370 <UART_SetConfig+0x2bc>
 8006340:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006344:	d82a      	bhi.n	800639c <UART_SetConfig+0x2e8>
 8006346:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800634a:	d00b      	beq.n	8006364 <UART_SetConfig+0x2b0>
 800634c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006350:	d824      	bhi.n	800639c <UART_SetConfig+0x2e8>
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <UART_SetConfig+0x2aa>
 8006356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800635a:	d006      	beq.n	800636a <UART_SetConfig+0x2b6>
 800635c:	e01e      	b.n	800639c <UART_SetConfig+0x2e8>
 800635e:	2300      	movs	r3, #0
 8006360:	77fb      	strb	r3, [r7, #31]
 8006362:	e04b      	b.n	80063fc <UART_SetConfig+0x348>
 8006364:	2302      	movs	r3, #2
 8006366:	77fb      	strb	r3, [r7, #31]
 8006368:	e048      	b.n	80063fc <UART_SetConfig+0x348>
 800636a:	2304      	movs	r3, #4
 800636c:	77fb      	strb	r3, [r7, #31]
 800636e:	e045      	b.n	80063fc <UART_SetConfig+0x348>
 8006370:	2308      	movs	r3, #8
 8006372:	77fb      	strb	r3, [r7, #31]
 8006374:	e042      	b.n	80063fc <UART_SetConfig+0x348>
 8006376:	bf00      	nop
 8006378:	efff69f3 	.word	0xefff69f3
 800637c:	40011000 	.word	0x40011000
 8006380:	40023800 	.word	0x40023800
 8006384:	40004400 	.word	0x40004400
 8006388:	40004800 	.word	0x40004800
 800638c:	40004c00 	.word	0x40004c00
 8006390:	40005000 	.word	0x40005000
 8006394:	40011400 	.word	0x40011400
 8006398:	40007800 	.word	0x40007800
 800639c:	2310      	movs	r3, #16
 800639e:	77fb      	strb	r3, [r7, #31]
 80063a0:	e02c      	b.n	80063fc <UART_SetConfig+0x348>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a72      	ldr	r2, [pc, #456]	@ (8006570 <UART_SetConfig+0x4bc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d125      	bne.n	80063f8 <UART_SetConfig+0x344>
 80063ac:	4b71      	ldr	r3, [pc, #452]	@ (8006574 <UART_SetConfig+0x4c0>)
 80063ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80063b6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80063ba:	d017      	beq.n	80063ec <UART_SetConfig+0x338>
 80063bc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80063c0:	d817      	bhi.n	80063f2 <UART_SetConfig+0x33e>
 80063c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063c6:	d00b      	beq.n	80063e0 <UART_SetConfig+0x32c>
 80063c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063cc:	d811      	bhi.n	80063f2 <UART_SetConfig+0x33e>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <UART_SetConfig+0x326>
 80063d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063d6:	d006      	beq.n	80063e6 <UART_SetConfig+0x332>
 80063d8:	e00b      	b.n	80063f2 <UART_SetConfig+0x33e>
 80063da:	2300      	movs	r3, #0
 80063dc:	77fb      	strb	r3, [r7, #31]
 80063de:	e00d      	b.n	80063fc <UART_SetConfig+0x348>
 80063e0:	2302      	movs	r3, #2
 80063e2:	77fb      	strb	r3, [r7, #31]
 80063e4:	e00a      	b.n	80063fc <UART_SetConfig+0x348>
 80063e6:	2304      	movs	r3, #4
 80063e8:	77fb      	strb	r3, [r7, #31]
 80063ea:	e007      	b.n	80063fc <UART_SetConfig+0x348>
 80063ec:	2308      	movs	r3, #8
 80063ee:	77fb      	strb	r3, [r7, #31]
 80063f0:	e004      	b.n	80063fc <UART_SetConfig+0x348>
 80063f2:	2310      	movs	r3, #16
 80063f4:	77fb      	strb	r3, [r7, #31]
 80063f6:	e001      	b.n	80063fc <UART_SetConfig+0x348>
 80063f8:	2310      	movs	r3, #16
 80063fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006404:	d15b      	bne.n	80064be <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006406:	7ffb      	ldrb	r3, [r7, #31]
 8006408:	2b08      	cmp	r3, #8
 800640a:	d828      	bhi.n	800645e <UART_SetConfig+0x3aa>
 800640c:	a201      	add	r2, pc, #4	@ (adr r2, 8006414 <UART_SetConfig+0x360>)
 800640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006412:	bf00      	nop
 8006414:	08006439 	.word	0x08006439
 8006418:	08006441 	.word	0x08006441
 800641c:	08006449 	.word	0x08006449
 8006420:	0800645f 	.word	0x0800645f
 8006424:	0800644f 	.word	0x0800644f
 8006428:	0800645f 	.word	0x0800645f
 800642c:	0800645f 	.word	0x0800645f
 8006430:	0800645f 	.word	0x0800645f
 8006434:	08006457 	.word	0x08006457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006438:	f7ff f94c 	bl	80056d4 <HAL_RCC_GetPCLK1Freq>
 800643c:	61b8      	str	r0, [r7, #24]
        break;
 800643e:	e013      	b.n	8006468 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006440:	f7ff f95c 	bl	80056fc <HAL_RCC_GetPCLK2Freq>
 8006444:	61b8      	str	r0, [r7, #24]
        break;
 8006446:	e00f      	b.n	8006468 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006448:	4b4b      	ldr	r3, [pc, #300]	@ (8006578 <UART_SetConfig+0x4c4>)
 800644a:	61bb      	str	r3, [r7, #24]
        break;
 800644c:	e00c      	b.n	8006468 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800644e:	f7ff f86f 	bl	8005530 <HAL_RCC_GetSysClockFreq>
 8006452:	61b8      	str	r0, [r7, #24]
        break;
 8006454:	e008      	b.n	8006468 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800645a:	61bb      	str	r3, [r7, #24]
        break;
 800645c:	e004      	b.n	8006468 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	77bb      	strb	r3, [r7, #30]
        break;
 8006466:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d074      	beq.n	8006558 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	005a      	lsls	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	085b      	lsrs	r3, r3, #1
 8006478:	441a      	add	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006482:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	2b0f      	cmp	r3, #15
 8006488:	d916      	bls.n	80064b8 <UART_SetConfig+0x404>
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006490:	d212      	bcs.n	80064b8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	b29b      	uxth	r3, r3
 8006496:	f023 030f 	bic.w	r3, r3, #15
 800649a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	085b      	lsrs	r3, r3, #1
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	89fb      	ldrh	r3, [r7, #14]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	89fa      	ldrh	r2, [r7, #14]
 80064b4:	60da      	str	r2, [r3, #12]
 80064b6:	e04f      	b.n	8006558 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	77bb      	strb	r3, [r7, #30]
 80064bc:	e04c      	b.n	8006558 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064be:	7ffb      	ldrb	r3, [r7, #31]
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d828      	bhi.n	8006516 <UART_SetConfig+0x462>
 80064c4:	a201      	add	r2, pc, #4	@ (adr r2, 80064cc <UART_SetConfig+0x418>)
 80064c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ca:	bf00      	nop
 80064cc:	080064f1 	.word	0x080064f1
 80064d0:	080064f9 	.word	0x080064f9
 80064d4:	08006501 	.word	0x08006501
 80064d8:	08006517 	.word	0x08006517
 80064dc:	08006507 	.word	0x08006507
 80064e0:	08006517 	.word	0x08006517
 80064e4:	08006517 	.word	0x08006517
 80064e8:	08006517 	.word	0x08006517
 80064ec:	0800650f 	.word	0x0800650f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f0:	f7ff f8f0 	bl	80056d4 <HAL_RCC_GetPCLK1Freq>
 80064f4:	61b8      	str	r0, [r7, #24]
        break;
 80064f6:	e013      	b.n	8006520 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064f8:	f7ff f900 	bl	80056fc <HAL_RCC_GetPCLK2Freq>
 80064fc:	61b8      	str	r0, [r7, #24]
        break;
 80064fe:	e00f      	b.n	8006520 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006500:	4b1d      	ldr	r3, [pc, #116]	@ (8006578 <UART_SetConfig+0x4c4>)
 8006502:	61bb      	str	r3, [r7, #24]
        break;
 8006504:	e00c      	b.n	8006520 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006506:	f7ff f813 	bl	8005530 <HAL_RCC_GetSysClockFreq>
 800650a:	61b8      	str	r0, [r7, #24]
        break;
 800650c:	e008      	b.n	8006520 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800650e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006512:	61bb      	str	r3, [r7, #24]
        break;
 8006514:	e004      	b.n	8006520 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	77bb      	strb	r3, [r7, #30]
        break;
 800651e:	bf00      	nop
    }

    if (pclk != 0U)
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d018      	beq.n	8006558 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	085a      	lsrs	r2, r3, #1
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	441a      	add	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	fbb2 f3f3 	udiv	r3, r2, r3
 8006538:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b0f      	cmp	r3, #15
 800653e:	d909      	bls.n	8006554 <UART_SetConfig+0x4a0>
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006546:	d205      	bcs.n	8006554 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	b29a      	uxth	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	60da      	str	r2, [r3, #12]
 8006552:	e001      	b.n	8006558 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006564:	7fbb      	ldrb	r3, [r7, #30]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3720      	adds	r7, #32
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	40007c00 	.word	0x40007c00
 8006574:	40023800 	.word	0x40023800
 8006578:	00f42400 	.word	0x00f42400

0800657c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006588:	f003 0308 	and.w	r3, r3, #8
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00a      	beq.n	80065ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006610:	f003 0310 	and.w	r3, r3, #16
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00a      	beq.n	800662e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01a      	beq.n	8006692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800667a:	d10a      	bne.n	8006692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	605a      	str	r2, [r3, #4]
  }
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08c      	sub	sp, #48	@ 0x30
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066d0:	f7fb fac4 	bl	8001c5c <HAL_GetTick>
 80066d4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d12e      	bne.n	8006742 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	2200      	movs	r2, #0
 80066ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f83b 	bl	800676e <UART_WaitOnFlagUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d021      	beq.n	8006742 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	60fb      	str	r3, [r7, #12]
   return(result);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006712:	623b      	str	r3, [r7, #32]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	61fb      	str	r3, [r7, #28]
 800671e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	69b9      	ldr	r1, [r7, #24]
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	617b      	str	r3, [r7, #20]
   return(result);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e6      	bne.n	80066fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e011      	b.n	8006766 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3728      	adds	r7, #40	@ 0x28
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b084      	sub	sp, #16
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	4613      	mov	r3, r2
 800677c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800677e:	e04f      	b.n	8006820 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006786:	d04b      	beq.n	8006820 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006788:	f7fb fa68 	bl	8001c5c <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	429a      	cmp	r2, r3
 8006796:	d302      	bcc.n	800679e <UART_WaitOnFlagUntilTimeout+0x30>
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e04e      	b.n	8006840 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d037      	beq.n	8006820 <UART_WaitOnFlagUntilTimeout+0xb2>
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b80      	cmp	r3, #128	@ 0x80
 80067b4:	d034      	beq.n	8006820 <UART_WaitOnFlagUntilTimeout+0xb2>
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b40      	cmp	r3, #64	@ 0x40
 80067ba:	d031      	beq.n	8006820 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b08      	cmp	r3, #8
 80067c8:	d110      	bne.n	80067ec <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2208      	movs	r2, #8
 80067d0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f838 	bl	8006848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2208      	movs	r2, #8
 80067dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e029      	b.n	8006840 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067fa:	d111      	bne.n	8006820 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006804:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 f81e 	bl	8006848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2220      	movs	r2, #32
 8006810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e00f      	b.n	8006840 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	69da      	ldr	r2, [r3, #28]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	4013      	ands	r3, r2
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	429a      	cmp	r2, r3
 800682e:	bf0c      	ite	eq
 8006830:	2301      	moveq	r3, #1
 8006832:	2300      	movne	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	461a      	mov	r2, r3
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	429a      	cmp	r2, r3
 800683c:	d0a0      	beq.n	8006780 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006848:	b480      	push	{r7}
 800684a:	b095      	sub	sp, #84	@ 0x54
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800685e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800686e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006870:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006874:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800687c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e6      	bne.n	8006850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3308      	adds	r3, #8
 8006888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	61fb      	str	r3, [r7, #28]
   return(result);
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	f023 0301 	bic.w	r3, r3, #1
 8006898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3308      	adds	r3, #8
 80068a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e5      	bne.n	8006882 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d118      	bne.n	80068f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f023 0310 	bic.w	r3, r3, #16
 80068d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	461a      	mov	r2, r3
 80068da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068dc:	61bb      	str	r3, [r7, #24]
 80068de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	6979      	ldr	r1, [r7, #20]
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	613b      	str	r3, [r7, #16]
   return(result);
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e6      	bne.n	80068be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006904:	bf00      	nop
 8006906:	3754      	adds	r7, #84	@ 0x54
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <__cvt>:
 8006910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006914:	ec57 6b10 	vmov	r6, r7, d0
 8006918:	2f00      	cmp	r7, #0
 800691a:	460c      	mov	r4, r1
 800691c:	4619      	mov	r1, r3
 800691e:	463b      	mov	r3, r7
 8006920:	bfbb      	ittet	lt
 8006922:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006926:	461f      	movlt	r7, r3
 8006928:	2300      	movge	r3, #0
 800692a:	232d      	movlt	r3, #45	@ 0x2d
 800692c:	700b      	strb	r3, [r1, #0]
 800692e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006930:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006934:	4691      	mov	r9, r2
 8006936:	f023 0820 	bic.w	r8, r3, #32
 800693a:	bfbc      	itt	lt
 800693c:	4632      	movlt	r2, r6
 800693e:	4616      	movlt	r6, r2
 8006940:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006944:	d005      	beq.n	8006952 <__cvt+0x42>
 8006946:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800694a:	d100      	bne.n	800694e <__cvt+0x3e>
 800694c:	3401      	adds	r4, #1
 800694e:	2102      	movs	r1, #2
 8006950:	e000      	b.n	8006954 <__cvt+0x44>
 8006952:	2103      	movs	r1, #3
 8006954:	ab03      	add	r3, sp, #12
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	ab02      	add	r3, sp, #8
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	ec47 6b10 	vmov	d0, r6, r7
 8006960:	4653      	mov	r3, sl
 8006962:	4622      	mov	r2, r4
 8006964:	f000 ff4c 	bl	8007800 <_dtoa_r>
 8006968:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800696c:	4605      	mov	r5, r0
 800696e:	d119      	bne.n	80069a4 <__cvt+0x94>
 8006970:	f019 0f01 	tst.w	r9, #1
 8006974:	d00e      	beq.n	8006994 <__cvt+0x84>
 8006976:	eb00 0904 	add.w	r9, r0, r4
 800697a:	2200      	movs	r2, #0
 800697c:	2300      	movs	r3, #0
 800697e:	4630      	mov	r0, r6
 8006980:	4639      	mov	r1, r7
 8006982:	f7fa f8c1 	bl	8000b08 <__aeabi_dcmpeq>
 8006986:	b108      	cbz	r0, 800698c <__cvt+0x7c>
 8006988:	f8cd 900c 	str.w	r9, [sp, #12]
 800698c:	2230      	movs	r2, #48	@ 0x30
 800698e:	9b03      	ldr	r3, [sp, #12]
 8006990:	454b      	cmp	r3, r9
 8006992:	d31e      	bcc.n	80069d2 <__cvt+0xc2>
 8006994:	9b03      	ldr	r3, [sp, #12]
 8006996:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006998:	1b5b      	subs	r3, r3, r5
 800699a:	4628      	mov	r0, r5
 800699c:	6013      	str	r3, [r2, #0]
 800699e:	b004      	add	sp, #16
 80069a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069a8:	eb00 0904 	add.w	r9, r0, r4
 80069ac:	d1e5      	bne.n	800697a <__cvt+0x6a>
 80069ae:	7803      	ldrb	r3, [r0, #0]
 80069b0:	2b30      	cmp	r3, #48	@ 0x30
 80069b2:	d10a      	bne.n	80069ca <__cvt+0xba>
 80069b4:	2200      	movs	r2, #0
 80069b6:	2300      	movs	r3, #0
 80069b8:	4630      	mov	r0, r6
 80069ba:	4639      	mov	r1, r7
 80069bc:	f7fa f8a4 	bl	8000b08 <__aeabi_dcmpeq>
 80069c0:	b918      	cbnz	r0, 80069ca <__cvt+0xba>
 80069c2:	f1c4 0401 	rsb	r4, r4, #1
 80069c6:	f8ca 4000 	str.w	r4, [sl]
 80069ca:	f8da 3000 	ldr.w	r3, [sl]
 80069ce:	4499      	add	r9, r3
 80069d0:	e7d3      	b.n	800697a <__cvt+0x6a>
 80069d2:	1c59      	adds	r1, r3, #1
 80069d4:	9103      	str	r1, [sp, #12]
 80069d6:	701a      	strb	r2, [r3, #0]
 80069d8:	e7d9      	b.n	800698e <__cvt+0x7e>

080069da <__exponent>:
 80069da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069dc:	2900      	cmp	r1, #0
 80069de:	bfba      	itte	lt
 80069e0:	4249      	neglt	r1, r1
 80069e2:	232d      	movlt	r3, #45	@ 0x2d
 80069e4:	232b      	movge	r3, #43	@ 0x2b
 80069e6:	2909      	cmp	r1, #9
 80069e8:	7002      	strb	r2, [r0, #0]
 80069ea:	7043      	strb	r3, [r0, #1]
 80069ec:	dd29      	ble.n	8006a42 <__exponent+0x68>
 80069ee:	f10d 0307 	add.w	r3, sp, #7
 80069f2:	461d      	mov	r5, r3
 80069f4:	270a      	movs	r7, #10
 80069f6:	461a      	mov	r2, r3
 80069f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80069fc:	fb07 1416 	mls	r4, r7, r6, r1
 8006a00:	3430      	adds	r4, #48	@ 0x30
 8006a02:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a06:	460c      	mov	r4, r1
 8006a08:	2c63      	cmp	r4, #99	@ 0x63
 8006a0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a0e:	4631      	mov	r1, r6
 8006a10:	dcf1      	bgt.n	80069f6 <__exponent+0x1c>
 8006a12:	3130      	adds	r1, #48	@ 0x30
 8006a14:	1e94      	subs	r4, r2, #2
 8006a16:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a1a:	1c41      	adds	r1, r0, #1
 8006a1c:	4623      	mov	r3, r4
 8006a1e:	42ab      	cmp	r3, r5
 8006a20:	d30a      	bcc.n	8006a38 <__exponent+0x5e>
 8006a22:	f10d 0309 	add.w	r3, sp, #9
 8006a26:	1a9b      	subs	r3, r3, r2
 8006a28:	42ac      	cmp	r4, r5
 8006a2a:	bf88      	it	hi
 8006a2c:	2300      	movhi	r3, #0
 8006a2e:	3302      	adds	r3, #2
 8006a30:	4403      	add	r3, r0
 8006a32:	1a18      	subs	r0, r3, r0
 8006a34:	b003      	add	sp, #12
 8006a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a38:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006a3c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006a40:	e7ed      	b.n	8006a1e <__exponent+0x44>
 8006a42:	2330      	movs	r3, #48	@ 0x30
 8006a44:	3130      	adds	r1, #48	@ 0x30
 8006a46:	7083      	strb	r3, [r0, #2]
 8006a48:	70c1      	strb	r1, [r0, #3]
 8006a4a:	1d03      	adds	r3, r0, #4
 8006a4c:	e7f1      	b.n	8006a32 <__exponent+0x58>
	...

08006a50 <_printf_float>:
 8006a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a54:	b08d      	sub	sp, #52	@ 0x34
 8006a56:	460c      	mov	r4, r1
 8006a58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006a5c:	4616      	mov	r6, r2
 8006a5e:	461f      	mov	r7, r3
 8006a60:	4605      	mov	r5, r0
 8006a62:	f000 fdbd 	bl	80075e0 <_localeconv_r>
 8006a66:	6803      	ldr	r3, [r0, #0]
 8006a68:	9304      	str	r3, [sp, #16]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7f9 fc20 	bl	80002b0 <strlen>
 8006a70:	2300      	movs	r3, #0
 8006a72:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a74:	f8d8 3000 	ldr.w	r3, [r8]
 8006a78:	9005      	str	r0, [sp, #20]
 8006a7a:	3307      	adds	r3, #7
 8006a7c:	f023 0307 	bic.w	r3, r3, #7
 8006a80:	f103 0208 	add.w	r2, r3, #8
 8006a84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a88:	f8d4 b000 	ldr.w	fp, [r4]
 8006a8c:	f8c8 2000 	str.w	r2, [r8]
 8006a90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006a98:	9307      	str	r3, [sp, #28]
 8006a9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a9e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006aa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aa6:	4b9c      	ldr	r3, [pc, #624]	@ (8006d18 <_printf_float+0x2c8>)
 8006aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8006aac:	f7fa f85e 	bl	8000b6c <__aeabi_dcmpun>
 8006ab0:	bb70      	cbnz	r0, 8006b10 <_printf_float+0xc0>
 8006ab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ab6:	4b98      	ldr	r3, [pc, #608]	@ (8006d18 <_printf_float+0x2c8>)
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	f7fa f838 	bl	8000b30 <__aeabi_dcmple>
 8006ac0:	bb30      	cbnz	r0, 8006b10 <_printf_float+0xc0>
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	4649      	mov	r1, r9
 8006aca:	f7fa f827 	bl	8000b1c <__aeabi_dcmplt>
 8006ace:	b110      	cbz	r0, 8006ad6 <_printf_float+0x86>
 8006ad0:	232d      	movs	r3, #45	@ 0x2d
 8006ad2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ad6:	4a91      	ldr	r2, [pc, #580]	@ (8006d1c <_printf_float+0x2cc>)
 8006ad8:	4b91      	ldr	r3, [pc, #580]	@ (8006d20 <_printf_float+0x2d0>)
 8006ada:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006ade:	bf8c      	ite	hi
 8006ae0:	4690      	movhi	r8, r2
 8006ae2:	4698      	movls	r8, r3
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	6123      	str	r3, [r4, #16]
 8006ae8:	f02b 0304 	bic.w	r3, fp, #4
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	f04f 0900 	mov.w	r9, #0
 8006af2:	9700      	str	r7, [sp, #0]
 8006af4:	4633      	mov	r3, r6
 8006af6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006af8:	4621      	mov	r1, r4
 8006afa:	4628      	mov	r0, r5
 8006afc:	f000 f9d2 	bl	8006ea4 <_printf_common>
 8006b00:	3001      	adds	r0, #1
 8006b02:	f040 808d 	bne.w	8006c20 <_printf_float+0x1d0>
 8006b06:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0a:	b00d      	add	sp, #52	@ 0x34
 8006b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b10:	4642      	mov	r2, r8
 8006b12:	464b      	mov	r3, r9
 8006b14:	4640      	mov	r0, r8
 8006b16:	4649      	mov	r1, r9
 8006b18:	f7fa f828 	bl	8000b6c <__aeabi_dcmpun>
 8006b1c:	b140      	cbz	r0, 8006b30 <_printf_float+0xe0>
 8006b1e:	464b      	mov	r3, r9
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	bfbc      	itt	lt
 8006b24:	232d      	movlt	r3, #45	@ 0x2d
 8006b26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8006d24 <_printf_float+0x2d4>)
 8006b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8006d28 <_printf_float+0x2d8>)
 8006b2e:	e7d4      	b.n	8006ada <_printf_float+0x8a>
 8006b30:	6863      	ldr	r3, [r4, #4]
 8006b32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006b36:	9206      	str	r2, [sp, #24]
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	d13b      	bne.n	8006bb4 <_printf_float+0x164>
 8006b3c:	2306      	movs	r3, #6
 8006b3e:	6063      	str	r3, [r4, #4]
 8006b40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006b44:	2300      	movs	r3, #0
 8006b46:	6022      	str	r2, [r4, #0]
 8006b48:	9303      	str	r3, [sp, #12]
 8006b4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8006b4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006b50:	ab09      	add	r3, sp, #36	@ 0x24
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	6861      	ldr	r1, [r4, #4]
 8006b56:	ec49 8b10 	vmov	d0, r8, r9
 8006b5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f7ff fed6 	bl	8006910 <__cvt>
 8006b64:	9b06      	ldr	r3, [sp, #24]
 8006b66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b68:	2b47      	cmp	r3, #71	@ 0x47
 8006b6a:	4680      	mov	r8, r0
 8006b6c:	d129      	bne.n	8006bc2 <_printf_float+0x172>
 8006b6e:	1cc8      	adds	r0, r1, #3
 8006b70:	db02      	blt.n	8006b78 <_printf_float+0x128>
 8006b72:	6863      	ldr	r3, [r4, #4]
 8006b74:	4299      	cmp	r1, r3
 8006b76:	dd41      	ble.n	8006bfc <_printf_float+0x1ac>
 8006b78:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b7c:	fa5f fa8a 	uxtb.w	sl, sl
 8006b80:	3901      	subs	r1, #1
 8006b82:	4652      	mov	r2, sl
 8006b84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b88:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b8a:	f7ff ff26 	bl	80069da <__exponent>
 8006b8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b90:	1813      	adds	r3, r2, r0
 8006b92:	2a01      	cmp	r2, #1
 8006b94:	4681      	mov	r9, r0
 8006b96:	6123      	str	r3, [r4, #16]
 8006b98:	dc02      	bgt.n	8006ba0 <_printf_float+0x150>
 8006b9a:	6822      	ldr	r2, [r4, #0]
 8006b9c:	07d2      	lsls	r2, r2, #31
 8006b9e:	d501      	bpl.n	8006ba4 <_printf_float+0x154>
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	6123      	str	r3, [r4, #16]
 8006ba4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d0a2      	beq.n	8006af2 <_printf_float+0xa2>
 8006bac:	232d      	movs	r3, #45	@ 0x2d
 8006bae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bb2:	e79e      	b.n	8006af2 <_printf_float+0xa2>
 8006bb4:	9a06      	ldr	r2, [sp, #24]
 8006bb6:	2a47      	cmp	r2, #71	@ 0x47
 8006bb8:	d1c2      	bne.n	8006b40 <_printf_float+0xf0>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1c0      	bne.n	8006b40 <_printf_float+0xf0>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e7bd      	b.n	8006b3e <_printf_float+0xee>
 8006bc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bc6:	d9db      	bls.n	8006b80 <_printf_float+0x130>
 8006bc8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006bcc:	d118      	bne.n	8006c00 <_printf_float+0x1b0>
 8006bce:	2900      	cmp	r1, #0
 8006bd0:	6863      	ldr	r3, [r4, #4]
 8006bd2:	dd0b      	ble.n	8006bec <_printf_float+0x19c>
 8006bd4:	6121      	str	r1, [r4, #16]
 8006bd6:	b913      	cbnz	r3, 8006bde <_printf_float+0x18e>
 8006bd8:	6822      	ldr	r2, [r4, #0]
 8006bda:	07d0      	lsls	r0, r2, #31
 8006bdc:	d502      	bpl.n	8006be4 <_printf_float+0x194>
 8006bde:	3301      	adds	r3, #1
 8006be0:	440b      	add	r3, r1
 8006be2:	6123      	str	r3, [r4, #16]
 8006be4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006be6:	f04f 0900 	mov.w	r9, #0
 8006bea:	e7db      	b.n	8006ba4 <_printf_float+0x154>
 8006bec:	b913      	cbnz	r3, 8006bf4 <_printf_float+0x1a4>
 8006bee:	6822      	ldr	r2, [r4, #0]
 8006bf0:	07d2      	lsls	r2, r2, #31
 8006bf2:	d501      	bpl.n	8006bf8 <_printf_float+0x1a8>
 8006bf4:	3302      	adds	r3, #2
 8006bf6:	e7f4      	b.n	8006be2 <_printf_float+0x192>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e7f2      	b.n	8006be2 <_printf_float+0x192>
 8006bfc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c02:	4299      	cmp	r1, r3
 8006c04:	db05      	blt.n	8006c12 <_printf_float+0x1c2>
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	6121      	str	r1, [r4, #16]
 8006c0a:	07d8      	lsls	r0, r3, #31
 8006c0c:	d5ea      	bpl.n	8006be4 <_printf_float+0x194>
 8006c0e:	1c4b      	adds	r3, r1, #1
 8006c10:	e7e7      	b.n	8006be2 <_printf_float+0x192>
 8006c12:	2900      	cmp	r1, #0
 8006c14:	bfd4      	ite	le
 8006c16:	f1c1 0202 	rsble	r2, r1, #2
 8006c1a:	2201      	movgt	r2, #1
 8006c1c:	4413      	add	r3, r2
 8006c1e:	e7e0      	b.n	8006be2 <_printf_float+0x192>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	055a      	lsls	r2, r3, #21
 8006c24:	d407      	bmi.n	8006c36 <_printf_float+0x1e6>
 8006c26:	6923      	ldr	r3, [r4, #16]
 8006c28:	4642      	mov	r2, r8
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	47b8      	blx	r7
 8006c30:	3001      	adds	r0, #1
 8006c32:	d12b      	bne.n	8006c8c <_printf_float+0x23c>
 8006c34:	e767      	b.n	8006b06 <_printf_float+0xb6>
 8006c36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c3a:	f240 80dd 	bls.w	8006df8 <_printf_float+0x3a8>
 8006c3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c42:	2200      	movs	r2, #0
 8006c44:	2300      	movs	r3, #0
 8006c46:	f7f9 ff5f 	bl	8000b08 <__aeabi_dcmpeq>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d033      	beq.n	8006cb6 <_printf_float+0x266>
 8006c4e:	4a37      	ldr	r2, [pc, #220]	@ (8006d2c <_printf_float+0x2dc>)
 8006c50:	2301      	movs	r3, #1
 8006c52:	4631      	mov	r1, r6
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b8      	blx	r7
 8006c58:	3001      	adds	r0, #1
 8006c5a:	f43f af54 	beq.w	8006b06 <_printf_float+0xb6>
 8006c5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006c62:	4543      	cmp	r3, r8
 8006c64:	db02      	blt.n	8006c6c <_printf_float+0x21c>
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	07d8      	lsls	r0, r3, #31
 8006c6a:	d50f      	bpl.n	8006c8c <_printf_float+0x23c>
 8006c6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c70:	4631      	mov	r1, r6
 8006c72:	4628      	mov	r0, r5
 8006c74:	47b8      	blx	r7
 8006c76:	3001      	adds	r0, #1
 8006c78:	f43f af45 	beq.w	8006b06 <_printf_float+0xb6>
 8006c7c:	f04f 0900 	mov.w	r9, #0
 8006c80:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c84:	f104 0a1a 	add.w	sl, r4, #26
 8006c88:	45c8      	cmp	r8, r9
 8006c8a:	dc09      	bgt.n	8006ca0 <_printf_float+0x250>
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	079b      	lsls	r3, r3, #30
 8006c90:	f100 8103 	bmi.w	8006e9a <_printf_float+0x44a>
 8006c94:	68e0      	ldr	r0, [r4, #12]
 8006c96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c98:	4298      	cmp	r0, r3
 8006c9a:	bfb8      	it	lt
 8006c9c:	4618      	movlt	r0, r3
 8006c9e:	e734      	b.n	8006b0a <_printf_float+0xba>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	4652      	mov	r2, sl
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	47b8      	blx	r7
 8006caa:	3001      	adds	r0, #1
 8006cac:	f43f af2b 	beq.w	8006b06 <_printf_float+0xb6>
 8006cb0:	f109 0901 	add.w	r9, r9, #1
 8006cb4:	e7e8      	b.n	8006c88 <_printf_float+0x238>
 8006cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	dc39      	bgt.n	8006d30 <_printf_float+0x2e0>
 8006cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8006d2c <_printf_float+0x2dc>)
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	4631      	mov	r1, r6
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	47b8      	blx	r7
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	f43f af1d 	beq.w	8006b06 <_printf_float+0xb6>
 8006ccc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006cd0:	ea59 0303 	orrs.w	r3, r9, r3
 8006cd4:	d102      	bne.n	8006cdc <_printf_float+0x28c>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	07d9      	lsls	r1, r3, #31
 8006cda:	d5d7      	bpl.n	8006c8c <_printf_float+0x23c>
 8006cdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ce0:	4631      	mov	r1, r6
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	47b8      	blx	r7
 8006ce6:	3001      	adds	r0, #1
 8006ce8:	f43f af0d 	beq.w	8006b06 <_printf_float+0xb6>
 8006cec:	f04f 0a00 	mov.w	sl, #0
 8006cf0:	f104 0b1a 	add.w	fp, r4, #26
 8006cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cf6:	425b      	negs	r3, r3
 8006cf8:	4553      	cmp	r3, sl
 8006cfa:	dc01      	bgt.n	8006d00 <_printf_float+0x2b0>
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	e793      	b.n	8006c28 <_printf_float+0x1d8>
 8006d00:	2301      	movs	r3, #1
 8006d02:	465a      	mov	r2, fp
 8006d04:	4631      	mov	r1, r6
 8006d06:	4628      	mov	r0, r5
 8006d08:	47b8      	blx	r7
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	f43f aefb 	beq.w	8006b06 <_printf_float+0xb6>
 8006d10:	f10a 0a01 	add.w	sl, sl, #1
 8006d14:	e7ee      	b.n	8006cf4 <_printf_float+0x2a4>
 8006d16:	bf00      	nop
 8006d18:	7fefffff 	.word	0x7fefffff
 8006d1c:	080093e4 	.word	0x080093e4
 8006d20:	080093e0 	.word	0x080093e0
 8006d24:	080093ec 	.word	0x080093ec
 8006d28:	080093e8 	.word	0x080093e8
 8006d2c:	080093f0 	.word	0x080093f0
 8006d30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d32:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d36:	4553      	cmp	r3, sl
 8006d38:	bfa8      	it	ge
 8006d3a:	4653      	movge	r3, sl
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	4699      	mov	r9, r3
 8006d40:	dc36      	bgt.n	8006db0 <_printf_float+0x360>
 8006d42:	f04f 0b00 	mov.w	fp, #0
 8006d46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d4a:	f104 021a 	add.w	r2, r4, #26
 8006d4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d50:	9306      	str	r3, [sp, #24]
 8006d52:	eba3 0309 	sub.w	r3, r3, r9
 8006d56:	455b      	cmp	r3, fp
 8006d58:	dc31      	bgt.n	8006dbe <_printf_float+0x36e>
 8006d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d5c:	459a      	cmp	sl, r3
 8006d5e:	dc3a      	bgt.n	8006dd6 <_printf_float+0x386>
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	07da      	lsls	r2, r3, #31
 8006d64:	d437      	bmi.n	8006dd6 <_printf_float+0x386>
 8006d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d68:	ebaa 0903 	sub.w	r9, sl, r3
 8006d6c:	9b06      	ldr	r3, [sp, #24]
 8006d6e:	ebaa 0303 	sub.w	r3, sl, r3
 8006d72:	4599      	cmp	r9, r3
 8006d74:	bfa8      	it	ge
 8006d76:	4699      	movge	r9, r3
 8006d78:	f1b9 0f00 	cmp.w	r9, #0
 8006d7c:	dc33      	bgt.n	8006de6 <_printf_float+0x396>
 8006d7e:	f04f 0800 	mov.w	r8, #0
 8006d82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d86:	f104 0b1a 	add.w	fp, r4, #26
 8006d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d8c:	ebaa 0303 	sub.w	r3, sl, r3
 8006d90:	eba3 0309 	sub.w	r3, r3, r9
 8006d94:	4543      	cmp	r3, r8
 8006d96:	f77f af79 	ble.w	8006c8c <_printf_float+0x23c>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	465a      	mov	r2, fp
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4628      	mov	r0, r5
 8006da2:	47b8      	blx	r7
 8006da4:	3001      	adds	r0, #1
 8006da6:	f43f aeae 	beq.w	8006b06 <_printf_float+0xb6>
 8006daa:	f108 0801 	add.w	r8, r8, #1
 8006dae:	e7ec      	b.n	8006d8a <_printf_float+0x33a>
 8006db0:	4642      	mov	r2, r8
 8006db2:	4631      	mov	r1, r6
 8006db4:	4628      	mov	r0, r5
 8006db6:	47b8      	blx	r7
 8006db8:	3001      	adds	r0, #1
 8006dba:	d1c2      	bne.n	8006d42 <_printf_float+0x2f2>
 8006dbc:	e6a3      	b.n	8006b06 <_printf_float+0xb6>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	4631      	mov	r1, r6
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	9206      	str	r2, [sp, #24]
 8006dc6:	47b8      	blx	r7
 8006dc8:	3001      	adds	r0, #1
 8006dca:	f43f ae9c 	beq.w	8006b06 <_printf_float+0xb6>
 8006dce:	9a06      	ldr	r2, [sp, #24]
 8006dd0:	f10b 0b01 	add.w	fp, fp, #1
 8006dd4:	e7bb      	b.n	8006d4e <_printf_float+0x2fe>
 8006dd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dda:	4631      	mov	r1, r6
 8006ddc:	4628      	mov	r0, r5
 8006dde:	47b8      	blx	r7
 8006de0:	3001      	adds	r0, #1
 8006de2:	d1c0      	bne.n	8006d66 <_printf_float+0x316>
 8006de4:	e68f      	b.n	8006b06 <_printf_float+0xb6>
 8006de6:	9a06      	ldr	r2, [sp, #24]
 8006de8:	464b      	mov	r3, r9
 8006dea:	4442      	add	r2, r8
 8006dec:	4631      	mov	r1, r6
 8006dee:	4628      	mov	r0, r5
 8006df0:	47b8      	blx	r7
 8006df2:	3001      	adds	r0, #1
 8006df4:	d1c3      	bne.n	8006d7e <_printf_float+0x32e>
 8006df6:	e686      	b.n	8006b06 <_printf_float+0xb6>
 8006df8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006dfc:	f1ba 0f01 	cmp.w	sl, #1
 8006e00:	dc01      	bgt.n	8006e06 <_printf_float+0x3b6>
 8006e02:	07db      	lsls	r3, r3, #31
 8006e04:	d536      	bpl.n	8006e74 <_printf_float+0x424>
 8006e06:	2301      	movs	r3, #1
 8006e08:	4642      	mov	r2, r8
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	47b8      	blx	r7
 8006e10:	3001      	adds	r0, #1
 8006e12:	f43f ae78 	beq.w	8006b06 <_printf_float+0xb6>
 8006e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	47b8      	blx	r7
 8006e20:	3001      	adds	r0, #1
 8006e22:	f43f ae70 	beq.w	8006b06 <_printf_float+0xb6>
 8006e26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e32:	f7f9 fe69 	bl	8000b08 <__aeabi_dcmpeq>
 8006e36:	b9c0      	cbnz	r0, 8006e6a <_printf_float+0x41a>
 8006e38:	4653      	mov	r3, sl
 8006e3a:	f108 0201 	add.w	r2, r8, #1
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4628      	mov	r0, r5
 8006e42:	47b8      	blx	r7
 8006e44:	3001      	adds	r0, #1
 8006e46:	d10c      	bne.n	8006e62 <_printf_float+0x412>
 8006e48:	e65d      	b.n	8006b06 <_printf_float+0xb6>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	465a      	mov	r2, fp
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	f43f ae56 	beq.w	8006b06 <_printf_float+0xb6>
 8006e5a:	f108 0801 	add.w	r8, r8, #1
 8006e5e:	45d0      	cmp	r8, sl
 8006e60:	dbf3      	blt.n	8006e4a <_printf_float+0x3fa>
 8006e62:	464b      	mov	r3, r9
 8006e64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006e68:	e6df      	b.n	8006c2a <_printf_float+0x1da>
 8006e6a:	f04f 0800 	mov.w	r8, #0
 8006e6e:	f104 0b1a 	add.w	fp, r4, #26
 8006e72:	e7f4      	b.n	8006e5e <_printf_float+0x40e>
 8006e74:	2301      	movs	r3, #1
 8006e76:	4642      	mov	r2, r8
 8006e78:	e7e1      	b.n	8006e3e <_printf_float+0x3ee>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	464a      	mov	r2, r9
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4628      	mov	r0, r5
 8006e82:	47b8      	blx	r7
 8006e84:	3001      	adds	r0, #1
 8006e86:	f43f ae3e 	beq.w	8006b06 <_printf_float+0xb6>
 8006e8a:	f108 0801 	add.w	r8, r8, #1
 8006e8e:	68e3      	ldr	r3, [r4, #12]
 8006e90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e92:	1a5b      	subs	r3, r3, r1
 8006e94:	4543      	cmp	r3, r8
 8006e96:	dcf0      	bgt.n	8006e7a <_printf_float+0x42a>
 8006e98:	e6fc      	b.n	8006c94 <_printf_float+0x244>
 8006e9a:	f04f 0800 	mov.w	r8, #0
 8006e9e:	f104 0919 	add.w	r9, r4, #25
 8006ea2:	e7f4      	b.n	8006e8e <_printf_float+0x43e>

08006ea4 <_printf_common>:
 8006ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea8:	4616      	mov	r6, r2
 8006eaa:	4698      	mov	r8, r3
 8006eac:	688a      	ldr	r2, [r1, #8]
 8006eae:	690b      	ldr	r3, [r1, #16]
 8006eb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	bfb8      	it	lt
 8006eb8:	4613      	movlt	r3, r2
 8006eba:	6033      	str	r3, [r6, #0]
 8006ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ec0:	4607      	mov	r7, r0
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	b10a      	cbz	r2, 8006eca <_printf_common+0x26>
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	6033      	str	r3, [r6, #0]
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	0699      	lsls	r1, r3, #26
 8006ece:	bf42      	ittt	mi
 8006ed0:	6833      	ldrmi	r3, [r6, #0]
 8006ed2:	3302      	addmi	r3, #2
 8006ed4:	6033      	strmi	r3, [r6, #0]
 8006ed6:	6825      	ldr	r5, [r4, #0]
 8006ed8:	f015 0506 	ands.w	r5, r5, #6
 8006edc:	d106      	bne.n	8006eec <_printf_common+0x48>
 8006ede:	f104 0a19 	add.w	sl, r4, #25
 8006ee2:	68e3      	ldr	r3, [r4, #12]
 8006ee4:	6832      	ldr	r2, [r6, #0]
 8006ee6:	1a9b      	subs	r3, r3, r2
 8006ee8:	42ab      	cmp	r3, r5
 8006eea:	dc26      	bgt.n	8006f3a <_printf_common+0x96>
 8006eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ef0:	6822      	ldr	r2, [r4, #0]
 8006ef2:	3b00      	subs	r3, #0
 8006ef4:	bf18      	it	ne
 8006ef6:	2301      	movne	r3, #1
 8006ef8:	0692      	lsls	r2, r2, #26
 8006efa:	d42b      	bmi.n	8006f54 <_printf_common+0xb0>
 8006efc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f00:	4641      	mov	r1, r8
 8006f02:	4638      	mov	r0, r7
 8006f04:	47c8      	blx	r9
 8006f06:	3001      	adds	r0, #1
 8006f08:	d01e      	beq.n	8006f48 <_printf_common+0xa4>
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	6922      	ldr	r2, [r4, #16]
 8006f0e:	f003 0306 	and.w	r3, r3, #6
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	bf02      	ittt	eq
 8006f16:	68e5      	ldreq	r5, [r4, #12]
 8006f18:	6833      	ldreq	r3, [r6, #0]
 8006f1a:	1aed      	subeq	r5, r5, r3
 8006f1c:	68a3      	ldr	r3, [r4, #8]
 8006f1e:	bf0c      	ite	eq
 8006f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f24:	2500      	movne	r5, #0
 8006f26:	4293      	cmp	r3, r2
 8006f28:	bfc4      	itt	gt
 8006f2a:	1a9b      	subgt	r3, r3, r2
 8006f2c:	18ed      	addgt	r5, r5, r3
 8006f2e:	2600      	movs	r6, #0
 8006f30:	341a      	adds	r4, #26
 8006f32:	42b5      	cmp	r5, r6
 8006f34:	d11a      	bne.n	8006f6c <_printf_common+0xc8>
 8006f36:	2000      	movs	r0, #0
 8006f38:	e008      	b.n	8006f4c <_printf_common+0xa8>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	4652      	mov	r2, sl
 8006f3e:	4641      	mov	r1, r8
 8006f40:	4638      	mov	r0, r7
 8006f42:	47c8      	blx	r9
 8006f44:	3001      	adds	r0, #1
 8006f46:	d103      	bne.n	8006f50 <_printf_common+0xac>
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f50:	3501      	adds	r5, #1
 8006f52:	e7c6      	b.n	8006ee2 <_printf_common+0x3e>
 8006f54:	18e1      	adds	r1, r4, r3
 8006f56:	1c5a      	adds	r2, r3, #1
 8006f58:	2030      	movs	r0, #48	@ 0x30
 8006f5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f5e:	4422      	add	r2, r4
 8006f60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f68:	3302      	adds	r3, #2
 8006f6a:	e7c7      	b.n	8006efc <_printf_common+0x58>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	4622      	mov	r2, r4
 8006f70:	4641      	mov	r1, r8
 8006f72:	4638      	mov	r0, r7
 8006f74:	47c8      	blx	r9
 8006f76:	3001      	adds	r0, #1
 8006f78:	d0e6      	beq.n	8006f48 <_printf_common+0xa4>
 8006f7a:	3601      	adds	r6, #1
 8006f7c:	e7d9      	b.n	8006f32 <_printf_common+0x8e>
	...

08006f80 <_printf_i>:
 8006f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f84:	7e0f      	ldrb	r7, [r1, #24]
 8006f86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f88:	2f78      	cmp	r7, #120	@ 0x78
 8006f8a:	4691      	mov	r9, r2
 8006f8c:	4680      	mov	r8, r0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	469a      	mov	sl, r3
 8006f92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f96:	d807      	bhi.n	8006fa8 <_printf_i+0x28>
 8006f98:	2f62      	cmp	r7, #98	@ 0x62
 8006f9a:	d80a      	bhi.n	8006fb2 <_printf_i+0x32>
 8006f9c:	2f00      	cmp	r7, #0
 8006f9e:	f000 80d1 	beq.w	8007144 <_printf_i+0x1c4>
 8006fa2:	2f58      	cmp	r7, #88	@ 0x58
 8006fa4:	f000 80b8 	beq.w	8007118 <_printf_i+0x198>
 8006fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fb0:	e03a      	b.n	8007028 <_printf_i+0xa8>
 8006fb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fb6:	2b15      	cmp	r3, #21
 8006fb8:	d8f6      	bhi.n	8006fa8 <_printf_i+0x28>
 8006fba:	a101      	add	r1, pc, #4	@ (adr r1, 8006fc0 <_printf_i+0x40>)
 8006fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fc0:	08007019 	.word	0x08007019
 8006fc4:	0800702d 	.word	0x0800702d
 8006fc8:	08006fa9 	.word	0x08006fa9
 8006fcc:	08006fa9 	.word	0x08006fa9
 8006fd0:	08006fa9 	.word	0x08006fa9
 8006fd4:	08006fa9 	.word	0x08006fa9
 8006fd8:	0800702d 	.word	0x0800702d
 8006fdc:	08006fa9 	.word	0x08006fa9
 8006fe0:	08006fa9 	.word	0x08006fa9
 8006fe4:	08006fa9 	.word	0x08006fa9
 8006fe8:	08006fa9 	.word	0x08006fa9
 8006fec:	0800712b 	.word	0x0800712b
 8006ff0:	08007057 	.word	0x08007057
 8006ff4:	080070e5 	.word	0x080070e5
 8006ff8:	08006fa9 	.word	0x08006fa9
 8006ffc:	08006fa9 	.word	0x08006fa9
 8007000:	0800714d 	.word	0x0800714d
 8007004:	08006fa9 	.word	0x08006fa9
 8007008:	08007057 	.word	0x08007057
 800700c:	08006fa9 	.word	0x08006fa9
 8007010:	08006fa9 	.word	0x08006fa9
 8007014:	080070ed 	.word	0x080070ed
 8007018:	6833      	ldr	r3, [r6, #0]
 800701a:	1d1a      	adds	r2, r3, #4
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6032      	str	r2, [r6, #0]
 8007020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007024:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007028:	2301      	movs	r3, #1
 800702a:	e09c      	b.n	8007166 <_printf_i+0x1e6>
 800702c:	6833      	ldr	r3, [r6, #0]
 800702e:	6820      	ldr	r0, [r4, #0]
 8007030:	1d19      	adds	r1, r3, #4
 8007032:	6031      	str	r1, [r6, #0]
 8007034:	0606      	lsls	r6, r0, #24
 8007036:	d501      	bpl.n	800703c <_printf_i+0xbc>
 8007038:	681d      	ldr	r5, [r3, #0]
 800703a:	e003      	b.n	8007044 <_printf_i+0xc4>
 800703c:	0645      	lsls	r5, r0, #25
 800703e:	d5fb      	bpl.n	8007038 <_printf_i+0xb8>
 8007040:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007044:	2d00      	cmp	r5, #0
 8007046:	da03      	bge.n	8007050 <_printf_i+0xd0>
 8007048:	232d      	movs	r3, #45	@ 0x2d
 800704a:	426d      	negs	r5, r5
 800704c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007050:	4858      	ldr	r0, [pc, #352]	@ (80071b4 <_printf_i+0x234>)
 8007052:	230a      	movs	r3, #10
 8007054:	e011      	b.n	800707a <_printf_i+0xfa>
 8007056:	6821      	ldr	r1, [r4, #0]
 8007058:	6833      	ldr	r3, [r6, #0]
 800705a:	0608      	lsls	r0, r1, #24
 800705c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007060:	d402      	bmi.n	8007068 <_printf_i+0xe8>
 8007062:	0649      	lsls	r1, r1, #25
 8007064:	bf48      	it	mi
 8007066:	b2ad      	uxthmi	r5, r5
 8007068:	2f6f      	cmp	r7, #111	@ 0x6f
 800706a:	4852      	ldr	r0, [pc, #328]	@ (80071b4 <_printf_i+0x234>)
 800706c:	6033      	str	r3, [r6, #0]
 800706e:	bf14      	ite	ne
 8007070:	230a      	movne	r3, #10
 8007072:	2308      	moveq	r3, #8
 8007074:	2100      	movs	r1, #0
 8007076:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800707a:	6866      	ldr	r6, [r4, #4]
 800707c:	60a6      	str	r6, [r4, #8]
 800707e:	2e00      	cmp	r6, #0
 8007080:	db05      	blt.n	800708e <_printf_i+0x10e>
 8007082:	6821      	ldr	r1, [r4, #0]
 8007084:	432e      	orrs	r6, r5
 8007086:	f021 0104 	bic.w	r1, r1, #4
 800708a:	6021      	str	r1, [r4, #0]
 800708c:	d04b      	beq.n	8007126 <_printf_i+0x1a6>
 800708e:	4616      	mov	r6, r2
 8007090:	fbb5 f1f3 	udiv	r1, r5, r3
 8007094:	fb03 5711 	mls	r7, r3, r1, r5
 8007098:	5dc7      	ldrb	r7, [r0, r7]
 800709a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800709e:	462f      	mov	r7, r5
 80070a0:	42bb      	cmp	r3, r7
 80070a2:	460d      	mov	r5, r1
 80070a4:	d9f4      	bls.n	8007090 <_printf_i+0x110>
 80070a6:	2b08      	cmp	r3, #8
 80070a8:	d10b      	bne.n	80070c2 <_printf_i+0x142>
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	07df      	lsls	r7, r3, #31
 80070ae:	d508      	bpl.n	80070c2 <_printf_i+0x142>
 80070b0:	6923      	ldr	r3, [r4, #16]
 80070b2:	6861      	ldr	r1, [r4, #4]
 80070b4:	4299      	cmp	r1, r3
 80070b6:	bfde      	ittt	le
 80070b8:	2330      	movle	r3, #48	@ 0x30
 80070ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070c2:	1b92      	subs	r2, r2, r6
 80070c4:	6122      	str	r2, [r4, #16]
 80070c6:	f8cd a000 	str.w	sl, [sp]
 80070ca:	464b      	mov	r3, r9
 80070cc:	aa03      	add	r2, sp, #12
 80070ce:	4621      	mov	r1, r4
 80070d0:	4640      	mov	r0, r8
 80070d2:	f7ff fee7 	bl	8006ea4 <_printf_common>
 80070d6:	3001      	adds	r0, #1
 80070d8:	d14a      	bne.n	8007170 <_printf_i+0x1f0>
 80070da:	f04f 30ff 	mov.w	r0, #4294967295
 80070de:	b004      	add	sp, #16
 80070e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	f043 0320 	orr.w	r3, r3, #32
 80070ea:	6023      	str	r3, [r4, #0]
 80070ec:	4832      	ldr	r0, [pc, #200]	@ (80071b8 <_printf_i+0x238>)
 80070ee:	2778      	movs	r7, #120	@ 0x78
 80070f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	6831      	ldr	r1, [r6, #0]
 80070f8:	061f      	lsls	r7, r3, #24
 80070fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80070fe:	d402      	bmi.n	8007106 <_printf_i+0x186>
 8007100:	065f      	lsls	r7, r3, #25
 8007102:	bf48      	it	mi
 8007104:	b2ad      	uxthmi	r5, r5
 8007106:	6031      	str	r1, [r6, #0]
 8007108:	07d9      	lsls	r1, r3, #31
 800710a:	bf44      	itt	mi
 800710c:	f043 0320 	orrmi.w	r3, r3, #32
 8007110:	6023      	strmi	r3, [r4, #0]
 8007112:	b11d      	cbz	r5, 800711c <_printf_i+0x19c>
 8007114:	2310      	movs	r3, #16
 8007116:	e7ad      	b.n	8007074 <_printf_i+0xf4>
 8007118:	4826      	ldr	r0, [pc, #152]	@ (80071b4 <_printf_i+0x234>)
 800711a:	e7e9      	b.n	80070f0 <_printf_i+0x170>
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	f023 0320 	bic.w	r3, r3, #32
 8007122:	6023      	str	r3, [r4, #0]
 8007124:	e7f6      	b.n	8007114 <_printf_i+0x194>
 8007126:	4616      	mov	r6, r2
 8007128:	e7bd      	b.n	80070a6 <_printf_i+0x126>
 800712a:	6833      	ldr	r3, [r6, #0]
 800712c:	6825      	ldr	r5, [r4, #0]
 800712e:	6961      	ldr	r1, [r4, #20]
 8007130:	1d18      	adds	r0, r3, #4
 8007132:	6030      	str	r0, [r6, #0]
 8007134:	062e      	lsls	r6, r5, #24
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	d501      	bpl.n	800713e <_printf_i+0x1be>
 800713a:	6019      	str	r1, [r3, #0]
 800713c:	e002      	b.n	8007144 <_printf_i+0x1c4>
 800713e:	0668      	lsls	r0, r5, #25
 8007140:	d5fb      	bpl.n	800713a <_printf_i+0x1ba>
 8007142:	8019      	strh	r1, [r3, #0]
 8007144:	2300      	movs	r3, #0
 8007146:	6123      	str	r3, [r4, #16]
 8007148:	4616      	mov	r6, r2
 800714a:	e7bc      	b.n	80070c6 <_printf_i+0x146>
 800714c:	6833      	ldr	r3, [r6, #0]
 800714e:	1d1a      	adds	r2, r3, #4
 8007150:	6032      	str	r2, [r6, #0]
 8007152:	681e      	ldr	r6, [r3, #0]
 8007154:	6862      	ldr	r2, [r4, #4]
 8007156:	2100      	movs	r1, #0
 8007158:	4630      	mov	r0, r6
 800715a:	f7f9 f859 	bl	8000210 <memchr>
 800715e:	b108      	cbz	r0, 8007164 <_printf_i+0x1e4>
 8007160:	1b80      	subs	r0, r0, r6
 8007162:	6060      	str	r0, [r4, #4]
 8007164:	6863      	ldr	r3, [r4, #4]
 8007166:	6123      	str	r3, [r4, #16]
 8007168:	2300      	movs	r3, #0
 800716a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800716e:	e7aa      	b.n	80070c6 <_printf_i+0x146>
 8007170:	6923      	ldr	r3, [r4, #16]
 8007172:	4632      	mov	r2, r6
 8007174:	4649      	mov	r1, r9
 8007176:	4640      	mov	r0, r8
 8007178:	47d0      	blx	sl
 800717a:	3001      	adds	r0, #1
 800717c:	d0ad      	beq.n	80070da <_printf_i+0x15a>
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	079b      	lsls	r3, r3, #30
 8007182:	d413      	bmi.n	80071ac <_printf_i+0x22c>
 8007184:	68e0      	ldr	r0, [r4, #12]
 8007186:	9b03      	ldr	r3, [sp, #12]
 8007188:	4298      	cmp	r0, r3
 800718a:	bfb8      	it	lt
 800718c:	4618      	movlt	r0, r3
 800718e:	e7a6      	b.n	80070de <_printf_i+0x15e>
 8007190:	2301      	movs	r3, #1
 8007192:	4632      	mov	r2, r6
 8007194:	4649      	mov	r1, r9
 8007196:	4640      	mov	r0, r8
 8007198:	47d0      	blx	sl
 800719a:	3001      	adds	r0, #1
 800719c:	d09d      	beq.n	80070da <_printf_i+0x15a>
 800719e:	3501      	adds	r5, #1
 80071a0:	68e3      	ldr	r3, [r4, #12]
 80071a2:	9903      	ldr	r1, [sp, #12]
 80071a4:	1a5b      	subs	r3, r3, r1
 80071a6:	42ab      	cmp	r3, r5
 80071a8:	dcf2      	bgt.n	8007190 <_printf_i+0x210>
 80071aa:	e7eb      	b.n	8007184 <_printf_i+0x204>
 80071ac:	2500      	movs	r5, #0
 80071ae:	f104 0619 	add.w	r6, r4, #25
 80071b2:	e7f5      	b.n	80071a0 <_printf_i+0x220>
 80071b4:	080093f2 	.word	0x080093f2
 80071b8:	08009403 	.word	0x08009403

080071bc <std>:
 80071bc:	2300      	movs	r3, #0
 80071be:	b510      	push	{r4, lr}
 80071c0:	4604      	mov	r4, r0
 80071c2:	e9c0 3300 	strd	r3, r3, [r0]
 80071c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071ca:	6083      	str	r3, [r0, #8]
 80071cc:	8181      	strh	r1, [r0, #12]
 80071ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80071d0:	81c2      	strh	r2, [r0, #14]
 80071d2:	6183      	str	r3, [r0, #24]
 80071d4:	4619      	mov	r1, r3
 80071d6:	2208      	movs	r2, #8
 80071d8:	305c      	adds	r0, #92	@ 0x5c
 80071da:	f000 f9f9 	bl	80075d0 <memset>
 80071de:	4b0d      	ldr	r3, [pc, #52]	@ (8007214 <std+0x58>)
 80071e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80071e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007218 <std+0x5c>)
 80071e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80071e6:	4b0d      	ldr	r3, [pc, #52]	@ (800721c <std+0x60>)
 80071e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80071ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007220 <std+0x64>)
 80071ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80071ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007224 <std+0x68>)
 80071f0:	6224      	str	r4, [r4, #32]
 80071f2:	429c      	cmp	r4, r3
 80071f4:	d006      	beq.n	8007204 <std+0x48>
 80071f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80071fa:	4294      	cmp	r4, r2
 80071fc:	d002      	beq.n	8007204 <std+0x48>
 80071fe:	33d0      	adds	r3, #208	@ 0xd0
 8007200:	429c      	cmp	r4, r3
 8007202:	d105      	bne.n	8007210 <std+0x54>
 8007204:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800720c:	f000 ba5c 	b.w	80076c8 <__retarget_lock_init_recursive>
 8007210:	bd10      	pop	{r4, pc}
 8007212:	bf00      	nop
 8007214:	08007421 	.word	0x08007421
 8007218:	08007443 	.word	0x08007443
 800721c:	0800747b 	.word	0x0800747b
 8007220:	0800749f 	.word	0x0800749f
 8007224:	20000370 	.word	0x20000370

08007228 <stdio_exit_handler>:
 8007228:	4a02      	ldr	r2, [pc, #8]	@ (8007234 <stdio_exit_handler+0xc>)
 800722a:	4903      	ldr	r1, [pc, #12]	@ (8007238 <stdio_exit_handler+0x10>)
 800722c:	4803      	ldr	r0, [pc, #12]	@ (800723c <stdio_exit_handler+0x14>)
 800722e:	f000 b869 	b.w	8007304 <_fwalk_sglue>
 8007232:	bf00      	nop
 8007234:	2000000c 	.word	0x2000000c
 8007238:	08009021 	.word	0x08009021
 800723c:	2000001c 	.word	0x2000001c

08007240 <cleanup_stdio>:
 8007240:	6841      	ldr	r1, [r0, #4]
 8007242:	4b0c      	ldr	r3, [pc, #48]	@ (8007274 <cleanup_stdio+0x34>)
 8007244:	4299      	cmp	r1, r3
 8007246:	b510      	push	{r4, lr}
 8007248:	4604      	mov	r4, r0
 800724a:	d001      	beq.n	8007250 <cleanup_stdio+0x10>
 800724c:	f001 fee8 	bl	8009020 <_fflush_r>
 8007250:	68a1      	ldr	r1, [r4, #8]
 8007252:	4b09      	ldr	r3, [pc, #36]	@ (8007278 <cleanup_stdio+0x38>)
 8007254:	4299      	cmp	r1, r3
 8007256:	d002      	beq.n	800725e <cleanup_stdio+0x1e>
 8007258:	4620      	mov	r0, r4
 800725a:	f001 fee1 	bl	8009020 <_fflush_r>
 800725e:	68e1      	ldr	r1, [r4, #12]
 8007260:	4b06      	ldr	r3, [pc, #24]	@ (800727c <cleanup_stdio+0x3c>)
 8007262:	4299      	cmp	r1, r3
 8007264:	d004      	beq.n	8007270 <cleanup_stdio+0x30>
 8007266:	4620      	mov	r0, r4
 8007268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800726c:	f001 bed8 	b.w	8009020 <_fflush_r>
 8007270:	bd10      	pop	{r4, pc}
 8007272:	bf00      	nop
 8007274:	20000370 	.word	0x20000370
 8007278:	200003d8 	.word	0x200003d8
 800727c:	20000440 	.word	0x20000440

08007280 <global_stdio_init.part.0>:
 8007280:	b510      	push	{r4, lr}
 8007282:	4b0b      	ldr	r3, [pc, #44]	@ (80072b0 <global_stdio_init.part.0+0x30>)
 8007284:	4c0b      	ldr	r4, [pc, #44]	@ (80072b4 <global_stdio_init.part.0+0x34>)
 8007286:	4a0c      	ldr	r2, [pc, #48]	@ (80072b8 <global_stdio_init.part.0+0x38>)
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	4620      	mov	r0, r4
 800728c:	2200      	movs	r2, #0
 800728e:	2104      	movs	r1, #4
 8007290:	f7ff ff94 	bl	80071bc <std>
 8007294:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007298:	2201      	movs	r2, #1
 800729a:	2109      	movs	r1, #9
 800729c:	f7ff ff8e 	bl	80071bc <std>
 80072a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80072a4:	2202      	movs	r2, #2
 80072a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072aa:	2112      	movs	r1, #18
 80072ac:	f7ff bf86 	b.w	80071bc <std>
 80072b0:	200004a8 	.word	0x200004a8
 80072b4:	20000370 	.word	0x20000370
 80072b8:	08007229 	.word	0x08007229

080072bc <__sfp_lock_acquire>:
 80072bc:	4801      	ldr	r0, [pc, #4]	@ (80072c4 <__sfp_lock_acquire+0x8>)
 80072be:	f000 ba04 	b.w	80076ca <__retarget_lock_acquire_recursive>
 80072c2:	bf00      	nop
 80072c4:	200004b1 	.word	0x200004b1

080072c8 <__sfp_lock_release>:
 80072c8:	4801      	ldr	r0, [pc, #4]	@ (80072d0 <__sfp_lock_release+0x8>)
 80072ca:	f000 b9ff 	b.w	80076cc <__retarget_lock_release_recursive>
 80072ce:	bf00      	nop
 80072d0:	200004b1 	.word	0x200004b1

080072d4 <__sinit>:
 80072d4:	b510      	push	{r4, lr}
 80072d6:	4604      	mov	r4, r0
 80072d8:	f7ff fff0 	bl	80072bc <__sfp_lock_acquire>
 80072dc:	6a23      	ldr	r3, [r4, #32]
 80072de:	b11b      	cbz	r3, 80072e8 <__sinit+0x14>
 80072e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072e4:	f7ff bff0 	b.w	80072c8 <__sfp_lock_release>
 80072e8:	4b04      	ldr	r3, [pc, #16]	@ (80072fc <__sinit+0x28>)
 80072ea:	6223      	str	r3, [r4, #32]
 80072ec:	4b04      	ldr	r3, [pc, #16]	@ (8007300 <__sinit+0x2c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1f5      	bne.n	80072e0 <__sinit+0xc>
 80072f4:	f7ff ffc4 	bl	8007280 <global_stdio_init.part.0>
 80072f8:	e7f2      	b.n	80072e0 <__sinit+0xc>
 80072fa:	bf00      	nop
 80072fc:	08007241 	.word	0x08007241
 8007300:	200004a8 	.word	0x200004a8

08007304 <_fwalk_sglue>:
 8007304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007308:	4607      	mov	r7, r0
 800730a:	4688      	mov	r8, r1
 800730c:	4614      	mov	r4, r2
 800730e:	2600      	movs	r6, #0
 8007310:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007314:	f1b9 0901 	subs.w	r9, r9, #1
 8007318:	d505      	bpl.n	8007326 <_fwalk_sglue+0x22>
 800731a:	6824      	ldr	r4, [r4, #0]
 800731c:	2c00      	cmp	r4, #0
 800731e:	d1f7      	bne.n	8007310 <_fwalk_sglue+0xc>
 8007320:	4630      	mov	r0, r6
 8007322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007326:	89ab      	ldrh	r3, [r5, #12]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d907      	bls.n	800733c <_fwalk_sglue+0x38>
 800732c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007330:	3301      	adds	r3, #1
 8007332:	d003      	beq.n	800733c <_fwalk_sglue+0x38>
 8007334:	4629      	mov	r1, r5
 8007336:	4638      	mov	r0, r7
 8007338:	47c0      	blx	r8
 800733a:	4306      	orrs	r6, r0
 800733c:	3568      	adds	r5, #104	@ 0x68
 800733e:	e7e9      	b.n	8007314 <_fwalk_sglue+0x10>

08007340 <iprintf>:
 8007340:	b40f      	push	{r0, r1, r2, r3}
 8007342:	b507      	push	{r0, r1, r2, lr}
 8007344:	4906      	ldr	r1, [pc, #24]	@ (8007360 <iprintf+0x20>)
 8007346:	ab04      	add	r3, sp, #16
 8007348:	6808      	ldr	r0, [r1, #0]
 800734a:	f853 2b04 	ldr.w	r2, [r3], #4
 800734e:	6881      	ldr	r1, [r0, #8]
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	f001 fcc9 	bl	8008ce8 <_vfiprintf_r>
 8007356:	b003      	add	sp, #12
 8007358:	f85d eb04 	ldr.w	lr, [sp], #4
 800735c:	b004      	add	sp, #16
 800735e:	4770      	bx	lr
 8007360:	20000018 	.word	0x20000018

08007364 <_puts_r>:
 8007364:	6a03      	ldr	r3, [r0, #32]
 8007366:	b570      	push	{r4, r5, r6, lr}
 8007368:	6884      	ldr	r4, [r0, #8]
 800736a:	4605      	mov	r5, r0
 800736c:	460e      	mov	r6, r1
 800736e:	b90b      	cbnz	r3, 8007374 <_puts_r+0x10>
 8007370:	f7ff ffb0 	bl	80072d4 <__sinit>
 8007374:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007376:	07db      	lsls	r3, r3, #31
 8007378:	d405      	bmi.n	8007386 <_puts_r+0x22>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	0598      	lsls	r0, r3, #22
 800737e:	d402      	bmi.n	8007386 <_puts_r+0x22>
 8007380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007382:	f000 f9a2 	bl	80076ca <__retarget_lock_acquire_recursive>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	0719      	lsls	r1, r3, #28
 800738a:	d502      	bpl.n	8007392 <_puts_r+0x2e>
 800738c:	6923      	ldr	r3, [r4, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d135      	bne.n	80073fe <_puts_r+0x9a>
 8007392:	4621      	mov	r1, r4
 8007394:	4628      	mov	r0, r5
 8007396:	f000 f8c5 	bl	8007524 <__swsetup_r>
 800739a:	b380      	cbz	r0, 80073fe <_puts_r+0x9a>
 800739c:	f04f 35ff 	mov.w	r5, #4294967295
 80073a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073a2:	07da      	lsls	r2, r3, #31
 80073a4:	d405      	bmi.n	80073b2 <_puts_r+0x4e>
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	059b      	lsls	r3, r3, #22
 80073aa:	d402      	bmi.n	80073b2 <_puts_r+0x4e>
 80073ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073ae:	f000 f98d 	bl	80076cc <__retarget_lock_release_recursive>
 80073b2:	4628      	mov	r0, r5
 80073b4:	bd70      	pop	{r4, r5, r6, pc}
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	da04      	bge.n	80073c4 <_puts_r+0x60>
 80073ba:	69a2      	ldr	r2, [r4, #24]
 80073bc:	429a      	cmp	r2, r3
 80073be:	dc17      	bgt.n	80073f0 <_puts_r+0x8c>
 80073c0:	290a      	cmp	r1, #10
 80073c2:	d015      	beq.n	80073f0 <_puts_r+0x8c>
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	6022      	str	r2, [r4, #0]
 80073ca:	7019      	strb	r1, [r3, #0]
 80073cc:	68a3      	ldr	r3, [r4, #8]
 80073ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80073d2:	3b01      	subs	r3, #1
 80073d4:	60a3      	str	r3, [r4, #8]
 80073d6:	2900      	cmp	r1, #0
 80073d8:	d1ed      	bne.n	80073b6 <_puts_r+0x52>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	da11      	bge.n	8007402 <_puts_r+0x9e>
 80073de:	4622      	mov	r2, r4
 80073e0:	210a      	movs	r1, #10
 80073e2:	4628      	mov	r0, r5
 80073e4:	f000 f85f 	bl	80074a6 <__swbuf_r>
 80073e8:	3001      	adds	r0, #1
 80073ea:	d0d7      	beq.n	800739c <_puts_r+0x38>
 80073ec:	250a      	movs	r5, #10
 80073ee:	e7d7      	b.n	80073a0 <_puts_r+0x3c>
 80073f0:	4622      	mov	r2, r4
 80073f2:	4628      	mov	r0, r5
 80073f4:	f000 f857 	bl	80074a6 <__swbuf_r>
 80073f8:	3001      	adds	r0, #1
 80073fa:	d1e7      	bne.n	80073cc <_puts_r+0x68>
 80073fc:	e7ce      	b.n	800739c <_puts_r+0x38>
 80073fe:	3e01      	subs	r6, #1
 8007400:	e7e4      	b.n	80073cc <_puts_r+0x68>
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	6022      	str	r2, [r4, #0]
 8007408:	220a      	movs	r2, #10
 800740a:	701a      	strb	r2, [r3, #0]
 800740c:	e7ee      	b.n	80073ec <_puts_r+0x88>
	...

08007410 <puts>:
 8007410:	4b02      	ldr	r3, [pc, #8]	@ (800741c <puts+0xc>)
 8007412:	4601      	mov	r1, r0
 8007414:	6818      	ldr	r0, [r3, #0]
 8007416:	f7ff bfa5 	b.w	8007364 <_puts_r>
 800741a:	bf00      	nop
 800741c:	20000018 	.word	0x20000018

08007420 <__sread>:
 8007420:	b510      	push	{r4, lr}
 8007422:	460c      	mov	r4, r1
 8007424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007428:	f000 f900 	bl	800762c <_read_r>
 800742c:	2800      	cmp	r0, #0
 800742e:	bfab      	itete	ge
 8007430:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007432:	89a3      	ldrhlt	r3, [r4, #12]
 8007434:	181b      	addge	r3, r3, r0
 8007436:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800743a:	bfac      	ite	ge
 800743c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800743e:	81a3      	strhlt	r3, [r4, #12]
 8007440:	bd10      	pop	{r4, pc}

08007442 <__swrite>:
 8007442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007446:	461f      	mov	r7, r3
 8007448:	898b      	ldrh	r3, [r1, #12]
 800744a:	05db      	lsls	r3, r3, #23
 800744c:	4605      	mov	r5, r0
 800744e:	460c      	mov	r4, r1
 8007450:	4616      	mov	r6, r2
 8007452:	d505      	bpl.n	8007460 <__swrite+0x1e>
 8007454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007458:	2302      	movs	r3, #2
 800745a:	2200      	movs	r2, #0
 800745c:	f000 f8d4 	bl	8007608 <_lseek_r>
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007466:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800746a:	81a3      	strh	r3, [r4, #12]
 800746c:	4632      	mov	r2, r6
 800746e:	463b      	mov	r3, r7
 8007470:	4628      	mov	r0, r5
 8007472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007476:	f000 b8eb 	b.w	8007650 <_write_r>

0800747a <__sseek>:
 800747a:	b510      	push	{r4, lr}
 800747c:	460c      	mov	r4, r1
 800747e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007482:	f000 f8c1 	bl	8007608 <_lseek_r>
 8007486:	1c43      	adds	r3, r0, #1
 8007488:	89a3      	ldrh	r3, [r4, #12]
 800748a:	bf15      	itete	ne
 800748c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800748e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007492:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007496:	81a3      	strheq	r3, [r4, #12]
 8007498:	bf18      	it	ne
 800749a:	81a3      	strhne	r3, [r4, #12]
 800749c:	bd10      	pop	{r4, pc}

0800749e <__sclose>:
 800749e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a2:	f000 b8a1 	b.w	80075e8 <_close_r>

080074a6 <__swbuf_r>:
 80074a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a8:	460e      	mov	r6, r1
 80074aa:	4614      	mov	r4, r2
 80074ac:	4605      	mov	r5, r0
 80074ae:	b118      	cbz	r0, 80074b8 <__swbuf_r+0x12>
 80074b0:	6a03      	ldr	r3, [r0, #32]
 80074b2:	b90b      	cbnz	r3, 80074b8 <__swbuf_r+0x12>
 80074b4:	f7ff ff0e 	bl	80072d4 <__sinit>
 80074b8:	69a3      	ldr	r3, [r4, #24]
 80074ba:	60a3      	str	r3, [r4, #8]
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	071a      	lsls	r2, r3, #28
 80074c0:	d501      	bpl.n	80074c6 <__swbuf_r+0x20>
 80074c2:	6923      	ldr	r3, [r4, #16]
 80074c4:	b943      	cbnz	r3, 80074d8 <__swbuf_r+0x32>
 80074c6:	4621      	mov	r1, r4
 80074c8:	4628      	mov	r0, r5
 80074ca:	f000 f82b 	bl	8007524 <__swsetup_r>
 80074ce:	b118      	cbz	r0, 80074d8 <__swbuf_r+0x32>
 80074d0:	f04f 37ff 	mov.w	r7, #4294967295
 80074d4:	4638      	mov	r0, r7
 80074d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	6922      	ldr	r2, [r4, #16]
 80074dc:	1a98      	subs	r0, r3, r2
 80074de:	6963      	ldr	r3, [r4, #20]
 80074e0:	b2f6      	uxtb	r6, r6
 80074e2:	4283      	cmp	r3, r0
 80074e4:	4637      	mov	r7, r6
 80074e6:	dc05      	bgt.n	80074f4 <__swbuf_r+0x4e>
 80074e8:	4621      	mov	r1, r4
 80074ea:	4628      	mov	r0, r5
 80074ec:	f001 fd98 	bl	8009020 <_fflush_r>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d1ed      	bne.n	80074d0 <__swbuf_r+0x2a>
 80074f4:	68a3      	ldr	r3, [r4, #8]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	60a3      	str	r3, [r4, #8]
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	6022      	str	r2, [r4, #0]
 8007500:	701e      	strb	r6, [r3, #0]
 8007502:	6962      	ldr	r2, [r4, #20]
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	429a      	cmp	r2, r3
 8007508:	d004      	beq.n	8007514 <__swbuf_r+0x6e>
 800750a:	89a3      	ldrh	r3, [r4, #12]
 800750c:	07db      	lsls	r3, r3, #31
 800750e:	d5e1      	bpl.n	80074d4 <__swbuf_r+0x2e>
 8007510:	2e0a      	cmp	r6, #10
 8007512:	d1df      	bne.n	80074d4 <__swbuf_r+0x2e>
 8007514:	4621      	mov	r1, r4
 8007516:	4628      	mov	r0, r5
 8007518:	f001 fd82 	bl	8009020 <_fflush_r>
 800751c:	2800      	cmp	r0, #0
 800751e:	d0d9      	beq.n	80074d4 <__swbuf_r+0x2e>
 8007520:	e7d6      	b.n	80074d0 <__swbuf_r+0x2a>
	...

08007524 <__swsetup_r>:
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	4b29      	ldr	r3, [pc, #164]	@ (80075cc <__swsetup_r+0xa8>)
 8007528:	4605      	mov	r5, r0
 800752a:	6818      	ldr	r0, [r3, #0]
 800752c:	460c      	mov	r4, r1
 800752e:	b118      	cbz	r0, 8007538 <__swsetup_r+0x14>
 8007530:	6a03      	ldr	r3, [r0, #32]
 8007532:	b90b      	cbnz	r3, 8007538 <__swsetup_r+0x14>
 8007534:	f7ff fece 	bl	80072d4 <__sinit>
 8007538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800753c:	0719      	lsls	r1, r3, #28
 800753e:	d422      	bmi.n	8007586 <__swsetup_r+0x62>
 8007540:	06da      	lsls	r2, r3, #27
 8007542:	d407      	bmi.n	8007554 <__swsetup_r+0x30>
 8007544:	2209      	movs	r2, #9
 8007546:	602a      	str	r2, [r5, #0]
 8007548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800754c:	81a3      	strh	r3, [r4, #12]
 800754e:	f04f 30ff 	mov.w	r0, #4294967295
 8007552:	e033      	b.n	80075bc <__swsetup_r+0x98>
 8007554:	0758      	lsls	r0, r3, #29
 8007556:	d512      	bpl.n	800757e <__swsetup_r+0x5a>
 8007558:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800755a:	b141      	cbz	r1, 800756e <__swsetup_r+0x4a>
 800755c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007560:	4299      	cmp	r1, r3
 8007562:	d002      	beq.n	800756a <__swsetup_r+0x46>
 8007564:	4628      	mov	r0, r5
 8007566:	f000 ff1b 	bl	80083a0 <_free_r>
 800756a:	2300      	movs	r3, #0
 800756c:	6363      	str	r3, [r4, #52]	@ 0x34
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007574:	81a3      	strh	r3, [r4, #12]
 8007576:	2300      	movs	r3, #0
 8007578:	6063      	str	r3, [r4, #4]
 800757a:	6923      	ldr	r3, [r4, #16]
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	f043 0308 	orr.w	r3, r3, #8
 8007584:	81a3      	strh	r3, [r4, #12]
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	b94b      	cbnz	r3, 800759e <__swsetup_r+0x7a>
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007594:	d003      	beq.n	800759e <__swsetup_r+0x7a>
 8007596:	4621      	mov	r1, r4
 8007598:	4628      	mov	r0, r5
 800759a:	f001 fd8f 	bl	80090bc <__smakebuf_r>
 800759e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a2:	f013 0201 	ands.w	r2, r3, #1
 80075a6:	d00a      	beq.n	80075be <__swsetup_r+0x9a>
 80075a8:	2200      	movs	r2, #0
 80075aa:	60a2      	str	r2, [r4, #8]
 80075ac:	6962      	ldr	r2, [r4, #20]
 80075ae:	4252      	negs	r2, r2
 80075b0:	61a2      	str	r2, [r4, #24]
 80075b2:	6922      	ldr	r2, [r4, #16]
 80075b4:	b942      	cbnz	r2, 80075c8 <__swsetup_r+0xa4>
 80075b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075ba:	d1c5      	bne.n	8007548 <__swsetup_r+0x24>
 80075bc:	bd38      	pop	{r3, r4, r5, pc}
 80075be:	0799      	lsls	r1, r3, #30
 80075c0:	bf58      	it	pl
 80075c2:	6962      	ldrpl	r2, [r4, #20]
 80075c4:	60a2      	str	r2, [r4, #8]
 80075c6:	e7f4      	b.n	80075b2 <__swsetup_r+0x8e>
 80075c8:	2000      	movs	r0, #0
 80075ca:	e7f7      	b.n	80075bc <__swsetup_r+0x98>
 80075cc:	20000018 	.word	0x20000018

080075d0 <memset>:
 80075d0:	4402      	add	r2, r0
 80075d2:	4603      	mov	r3, r0
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d100      	bne.n	80075da <memset+0xa>
 80075d8:	4770      	bx	lr
 80075da:	f803 1b01 	strb.w	r1, [r3], #1
 80075de:	e7f9      	b.n	80075d4 <memset+0x4>

080075e0 <_localeconv_r>:
 80075e0:	4800      	ldr	r0, [pc, #0]	@ (80075e4 <_localeconv_r+0x4>)
 80075e2:	4770      	bx	lr
 80075e4:	20000158 	.word	0x20000158

080075e8 <_close_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d06      	ldr	r5, [pc, #24]	@ (8007604 <_close_r+0x1c>)
 80075ec:	2300      	movs	r3, #0
 80075ee:	4604      	mov	r4, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	602b      	str	r3, [r5, #0]
 80075f4:	f7fa fa3c 	bl	8001a70 <_close>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_close_r+0x1a>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_close_r+0x1a>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	200004ac 	.word	0x200004ac

08007608 <_lseek_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	4d07      	ldr	r5, [pc, #28]	@ (8007628 <_lseek_r+0x20>)
 800760c:	4604      	mov	r4, r0
 800760e:	4608      	mov	r0, r1
 8007610:	4611      	mov	r1, r2
 8007612:	2200      	movs	r2, #0
 8007614:	602a      	str	r2, [r5, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	f7fa fa51 	bl	8001abe <_lseek>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_lseek_r+0x1e>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b103      	cbz	r3, 8007626 <_lseek_r+0x1e>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	200004ac 	.word	0x200004ac

0800762c <_read_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4d07      	ldr	r5, [pc, #28]	@ (800764c <_read_r+0x20>)
 8007630:	4604      	mov	r4, r0
 8007632:	4608      	mov	r0, r1
 8007634:	4611      	mov	r1, r2
 8007636:	2200      	movs	r2, #0
 8007638:	602a      	str	r2, [r5, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	f7fa f9df 	bl	80019fe <_read>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_read_r+0x1e>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_read_r+0x1e>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	200004ac 	.word	0x200004ac

08007650 <_write_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d07      	ldr	r5, [pc, #28]	@ (8007670 <_write_r+0x20>)
 8007654:	4604      	mov	r4, r0
 8007656:	4608      	mov	r0, r1
 8007658:	4611      	mov	r1, r2
 800765a:	2200      	movs	r2, #0
 800765c:	602a      	str	r2, [r5, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	f7fa f9ea 	bl	8001a38 <_write>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d102      	bne.n	800766e <_write_r+0x1e>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	b103      	cbz	r3, 800766e <_write_r+0x1e>
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	200004ac 	.word	0x200004ac

08007674 <__errno>:
 8007674:	4b01      	ldr	r3, [pc, #4]	@ (800767c <__errno+0x8>)
 8007676:	6818      	ldr	r0, [r3, #0]
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	20000018 	.word	0x20000018

08007680 <__libc_init_array>:
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	4d0d      	ldr	r5, [pc, #52]	@ (80076b8 <__libc_init_array+0x38>)
 8007684:	4c0d      	ldr	r4, [pc, #52]	@ (80076bc <__libc_init_array+0x3c>)
 8007686:	1b64      	subs	r4, r4, r5
 8007688:	10a4      	asrs	r4, r4, #2
 800768a:	2600      	movs	r6, #0
 800768c:	42a6      	cmp	r6, r4
 800768e:	d109      	bne.n	80076a4 <__libc_init_array+0x24>
 8007690:	4d0b      	ldr	r5, [pc, #44]	@ (80076c0 <__libc_init_array+0x40>)
 8007692:	4c0c      	ldr	r4, [pc, #48]	@ (80076c4 <__libc_init_array+0x44>)
 8007694:	f001 fe30 	bl	80092f8 <_init>
 8007698:	1b64      	subs	r4, r4, r5
 800769a:	10a4      	asrs	r4, r4, #2
 800769c:	2600      	movs	r6, #0
 800769e:	42a6      	cmp	r6, r4
 80076a0:	d105      	bne.n	80076ae <__libc_init_array+0x2e>
 80076a2:	bd70      	pop	{r4, r5, r6, pc}
 80076a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a8:	4798      	blx	r3
 80076aa:	3601      	adds	r6, #1
 80076ac:	e7ee      	b.n	800768c <__libc_init_array+0xc>
 80076ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b2:	4798      	blx	r3
 80076b4:	3601      	adds	r6, #1
 80076b6:	e7f2      	b.n	800769e <__libc_init_array+0x1e>
 80076b8:	0800975c 	.word	0x0800975c
 80076bc:	0800975c 	.word	0x0800975c
 80076c0:	0800975c 	.word	0x0800975c
 80076c4:	08009760 	.word	0x08009760

080076c8 <__retarget_lock_init_recursive>:
 80076c8:	4770      	bx	lr

080076ca <__retarget_lock_acquire_recursive>:
 80076ca:	4770      	bx	lr

080076cc <__retarget_lock_release_recursive>:
 80076cc:	4770      	bx	lr

080076ce <memcpy>:
 80076ce:	440a      	add	r2, r1
 80076d0:	4291      	cmp	r1, r2
 80076d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80076d6:	d100      	bne.n	80076da <memcpy+0xc>
 80076d8:	4770      	bx	lr
 80076da:	b510      	push	{r4, lr}
 80076dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076e4:	4291      	cmp	r1, r2
 80076e6:	d1f9      	bne.n	80076dc <memcpy+0xe>
 80076e8:	bd10      	pop	{r4, pc}

080076ea <quorem>:
 80076ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ee:	6903      	ldr	r3, [r0, #16]
 80076f0:	690c      	ldr	r4, [r1, #16]
 80076f2:	42a3      	cmp	r3, r4
 80076f4:	4607      	mov	r7, r0
 80076f6:	db7e      	blt.n	80077f6 <quorem+0x10c>
 80076f8:	3c01      	subs	r4, #1
 80076fa:	f101 0814 	add.w	r8, r1, #20
 80076fe:	00a3      	lsls	r3, r4, #2
 8007700:	f100 0514 	add.w	r5, r0, #20
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007710:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007714:	3301      	adds	r3, #1
 8007716:	429a      	cmp	r2, r3
 8007718:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800771c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007720:	d32e      	bcc.n	8007780 <quorem+0x96>
 8007722:	f04f 0a00 	mov.w	sl, #0
 8007726:	46c4      	mov	ip, r8
 8007728:	46ae      	mov	lr, r5
 800772a:	46d3      	mov	fp, sl
 800772c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007730:	b298      	uxth	r0, r3
 8007732:	fb06 a000 	mla	r0, r6, r0, sl
 8007736:	0c02      	lsrs	r2, r0, #16
 8007738:	0c1b      	lsrs	r3, r3, #16
 800773a:	fb06 2303 	mla	r3, r6, r3, r2
 800773e:	f8de 2000 	ldr.w	r2, [lr]
 8007742:	b280      	uxth	r0, r0
 8007744:	b292      	uxth	r2, r2
 8007746:	1a12      	subs	r2, r2, r0
 8007748:	445a      	add	r2, fp
 800774a:	f8de 0000 	ldr.w	r0, [lr]
 800774e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007752:	b29b      	uxth	r3, r3
 8007754:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007758:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800775c:	b292      	uxth	r2, r2
 800775e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007762:	45e1      	cmp	r9, ip
 8007764:	f84e 2b04 	str.w	r2, [lr], #4
 8007768:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800776c:	d2de      	bcs.n	800772c <quorem+0x42>
 800776e:	9b00      	ldr	r3, [sp, #0]
 8007770:	58eb      	ldr	r3, [r5, r3]
 8007772:	b92b      	cbnz	r3, 8007780 <quorem+0x96>
 8007774:	9b01      	ldr	r3, [sp, #4]
 8007776:	3b04      	subs	r3, #4
 8007778:	429d      	cmp	r5, r3
 800777a:	461a      	mov	r2, r3
 800777c:	d32f      	bcc.n	80077de <quorem+0xf4>
 800777e:	613c      	str	r4, [r7, #16]
 8007780:	4638      	mov	r0, r7
 8007782:	f001 f97f 	bl	8008a84 <__mcmp>
 8007786:	2800      	cmp	r0, #0
 8007788:	db25      	blt.n	80077d6 <quorem+0xec>
 800778a:	4629      	mov	r1, r5
 800778c:	2000      	movs	r0, #0
 800778e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007792:	f8d1 c000 	ldr.w	ip, [r1]
 8007796:	fa1f fe82 	uxth.w	lr, r2
 800779a:	fa1f f38c 	uxth.w	r3, ip
 800779e:	eba3 030e 	sub.w	r3, r3, lr
 80077a2:	4403      	add	r3, r0
 80077a4:	0c12      	lsrs	r2, r2, #16
 80077a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80077aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077b4:	45c1      	cmp	r9, r8
 80077b6:	f841 3b04 	str.w	r3, [r1], #4
 80077ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80077be:	d2e6      	bcs.n	800778e <quorem+0xa4>
 80077c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077c8:	b922      	cbnz	r2, 80077d4 <quorem+0xea>
 80077ca:	3b04      	subs	r3, #4
 80077cc:	429d      	cmp	r5, r3
 80077ce:	461a      	mov	r2, r3
 80077d0:	d30b      	bcc.n	80077ea <quorem+0x100>
 80077d2:	613c      	str	r4, [r7, #16]
 80077d4:	3601      	adds	r6, #1
 80077d6:	4630      	mov	r0, r6
 80077d8:	b003      	add	sp, #12
 80077da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077de:	6812      	ldr	r2, [r2, #0]
 80077e0:	3b04      	subs	r3, #4
 80077e2:	2a00      	cmp	r2, #0
 80077e4:	d1cb      	bne.n	800777e <quorem+0x94>
 80077e6:	3c01      	subs	r4, #1
 80077e8:	e7c6      	b.n	8007778 <quorem+0x8e>
 80077ea:	6812      	ldr	r2, [r2, #0]
 80077ec:	3b04      	subs	r3, #4
 80077ee:	2a00      	cmp	r2, #0
 80077f0:	d1ef      	bne.n	80077d2 <quorem+0xe8>
 80077f2:	3c01      	subs	r4, #1
 80077f4:	e7ea      	b.n	80077cc <quorem+0xe2>
 80077f6:	2000      	movs	r0, #0
 80077f8:	e7ee      	b.n	80077d8 <quorem+0xee>
 80077fa:	0000      	movs	r0, r0
 80077fc:	0000      	movs	r0, r0
	...

08007800 <_dtoa_r>:
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	69c7      	ldr	r7, [r0, #28]
 8007806:	b097      	sub	sp, #92	@ 0x5c
 8007808:	ed8d 0b04 	vstr	d0, [sp, #16]
 800780c:	ec55 4b10 	vmov	r4, r5, d0
 8007810:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007812:	9107      	str	r1, [sp, #28]
 8007814:	4681      	mov	r9, r0
 8007816:	920c      	str	r2, [sp, #48]	@ 0x30
 8007818:	9311      	str	r3, [sp, #68]	@ 0x44
 800781a:	b97f      	cbnz	r7, 800783c <_dtoa_r+0x3c>
 800781c:	2010      	movs	r0, #16
 800781e:	f000 fe09 	bl	8008434 <malloc>
 8007822:	4602      	mov	r2, r0
 8007824:	f8c9 001c 	str.w	r0, [r9, #28]
 8007828:	b920      	cbnz	r0, 8007834 <_dtoa_r+0x34>
 800782a:	4ba9      	ldr	r3, [pc, #676]	@ (8007ad0 <_dtoa_r+0x2d0>)
 800782c:	21ef      	movs	r1, #239	@ 0xef
 800782e:	48a9      	ldr	r0, [pc, #676]	@ (8007ad4 <_dtoa_r+0x2d4>)
 8007830:	f001 fcb2 	bl	8009198 <__assert_func>
 8007834:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007838:	6007      	str	r7, [r0, #0]
 800783a:	60c7      	str	r7, [r0, #12]
 800783c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007840:	6819      	ldr	r1, [r3, #0]
 8007842:	b159      	cbz	r1, 800785c <_dtoa_r+0x5c>
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	604a      	str	r2, [r1, #4]
 8007848:	2301      	movs	r3, #1
 800784a:	4093      	lsls	r3, r2
 800784c:	608b      	str	r3, [r1, #8]
 800784e:	4648      	mov	r0, r9
 8007850:	f000 fee6 	bl	8008620 <_Bfree>
 8007854:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	1e2b      	subs	r3, r5, #0
 800785e:	bfb9      	ittee	lt
 8007860:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007864:	9305      	strlt	r3, [sp, #20]
 8007866:	2300      	movge	r3, #0
 8007868:	6033      	strge	r3, [r6, #0]
 800786a:	9f05      	ldr	r7, [sp, #20]
 800786c:	4b9a      	ldr	r3, [pc, #616]	@ (8007ad8 <_dtoa_r+0x2d8>)
 800786e:	bfbc      	itt	lt
 8007870:	2201      	movlt	r2, #1
 8007872:	6032      	strlt	r2, [r6, #0]
 8007874:	43bb      	bics	r3, r7
 8007876:	d112      	bne.n	800789e <_dtoa_r+0x9e>
 8007878:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800787a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007884:	4323      	orrs	r3, r4
 8007886:	f000 855a 	beq.w	800833e <_dtoa_r+0xb3e>
 800788a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800788c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007aec <_dtoa_r+0x2ec>
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 855c 	beq.w	800834e <_dtoa_r+0xb4e>
 8007896:	f10a 0303 	add.w	r3, sl, #3
 800789a:	f000 bd56 	b.w	800834a <_dtoa_r+0xb4a>
 800789e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80078a2:	2200      	movs	r2, #0
 80078a4:	ec51 0b17 	vmov	r0, r1, d7
 80078a8:	2300      	movs	r3, #0
 80078aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80078ae:	f7f9 f92b 	bl	8000b08 <__aeabi_dcmpeq>
 80078b2:	4680      	mov	r8, r0
 80078b4:	b158      	cbz	r0, 80078ce <_dtoa_r+0xce>
 80078b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80078b8:	2301      	movs	r3, #1
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078be:	b113      	cbz	r3, 80078c6 <_dtoa_r+0xc6>
 80078c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80078c2:	4b86      	ldr	r3, [pc, #536]	@ (8007adc <_dtoa_r+0x2dc>)
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007af0 <_dtoa_r+0x2f0>
 80078ca:	f000 bd40 	b.w	800834e <_dtoa_r+0xb4e>
 80078ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80078d2:	aa14      	add	r2, sp, #80	@ 0x50
 80078d4:	a915      	add	r1, sp, #84	@ 0x54
 80078d6:	4648      	mov	r0, r9
 80078d8:	f001 f984 	bl	8008be4 <__d2b>
 80078dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80078e0:	9002      	str	r0, [sp, #8]
 80078e2:	2e00      	cmp	r6, #0
 80078e4:	d078      	beq.n	80079d8 <_dtoa_r+0x1d8>
 80078e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80078ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80078f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80078f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80078fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007900:	4619      	mov	r1, r3
 8007902:	2200      	movs	r2, #0
 8007904:	4b76      	ldr	r3, [pc, #472]	@ (8007ae0 <_dtoa_r+0x2e0>)
 8007906:	f7f8 fcdf 	bl	80002c8 <__aeabi_dsub>
 800790a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007ab8 <_dtoa_r+0x2b8>)
 800790c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007910:	f7f8 fe92 	bl	8000638 <__aeabi_dmul>
 8007914:	a36a      	add	r3, pc, #424	@ (adr r3, 8007ac0 <_dtoa_r+0x2c0>)
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	f7f8 fcd7 	bl	80002cc <__adddf3>
 800791e:	4604      	mov	r4, r0
 8007920:	4630      	mov	r0, r6
 8007922:	460d      	mov	r5, r1
 8007924:	f7f8 fe1e 	bl	8000564 <__aeabi_i2d>
 8007928:	a367      	add	r3, pc, #412	@ (adr r3, 8007ac8 <_dtoa_r+0x2c8>)
 800792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792e:	f7f8 fe83 	bl	8000638 <__aeabi_dmul>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4620      	mov	r0, r4
 8007938:	4629      	mov	r1, r5
 800793a:	f7f8 fcc7 	bl	80002cc <__adddf3>
 800793e:	4604      	mov	r4, r0
 8007940:	460d      	mov	r5, r1
 8007942:	f7f9 f929 	bl	8000b98 <__aeabi_d2iz>
 8007946:	2200      	movs	r2, #0
 8007948:	4607      	mov	r7, r0
 800794a:	2300      	movs	r3, #0
 800794c:	4620      	mov	r0, r4
 800794e:	4629      	mov	r1, r5
 8007950:	f7f9 f8e4 	bl	8000b1c <__aeabi_dcmplt>
 8007954:	b140      	cbz	r0, 8007968 <_dtoa_r+0x168>
 8007956:	4638      	mov	r0, r7
 8007958:	f7f8 fe04 	bl	8000564 <__aeabi_i2d>
 800795c:	4622      	mov	r2, r4
 800795e:	462b      	mov	r3, r5
 8007960:	f7f9 f8d2 	bl	8000b08 <__aeabi_dcmpeq>
 8007964:	b900      	cbnz	r0, 8007968 <_dtoa_r+0x168>
 8007966:	3f01      	subs	r7, #1
 8007968:	2f16      	cmp	r7, #22
 800796a:	d852      	bhi.n	8007a12 <_dtoa_r+0x212>
 800796c:	4b5d      	ldr	r3, [pc, #372]	@ (8007ae4 <_dtoa_r+0x2e4>)
 800796e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007976:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800797a:	f7f9 f8cf 	bl	8000b1c <__aeabi_dcmplt>
 800797e:	2800      	cmp	r0, #0
 8007980:	d049      	beq.n	8007a16 <_dtoa_r+0x216>
 8007982:	3f01      	subs	r7, #1
 8007984:	2300      	movs	r3, #0
 8007986:	9310      	str	r3, [sp, #64]	@ 0x40
 8007988:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800798a:	1b9b      	subs	r3, r3, r6
 800798c:	1e5a      	subs	r2, r3, #1
 800798e:	bf45      	ittet	mi
 8007990:	f1c3 0301 	rsbmi	r3, r3, #1
 8007994:	9300      	strmi	r3, [sp, #0]
 8007996:	2300      	movpl	r3, #0
 8007998:	2300      	movmi	r3, #0
 800799a:	9206      	str	r2, [sp, #24]
 800799c:	bf54      	ite	pl
 800799e:	9300      	strpl	r3, [sp, #0]
 80079a0:	9306      	strmi	r3, [sp, #24]
 80079a2:	2f00      	cmp	r7, #0
 80079a4:	db39      	blt.n	8007a1a <_dtoa_r+0x21a>
 80079a6:	9b06      	ldr	r3, [sp, #24]
 80079a8:	970d      	str	r7, [sp, #52]	@ 0x34
 80079aa:	443b      	add	r3, r7
 80079ac:	9306      	str	r3, [sp, #24]
 80079ae:	2300      	movs	r3, #0
 80079b0:	9308      	str	r3, [sp, #32]
 80079b2:	9b07      	ldr	r3, [sp, #28]
 80079b4:	2b09      	cmp	r3, #9
 80079b6:	d863      	bhi.n	8007a80 <_dtoa_r+0x280>
 80079b8:	2b05      	cmp	r3, #5
 80079ba:	bfc4      	itt	gt
 80079bc:	3b04      	subgt	r3, #4
 80079be:	9307      	strgt	r3, [sp, #28]
 80079c0:	9b07      	ldr	r3, [sp, #28]
 80079c2:	f1a3 0302 	sub.w	r3, r3, #2
 80079c6:	bfcc      	ite	gt
 80079c8:	2400      	movgt	r4, #0
 80079ca:	2401      	movle	r4, #1
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d863      	bhi.n	8007a98 <_dtoa_r+0x298>
 80079d0:	e8df f003 	tbb	[pc, r3]
 80079d4:	2b375452 	.word	0x2b375452
 80079d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80079dc:	441e      	add	r6, r3
 80079de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80079e2:	2b20      	cmp	r3, #32
 80079e4:	bfc1      	itttt	gt
 80079e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80079ea:	409f      	lslgt	r7, r3
 80079ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80079f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80079f4:	bfd6      	itet	le
 80079f6:	f1c3 0320 	rsble	r3, r3, #32
 80079fa:	ea47 0003 	orrgt.w	r0, r7, r3
 80079fe:	fa04 f003 	lslle.w	r0, r4, r3
 8007a02:	f7f8 fd9f 	bl	8000544 <__aeabi_ui2d>
 8007a06:	2201      	movs	r2, #1
 8007a08:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007a0c:	3e01      	subs	r6, #1
 8007a0e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007a10:	e776      	b.n	8007900 <_dtoa_r+0x100>
 8007a12:	2301      	movs	r3, #1
 8007a14:	e7b7      	b.n	8007986 <_dtoa_r+0x186>
 8007a16:	9010      	str	r0, [sp, #64]	@ 0x40
 8007a18:	e7b6      	b.n	8007988 <_dtoa_r+0x188>
 8007a1a:	9b00      	ldr	r3, [sp, #0]
 8007a1c:	1bdb      	subs	r3, r3, r7
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	427b      	negs	r3, r7
 8007a22:	9308      	str	r3, [sp, #32]
 8007a24:	2300      	movs	r3, #0
 8007a26:	930d      	str	r3, [sp, #52]	@ 0x34
 8007a28:	e7c3      	b.n	80079b2 <_dtoa_r+0x1b2>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a30:	eb07 0b03 	add.w	fp, r7, r3
 8007a34:	f10b 0301 	add.w	r3, fp, #1
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	9303      	str	r3, [sp, #12]
 8007a3c:	bfb8      	it	lt
 8007a3e:	2301      	movlt	r3, #1
 8007a40:	e006      	b.n	8007a50 <_dtoa_r+0x250>
 8007a42:	2301      	movs	r3, #1
 8007a44:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	dd28      	ble.n	8007a9e <_dtoa_r+0x29e>
 8007a4c:	469b      	mov	fp, r3
 8007a4e:	9303      	str	r3, [sp, #12]
 8007a50:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007a54:	2100      	movs	r1, #0
 8007a56:	2204      	movs	r2, #4
 8007a58:	f102 0514 	add.w	r5, r2, #20
 8007a5c:	429d      	cmp	r5, r3
 8007a5e:	d926      	bls.n	8007aae <_dtoa_r+0x2ae>
 8007a60:	6041      	str	r1, [r0, #4]
 8007a62:	4648      	mov	r0, r9
 8007a64:	f000 fd9c 	bl	80085a0 <_Balloc>
 8007a68:	4682      	mov	sl, r0
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	d142      	bne.n	8007af4 <_dtoa_r+0x2f4>
 8007a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ae8 <_dtoa_r+0x2e8>)
 8007a70:	4602      	mov	r2, r0
 8007a72:	f240 11af 	movw	r1, #431	@ 0x1af
 8007a76:	e6da      	b.n	800782e <_dtoa_r+0x2e>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	e7e3      	b.n	8007a44 <_dtoa_r+0x244>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	e7d5      	b.n	8007a2c <_dtoa_r+0x22c>
 8007a80:	2401      	movs	r4, #1
 8007a82:	2300      	movs	r3, #0
 8007a84:	9307      	str	r3, [sp, #28]
 8007a86:	9409      	str	r4, [sp, #36]	@ 0x24
 8007a88:	f04f 3bff 	mov.w	fp, #4294967295
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007a92:	2312      	movs	r3, #18
 8007a94:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a96:	e7db      	b.n	8007a50 <_dtoa_r+0x250>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a9c:	e7f4      	b.n	8007a88 <_dtoa_r+0x288>
 8007a9e:	f04f 0b01 	mov.w	fp, #1
 8007aa2:	f8cd b00c 	str.w	fp, [sp, #12]
 8007aa6:	465b      	mov	r3, fp
 8007aa8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007aac:	e7d0      	b.n	8007a50 <_dtoa_r+0x250>
 8007aae:	3101      	adds	r1, #1
 8007ab0:	0052      	lsls	r2, r2, #1
 8007ab2:	e7d1      	b.n	8007a58 <_dtoa_r+0x258>
 8007ab4:	f3af 8000 	nop.w
 8007ab8:	636f4361 	.word	0x636f4361
 8007abc:	3fd287a7 	.word	0x3fd287a7
 8007ac0:	8b60c8b3 	.word	0x8b60c8b3
 8007ac4:	3fc68a28 	.word	0x3fc68a28
 8007ac8:	509f79fb 	.word	0x509f79fb
 8007acc:	3fd34413 	.word	0x3fd34413
 8007ad0:	08009421 	.word	0x08009421
 8007ad4:	08009438 	.word	0x08009438
 8007ad8:	7ff00000 	.word	0x7ff00000
 8007adc:	080093f1 	.word	0x080093f1
 8007ae0:	3ff80000 	.word	0x3ff80000
 8007ae4:	08009588 	.word	0x08009588
 8007ae8:	08009490 	.word	0x08009490
 8007aec:	0800941d 	.word	0x0800941d
 8007af0:	080093f0 	.word	0x080093f0
 8007af4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007af8:	6018      	str	r0, [r3, #0]
 8007afa:	9b03      	ldr	r3, [sp, #12]
 8007afc:	2b0e      	cmp	r3, #14
 8007afe:	f200 80a1 	bhi.w	8007c44 <_dtoa_r+0x444>
 8007b02:	2c00      	cmp	r4, #0
 8007b04:	f000 809e 	beq.w	8007c44 <_dtoa_r+0x444>
 8007b08:	2f00      	cmp	r7, #0
 8007b0a:	dd33      	ble.n	8007b74 <_dtoa_r+0x374>
 8007b0c:	4b9c      	ldr	r3, [pc, #624]	@ (8007d80 <_dtoa_r+0x580>)
 8007b0e:	f007 020f 	and.w	r2, r7, #15
 8007b12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b16:	ed93 7b00 	vldr	d7, [r3]
 8007b1a:	05f8      	lsls	r0, r7, #23
 8007b1c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007b20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007b24:	d516      	bpl.n	8007b54 <_dtoa_r+0x354>
 8007b26:	4b97      	ldr	r3, [pc, #604]	@ (8007d84 <_dtoa_r+0x584>)
 8007b28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b30:	f7f8 feac 	bl	800088c <__aeabi_ddiv>
 8007b34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b38:	f004 040f 	and.w	r4, r4, #15
 8007b3c:	2603      	movs	r6, #3
 8007b3e:	4d91      	ldr	r5, [pc, #580]	@ (8007d84 <_dtoa_r+0x584>)
 8007b40:	b954      	cbnz	r4, 8007b58 <_dtoa_r+0x358>
 8007b42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007b46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b4a:	f7f8 fe9f 	bl	800088c <__aeabi_ddiv>
 8007b4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b52:	e028      	b.n	8007ba6 <_dtoa_r+0x3a6>
 8007b54:	2602      	movs	r6, #2
 8007b56:	e7f2      	b.n	8007b3e <_dtoa_r+0x33e>
 8007b58:	07e1      	lsls	r1, r4, #31
 8007b5a:	d508      	bpl.n	8007b6e <_dtoa_r+0x36e>
 8007b5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007b60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b64:	f7f8 fd68 	bl	8000638 <__aeabi_dmul>
 8007b68:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007b6c:	3601      	adds	r6, #1
 8007b6e:	1064      	asrs	r4, r4, #1
 8007b70:	3508      	adds	r5, #8
 8007b72:	e7e5      	b.n	8007b40 <_dtoa_r+0x340>
 8007b74:	f000 80af 	beq.w	8007cd6 <_dtoa_r+0x4d6>
 8007b78:	427c      	negs	r4, r7
 8007b7a:	4b81      	ldr	r3, [pc, #516]	@ (8007d80 <_dtoa_r+0x580>)
 8007b7c:	4d81      	ldr	r5, [pc, #516]	@ (8007d84 <_dtoa_r+0x584>)
 8007b7e:	f004 020f 	and.w	r2, r4, #15
 8007b82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b8e:	f7f8 fd53 	bl	8000638 <__aeabi_dmul>
 8007b92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b96:	1124      	asrs	r4, r4, #4
 8007b98:	2300      	movs	r3, #0
 8007b9a:	2602      	movs	r6, #2
 8007b9c:	2c00      	cmp	r4, #0
 8007b9e:	f040 808f 	bne.w	8007cc0 <_dtoa_r+0x4c0>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1d3      	bne.n	8007b4e <_dtoa_r+0x34e>
 8007ba6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ba8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 8094 	beq.w	8007cda <_dtoa_r+0x4da>
 8007bb2:	4b75      	ldr	r3, [pc, #468]	@ (8007d88 <_dtoa_r+0x588>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f7f8 ffaf 	bl	8000b1c <__aeabi_dcmplt>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	f000 808b 	beq.w	8007cda <_dtoa_r+0x4da>
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 8087 	beq.w	8007cda <_dtoa_r+0x4da>
 8007bcc:	f1bb 0f00 	cmp.w	fp, #0
 8007bd0:	dd34      	ble.n	8007c3c <_dtoa_r+0x43c>
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	4b6d      	ldr	r3, [pc, #436]	@ (8007d8c <_dtoa_r+0x58c>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	4629      	mov	r1, r5
 8007bda:	f7f8 fd2d 	bl	8000638 <__aeabi_dmul>
 8007bde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007be2:	f107 38ff 	add.w	r8, r7, #4294967295
 8007be6:	3601      	adds	r6, #1
 8007be8:	465c      	mov	r4, fp
 8007bea:	4630      	mov	r0, r6
 8007bec:	f7f8 fcba 	bl	8000564 <__aeabi_i2d>
 8007bf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bf4:	f7f8 fd20 	bl	8000638 <__aeabi_dmul>
 8007bf8:	4b65      	ldr	r3, [pc, #404]	@ (8007d90 <_dtoa_r+0x590>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f7f8 fb66 	bl	80002cc <__adddf3>
 8007c00:	4605      	mov	r5, r0
 8007c02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007c06:	2c00      	cmp	r4, #0
 8007c08:	d16a      	bne.n	8007ce0 <_dtoa_r+0x4e0>
 8007c0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c0e:	4b61      	ldr	r3, [pc, #388]	@ (8007d94 <_dtoa_r+0x594>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	f7f8 fb59 	bl	80002c8 <__aeabi_dsub>
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c1e:	462a      	mov	r2, r5
 8007c20:	4633      	mov	r3, r6
 8007c22:	f7f8 ff99 	bl	8000b58 <__aeabi_dcmpgt>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f040 8298 	bne.w	800815c <_dtoa_r+0x95c>
 8007c2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c30:	462a      	mov	r2, r5
 8007c32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007c36:	f7f8 ff71 	bl	8000b1c <__aeabi_dcmplt>
 8007c3a:	bb38      	cbnz	r0, 8007c8c <_dtoa_r+0x48c>
 8007c3c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007c40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f2c0 8157 	blt.w	8007efa <_dtoa_r+0x6fa>
 8007c4c:	2f0e      	cmp	r7, #14
 8007c4e:	f300 8154 	bgt.w	8007efa <_dtoa_r+0x6fa>
 8007c52:	4b4b      	ldr	r3, [pc, #300]	@ (8007d80 <_dtoa_r+0x580>)
 8007c54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c58:	ed93 7b00 	vldr	d7, [r3]
 8007c5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	ed8d 7b00 	vstr	d7, [sp]
 8007c64:	f280 80e5 	bge.w	8007e32 <_dtoa_r+0x632>
 8007c68:	9b03      	ldr	r3, [sp, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f300 80e1 	bgt.w	8007e32 <_dtoa_r+0x632>
 8007c70:	d10c      	bne.n	8007c8c <_dtoa_r+0x48c>
 8007c72:	4b48      	ldr	r3, [pc, #288]	@ (8007d94 <_dtoa_r+0x594>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	ec51 0b17 	vmov	r0, r1, d7
 8007c7a:	f7f8 fcdd 	bl	8000638 <__aeabi_dmul>
 8007c7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c82:	f7f8 ff5f 	bl	8000b44 <__aeabi_dcmpge>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	f000 8266 	beq.w	8008158 <_dtoa_r+0x958>
 8007c8c:	2400      	movs	r4, #0
 8007c8e:	4625      	mov	r5, r4
 8007c90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c92:	4656      	mov	r6, sl
 8007c94:	ea6f 0803 	mvn.w	r8, r3
 8007c98:	2700      	movs	r7, #0
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	4648      	mov	r0, r9
 8007c9e:	f000 fcbf 	bl	8008620 <_Bfree>
 8007ca2:	2d00      	cmp	r5, #0
 8007ca4:	f000 80bd 	beq.w	8007e22 <_dtoa_r+0x622>
 8007ca8:	b12f      	cbz	r7, 8007cb6 <_dtoa_r+0x4b6>
 8007caa:	42af      	cmp	r7, r5
 8007cac:	d003      	beq.n	8007cb6 <_dtoa_r+0x4b6>
 8007cae:	4639      	mov	r1, r7
 8007cb0:	4648      	mov	r0, r9
 8007cb2:	f000 fcb5 	bl	8008620 <_Bfree>
 8007cb6:	4629      	mov	r1, r5
 8007cb8:	4648      	mov	r0, r9
 8007cba:	f000 fcb1 	bl	8008620 <_Bfree>
 8007cbe:	e0b0      	b.n	8007e22 <_dtoa_r+0x622>
 8007cc0:	07e2      	lsls	r2, r4, #31
 8007cc2:	d505      	bpl.n	8007cd0 <_dtoa_r+0x4d0>
 8007cc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007cc8:	f7f8 fcb6 	bl	8000638 <__aeabi_dmul>
 8007ccc:	3601      	adds	r6, #1
 8007cce:	2301      	movs	r3, #1
 8007cd0:	1064      	asrs	r4, r4, #1
 8007cd2:	3508      	adds	r5, #8
 8007cd4:	e762      	b.n	8007b9c <_dtoa_r+0x39c>
 8007cd6:	2602      	movs	r6, #2
 8007cd8:	e765      	b.n	8007ba6 <_dtoa_r+0x3a6>
 8007cda:	9c03      	ldr	r4, [sp, #12]
 8007cdc:	46b8      	mov	r8, r7
 8007cde:	e784      	b.n	8007bea <_dtoa_r+0x3ea>
 8007ce0:	4b27      	ldr	r3, [pc, #156]	@ (8007d80 <_dtoa_r+0x580>)
 8007ce2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ce4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ce8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cec:	4454      	add	r4, sl
 8007cee:	2900      	cmp	r1, #0
 8007cf0:	d054      	beq.n	8007d9c <_dtoa_r+0x59c>
 8007cf2:	4929      	ldr	r1, [pc, #164]	@ (8007d98 <_dtoa_r+0x598>)
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	f7f8 fdc9 	bl	800088c <__aeabi_ddiv>
 8007cfa:	4633      	mov	r3, r6
 8007cfc:	462a      	mov	r2, r5
 8007cfe:	f7f8 fae3 	bl	80002c8 <__aeabi_dsub>
 8007d02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d06:	4656      	mov	r6, sl
 8007d08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d0c:	f7f8 ff44 	bl	8000b98 <__aeabi_d2iz>
 8007d10:	4605      	mov	r5, r0
 8007d12:	f7f8 fc27 	bl	8000564 <__aeabi_i2d>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d1e:	f7f8 fad3 	bl	80002c8 <__aeabi_dsub>
 8007d22:	3530      	adds	r5, #48	@ 0x30
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d2c:	f806 5b01 	strb.w	r5, [r6], #1
 8007d30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d34:	f7f8 fef2 	bl	8000b1c <__aeabi_dcmplt>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d172      	bne.n	8007e22 <_dtoa_r+0x622>
 8007d3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d40:	4911      	ldr	r1, [pc, #68]	@ (8007d88 <_dtoa_r+0x588>)
 8007d42:	2000      	movs	r0, #0
 8007d44:	f7f8 fac0 	bl	80002c8 <__aeabi_dsub>
 8007d48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d4c:	f7f8 fee6 	bl	8000b1c <__aeabi_dcmplt>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	f040 80b4 	bne.w	8007ebe <_dtoa_r+0x6be>
 8007d56:	42a6      	cmp	r6, r4
 8007d58:	f43f af70 	beq.w	8007c3c <_dtoa_r+0x43c>
 8007d5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d60:	4b0a      	ldr	r3, [pc, #40]	@ (8007d8c <_dtoa_r+0x58c>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	f7f8 fc68 	bl	8000638 <__aeabi_dmul>
 8007d68:	4b08      	ldr	r3, [pc, #32]	@ (8007d8c <_dtoa_r+0x58c>)
 8007d6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d6e:	2200      	movs	r2, #0
 8007d70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d74:	f7f8 fc60 	bl	8000638 <__aeabi_dmul>
 8007d78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d7c:	e7c4      	b.n	8007d08 <_dtoa_r+0x508>
 8007d7e:	bf00      	nop
 8007d80:	08009588 	.word	0x08009588
 8007d84:	08009560 	.word	0x08009560
 8007d88:	3ff00000 	.word	0x3ff00000
 8007d8c:	40240000 	.word	0x40240000
 8007d90:	401c0000 	.word	0x401c0000
 8007d94:	40140000 	.word	0x40140000
 8007d98:	3fe00000 	.word	0x3fe00000
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4628      	mov	r0, r5
 8007da0:	f7f8 fc4a 	bl	8000638 <__aeabi_dmul>
 8007da4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007da8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007daa:	4656      	mov	r6, sl
 8007dac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007db0:	f7f8 fef2 	bl	8000b98 <__aeabi_d2iz>
 8007db4:	4605      	mov	r5, r0
 8007db6:	f7f8 fbd5 	bl	8000564 <__aeabi_i2d>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dc2:	f7f8 fa81 	bl	80002c8 <__aeabi_dsub>
 8007dc6:	3530      	adds	r5, #48	@ 0x30
 8007dc8:	f806 5b01 	strb.w	r5, [r6], #1
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	42a6      	cmp	r6, r4
 8007dd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007dd6:	f04f 0200 	mov.w	r2, #0
 8007dda:	d124      	bne.n	8007e26 <_dtoa_r+0x626>
 8007ddc:	4baf      	ldr	r3, [pc, #700]	@ (800809c <_dtoa_r+0x89c>)
 8007dde:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007de2:	f7f8 fa73 	bl	80002cc <__adddf3>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dee:	f7f8 feb3 	bl	8000b58 <__aeabi_dcmpgt>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d163      	bne.n	8007ebe <_dtoa_r+0x6be>
 8007df6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007dfa:	49a8      	ldr	r1, [pc, #672]	@ (800809c <_dtoa_r+0x89c>)
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	f7f8 fa63 	bl	80002c8 <__aeabi_dsub>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e0a:	f7f8 fe87 	bl	8000b1c <__aeabi_dcmplt>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	f43f af14 	beq.w	8007c3c <_dtoa_r+0x43c>
 8007e14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007e16:	1e73      	subs	r3, r6, #1
 8007e18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e1e:	2b30      	cmp	r3, #48	@ 0x30
 8007e20:	d0f8      	beq.n	8007e14 <_dtoa_r+0x614>
 8007e22:	4647      	mov	r7, r8
 8007e24:	e03b      	b.n	8007e9e <_dtoa_r+0x69e>
 8007e26:	4b9e      	ldr	r3, [pc, #632]	@ (80080a0 <_dtoa_r+0x8a0>)
 8007e28:	f7f8 fc06 	bl	8000638 <__aeabi_dmul>
 8007e2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e30:	e7bc      	b.n	8007dac <_dtoa_r+0x5ac>
 8007e32:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007e36:	4656      	mov	r6, sl
 8007e38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	4629      	mov	r1, r5
 8007e40:	f7f8 fd24 	bl	800088c <__aeabi_ddiv>
 8007e44:	f7f8 fea8 	bl	8000b98 <__aeabi_d2iz>
 8007e48:	4680      	mov	r8, r0
 8007e4a:	f7f8 fb8b 	bl	8000564 <__aeabi_i2d>
 8007e4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e52:	f7f8 fbf1 	bl	8000638 <__aeabi_dmul>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007e62:	f7f8 fa31 	bl	80002c8 <__aeabi_dsub>
 8007e66:	f806 4b01 	strb.w	r4, [r6], #1
 8007e6a:	9d03      	ldr	r5, [sp, #12]
 8007e6c:	eba6 040a 	sub.w	r4, r6, sl
 8007e70:	42a5      	cmp	r5, r4
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	d133      	bne.n	8007ee0 <_dtoa_r+0x6e0>
 8007e78:	f7f8 fa28 	bl	80002cc <__adddf3>
 8007e7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e80:	4604      	mov	r4, r0
 8007e82:	460d      	mov	r5, r1
 8007e84:	f7f8 fe68 	bl	8000b58 <__aeabi_dcmpgt>
 8007e88:	b9c0      	cbnz	r0, 8007ebc <_dtoa_r+0x6bc>
 8007e8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e8e:	4620      	mov	r0, r4
 8007e90:	4629      	mov	r1, r5
 8007e92:	f7f8 fe39 	bl	8000b08 <__aeabi_dcmpeq>
 8007e96:	b110      	cbz	r0, 8007e9e <_dtoa_r+0x69e>
 8007e98:	f018 0f01 	tst.w	r8, #1
 8007e9c:	d10e      	bne.n	8007ebc <_dtoa_r+0x6bc>
 8007e9e:	9902      	ldr	r1, [sp, #8]
 8007ea0:	4648      	mov	r0, r9
 8007ea2:	f000 fbbd 	bl	8008620 <_Bfree>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	7033      	strb	r3, [r6, #0]
 8007eaa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007eac:	3701      	adds	r7, #1
 8007eae:	601f      	str	r7, [r3, #0]
 8007eb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 824b 	beq.w	800834e <_dtoa_r+0xb4e>
 8007eb8:	601e      	str	r6, [r3, #0]
 8007eba:	e248      	b.n	800834e <_dtoa_r+0xb4e>
 8007ebc:	46b8      	mov	r8, r7
 8007ebe:	4633      	mov	r3, r6
 8007ec0:	461e      	mov	r6, r3
 8007ec2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ec6:	2a39      	cmp	r2, #57	@ 0x39
 8007ec8:	d106      	bne.n	8007ed8 <_dtoa_r+0x6d8>
 8007eca:	459a      	cmp	sl, r3
 8007ecc:	d1f8      	bne.n	8007ec0 <_dtoa_r+0x6c0>
 8007ece:	2230      	movs	r2, #48	@ 0x30
 8007ed0:	f108 0801 	add.w	r8, r8, #1
 8007ed4:	f88a 2000 	strb.w	r2, [sl]
 8007ed8:	781a      	ldrb	r2, [r3, #0]
 8007eda:	3201      	adds	r2, #1
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	e7a0      	b.n	8007e22 <_dtoa_r+0x622>
 8007ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80080a0 <_dtoa_r+0x8a0>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f7f8 fba8 	bl	8000638 <__aeabi_dmul>
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2300      	movs	r3, #0
 8007eec:	4604      	mov	r4, r0
 8007eee:	460d      	mov	r5, r1
 8007ef0:	f7f8 fe0a 	bl	8000b08 <__aeabi_dcmpeq>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d09f      	beq.n	8007e38 <_dtoa_r+0x638>
 8007ef8:	e7d1      	b.n	8007e9e <_dtoa_r+0x69e>
 8007efa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007efc:	2a00      	cmp	r2, #0
 8007efe:	f000 80ea 	beq.w	80080d6 <_dtoa_r+0x8d6>
 8007f02:	9a07      	ldr	r2, [sp, #28]
 8007f04:	2a01      	cmp	r2, #1
 8007f06:	f300 80cd 	bgt.w	80080a4 <_dtoa_r+0x8a4>
 8007f0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007f0c:	2a00      	cmp	r2, #0
 8007f0e:	f000 80c1 	beq.w	8008094 <_dtoa_r+0x894>
 8007f12:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007f16:	9c08      	ldr	r4, [sp, #32]
 8007f18:	9e00      	ldr	r6, [sp, #0]
 8007f1a:	9a00      	ldr	r2, [sp, #0]
 8007f1c:	441a      	add	r2, r3
 8007f1e:	9200      	str	r2, [sp, #0]
 8007f20:	9a06      	ldr	r2, [sp, #24]
 8007f22:	2101      	movs	r1, #1
 8007f24:	441a      	add	r2, r3
 8007f26:	4648      	mov	r0, r9
 8007f28:	9206      	str	r2, [sp, #24]
 8007f2a:	f000 fc2d 	bl	8008788 <__i2b>
 8007f2e:	4605      	mov	r5, r0
 8007f30:	b166      	cbz	r6, 8007f4c <_dtoa_r+0x74c>
 8007f32:	9b06      	ldr	r3, [sp, #24]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	dd09      	ble.n	8007f4c <_dtoa_r+0x74c>
 8007f38:	42b3      	cmp	r3, r6
 8007f3a:	9a00      	ldr	r2, [sp, #0]
 8007f3c:	bfa8      	it	ge
 8007f3e:	4633      	movge	r3, r6
 8007f40:	1ad2      	subs	r2, r2, r3
 8007f42:	9200      	str	r2, [sp, #0]
 8007f44:	9a06      	ldr	r2, [sp, #24]
 8007f46:	1af6      	subs	r6, r6, r3
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	9306      	str	r3, [sp, #24]
 8007f4c:	9b08      	ldr	r3, [sp, #32]
 8007f4e:	b30b      	cbz	r3, 8007f94 <_dtoa_r+0x794>
 8007f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 80c6 	beq.w	80080e4 <_dtoa_r+0x8e4>
 8007f58:	2c00      	cmp	r4, #0
 8007f5a:	f000 80c0 	beq.w	80080de <_dtoa_r+0x8de>
 8007f5e:	4629      	mov	r1, r5
 8007f60:	4622      	mov	r2, r4
 8007f62:	4648      	mov	r0, r9
 8007f64:	f000 fcc8 	bl	80088f8 <__pow5mult>
 8007f68:	9a02      	ldr	r2, [sp, #8]
 8007f6a:	4601      	mov	r1, r0
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	4648      	mov	r0, r9
 8007f70:	f000 fc20 	bl	80087b4 <__multiply>
 8007f74:	9902      	ldr	r1, [sp, #8]
 8007f76:	4680      	mov	r8, r0
 8007f78:	4648      	mov	r0, r9
 8007f7a:	f000 fb51 	bl	8008620 <_Bfree>
 8007f7e:	9b08      	ldr	r3, [sp, #32]
 8007f80:	1b1b      	subs	r3, r3, r4
 8007f82:	9308      	str	r3, [sp, #32]
 8007f84:	f000 80b1 	beq.w	80080ea <_dtoa_r+0x8ea>
 8007f88:	9a08      	ldr	r2, [sp, #32]
 8007f8a:	4641      	mov	r1, r8
 8007f8c:	4648      	mov	r0, r9
 8007f8e:	f000 fcb3 	bl	80088f8 <__pow5mult>
 8007f92:	9002      	str	r0, [sp, #8]
 8007f94:	2101      	movs	r1, #1
 8007f96:	4648      	mov	r0, r9
 8007f98:	f000 fbf6 	bl	8008788 <__i2b>
 8007f9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 81d8 	beq.w	8008356 <_dtoa_r+0xb56>
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	4601      	mov	r1, r0
 8007faa:	4648      	mov	r0, r9
 8007fac:	f000 fca4 	bl	80088f8 <__pow5mult>
 8007fb0:	9b07      	ldr	r3, [sp, #28]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	f300 809f 	bgt.w	80080f8 <_dtoa_r+0x8f8>
 8007fba:	9b04      	ldr	r3, [sp, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f040 8097 	bne.w	80080f0 <_dtoa_r+0x8f0>
 8007fc2:	9b05      	ldr	r3, [sp, #20]
 8007fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f040 8093 	bne.w	80080f4 <_dtoa_r+0x8f4>
 8007fce:	9b05      	ldr	r3, [sp, #20]
 8007fd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fd4:	0d1b      	lsrs	r3, r3, #20
 8007fd6:	051b      	lsls	r3, r3, #20
 8007fd8:	b133      	cbz	r3, 8007fe8 <_dtoa_r+0x7e8>
 8007fda:	9b00      	ldr	r3, [sp, #0]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	9b06      	ldr	r3, [sp, #24]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	9306      	str	r3, [sp, #24]
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	9308      	str	r3, [sp, #32]
 8007fea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 81b8 	beq.w	8008362 <_dtoa_r+0xb62>
 8007ff2:	6923      	ldr	r3, [r4, #16]
 8007ff4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ff8:	6918      	ldr	r0, [r3, #16]
 8007ffa:	f000 fb79 	bl	80086f0 <__hi0bits>
 8007ffe:	f1c0 0020 	rsb	r0, r0, #32
 8008002:	9b06      	ldr	r3, [sp, #24]
 8008004:	4418      	add	r0, r3
 8008006:	f010 001f 	ands.w	r0, r0, #31
 800800a:	f000 8082 	beq.w	8008112 <_dtoa_r+0x912>
 800800e:	f1c0 0320 	rsb	r3, r0, #32
 8008012:	2b04      	cmp	r3, #4
 8008014:	dd73      	ble.n	80080fe <_dtoa_r+0x8fe>
 8008016:	9b00      	ldr	r3, [sp, #0]
 8008018:	f1c0 001c 	rsb	r0, r0, #28
 800801c:	4403      	add	r3, r0
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	9b06      	ldr	r3, [sp, #24]
 8008022:	4403      	add	r3, r0
 8008024:	4406      	add	r6, r0
 8008026:	9306      	str	r3, [sp, #24]
 8008028:	9b00      	ldr	r3, [sp, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	dd05      	ble.n	800803a <_dtoa_r+0x83a>
 800802e:	9902      	ldr	r1, [sp, #8]
 8008030:	461a      	mov	r2, r3
 8008032:	4648      	mov	r0, r9
 8008034:	f000 fcba 	bl	80089ac <__lshift>
 8008038:	9002      	str	r0, [sp, #8]
 800803a:	9b06      	ldr	r3, [sp, #24]
 800803c:	2b00      	cmp	r3, #0
 800803e:	dd05      	ble.n	800804c <_dtoa_r+0x84c>
 8008040:	4621      	mov	r1, r4
 8008042:	461a      	mov	r2, r3
 8008044:	4648      	mov	r0, r9
 8008046:	f000 fcb1 	bl	80089ac <__lshift>
 800804a:	4604      	mov	r4, r0
 800804c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800804e:	2b00      	cmp	r3, #0
 8008050:	d061      	beq.n	8008116 <_dtoa_r+0x916>
 8008052:	9802      	ldr	r0, [sp, #8]
 8008054:	4621      	mov	r1, r4
 8008056:	f000 fd15 	bl	8008a84 <__mcmp>
 800805a:	2800      	cmp	r0, #0
 800805c:	da5b      	bge.n	8008116 <_dtoa_r+0x916>
 800805e:	2300      	movs	r3, #0
 8008060:	9902      	ldr	r1, [sp, #8]
 8008062:	220a      	movs	r2, #10
 8008064:	4648      	mov	r0, r9
 8008066:	f000 fafd 	bl	8008664 <__multadd>
 800806a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800806c:	9002      	str	r0, [sp, #8]
 800806e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 8177 	beq.w	8008366 <_dtoa_r+0xb66>
 8008078:	4629      	mov	r1, r5
 800807a:	2300      	movs	r3, #0
 800807c:	220a      	movs	r2, #10
 800807e:	4648      	mov	r0, r9
 8008080:	f000 faf0 	bl	8008664 <__multadd>
 8008084:	f1bb 0f00 	cmp.w	fp, #0
 8008088:	4605      	mov	r5, r0
 800808a:	dc6f      	bgt.n	800816c <_dtoa_r+0x96c>
 800808c:	9b07      	ldr	r3, [sp, #28]
 800808e:	2b02      	cmp	r3, #2
 8008090:	dc49      	bgt.n	8008126 <_dtoa_r+0x926>
 8008092:	e06b      	b.n	800816c <_dtoa_r+0x96c>
 8008094:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008096:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800809a:	e73c      	b.n	8007f16 <_dtoa_r+0x716>
 800809c:	3fe00000 	.word	0x3fe00000
 80080a0:	40240000 	.word	0x40240000
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	1e5c      	subs	r4, r3, #1
 80080a8:	9b08      	ldr	r3, [sp, #32]
 80080aa:	42a3      	cmp	r3, r4
 80080ac:	db09      	blt.n	80080c2 <_dtoa_r+0x8c2>
 80080ae:	1b1c      	subs	r4, r3, r4
 80080b0:	9b03      	ldr	r3, [sp, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f6bf af30 	bge.w	8007f18 <_dtoa_r+0x718>
 80080b8:	9b00      	ldr	r3, [sp, #0]
 80080ba:	9a03      	ldr	r2, [sp, #12]
 80080bc:	1a9e      	subs	r6, r3, r2
 80080be:	2300      	movs	r3, #0
 80080c0:	e72b      	b.n	8007f1a <_dtoa_r+0x71a>
 80080c2:	9b08      	ldr	r3, [sp, #32]
 80080c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80080c6:	9408      	str	r4, [sp, #32]
 80080c8:	1ae3      	subs	r3, r4, r3
 80080ca:	441a      	add	r2, r3
 80080cc:	9e00      	ldr	r6, [sp, #0]
 80080ce:	9b03      	ldr	r3, [sp, #12]
 80080d0:	920d      	str	r2, [sp, #52]	@ 0x34
 80080d2:	2400      	movs	r4, #0
 80080d4:	e721      	b.n	8007f1a <_dtoa_r+0x71a>
 80080d6:	9c08      	ldr	r4, [sp, #32]
 80080d8:	9e00      	ldr	r6, [sp, #0]
 80080da:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80080dc:	e728      	b.n	8007f30 <_dtoa_r+0x730>
 80080de:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80080e2:	e751      	b.n	8007f88 <_dtoa_r+0x788>
 80080e4:	9a08      	ldr	r2, [sp, #32]
 80080e6:	9902      	ldr	r1, [sp, #8]
 80080e8:	e750      	b.n	8007f8c <_dtoa_r+0x78c>
 80080ea:	f8cd 8008 	str.w	r8, [sp, #8]
 80080ee:	e751      	b.n	8007f94 <_dtoa_r+0x794>
 80080f0:	2300      	movs	r3, #0
 80080f2:	e779      	b.n	8007fe8 <_dtoa_r+0x7e8>
 80080f4:	9b04      	ldr	r3, [sp, #16]
 80080f6:	e777      	b.n	8007fe8 <_dtoa_r+0x7e8>
 80080f8:	2300      	movs	r3, #0
 80080fa:	9308      	str	r3, [sp, #32]
 80080fc:	e779      	b.n	8007ff2 <_dtoa_r+0x7f2>
 80080fe:	d093      	beq.n	8008028 <_dtoa_r+0x828>
 8008100:	9a00      	ldr	r2, [sp, #0]
 8008102:	331c      	adds	r3, #28
 8008104:	441a      	add	r2, r3
 8008106:	9200      	str	r2, [sp, #0]
 8008108:	9a06      	ldr	r2, [sp, #24]
 800810a:	441a      	add	r2, r3
 800810c:	441e      	add	r6, r3
 800810e:	9206      	str	r2, [sp, #24]
 8008110:	e78a      	b.n	8008028 <_dtoa_r+0x828>
 8008112:	4603      	mov	r3, r0
 8008114:	e7f4      	b.n	8008100 <_dtoa_r+0x900>
 8008116:	9b03      	ldr	r3, [sp, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	46b8      	mov	r8, r7
 800811c:	dc20      	bgt.n	8008160 <_dtoa_r+0x960>
 800811e:	469b      	mov	fp, r3
 8008120:	9b07      	ldr	r3, [sp, #28]
 8008122:	2b02      	cmp	r3, #2
 8008124:	dd1e      	ble.n	8008164 <_dtoa_r+0x964>
 8008126:	f1bb 0f00 	cmp.w	fp, #0
 800812a:	f47f adb1 	bne.w	8007c90 <_dtoa_r+0x490>
 800812e:	4621      	mov	r1, r4
 8008130:	465b      	mov	r3, fp
 8008132:	2205      	movs	r2, #5
 8008134:	4648      	mov	r0, r9
 8008136:	f000 fa95 	bl	8008664 <__multadd>
 800813a:	4601      	mov	r1, r0
 800813c:	4604      	mov	r4, r0
 800813e:	9802      	ldr	r0, [sp, #8]
 8008140:	f000 fca0 	bl	8008a84 <__mcmp>
 8008144:	2800      	cmp	r0, #0
 8008146:	f77f ada3 	ble.w	8007c90 <_dtoa_r+0x490>
 800814a:	4656      	mov	r6, sl
 800814c:	2331      	movs	r3, #49	@ 0x31
 800814e:	f806 3b01 	strb.w	r3, [r6], #1
 8008152:	f108 0801 	add.w	r8, r8, #1
 8008156:	e59f      	b.n	8007c98 <_dtoa_r+0x498>
 8008158:	9c03      	ldr	r4, [sp, #12]
 800815a:	46b8      	mov	r8, r7
 800815c:	4625      	mov	r5, r4
 800815e:	e7f4      	b.n	800814a <_dtoa_r+0x94a>
 8008160:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 8101 	beq.w	800836e <_dtoa_r+0xb6e>
 800816c:	2e00      	cmp	r6, #0
 800816e:	dd05      	ble.n	800817c <_dtoa_r+0x97c>
 8008170:	4629      	mov	r1, r5
 8008172:	4632      	mov	r2, r6
 8008174:	4648      	mov	r0, r9
 8008176:	f000 fc19 	bl	80089ac <__lshift>
 800817a:	4605      	mov	r5, r0
 800817c:	9b08      	ldr	r3, [sp, #32]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d05c      	beq.n	800823c <_dtoa_r+0xa3c>
 8008182:	6869      	ldr	r1, [r5, #4]
 8008184:	4648      	mov	r0, r9
 8008186:	f000 fa0b 	bl	80085a0 <_Balloc>
 800818a:	4606      	mov	r6, r0
 800818c:	b928      	cbnz	r0, 800819a <_dtoa_r+0x99a>
 800818e:	4b82      	ldr	r3, [pc, #520]	@ (8008398 <_dtoa_r+0xb98>)
 8008190:	4602      	mov	r2, r0
 8008192:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008196:	f7ff bb4a 	b.w	800782e <_dtoa_r+0x2e>
 800819a:	692a      	ldr	r2, [r5, #16]
 800819c:	3202      	adds	r2, #2
 800819e:	0092      	lsls	r2, r2, #2
 80081a0:	f105 010c 	add.w	r1, r5, #12
 80081a4:	300c      	adds	r0, #12
 80081a6:	f7ff fa92 	bl	80076ce <memcpy>
 80081aa:	2201      	movs	r2, #1
 80081ac:	4631      	mov	r1, r6
 80081ae:	4648      	mov	r0, r9
 80081b0:	f000 fbfc 	bl	80089ac <__lshift>
 80081b4:	f10a 0301 	add.w	r3, sl, #1
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	eb0a 030b 	add.w	r3, sl, fp
 80081be:	9308      	str	r3, [sp, #32]
 80081c0:	9b04      	ldr	r3, [sp, #16]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	462f      	mov	r7, r5
 80081c8:	9306      	str	r3, [sp, #24]
 80081ca:	4605      	mov	r5, r0
 80081cc:	9b00      	ldr	r3, [sp, #0]
 80081ce:	9802      	ldr	r0, [sp, #8]
 80081d0:	4621      	mov	r1, r4
 80081d2:	f103 3bff 	add.w	fp, r3, #4294967295
 80081d6:	f7ff fa88 	bl	80076ea <quorem>
 80081da:	4603      	mov	r3, r0
 80081dc:	3330      	adds	r3, #48	@ 0x30
 80081de:	9003      	str	r0, [sp, #12]
 80081e0:	4639      	mov	r1, r7
 80081e2:	9802      	ldr	r0, [sp, #8]
 80081e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081e6:	f000 fc4d 	bl	8008a84 <__mcmp>
 80081ea:	462a      	mov	r2, r5
 80081ec:	9004      	str	r0, [sp, #16]
 80081ee:	4621      	mov	r1, r4
 80081f0:	4648      	mov	r0, r9
 80081f2:	f000 fc63 	bl	8008abc <__mdiff>
 80081f6:	68c2      	ldr	r2, [r0, #12]
 80081f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081fa:	4606      	mov	r6, r0
 80081fc:	bb02      	cbnz	r2, 8008240 <_dtoa_r+0xa40>
 80081fe:	4601      	mov	r1, r0
 8008200:	9802      	ldr	r0, [sp, #8]
 8008202:	f000 fc3f 	bl	8008a84 <__mcmp>
 8008206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008208:	4602      	mov	r2, r0
 800820a:	4631      	mov	r1, r6
 800820c:	4648      	mov	r0, r9
 800820e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008210:	9309      	str	r3, [sp, #36]	@ 0x24
 8008212:	f000 fa05 	bl	8008620 <_Bfree>
 8008216:	9b07      	ldr	r3, [sp, #28]
 8008218:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800821a:	9e00      	ldr	r6, [sp, #0]
 800821c:	ea42 0103 	orr.w	r1, r2, r3
 8008220:	9b06      	ldr	r3, [sp, #24]
 8008222:	4319      	orrs	r1, r3
 8008224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008226:	d10d      	bne.n	8008244 <_dtoa_r+0xa44>
 8008228:	2b39      	cmp	r3, #57	@ 0x39
 800822a:	d027      	beq.n	800827c <_dtoa_r+0xa7c>
 800822c:	9a04      	ldr	r2, [sp, #16]
 800822e:	2a00      	cmp	r2, #0
 8008230:	dd01      	ble.n	8008236 <_dtoa_r+0xa36>
 8008232:	9b03      	ldr	r3, [sp, #12]
 8008234:	3331      	adds	r3, #49	@ 0x31
 8008236:	f88b 3000 	strb.w	r3, [fp]
 800823a:	e52e      	b.n	8007c9a <_dtoa_r+0x49a>
 800823c:	4628      	mov	r0, r5
 800823e:	e7b9      	b.n	80081b4 <_dtoa_r+0x9b4>
 8008240:	2201      	movs	r2, #1
 8008242:	e7e2      	b.n	800820a <_dtoa_r+0xa0a>
 8008244:	9904      	ldr	r1, [sp, #16]
 8008246:	2900      	cmp	r1, #0
 8008248:	db04      	blt.n	8008254 <_dtoa_r+0xa54>
 800824a:	9807      	ldr	r0, [sp, #28]
 800824c:	4301      	orrs	r1, r0
 800824e:	9806      	ldr	r0, [sp, #24]
 8008250:	4301      	orrs	r1, r0
 8008252:	d120      	bne.n	8008296 <_dtoa_r+0xa96>
 8008254:	2a00      	cmp	r2, #0
 8008256:	ddee      	ble.n	8008236 <_dtoa_r+0xa36>
 8008258:	9902      	ldr	r1, [sp, #8]
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	2201      	movs	r2, #1
 800825e:	4648      	mov	r0, r9
 8008260:	f000 fba4 	bl	80089ac <__lshift>
 8008264:	4621      	mov	r1, r4
 8008266:	9002      	str	r0, [sp, #8]
 8008268:	f000 fc0c 	bl	8008a84 <__mcmp>
 800826c:	2800      	cmp	r0, #0
 800826e:	9b00      	ldr	r3, [sp, #0]
 8008270:	dc02      	bgt.n	8008278 <_dtoa_r+0xa78>
 8008272:	d1e0      	bne.n	8008236 <_dtoa_r+0xa36>
 8008274:	07da      	lsls	r2, r3, #31
 8008276:	d5de      	bpl.n	8008236 <_dtoa_r+0xa36>
 8008278:	2b39      	cmp	r3, #57	@ 0x39
 800827a:	d1da      	bne.n	8008232 <_dtoa_r+0xa32>
 800827c:	2339      	movs	r3, #57	@ 0x39
 800827e:	f88b 3000 	strb.w	r3, [fp]
 8008282:	4633      	mov	r3, r6
 8008284:	461e      	mov	r6, r3
 8008286:	3b01      	subs	r3, #1
 8008288:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800828c:	2a39      	cmp	r2, #57	@ 0x39
 800828e:	d04e      	beq.n	800832e <_dtoa_r+0xb2e>
 8008290:	3201      	adds	r2, #1
 8008292:	701a      	strb	r2, [r3, #0]
 8008294:	e501      	b.n	8007c9a <_dtoa_r+0x49a>
 8008296:	2a00      	cmp	r2, #0
 8008298:	dd03      	ble.n	80082a2 <_dtoa_r+0xaa2>
 800829a:	2b39      	cmp	r3, #57	@ 0x39
 800829c:	d0ee      	beq.n	800827c <_dtoa_r+0xa7c>
 800829e:	3301      	adds	r3, #1
 80082a0:	e7c9      	b.n	8008236 <_dtoa_r+0xa36>
 80082a2:	9a00      	ldr	r2, [sp, #0]
 80082a4:	9908      	ldr	r1, [sp, #32]
 80082a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80082aa:	428a      	cmp	r2, r1
 80082ac:	d028      	beq.n	8008300 <_dtoa_r+0xb00>
 80082ae:	9902      	ldr	r1, [sp, #8]
 80082b0:	2300      	movs	r3, #0
 80082b2:	220a      	movs	r2, #10
 80082b4:	4648      	mov	r0, r9
 80082b6:	f000 f9d5 	bl	8008664 <__multadd>
 80082ba:	42af      	cmp	r7, r5
 80082bc:	9002      	str	r0, [sp, #8]
 80082be:	f04f 0300 	mov.w	r3, #0
 80082c2:	f04f 020a 	mov.w	r2, #10
 80082c6:	4639      	mov	r1, r7
 80082c8:	4648      	mov	r0, r9
 80082ca:	d107      	bne.n	80082dc <_dtoa_r+0xadc>
 80082cc:	f000 f9ca 	bl	8008664 <__multadd>
 80082d0:	4607      	mov	r7, r0
 80082d2:	4605      	mov	r5, r0
 80082d4:	9b00      	ldr	r3, [sp, #0]
 80082d6:	3301      	adds	r3, #1
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	e777      	b.n	80081cc <_dtoa_r+0x9cc>
 80082dc:	f000 f9c2 	bl	8008664 <__multadd>
 80082e0:	4629      	mov	r1, r5
 80082e2:	4607      	mov	r7, r0
 80082e4:	2300      	movs	r3, #0
 80082e6:	220a      	movs	r2, #10
 80082e8:	4648      	mov	r0, r9
 80082ea:	f000 f9bb 	bl	8008664 <__multadd>
 80082ee:	4605      	mov	r5, r0
 80082f0:	e7f0      	b.n	80082d4 <_dtoa_r+0xad4>
 80082f2:	f1bb 0f00 	cmp.w	fp, #0
 80082f6:	bfcc      	ite	gt
 80082f8:	465e      	movgt	r6, fp
 80082fa:	2601      	movle	r6, #1
 80082fc:	4456      	add	r6, sl
 80082fe:	2700      	movs	r7, #0
 8008300:	9902      	ldr	r1, [sp, #8]
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	2201      	movs	r2, #1
 8008306:	4648      	mov	r0, r9
 8008308:	f000 fb50 	bl	80089ac <__lshift>
 800830c:	4621      	mov	r1, r4
 800830e:	9002      	str	r0, [sp, #8]
 8008310:	f000 fbb8 	bl	8008a84 <__mcmp>
 8008314:	2800      	cmp	r0, #0
 8008316:	dcb4      	bgt.n	8008282 <_dtoa_r+0xa82>
 8008318:	d102      	bne.n	8008320 <_dtoa_r+0xb20>
 800831a:	9b00      	ldr	r3, [sp, #0]
 800831c:	07db      	lsls	r3, r3, #31
 800831e:	d4b0      	bmi.n	8008282 <_dtoa_r+0xa82>
 8008320:	4633      	mov	r3, r6
 8008322:	461e      	mov	r6, r3
 8008324:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008328:	2a30      	cmp	r2, #48	@ 0x30
 800832a:	d0fa      	beq.n	8008322 <_dtoa_r+0xb22>
 800832c:	e4b5      	b.n	8007c9a <_dtoa_r+0x49a>
 800832e:	459a      	cmp	sl, r3
 8008330:	d1a8      	bne.n	8008284 <_dtoa_r+0xa84>
 8008332:	2331      	movs	r3, #49	@ 0x31
 8008334:	f108 0801 	add.w	r8, r8, #1
 8008338:	f88a 3000 	strb.w	r3, [sl]
 800833c:	e4ad      	b.n	8007c9a <_dtoa_r+0x49a>
 800833e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008340:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800839c <_dtoa_r+0xb9c>
 8008344:	b11b      	cbz	r3, 800834e <_dtoa_r+0xb4e>
 8008346:	f10a 0308 	add.w	r3, sl, #8
 800834a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	4650      	mov	r0, sl
 8008350:	b017      	add	sp, #92	@ 0x5c
 8008352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008356:	9b07      	ldr	r3, [sp, #28]
 8008358:	2b01      	cmp	r3, #1
 800835a:	f77f ae2e 	ble.w	8007fba <_dtoa_r+0x7ba>
 800835e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008360:	9308      	str	r3, [sp, #32]
 8008362:	2001      	movs	r0, #1
 8008364:	e64d      	b.n	8008002 <_dtoa_r+0x802>
 8008366:	f1bb 0f00 	cmp.w	fp, #0
 800836a:	f77f aed9 	ble.w	8008120 <_dtoa_r+0x920>
 800836e:	4656      	mov	r6, sl
 8008370:	9802      	ldr	r0, [sp, #8]
 8008372:	4621      	mov	r1, r4
 8008374:	f7ff f9b9 	bl	80076ea <quorem>
 8008378:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800837c:	f806 3b01 	strb.w	r3, [r6], #1
 8008380:	eba6 020a 	sub.w	r2, r6, sl
 8008384:	4593      	cmp	fp, r2
 8008386:	ddb4      	ble.n	80082f2 <_dtoa_r+0xaf2>
 8008388:	9902      	ldr	r1, [sp, #8]
 800838a:	2300      	movs	r3, #0
 800838c:	220a      	movs	r2, #10
 800838e:	4648      	mov	r0, r9
 8008390:	f000 f968 	bl	8008664 <__multadd>
 8008394:	9002      	str	r0, [sp, #8]
 8008396:	e7eb      	b.n	8008370 <_dtoa_r+0xb70>
 8008398:	08009490 	.word	0x08009490
 800839c:	08009414 	.word	0x08009414

080083a0 <_free_r>:
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4605      	mov	r5, r0
 80083a4:	2900      	cmp	r1, #0
 80083a6:	d041      	beq.n	800842c <_free_r+0x8c>
 80083a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083ac:	1f0c      	subs	r4, r1, #4
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	bfb8      	it	lt
 80083b2:	18e4      	addlt	r4, r4, r3
 80083b4:	f000 f8e8 	bl	8008588 <__malloc_lock>
 80083b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008430 <_free_r+0x90>)
 80083ba:	6813      	ldr	r3, [r2, #0]
 80083bc:	b933      	cbnz	r3, 80083cc <_free_r+0x2c>
 80083be:	6063      	str	r3, [r4, #4]
 80083c0:	6014      	str	r4, [r2, #0]
 80083c2:	4628      	mov	r0, r5
 80083c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083c8:	f000 b8e4 	b.w	8008594 <__malloc_unlock>
 80083cc:	42a3      	cmp	r3, r4
 80083ce:	d908      	bls.n	80083e2 <_free_r+0x42>
 80083d0:	6820      	ldr	r0, [r4, #0]
 80083d2:	1821      	adds	r1, r4, r0
 80083d4:	428b      	cmp	r3, r1
 80083d6:	bf01      	itttt	eq
 80083d8:	6819      	ldreq	r1, [r3, #0]
 80083da:	685b      	ldreq	r3, [r3, #4]
 80083dc:	1809      	addeq	r1, r1, r0
 80083de:	6021      	streq	r1, [r4, #0]
 80083e0:	e7ed      	b.n	80083be <_free_r+0x1e>
 80083e2:	461a      	mov	r2, r3
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	b10b      	cbz	r3, 80083ec <_free_r+0x4c>
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	d9fa      	bls.n	80083e2 <_free_r+0x42>
 80083ec:	6811      	ldr	r1, [r2, #0]
 80083ee:	1850      	adds	r0, r2, r1
 80083f0:	42a0      	cmp	r0, r4
 80083f2:	d10b      	bne.n	800840c <_free_r+0x6c>
 80083f4:	6820      	ldr	r0, [r4, #0]
 80083f6:	4401      	add	r1, r0
 80083f8:	1850      	adds	r0, r2, r1
 80083fa:	4283      	cmp	r3, r0
 80083fc:	6011      	str	r1, [r2, #0]
 80083fe:	d1e0      	bne.n	80083c2 <_free_r+0x22>
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	6053      	str	r3, [r2, #4]
 8008406:	4408      	add	r0, r1
 8008408:	6010      	str	r0, [r2, #0]
 800840a:	e7da      	b.n	80083c2 <_free_r+0x22>
 800840c:	d902      	bls.n	8008414 <_free_r+0x74>
 800840e:	230c      	movs	r3, #12
 8008410:	602b      	str	r3, [r5, #0]
 8008412:	e7d6      	b.n	80083c2 <_free_r+0x22>
 8008414:	6820      	ldr	r0, [r4, #0]
 8008416:	1821      	adds	r1, r4, r0
 8008418:	428b      	cmp	r3, r1
 800841a:	bf04      	itt	eq
 800841c:	6819      	ldreq	r1, [r3, #0]
 800841e:	685b      	ldreq	r3, [r3, #4]
 8008420:	6063      	str	r3, [r4, #4]
 8008422:	bf04      	itt	eq
 8008424:	1809      	addeq	r1, r1, r0
 8008426:	6021      	streq	r1, [r4, #0]
 8008428:	6054      	str	r4, [r2, #4]
 800842a:	e7ca      	b.n	80083c2 <_free_r+0x22>
 800842c:	bd38      	pop	{r3, r4, r5, pc}
 800842e:	bf00      	nop
 8008430:	200004b8 	.word	0x200004b8

08008434 <malloc>:
 8008434:	4b02      	ldr	r3, [pc, #8]	@ (8008440 <malloc+0xc>)
 8008436:	4601      	mov	r1, r0
 8008438:	6818      	ldr	r0, [r3, #0]
 800843a:	f000 b825 	b.w	8008488 <_malloc_r>
 800843e:	bf00      	nop
 8008440:	20000018 	.word	0x20000018

08008444 <sbrk_aligned>:
 8008444:	b570      	push	{r4, r5, r6, lr}
 8008446:	4e0f      	ldr	r6, [pc, #60]	@ (8008484 <sbrk_aligned+0x40>)
 8008448:	460c      	mov	r4, r1
 800844a:	6831      	ldr	r1, [r6, #0]
 800844c:	4605      	mov	r5, r0
 800844e:	b911      	cbnz	r1, 8008456 <sbrk_aligned+0x12>
 8008450:	f000 fe92 	bl	8009178 <_sbrk_r>
 8008454:	6030      	str	r0, [r6, #0]
 8008456:	4621      	mov	r1, r4
 8008458:	4628      	mov	r0, r5
 800845a:	f000 fe8d 	bl	8009178 <_sbrk_r>
 800845e:	1c43      	adds	r3, r0, #1
 8008460:	d103      	bne.n	800846a <sbrk_aligned+0x26>
 8008462:	f04f 34ff 	mov.w	r4, #4294967295
 8008466:	4620      	mov	r0, r4
 8008468:	bd70      	pop	{r4, r5, r6, pc}
 800846a:	1cc4      	adds	r4, r0, #3
 800846c:	f024 0403 	bic.w	r4, r4, #3
 8008470:	42a0      	cmp	r0, r4
 8008472:	d0f8      	beq.n	8008466 <sbrk_aligned+0x22>
 8008474:	1a21      	subs	r1, r4, r0
 8008476:	4628      	mov	r0, r5
 8008478:	f000 fe7e 	bl	8009178 <_sbrk_r>
 800847c:	3001      	adds	r0, #1
 800847e:	d1f2      	bne.n	8008466 <sbrk_aligned+0x22>
 8008480:	e7ef      	b.n	8008462 <sbrk_aligned+0x1e>
 8008482:	bf00      	nop
 8008484:	200004b4 	.word	0x200004b4

08008488 <_malloc_r>:
 8008488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800848c:	1ccd      	adds	r5, r1, #3
 800848e:	f025 0503 	bic.w	r5, r5, #3
 8008492:	3508      	adds	r5, #8
 8008494:	2d0c      	cmp	r5, #12
 8008496:	bf38      	it	cc
 8008498:	250c      	movcc	r5, #12
 800849a:	2d00      	cmp	r5, #0
 800849c:	4606      	mov	r6, r0
 800849e:	db01      	blt.n	80084a4 <_malloc_r+0x1c>
 80084a0:	42a9      	cmp	r1, r5
 80084a2:	d904      	bls.n	80084ae <_malloc_r+0x26>
 80084a4:	230c      	movs	r3, #12
 80084a6:	6033      	str	r3, [r6, #0]
 80084a8:	2000      	movs	r0, #0
 80084aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008584 <_malloc_r+0xfc>
 80084b2:	f000 f869 	bl	8008588 <__malloc_lock>
 80084b6:	f8d8 3000 	ldr.w	r3, [r8]
 80084ba:	461c      	mov	r4, r3
 80084bc:	bb44      	cbnz	r4, 8008510 <_malloc_r+0x88>
 80084be:	4629      	mov	r1, r5
 80084c0:	4630      	mov	r0, r6
 80084c2:	f7ff ffbf 	bl	8008444 <sbrk_aligned>
 80084c6:	1c43      	adds	r3, r0, #1
 80084c8:	4604      	mov	r4, r0
 80084ca:	d158      	bne.n	800857e <_malloc_r+0xf6>
 80084cc:	f8d8 4000 	ldr.w	r4, [r8]
 80084d0:	4627      	mov	r7, r4
 80084d2:	2f00      	cmp	r7, #0
 80084d4:	d143      	bne.n	800855e <_malloc_r+0xd6>
 80084d6:	2c00      	cmp	r4, #0
 80084d8:	d04b      	beq.n	8008572 <_malloc_r+0xea>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	4639      	mov	r1, r7
 80084de:	4630      	mov	r0, r6
 80084e0:	eb04 0903 	add.w	r9, r4, r3
 80084e4:	f000 fe48 	bl	8009178 <_sbrk_r>
 80084e8:	4581      	cmp	r9, r0
 80084ea:	d142      	bne.n	8008572 <_malloc_r+0xea>
 80084ec:	6821      	ldr	r1, [r4, #0]
 80084ee:	1a6d      	subs	r5, r5, r1
 80084f0:	4629      	mov	r1, r5
 80084f2:	4630      	mov	r0, r6
 80084f4:	f7ff ffa6 	bl	8008444 <sbrk_aligned>
 80084f8:	3001      	adds	r0, #1
 80084fa:	d03a      	beq.n	8008572 <_malloc_r+0xea>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	442b      	add	r3, r5
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	f8d8 3000 	ldr.w	r3, [r8]
 8008506:	685a      	ldr	r2, [r3, #4]
 8008508:	bb62      	cbnz	r2, 8008564 <_malloc_r+0xdc>
 800850a:	f8c8 7000 	str.w	r7, [r8]
 800850e:	e00f      	b.n	8008530 <_malloc_r+0xa8>
 8008510:	6822      	ldr	r2, [r4, #0]
 8008512:	1b52      	subs	r2, r2, r5
 8008514:	d420      	bmi.n	8008558 <_malloc_r+0xd0>
 8008516:	2a0b      	cmp	r2, #11
 8008518:	d917      	bls.n	800854a <_malloc_r+0xc2>
 800851a:	1961      	adds	r1, r4, r5
 800851c:	42a3      	cmp	r3, r4
 800851e:	6025      	str	r5, [r4, #0]
 8008520:	bf18      	it	ne
 8008522:	6059      	strne	r1, [r3, #4]
 8008524:	6863      	ldr	r3, [r4, #4]
 8008526:	bf08      	it	eq
 8008528:	f8c8 1000 	streq.w	r1, [r8]
 800852c:	5162      	str	r2, [r4, r5]
 800852e:	604b      	str	r3, [r1, #4]
 8008530:	4630      	mov	r0, r6
 8008532:	f000 f82f 	bl	8008594 <__malloc_unlock>
 8008536:	f104 000b 	add.w	r0, r4, #11
 800853a:	1d23      	adds	r3, r4, #4
 800853c:	f020 0007 	bic.w	r0, r0, #7
 8008540:	1ac2      	subs	r2, r0, r3
 8008542:	bf1c      	itt	ne
 8008544:	1a1b      	subne	r3, r3, r0
 8008546:	50a3      	strne	r3, [r4, r2]
 8008548:	e7af      	b.n	80084aa <_malloc_r+0x22>
 800854a:	6862      	ldr	r2, [r4, #4]
 800854c:	42a3      	cmp	r3, r4
 800854e:	bf0c      	ite	eq
 8008550:	f8c8 2000 	streq.w	r2, [r8]
 8008554:	605a      	strne	r2, [r3, #4]
 8008556:	e7eb      	b.n	8008530 <_malloc_r+0xa8>
 8008558:	4623      	mov	r3, r4
 800855a:	6864      	ldr	r4, [r4, #4]
 800855c:	e7ae      	b.n	80084bc <_malloc_r+0x34>
 800855e:	463c      	mov	r4, r7
 8008560:	687f      	ldr	r7, [r7, #4]
 8008562:	e7b6      	b.n	80084d2 <_malloc_r+0x4a>
 8008564:	461a      	mov	r2, r3
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	42a3      	cmp	r3, r4
 800856a:	d1fb      	bne.n	8008564 <_malloc_r+0xdc>
 800856c:	2300      	movs	r3, #0
 800856e:	6053      	str	r3, [r2, #4]
 8008570:	e7de      	b.n	8008530 <_malloc_r+0xa8>
 8008572:	230c      	movs	r3, #12
 8008574:	6033      	str	r3, [r6, #0]
 8008576:	4630      	mov	r0, r6
 8008578:	f000 f80c 	bl	8008594 <__malloc_unlock>
 800857c:	e794      	b.n	80084a8 <_malloc_r+0x20>
 800857e:	6005      	str	r5, [r0, #0]
 8008580:	e7d6      	b.n	8008530 <_malloc_r+0xa8>
 8008582:	bf00      	nop
 8008584:	200004b8 	.word	0x200004b8

08008588 <__malloc_lock>:
 8008588:	4801      	ldr	r0, [pc, #4]	@ (8008590 <__malloc_lock+0x8>)
 800858a:	f7ff b89e 	b.w	80076ca <__retarget_lock_acquire_recursive>
 800858e:	bf00      	nop
 8008590:	200004b0 	.word	0x200004b0

08008594 <__malloc_unlock>:
 8008594:	4801      	ldr	r0, [pc, #4]	@ (800859c <__malloc_unlock+0x8>)
 8008596:	f7ff b899 	b.w	80076cc <__retarget_lock_release_recursive>
 800859a:	bf00      	nop
 800859c:	200004b0 	.word	0x200004b0

080085a0 <_Balloc>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	69c6      	ldr	r6, [r0, #28]
 80085a4:	4604      	mov	r4, r0
 80085a6:	460d      	mov	r5, r1
 80085a8:	b976      	cbnz	r6, 80085c8 <_Balloc+0x28>
 80085aa:	2010      	movs	r0, #16
 80085ac:	f7ff ff42 	bl	8008434 <malloc>
 80085b0:	4602      	mov	r2, r0
 80085b2:	61e0      	str	r0, [r4, #28]
 80085b4:	b920      	cbnz	r0, 80085c0 <_Balloc+0x20>
 80085b6:	4b18      	ldr	r3, [pc, #96]	@ (8008618 <_Balloc+0x78>)
 80085b8:	4818      	ldr	r0, [pc, #96]	@ (800861c <_Balloc+0x7c>)
 80085ba:	216b      	movs	r1, #107	@ 0x6b
 80085bc:	f000 fdec 	bl	8009198 <__assert_func>
 80085c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085c4:	6006      	str	r6, [r0, #0]
 80085c6:	60c6      	str	r6, [r0, #12]
 80085c8:	69e6      	ldr	r6, [r4, #28]
 80085ca:	68f3      	ldr	r3, [r6, #12]
 80085cc:	b183      	cbz	r3, 80085f0 <_Balloc+0x50>
 80085ce:	69e3      	ldr	r3, [r4, #28]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085d6:	b9b8      	cbnz	r0, 8008608 <_Balloc+0x68>
 80085d8:	2101      	movs	r1, #1
 80085da:	fa01 f605 	lsl.w	r6, r1, r5
 80085de:	1d72      	adds	r2, r6, #5
 80085e0:	0092      	lsls	r2, r2, #2
 80085e2:	4620      	mov	r0, r4
 80085e4:	f000 fdf6 	bl	80091d4 <_calloc_r>
 80085e8:	b160      	cbz	r0, 8008604 <_Balloc+0x64>
 80085ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085ee:	e00e      	b.n	800860e <_Balloc+0x6e>
 80085f0:	2221      	movs	r2, #33	@ 0x21
 80085f2:	2104      	movs	r1, #4
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 fded 	bl	80091d4 <_calloc_r>
 80085fa:	69e3      	ldr	r3, [r4, #28]
 80085fc:	60f0      	str	r0, [r6, #12]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e4      	bne.n	80085ce <_Balloc+0x2e>
 8008604:	2000      	movs	r0, #0
 8008606:	bd70      	pop	{r4, r5, r6, pc}
 8008608:	6802      	ldr	r2, [r0, #0]
 800860a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800860e:	2300      	movs	r3, #0
 8008610:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008614:	e7f7      	b.n	8008606 <_Balloc+0x66>
 8008616:	bf00      	nop
 8008618:	08009421 	.word	0x08009421
 800861c:	080094a1 	.word	0x080094a1

08008620 <_Bfree>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	69c6      	ldr	r6, [r0, #28]
 8008624:	4605      	mov	r5, r0
 8008626:	460c      	mov	r4, r1
 8008628:	b976      	cbnz	r6, 8008648 <_Bfree+0x28>
 800862a:	2010      	movs	r0, #16
 800862c:	f7ff ff02 	bl	8008434 <malloc>
 8008630:	4602      	mov	r2, r0
 8008632:	61e8      	str	r0, [r5, #28]
 8008634:	b920      	cbnz	r0, 8008640 <_Bfree+0x20>
 8008636:	4b09      	ldr	r3, [pc, #36]	@ (800865c <_Bfree+0x3c>)
 8008638:	4809      	ldr	r0, [pc, #36]	@ (8008660 <_Bfree+0x40>)
 800863a:	218f      	movs	r1, #143	@ 0x8f
 800863c:	f000 fdac 	bl	8009198 <__assert_func>
 8008640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008644:	6006      	str	r6, [r0, #0]
 8008646:	60c6      	str	r6, [r0, #12]
 8008648:	b13c      	cbz	r4, 800865a <_Bfree+0x3a>
 800864a:	69eb      	ldr	r3, [r5, #28]
 800864c:	6862      	ldr	r2, [r4, #4]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008654:	6021      	str	r1, [r4, #0]
 8008656:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800865a:	bd70      	pop	{r4, r5, r6, pc}
 800865c:	08009421 	.word	0x08009421
 8008660:	080094a1 	.word	0x080094a1

08008664 <__multadd>:
 8008664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008668:	690d      	ldr	r5, [r1, #16]
 800866a:	4607      	mov	r7, r0
 800866c:	460c      	mov	r4, r1
 800866e:	461e      	mov	r6, r3
 8008670:	f101 0c14 	add.w	ip, r1, #20
 8008674:	2000      	movs	r0, #0
 8008676:	f8dc 3000 	ldr.w	r3, [ip]
 800867a:	b299      	uxth	r1, r3
 800867c:	fb02 6101 	mla	r1, r2, r1, r6
 8008680:	0c1e      	lsrs	r6, r3, #16
 8008682:	0c0b      	lsrs	r3, r1, #16
 8008684:	fb02 3306 	mla	r3, r2, r6, r3
 8008688:	b289      	uxth	r1, r1
 800868a:	3001      	adds	r0, #1
 800868c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008690:	4285      	cmp	r5, r0
 8008692:	f84c 1b04 	str.w	r1, [ip], #4
 8008696:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800869a:	dcec      	bgt.n	8008676 <__multadd+0x12>
 800869c:	b30e      	cbz	r6, 80086e2 <__multadd+0x7e>
 800869e:	68a3      	ldr	r3, [r4, #8]
 80086a0:	42ab      	cmp	r3, r5
 80086a2:	dc19      	bgt.n	80086d8 <__multadd+0x74>
 80086a4:	6861      	ldr	r1, [r4, #4]
 80086a6:	4638      	mov	r0, r7
 80086a8:	3101      	adds	r1, #1
 80086aa:	f7ff ff79 	bl	80085a0 <_Balloc>
 80086ae:	4680      	mov	r8, r0
 80086b0:	b928      	cbnz	r0, 80086be <__multadd+0x5a>
 80086b2:	4602      	mov	r2, r0
 80086b4:	4b0c      	ldr	r3, [pc, #48]	@ (80086e8 <__multadd+0x84>)
 80086b6:	480d      	ldr	r0, [pc, #52]	@ (80086ec <__multadd+0x88>)
 80086b8:	21ba      	movs	r1, #186	@ 0xba
 80086ba:	f000 fd6d 	bl	8009198 <__assert_func>
 80086be:	6922      	ldr	r2, [r4, #16]
 80086c0:	3202      	adds	r2, #2
 80086c2:	f104 010c 	add.w	r1, r4, #12
 80086c6:	0092      	lsls	r2, r2, #2
 80086c8:	300c      	adds	r0, #12
 80086ca:	f7ff f800 	bl	80076ce <memcpy>
 80086ce:	4621      	mov	r1, r4
 80086d0:	4638      	mov	r0, r7
 80086d2:	f7ff ffa5 	bl	8008620 <_Bfree>
 80086d6:	4644      	mov	r4, r8
 80086d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086dc:	3501      	adds	r5, #1
 80086de:	615e      	str	r6, [r3, #20]
 80086e0:	6125      	str	r5, [r4, #16]
 80086e2:	4620      	mov	r0, r4
 80086e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086e8:	08009490 	.word	0x08009490
 80086ec:	080094a1 	.word	0x080094a1

080086f0 <__hi0bits>:
 80086f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086f4:	4603      	mov	r3, r0
 80086f6:	bf36      	itet	cc
 80086f8:	0403      	lslcc	r3, r0, #16
 80086fa:	2000      	movcs	r0, #0
 80086fc:	2010      	movcc	r0, #16
 80086fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008702:	bf3c      	itt	cc
 8008704:	021b      	lslcc	r3, r3, #8
 8008706:	3008      	addcc	r0, #8
 8008708:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800870c:	bf3c      	itt	cc
 800870e:	011b      	lslcc	r3, r3, #4
 8008710:	3004      	addcc	r0, #4
 8008712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008716:	bf3c      	itt	cc
 8008718:	009b      	lslcc	r3, r3, #2
 800871a:	3002      	addcc	r0, #2
 800871c:	2b00      	cmp	r3, #0
 800871e:	db05      	blt.n	800872c <__hi0bits+0x3c>
 8008720:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008724:	f100 0001 	add.w	r0, r0, #1
 8008728:	bf08      	it	eq
 800872a:	2020      	moveq	r0, #32
 800872c:	4770      	bx	lr

0800872e <__lo0bits>:
 800872e:	6803      	ldr	r3, [r0, #0]
 8008730:	4602      	mov	r2, r0
 8008732:	f013 0007 	ands.w	r0, r3, #7
 8008736:	d00b      	beq.n	8008750 <__lo0bits+0x22>
 8008738:	07d9      	lsls	r1, r3, #31
 800873a:	d421      	bmi.n	8008780 <__lo0bits+0x52>
 800873c:	0798      	lsls	r0, r3, #30
 800873e:	bf49      	itett	mi
 8008740:	085b      	lsrmi	r3, r3, #1
 8008742:	089b      	lsrpl	r3, r3, #2
 8008744:	2001      	movmi	r0, #1
 8008746:	6013      	strmi	r3, [r2, #0]
 8008748:	bf5c      	itt	pl
 800874a:	6013      	strpl	r3, [r2, #0]
 800874c:	2002      	movpl	r0, #2
 800874e:	4770      	bx	lr
 8008750:	b299      	uxth	r1, r3
 8008752:	b909      	cbnz	r1, 8008758 <__lo0bits+0x2a>
 8008754:	0c1b      	lsrs	r3, r3, #16
 8008756:	2010      	movs	r0, #16
 8008758:	b2d9      	uxtb	r1, r3
 800875a:	b909      	cbnz	r1, 8008760 <__lo0bits+0x32>
 800875c:	3008      	adds	r0, #8
 800875e:	0a1b      	lsrs	r3, r3, #8
 8008760:	0719      	lsls	r1, r3, #28
 8008762:	bf04      	itt	eq
 8008764:	091b      	lsreq	r3, r3, #4
 8008766:	3004      	addeq	r0, #4
 8008768:	0799      	lsls	r1, r3, #30
 800876a:	bf04      	itt	eq
 800876c:	089b      	lsreq	r3, r3, #2
 800876e:	3002      	addeq	r0, #2
 8008770:	07d9      	lsls	r1, r3, #31
 8008772:	d403      	bmi.n	800877c <__lo0bits+0x4e>
 8008774:	085b      	lsrs	r3, r3, #1
 8008776:	f100 0001 	add.w	r0, r0, #1
 800877a:	d003      	beq.n	8008784 <__lo0bits+0x56>
 800877c:	6013      	str	r3, [r2, #0]
 800877e:	4770      	bx	lr
 8008780:	2000      	movs	r0, #0
 8008782:	4770      	bx	lr
 8008784:	2020      	movs	r0, #32
 8008786:	4770      	bx	lr

08008788 <__i2b>:
 8008788:	b510      	push	{r4, lr}
 800878a:	460c      	mov	r4, r1
 800878c:	2101      	movs	r1, #1
 800878e:	f7ff ff07 	bl	80085a0 <_Balloc>
 8008792:	4602      	mov	r2, r0
 8008794:	b928      	cbnz	r0, 80087a2 <__i2b+0x1a>
 8008796:	4b05      	ldr	r3, [pc, #20]	@ (80087ac <__i2b+0x24>)
 8008798:	4805      	ldr	r0, [pc, #20]	@ (80087b0 <__i2b+0x28>)
 800879a:	f240 1145 	movw	r1, #325	@ 0x145
 800879e:	f000 fcfb 	bl	8009198 <__assert_func>
 80087a2:	2301      	movs	r3, #1
 80087a4:	6144      	str	r4, [r0, #20]
 80087a6:	6103      	str	r3, [r0, #16]
 80087a8:	bd10      	pop	{r4, pc}
 80087aa:	bf00      	nop
 80087ac:	08009490 	.word	0x08009490
 80087b0:	080094a1 	.word	0x080094a1

080087b4 <__multiply>:
 80087b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b8:	4617      	mov	r7, r2
 80087ba:	690a      	ldr	r2, [r1, #16]
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	429a      	cmp	r2, r3
 80087c0:	bfa8      	it	ge
 80087c2:	463b      	movge	r3, r7
 80087c4:	4689      	mov	r9, r1
 80087c6:	bfa4      	itt	ge
 80087c8:	460f      	movge	r7, r1
 80087ca:	4699      	movge	r9, r3
 80087cc:	693d      	ldr	r5, [r7, #16]
 80087ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	eb05 060a 	add.w	r6, r5, sl
 80087da:	42b3      	cmp	r3, r6
 80087dc:	b085      	sub	sp, #20
 80087de:	bfb8      	it	lt
 80087e0:	3101      	addlt	r1, #1
 80087e2:	f7ff fedd 	bl	80085a0 <_Balloc>
 80087e6:	b930      	cbnz	r0, 80087f6 <__multiply+0x42>
 80087e8:	4602      	mov	r2, r0
 80087ea:	4b41      	ldr	r3, [pc, #260]	@ (80088f0 <__multiply+0x13c>)
 80087ec:	4841      	ldr	r0, [pc, #260]	@ (80088f4 <__multiply+0x140>)
 80087ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087f2:	f000 fcd1 	bl	8009198 <__assert_func>
 80087f6:	f100 0414 	add.w	r4, r0, #20
 80087fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80087fe:	4623      	mov	r3, r4
 8008800:	2200      	movs	r2, #0
 8008802:	4573      	cmp	r3, lr
 8008804:	d320      	bcc.n	8008848 <__multiply+0x94>
 8008806:	f107 0814 	add.w	r8, r7, #20
 800880a:	f109 0114 	add.w	r1, r9, #20
 800880e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008812:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008816:	9302      	str	r3, [sp, #8]
 8008818:	1beb      	subs	r3, r5, r7
 800881a:	3b15      	subs	r3, #21
 800881c:	f023 0303 	bic.w	r3, r3, #3
 8008820:	3304      	adds	r3, #4
 8008822:	3715      	adds	r7, #21
 8008824:	42bd      	cmp	r5, r7
 8008826:	bf38      	it	cc
 8008828:	2304      	movcc	r3, #4
 800882a:	9301      	str	r3, [sp, #4]
 800882c:	9b02      	ldr	r3, [sp, #8]
 800882e:	9103      	str	r1, [sp, #12]
 8008830:	428b      	cmp	r3, r1
 8008832:	d80c      	bhi.n	800884e <__multiply+0x9a>
 8008834:	2e00      	cmp	r6, #0
 8008836:	dd03      	ble.n	8008840 <__multiply+0x8c>
 8008838:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800883c:	2b00      	cmp	r3, #0
 800883e:	d055      	beq.n	80088ec <__multiply+0x138>
 8008840:	6106      	str	r6, [r0, #16]
 8008842:	b005      	add	sp, #20
 8008844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008848:	f843 2b04 	str.w	r2, [r3], #4
 800884c:	e7d9      	b.n	8008802 <__multiply+0x4e>
 800884e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008852:	f1ba 0f00 	cmp.w	sl, #0
 8008856:	d01f      	beq.n	8008898 <__multiply+0xe4>
 8008858:	46c4      	mov	ip, r8
 800885a:	46a1      	mov	r9, r4
 800885c:	2700      	movs	r7, #0
 800885e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008862:	f8d9 3000 	ldr.w	r3, [r9]
 8008866:	fa1f fb82 	uxth.w	fp, r2
 800886a:	b29b      	uxth	r3, r3
 800886c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008870:	443b      	add	r3, r7
 8008872:	f8d9 7000 	ldr.w	r7, [r9]
 8008876:	0c12      	lsrs	r2, r2, #16
 8008878:	0c3f      	lsrs	r7, r7, #16
 800887a:	fb0a 7202 	mla	r2, sl, r2, r7
 800887e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008882:	b29b      	uxth	r3, r3
 8008884:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008888:	4565      	cmp	r5, ip
 800888a:	f849 3b04 	str.w	r3, [r9], #4
 800888e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008892:	d8e4      	bhi.n	800885e <__multiply+0xaa>
 8008894:	9b01      	ldr	r3, [sp, #4]
 8008896:	50e7      	str	r7, [r4, r3]
 8008898:	9b03      	ldr	r3, [sp, #12]
 800889a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800889e:	3104      	adds	r1, #4
 80088a0:	f1b9 0f00 	cmp.w	r9, #0
 80088a4:	d020      	beq.n	80088e8 <__multiply+0x134>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	4647      	mov	r7, r8
 80088aa:	46a4      	mov	ip, r4
 80088ac:	f04f 0a00 	mov.w	sl, #0
 80088b0:	f8b7 b000 	ldrh.w	fp, [r7]
 80088b4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80088b8:	fb09 220b 	mla	r2, r9, fp, r2
 80088bc:	4452      	add	r2, sl
 80088be:	b29b      	uxth	r3, r3
 80088c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088c4:	f84c 3b04 	str.w	r3, [ip], #4
 80088c8:	f857 3b04 	ldr.w	r3, [r7], #4
 80088cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088d0:	f8bc 3000 	ldrh.w	r3, [ip]
 80088d4:	fb09 330a 	mla	r3, r9, sl, r3
 80088d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80088dc:	42bd      	cmp	r5, r7
 80088de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088e2:	d8e5      	bhi.n	80088b0 <__multiply+0xfc>
 80088e4:	9a01      	ldr	r2, [sp, #4]
 80088e6:	50a3      	str	r3, [r4, r2]
 80088e8:	3404      	adds	r4, #4
 80088ea:	e79f      	b.n	800882c <__multiply+0x78>
 80088ec:	3e01      	subs	r6, #1
 80088ee:	e7a1      	b.n	8008834 <__multiply+0x80>
 80088f0:	08009490 	.word	0x08009490
 80088f4:	080094a1 	.word	0x080094a1

080088f8 <__pow5mult>:
 80088f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088fc:	4615      	mov	r5, r2
 80088fe:	f012 0203 	ands.w	r2, r2, #3
 8008902:	4607      	mov	r7, r0
 8008904:	460e      	mov	r6, r1
 8008906:	d007      	beq.n	8008918 <__pow5mult+0x20>
 8008908:	4c25      	ldr	r4, [pc, #148]	@ (80089a0 <__pow5mult+0xa8>)
 800890a:	3a01      	subs	r2, #1
 800890c:	2300      	movs	r3, #0
 800890e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008912:	f7ff fea7 	bl	8008664 <__multadd>
 8008916:	4606      	mov	r6, r0
 8008918:	10ad      	asrs	r5, r5, #2
 800891a:	d03d      	beq.n	8008998 <__pow5mult+0xa0>
 800891c:	69fc      	ldr	r4, [r7, #28]
 800891e:	b97c      	cbnz	r4, 8008940 <__pow5mult+0x48>
 8008920:	2010      	movs	r0, #16
 8008922:	f7ff fd87 	bl	8008434 <malloc>
 8008926:	4602      	mov	r2, r0
 8008928:	61f8      	str	r0, [r7, #28]
 800892a:	b928      	cbnz	r0, 8008938 <__pow5mult+0x40>
 800892c:	4b1d      	ldr	r3, [pc, #116]	@ (80089a4 <__pow5mult+0xac>)
 800892e:	481e      	ldr	r0, [pc, #120]	@ (80089a8 <__pow5mult+0xb0>)
 8008930:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008934:	f000 fc30 	bl	8009198 <__assert_func>
 8008938:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800893c:	6004      	str	r4, [r0, #0]
 800893e:	60c4      	str	r4, [r0, #12]
 8008940:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008944:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008948:	b94c      	cbnz	r4, 800895e <__pow5mult+0x66>
 800894a:	f240 2171 	movw	r1, #625	@ 0x271
 800894e:	4638      	mov	r0, r7
 8008950:	f7ff ff1a 	bl	8008788 <__i2b>
 8008954:	2300      	movs	r3, #0
 8008956:	f8c8 0008 	str.w	r0, [r8, #8]
 800895a:	4604      	mov	r4, r0
 800895c:	6003      	str	r3, [r0, #0]
 800895e:	f04f 0900 	mov.w	r9, #0
 8008962:	07eb      	lsls	r3, r5, #31
 8008964:	d50a      	bpl.n	800897c <__pow5mult+0x84>
 8008966:	4631      	mov	r1, r6
 8008968:	4622      	mov	r2, r4
 800896a:	4638      	mov	r0, r7
 800896c:	f7ff ff22 	bl	80087b4 <__multiply>
 8008970:	4631      	mov	r1, r6
 8008972:	4680      	mov	r8, r0
 8008974:	4638      	mov	r0, r7
 8008976:	f7ff fe53 	bl	8008620 <_Bfree>
 800897a:	4646      	mov	r6, r8
 800897c:	106d      	asrs	r5, r5, #1
 800897e:	d00b      	beq.n	8008998 <__pow5mult+0xa0>
 8008980:	6820      	ldr	r0, [r4, #0]
 8008982:	b938      	cbnz	r0, 8008994 <__pow5mult+0x9c>
 8008984:	4622      	mov	r2, r4
 8008986:	4621      	mov	r1, r4
 8008988:	4638      	mov	r0, r7
 800898a:	f7ff ff13 	bl	80087b4 <__multiply>
 800898e:	6020      	str	r0, [r4, #0]
 8008990:	f8c0 9000 	str.w	r9, [r0]
 8008994:	4604      	mov	r4, r0
 8008996:	e7e4      	b.n	8008962 <__pow5mult+0x6a>
 8008998:	4630      	mov	r0, r6
 800899a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800899e:	bf00      	nop
 80089a0:	08009554 	.word	0x08009554
 80089a4:	08009421 	.word	0x08009421
 80089a8:	080094a1 	.word	0x080094a1

080089ac <__lshift>:
 80089ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b0:	460c      	mov	r4, r1
 80089b2:	6849      	ldr	r1, [r1, #4]
 80089b4:	6923      	ldr	r3, [r4, #16]
 80089b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089ba:	68a3      	ldr	r3, [r4, #8]
 80089bc:	4607      	mov	r7, r0
 80089be:	4691      	mov	r9, r2
 80089c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089c4:	f108 0601 	add.w	r6, r8, #1
 80089c8:	42b3      	cmp	r3, r6
 80089ca:	db0b      	blt.n	80089e4 <__lshift+0x38>
 80089cc:	4638      	mov	r0, r7
 80089ce:	f7ff fde7 	bl	80085a0 <_Balloc>
 80089d2:	4605      	mov	r5, r0
 80089d4:	b948      	cbnz	r0, 80089ea <__lshift+0x3e>
 80089d6:	4602      	mov	r2, r0
 80089d8:	4b28      	ldr	r3, [pc, #160]	@ (8008a7c <__lshift+0xd0>)
 80089da:	4829      	ldr	r0, [pc, #164]	@ (8008a80 <__lshift+0xd4>)
 80089dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089e0:	f000 fbda 	bl	8009198 <__assert_func>
 80089e4:	3101      	adds	r1, #1
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	e7ee      	b.n	80089c8 <__lshift+0x1c>
 80089ea:	2300      	movs	r3, #0
 80089ec:	f100 0114 	add.w	r1, r0, #20
 80089f0:	f100 0210 	add.w	r2, r0, #16
 80089f4:	4618      	mov	r0, r3
 80089f6:	4553      	cmp	r3, sl
 80089f8:	db33      	blt.n	8008a62 <__lshift+0xb6>
 80089fa:	6920      	ldr	r0, [r4, #16]
 80089fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a00:	f104 0314 	add.w	r3, r4, #20
 8008a04:	f019 091f 	ands.w	r9, r9, #31
 8008a08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a10:	d02b      	beq.n	8008a6a <__lshift+0xbe>
 8008a12:	f1c9 0e20 	rsb	lr, r9, #32
 8008a16:	468a      	mov	sl, r1
 8008a18:	2200      	movs	r2, #0
 8008a1a:	6818      	ldr	r0, [r3, #0]
 8008a1c:	fa00 f009 	lsl.w	r0, r0, r9
 8008a20:	4310      	orrs	r0, r2
 8008a22:	f84a 0b04 	str.w	r0, [sl], #4
 8008a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a2a:	459c      	cmp	ip, r3
 8008a2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a30:	d8f3      	bhi.n	8008a1a <__lshift+0x6e>
 8008a32:	ebac 0304 	sub.w	r3, ip, r4
 8008a36:	3b15      	subs	r3, #21
 8008a38:	f023 0303 	bic.w	r3, r3, #3
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	f104 0015 	add.w	r0, r4, #21
 8008a42:	4560      	cmp	r0, ip
 8008a44:	bf88      	it	hi
 8008a46:	2304      	movhi	r3, #4
 8008a48:	50ca      	str	r2, [r1, r3]
 8008a4a:	b10a      	cbz	r2, 8008a50 <__lshift+0xa4>
 8008a4c:	f108 0602 	add.w	r6, r8, #2
 8008a50:	3e01      	subs	r6, #1
 8008a52:	4638      	mov	r0, r7
 8008a54:	612e      	str	r6, [r5, #16]
 8008a56:	4621      	mov	r1, r4
 8008a58:	f7ff fde2 	bl	8008620 <_Bfree>
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a62:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a66:	3301      	adds	r3, #1
 8008a68:	e7c5      	b.n	80089f6 <__lshift+0x4a>
 8008a6a:	3904      	subs	r1, #4
 8008a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a70:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a74:	459c      	cmp	ip, r3
 8008a76:	d8f9      	bhi.n	8008a6c <__lshift+0xc0>
 8008a78:	e7ea      	b.n	8008a50 <__lshift+0xa4>
 8008a7a:	bf00      	nop
 8008a7c:	08009490 	.word	0x08009490
 8008a80:	080094a1 	.word	0x080094a1

08008a84 <__mcmp>:
 8008a84:	690a      	ldr	r2, [r1, #16]
 8008a86:	4603      	mov	r3, r0
 8008a88:	6900      	ldr	r0, [r0, #16]
 8008a8a:	1a80      	subs	r0, r0, r2
 8008a8c:	b530      	push	{r4, r5, lr}
 8008a8e:	d10e      	bne.n	8008aae <__mcmp+0x2a>
 8008a90:	3314      	adds	r3, #20
 8008a92:	3114      	adds	r1, #20
 8008a94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008aa0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008aa4:	4295      	cmp	r5, r2
 8008aa6:	d003      	beq.n	8008ab0 <__mcmp+0x2c>
 8008aa8:	d205      	bcs.n	8008ab6 <__mcmp+0x32>
 8008aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8008aae:	bd30      	pop	{r4, r5, pc}
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	d3f3      	bcc.n	8008a9c <__mcmp+0x18>
 8008ab4:	e7fb      	b.n	8008aae <__mcmp+0x2a>
 8008ab6:	2001      	movs	r0, #1
 8008ab8:	e7f9      	b.n	8008aae <__mcmp+0x2a>
	...

08008abc <__mdiff>:
 8008abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac0:	4689      	mov	r9, r1
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	4648      	mov	r0, r9
 8008ac8:	4614      	mov	r4, r2
 8008aca:	f7ff ffdb 	bl	8008a84 <__mcmp>
 8008ace:	1e05      	subs	r5, r0, #0
 8008ad0:	d112      	bne.n	8008af8 <__mdiff+0x3c>
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f7ff fd63 	bl	80085a0 <_Balloc>
 8008ada:	4602      	mov	r2, r0
 8008adc:	b928      	cbnz	r0, 8008aea <__mdiff+0x2e>
 8008ade:	4b3f      	ldr	r3, [pc, #252]	@ (8008bdc <__mdiff+0x120>)
 8008ae0:	f240 2137 	movw	r1, #567	@ 0x237
 8008ae4:	483e      	ldr	r0, [pc, #248]	@ (8008be0 <__mdiff+0x124>)
 8008ae6:	f000 fb57 	bl	8009198 <__assert_func>
 8008aea:	2301      	movs	r3, #1
 8008aec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008af0:	4610      	mov	r0, r2
 8008af2:	b003      	add	sp, #12
 8008af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af8:	bfbc      	itt	lt
 8008afa:	464b      	movlt	r3, r9
 8008afc:	46a1      	movlt	r9, r4
 8008afe:	4630      	mov	r0, r6
 8008b00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b04:	bfba      	itte	lt
 8008b06:	461c      	movlt	r4, r3
 8008b08:	2501      	movlt	r5, #1
 8008b0a:	2500      	movge	r5, #0
 8008b0c:	f7ff fd48 	bl	80085a0 <_Balloc>
 8008b10:	4602      	mov	r2, r0
 8008b12:	b918      	cbnz	r0, 8008b1c <__mdiff+0x60>
 8008b14:	4b31      	ldr	r3, [pc, #196]	@ (8008bdc <__mdiff+0x120>)
 8008b16:	f240 2145 	movw	r1, #581	@ 0x245
 8008b1a:	e7e3      	b.n	8008ae4 <__mdiff+0x28>
 8008b1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b20:	6926      	ldr	r6, [r4, #16]
 8008b22:	60c5      	str	r5, [r0, #12]
 8008b24:	f109 0310 	add.w	r3, r9, #16
 8008b28:	f109 0514 	add.w	r5, r9, #20
 8008b2c:	f104 0e14 	add.w	lr, r4, #20
 8008b30:	f100 0b14 	add.w	fp, r0, #20
 8008b34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	46d9      	mov	r9, fp
 8008b40:	f04f 0c00 	mov.w	ip, #0
 8008b44:	9b01      	ldr	r3, [sp, #4]
 8008b46:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b4e:	9301      	str	r3, [sp, #4]
 8008b50:	fa1f f38a 	uxth.w	r3, sl
 8008b54:	4619      	mov	r1, r3
 8008b56:	b283      	uxth	r3, r0
 8008b58:	1acb      	subs	r3, r1, r3
 8008b5a:	0c00      	lsrs	r0, r0, #16
 8008b5c:	4463      	add	r3, ip
 8008b5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b6c:	4576      	cmp	r6, lr
 8008b6e:	f849 3b04 	str.w	r3, [r9], #4
 8008b72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b76:	d8e5      	bhi.n	8008b44 <__mdiff+0x88>
 8008b78:	1b33      	subs	r3, r6, r4
 8008b7a:	3b15      	subs	r3, #21
 8008b7c:	f023 0303 	bic.w	r3, r3, #3
 8008b80:	3415      	adds	r4, #21
 8008b82:	3304      	adds	r3, #4
 8008b84:	42a6      	cmp	r6, r4
 8008b86:	bf38      	it	cc
 8008b88:	2304      	movcc	r3, #4
 8008b8a:	441d      	add	r5, r3
 8008b8c:	445b      	add	r3, fp
 8008b8e:	461e      	mov	r6, r3
 8008b90:	462c      	mov	r4, r5
 8008b92:	4544      	cmp	r4, r8
 8008b94:	d30e      	bcc.n	8008bb4 <__mdiff+0xf8>
 8008b96:	f108 0103 	add.w	r1, r8, #3
 8008b9a:	1b49      	subs	r1, r1, r5
 8008b9c:	f021 0103 	bic.w	r1, r1, #3
 8008ba0:	3d03      	subs	r5, #3
 8008ba2:	45a8      	cmp	r8, r5
 8008ba4:	bf38      	it	cc
 8008ba6:	2100      	movcc	r1, #0
 8008ba8:	440b      	add	r3, r1
 8008baa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008bae:	b191      	cbz	r1, 8008bd6 <__mdiff+0x11a>
 8008bb0:	6117      	str	r7, [r2, #16]
 8008bb2:	e79d      	b.n	8008af0 <__mdiff+0x34>
 8008bb4:	f854 1b04 	ldr.w	r1, [r4], #4
 8008bb8:	46e6      	mov	lr, ip
 8008bba:	0c08      	lsrs	r0, r1, #16
 8008bbc:	fa1c fc81 	uxtah	ip, ip, r1
 8008bc0:	4471      	add	r1, lr
 8008bc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008bc6:	b289      	uxth	r1, r1
 8008bc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008bcc:	f846 1b04 	str.w	r1, [r6], #4
 8008bd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bd4:	e7dd      	b.n	8008b92 <__mdiff+0xd6>
 8008bd6:	3f01      	subs	r7, #1
 8008bd8:	e7e7      	b.n	8008baa <__mdiff+0xee>
 8008bda:	bf00      	nop
 8008bdc:	08009490 	.word	0x08009490
 8008be0:	080094a1 	.word	0x080094a1

08008be4 <__d2b>:
 8008be4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008be8:	460f      	mov	r7, r1
 8008bea:	2101      	movs	r1, #1
 8008bec:	ec59 8b10 	vmov	r8, r9, d0
 8008bf0:	4616      	mov	r6, r2
 8008bf2:	f7ff fcd5 	bl	80085a0 <_Balloc>
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	b930      	cbnz	r0, 8008c08 <__d2b+0x24>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	4b23      	ldr	r3, [pc, #140]	@ (8008c8c <__d2b+0xa8>)
 8008bfe:	4824      	ldr	r0, [pc, #144]	@ (8008c90 <__d2b+0xac>)
 8008c00:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c04:	f000 fac8 	bl	8009198 <__assert_func>
 8008c08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c10:	b10d      	cbz	r5, 8008c16 <__d2b+0x32>
 8008c12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c16:	9301      	str	r3, [sp, #4]
 8008c18:	f1b8 0300 	subs.w	r3, r8, #0
 8008c1c:	d023      	beq.n	8008c66 <__d2b+0x82>
 8008c1e:	4668      	mov	r0, sp
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	f7ff fd84 	bl	800872e <__lo0bits>
 8008c26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c2a:	b1d0      	cbz	r0, 8008c62 <__d2b+0x7e>
 8008c2c:	f1c0 0320 	rsb	r3, r0, #32
 8008c30:	fa02 f303 	lsl.w	r3, r2, r3
 8008c34:	430b      	orrs	r3, r1
 8008c36:	40c2      	lsrs	r2, r0
 8008c38:	6163      	str	r3, [r4, #20]
 8008c3a:	9201      	str	r2, [sp, #4]
 8008c3c:	9b01      	ldr	r3, [sp, #4]
 8008c3e:	61a3      	str	r3, [r4, #24]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	bf0c      	ite	eq
 8008c44:	2201      	moveq	r2, #1
 8008c46:	2202      	movne	r2, #2
 8008c48:	6122      	str	r2, [r4, #16]
 8008c4a:	b1a5      	cbz	r5, 8008c76 <__d2b+0x92>
 8008c4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c50:	4405      	add	r5, r0
 8008c52:	603d      	str	r5, [r7, #0]
 8008c54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c58:	6030      	str	r0, [r6, #0]
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	b003      	add	sp, #12
 8008c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c62:	6161      	str	r1, [r4, #20]
 8008c64:	e7ea      	b.n	8008c3c <__d2b+0x58>
 8008c66:	a801      	add	r0, sp, #4
 8008c68:	f7ff fd61 	bl	800872e <__lo0bits>
 8008c6c:	9b01      	ldr	r3, [sp, #4]
 8008c6e:	6163      	str	r3, [r4, #20]
 8008c70:	3020      	adds	r0, #32
 8008c72:	2201      	movs	r2, #1
 8008c74:	e7e8      	b.n	8008c48 <__d2b+0x64>
 8008c76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c7e:	6038      	str	r0, [r7, #0]
 8008c80:	6918      	ldr	r0, [r3, #16]
 8008c82:	f7ff fd35 	bl	80086f0 <__hi0bits>
 8008c86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c8a:	e7e5      	b.n	8008c58 <__d2b+0x74>
 8008c8c:	08009490 	.word	0x08009490
 8008c90:	080094a1 	.word	0x080094a1

08008c94 <__sfputc_r>:
 8008c94:	6893      	ldr	r3, [r2, #8]
 8008c96:	3b01      	subs	r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	b410      	push	{r4}
 8008c9c:	6093      	str	r3, [r2, #8]
 8008c9e:	da08      	bge.n	8008cb2 <__sfputc_r+0x1e>
 8008ca0:	6994      	ldr	r4, [r2, #24]
 8008ca2:	42a3      	cmp	r3, r4
 8008ca4:	db01      	blt.n	8008caa <__sfputc_r+0x16>
 8008ca6:	290a      	cmp	r1, #10
 8008ca8:	d103      	bne.n	8008cb2 <__sfputc_r+0x1e>
 8008caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cae:	f7fe bbfa 	b.w	80074a6 <__swbuf_r>
 8008cb2:	6813      	ldr	r3, [r2, #0]
 8008cb4:	1c58      	adds	r0, r3, #1
 8008cb6:	6010      	str	r0, [r2, #0]
 8008cb8:	7019      	strb	r1, [r3, #0]
 8008cba:	4608      	mov	r0, r1
 8008cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <__sfputs_r>:
 8008cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc4:	4606      	mov	r6, r0
 8008cc6:	460f      	mov	r7, r1
 8008cc8:	4614      	mov	r4, r2
 8008cca:	18d5      	adds	r5, r2, r3
 8008ccc:	42ac      	cmp	r4, r5
 8008cce:	d101      	bne.n	8008cd4 <__sfputs_r+0x12>
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	e007      	b.n	8008ce4 <__sfputs_r+0x22>
 8008cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd8:	463a      	mov	r2, r7
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f7ff ffda 	bl	8008c94 <__sfputc_r>
 8008ce0:	1c43      	adds	r3, r0, #1
 8008ce2:	d1f3      	bne.n	8008ccc <__sfputs_r+0xa>
 8008ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ce8 <_vfiprintf_r>:
 8008ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cec:	460d      	mov	r5, r1
 8008cee:	b09d      	sub	sp, #116	@ 0x74
 8008cf0:	4614      	mov	r4, r2
 8008cf2:	4698      	mov	r8, r3
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	b118      	cbz	r0, 8008d00 <_vfiprintf_r+0x18>
 8008cf8:	6a03      	ldr	r3, [r0, #32]
 8008cfa:	b90b      	cbnz	r3, 8008d00 <_vfiprintf_r+0x18>
 8008cfc:	f7fe faea 	bl	80072d4 <__sinit>
 8008d00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d02:	07d9      	lsls	r1, r3, #31
 8008d04:	d405      	bmi.n	8008d12 <_vfiprintf_r+0x2a>
 8008d06:	89ab      	ldrh	r3, [r5, #12]
 8008d08:	059a      	lsls	r2, r3, #22
 8008d0a:	d402      	bmi.n	8008d12 <_vfiprintf_r+0x2a>
 8008d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d0e:	f7fe fcdc 	bl	80076ca <__retarget_lock_acquire_recursive>
 8008d12:	89ab      	ldrh	r3, [r5, #12]
 8008d14:	071b      	lsls	r3, r3, #28
 8008d16:	d501      	bpl.n	8008d1c <_vfiprintf_r+0x34>
 8008d18:	692b      	ldr	r3, [r5, #16]
 8008d1a:	b99b      	cbnz	r3, 8008d44 <_vfiprintf_r+0x5c>
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	4630      	mov	r0, r6
 8008d20:	f7fe fc00 	bl	8007524 <__swsetup_r>
 8008d24:	b170      	cbz	r0, 8008d44 <_vfiprintf_r+0x5c>
 8008d26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d28:	07dc      	lsls	r4, r3, #31
 8008d2a:	d504      	bpl.n	8008d36 <_vfiprintf_r+0x4e>
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d30:	b01d      	add	sp, #116	@ 0x74
 8008d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d36:	89ab      	ldrh	r3, [r5, #12]
 8008d38:	0598      	lsls	r0, r3, #22
 8008d3a:	d4f7      	bmi.n	8008d2c <_vfiprintf_r+0x44>
 8008d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d3e:	f7fe fcc5 	bl	80076cc <__retarget_lock_release_recursive>
 8008d42:	e7f3      	b.n	8008d2c <_vfiprintf_r+0x44>
 8008d44:	2300      	movs	r3, #0
 8008d46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d48:	2320      	movs	r3, #32
 8008d4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d52:	2330      	movs	r3, #48	@ 0x30
 8008d54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f04 <_vfiprintf_r+0x21c>
 8008d58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d5c:	f04f 0901 	mov.w	r9, #1
 8008d60:	4623      	mov	r3, r4
 8008d62:	469a      	mov	sl, r3
 8008d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d68:	b10a      	cbz	r2, 8008d6e <_vfiprintf_r+0x86>
 8008d6a:	2a25      	cmp	r2, #37	@ 0x25
 8008d6c:	d1f9      	bne.n	8008d62 <_vfiprintf_r+0x7a>
 8008d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8008d72:	d00b      	beq.n	8008d8c <_vfiprintf_r+0xa4>
 8008d74:	465b      	mov	r3, fp
 8008d76:	4622      	mov	r2, r4
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f7ff ffa1 	bl	8008cc2 <__sfputs_r>
 8008d80:	3001      	adds	r0, #1
 8008d82:	f000 80a7 	beq.w	8008ed4 <_vfiprintf_r+0x1ec>
 8008d86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d88:	445a      	add	r2, fp
 8008d8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 809f 	beq.w	8008ed4 <_vfiprintf_r+0x1ec>
 8008d96:	2300      	movs	r3, #0
 8008d98:	f04f 32ff 	mov.w	r2, #4294967295
 8008d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008da0:	f10a 0a01 	add.w	sl, sl, #1
 8008da4:	9304      	str	r3, [sp, #16]
 8008da6:	9307      	str	r3, [sp, #28]
 8008da8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dac:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dae:	4654      	mov	r4, sl
 8008db0:	2205      	movs	r2, #5
 8008db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db6:	4853      	ldr	r0, [pc, #332]	@ (8008f04 <_vfiprintf_r+0x21c>)
 8008db8:	f7f7 fa2a 	bl	8000210 <memchr>
 8008dbc:	9a04      	ldr	r2, [sp, #16]
 8008dbe:	b9d8      	cbnz	r0, 8008df8 <_vfiprintf_r+0x110>
 8008dc0:	06d1      	lsls	r1, r2, #27
 8008dc2:	bf44      	itt	mi
 8008dc4:	2320      	movmi	r3, #32
 8008dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dca:	0713      	lsls	r3, r2, #28
 8008dcc:	bf44      	itt	mi
 8008dce:	232b      	movmi	r3, #43	@ 0x2b
 8008dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dda:	d015      	beq.n	8008e08 <_vfiprintf_r+0x120>
 8008ddc:	9a07      	ldr	r2, [sp, #28]
 8008dde:	4654      	mov	r4, sl
 8008de0:	2000      	movs	r0, #0
 8008de2:	f04f 0c0a 	mov.w	ip, #10
 8008de6:	4621      	mov	r1, r4
 8008de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dec:	3b30      	subs	r3, #48	@ 0x30
 8008dee:	2b09      	cmp	r3, #9
 8008df0:	d94b      	bls.n	8008e8a <_vfiprintf_r+0x1a2>
 8008df2:	b1b0      	cbz	r0, 8008e22 <_vfiprintf_r+0x13a>
 8008df4:	9207      	str	r2, [sp, #28]
 8008df6:	e014      	b.n	8008e22 <_vfiprintf_r+0x13a>
 8008df8:	eba0 0308 	sub.w	r3, r0, r8
 8008dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8008e00:	4313      	orrs	r3, r2
 8008e02:	9304      	str	r3, [sp, #16]
 8008e04:	46a2      	mov	sl, r4
 8008e06:	e7d2      	b.n	8008dae <_vfiprintf_r+0xc6>
 8008e08:	9b03      	ldr	r3, [sp, #12]
 8008e0a:	1d19      	adds	r1, r3, #4
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	9103      	str	r1, [sp, #12]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	bfbb      	ittet	lt
 8008e14:	425b      	neglt	r3, r3
 8008e16:	f042 0202 	orrlt.w	r2, r2, #2
 8008e1a:	9307      	strge	r3, [sp, #28]
 8008e1c:	9307      	strlt	r3, [sp, #28]
 8008e1e:	bfb8      	it	lt
 8008e20:	9204      	strlt	r2, [sp, #16]
 8008e22:	7823      	ldrb	r3, [r4, #0]
 8008e24:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e26:	d10a      	bne.n	8008e3e <_vfiprintf_r+0x156>
 8008e28:	7863      	ldrb	r3, [r4, #1]
 8008e2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e2c:	d132      	bne.n	8008e94 <_vfiprintf_r+0x1ac>
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	1d1a      	adds	r2, r3, #4
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	9203      	str	r2, [sp, #12]
 8008e36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e3a:	3402      	adds	r4, #2
 8008e3c:	9305      	str	r3, [sp, #20]
 8008e3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f14 <_vfiprintf_r+0x22c>
 8008e42:	7821      	ldrb	r1, [r4, #0]
 8008e44:	2203      	movs	r2, #3
 8008e46:	4650      	mov	r0, sl
 8008e48:	f7f7 f9e2 	bl	8000210 <memchr>
 8008e4c:	b138      	cbz	r0, 8008e5e <_vfiprintf_r+0x176>
 8008e4e:	9b04      	ldr	r3, [sp, #16]
 8008e50:	eba0 000a 	sub.w	r0, r0, sl
 8008e54:	2240      	movs	r2, #64	@ 0x40
 8008e56:	4082      	lsls	r2, r0
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	3401      	adds	r4, #1
 8008e5c:	9304      	str	r3, [sp, #16]
 8008e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e62:	4829      	ldr	r0, [pc, #164]	@ (8008f08 <_vfiprintf_r+0x220>)
 8008e64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e68:	2206      	movs	r2, #6
 8008e6a:	f7f7 f9d1 	bl	8000210 <memchr>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d03f      	beq.n	8008ef2 <_vfiprintf_r+0x20a>
 8008e72:	4b26      	ldr	r3, [pc, #152]	@ (8008f0c <_vfiprintf_r+0x224>)
 8008e74:	bb1b      	cbnz	r3, 8008ebe <_vfiprintf_r+0x1d6>
 8008e76:	9b03      	ldr	r3, [sp, #12]
 8008e78:	3307      	adds	r3, #7
 8008e7a:	f023 0307 	bic.w	r3, r3, #7
 8008e7e:	3308      	adds	r3, #8
 8008e80:	9303      	str	r3, [sp, #12]
 8008e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e84:	443b      	add	r3, r7
 8008e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e88:	e76a      	b.n	8008d60 <_vfiprintf_r+0x78>
 8008e8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e8e:	460c      	mov	r4, r1
 8008e90:	2001      	movs	r0, #1
 8008e92:	e7a8      	b.n	8008de6 <_vfiprintf_r+0xfe>
 8008e94:	2300      	movs	r3, #0
 8008e96:	3401      	adds	r4, #1
 8008e98:	9305      	str	r3, [sp, #20]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	f04f 0c0a 	mov.w	ip, #10
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ea6:	3a30      	subs	r2, #48	@ 0x30
 8008ea8:	2a09      	cmp	r2, #9
 8008eaa:	d903      	bls.n	8008eb4 <_vfiprintf_r+0x1cc>
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d0c6      	beq.n	8008e3e <_vfiprintf_r+0x156>
 8008eb0:	9105      	str	r1, [sp, #20]
 8008eb2:	e7c4      	b.n	8008e3e <_vfiprintf_r+0x156>
 8008eb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eb8:	4604      	mov	r4, r0
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e7f0      	b.n	8008ea0 <_vfiprintf_r+0x1b8>
 8008ebe:	ab03      	add	r3, sp, #12
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	462a      	mov	r2, r5
 8008ec4:	4b12      	ldr	r3, [pc, #72]	@ (8008f10 <_vfiprintf_r+0x228>)
 8008ec6:	a904      	add	r1, sp, #16
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f7fd fdc1 	bl	8006a50 <_printf_float>
 8008ece:	4607      	mov	r7, r0
 8008ed0:	1c78      	adds	r0, r7, #1
 8008ed2:	d1d6      	bne.n	8008e82 <_vfiprintf_r+0x19a>
 8008ed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ed6:	07d9      	lsls	r1, r3, #31
 8008ed8:	d405      	bmi.n	8008ee6 <_vfiprintf_r+0x1fe>
 8008eda:	89ab      	ldrh	r3, [r5, #12]
 8008edc:	059a      	lsls	r2, r3, #22
 8008ede:	d402      	bmi.n	8008ee6 <_vfiprintf_r+0x1fe>
 8008ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ee2:	f7fe fbf3 	bl	80076cc <__retarget_lock_release_recursive>
 8008ee6:	89ab      	ldrh	r3, [r5, #12]
 8008ee8:	065b      	lsls	r3, r3, #25
 8008eea:	f53f af1f 	bmi.w	8008d2c <_vfiprintf_r+0x44>
 8008eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ef0:	e71e      	b.n	8008d30 <_vfiprintf_r+0x48>
 8008ef2:	ab03      	add	r3, sp, #12
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	462a      	mov	r2, r5
 8008ef8:	4b05      	ldr	r3, [pc, #20]	@ (8008f10 <_vfiprintf_r+0x228>)
 8008efa:	a904      	add	r1, sp, #16
 8008efc:	4630      	mov	r0, r6
 8008efe:	f7fe f83f 	bl	8006f80 <_printf_i>
 8008f02:	e7e4      	b.n	8008ece <_vfiprintf_r+0x1e6>
 8008f04:	080094fa 	.word	0x080094fa
 8008f08:	08009504 	.word	0x08009504
 8008f0c:	08006a51 	.word	0x08006a51
 8008f10:	08008cc3 	.word	0x08008cc3
 8008f14:	08009500 	.word	0x08009500

08008f18 <__sflush_r>:
 8008f18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f20:	0716      	lsls	r6, r2, #28
 8008f22:	4605      	mov	r5, r0
 8008f24:	460c      	mov	r4, r1
 8008f26:	d454      	bmi.n	8008fd2 <__sflush_r+0xba>
 8008f28:	684b      	ldr	r3, [r1, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	dc02      	bgt.n	8008f34 <__sflush_r+0x1c>
 8008f2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	dd48      	ble.n	8008fc6 <__sflush_r+0xae>
 8008f34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f36:	2e00      	cmp	r6, #0
 8008f38:	d045      	beq.n	8008fc6 <__sflush_r+0xae>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f40:	682f      	ldr	r7, [r5, #0]
 8008f42:	6a21      	ldr	r1, [r4, #32]
 8008f44:	602b      	str	r3, [r5, #0]
 8008f46:	d030      	beq.n	8008faa <__sflush_r+0x92>
 8008f48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	0759      	lsls	r1, r3, #29
 8008f4e:	d505      	bpl.n	8008f5c <__sflush_r+0x44>
 8008f50:	6863      	ldr	r3, [r4, #4]
 8008f52:	1ad2      	subs	r2, r2, r3
 8008f54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f56:	b10b      	cbz	r3, 8008f5c <__sflush_r+0x44>
 8008f58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f5a:	1ad2      	subs	r2, r2, r3
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f60:	6a21      	ldr	r1, [r4, #32]
 8008f62:	4628      	mov	r0, r5
 8008f64:	47b0      	blx	r6
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	d106      	bne.n	8008f7a <__sflush_r+0x62>
 8008f6c:	6829      	ldr	r1, [r5, #0]
 8008f6e:	291d      	cmp	r1, #29
 8008f70:	d82b      	bhi.n	8008fca <__sflush_r+0xb2>
 8008f72:	4a2a      	ldr	r2, [pc, #168]	@ (800901c <__sflush_r+0x104>)
 8008f74:	40ca      	lsrs	r2, r1
 8008f76:	07d6      	lsls	r6, r2, #31
 8008f78:	d527      	bpl.n	8008fca <__sflush_r+0xb2>
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	6062      	str	r2, [r4, #4]
 8008f7e:	04d9      	lsls	r1, r3, #19
 8008f80:	6922      	ldr	r2, [r4, #16]
 8008f82:	6022      	str	r2, [r4, #0]
 8008f84:	d504      	bpl.n	8008f90 <__sflush_r+0x78>
 8008f86:	1c42      	adds	r2, r0, #1
 8008f88:	d101      	bne.n	8008f8e <__sflush_r+0x76>
 8008f8a:	682b      	ldr	r3, [r5, #0]
 8008f8c:	b903      	cbnz	r3, 8008f90 <__sflush_r+0x78>
 8008f8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f92:	602f      	str	r7, [r5, #0]
 8008f94:	b1b9      	cbz	r1, 8008fc6 <__sflush_r+0xae>
 8008f96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f9a:	4299      	cmp	r1, r3
 8008f9c:	d002      	beq.n	8008fa4 <__sflush_r+0x8c>
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	f7ff f9fe 	bl	80083a0 <_free_r>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fa8:	e00d      	b.n	8008fc6 <__sflush_r+0xae>
 8008faa:	2301      	movs	r3, #1
 8008fac:	4628      	mov	r0, r5
 8008fae:	47b0      	blx	r6
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	1c50      	adds	r0, r2, #1
 8008fb4:	d1c9      	bne.n	8008f4a <__sflush_r+0x32>
 8008fb6:	682b      	ldr	r3, [r5, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d0c6      	beq.n	8008f4a <__sflush_r+0x32>
 8008fbc:	2b1d      	cmp	r3, #29
 8008fbe:	d001      	beq.n	8008fc4 <__sflush_r+0xac>
 8008fc0:	2b16      	cmp	r3, #22
 8008fc2:	d11e      	bne.n	8009002 <__sflush_r+0xea>
 8008fc4:	602f      	str	r7, [r5, #0]
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	e022      	b.n	8009010 <__sflush_r+0xf8>
 8008fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fce:	b21b      	sxth	r3, r3
 8008fd0:	e01b      	b.n	800900a <__sflush_r+0xf2>
 8008fd2:	690f      	ldr	r7, [r1, #16]
 8008fd4:	2f00      	cmp	r7, #0
 8008fd6:	d0f6      	beq.n	8008fc6 <__sflush_r+0xae>
 8008fd8:	0793      	lsls	r3, r2, #30
 8008fda:	680e      	ldr	r6, [r1, #0]
 8008fdc:	bf08      	it	eq
 8008fde:	694b      	ldreq	r3, [r1, #20]
 8008fe0:	600f      	str	r7, [r1, #0]
 8008fe2:	bf18      	it	ne
 8008fe4:	2300      	movne	r3, #0
 8008fe6:	eba6 0807 	sub.w	r8, r6, r7
 8008fea:	608b      	str	r3, [r1, #8]
 8008fec:	f1b8 0f00 	cmp.w	r8, #0
 8008ff0:	dde9      	ble.n	8008fc6 <__sflush_r+0xae>
 8008ff2:	6a21      	ldr	r1, [r4, #32]
 8008ff4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ff6:	4643      	mov	r3, r8
 8008ff8:	463a      	mov	r2, r7
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	47b0      	blx	r6
 8008ffe:	2800      	cmp	r0, #0
 8009000:	dc08      	bgt.n	8009014 <__sflush_r+0xfc>
 8009002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800900a:	81a3      	strh	r3, [r4, #12]
 800900c:	f04f 30ff 	mov.w	r0, #4294967295
 8009010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009014:	4407      	add	r7, r0
 8009016:	eba8 0800 	sub.w	r8, r8, r0
 800901a:	e7e7      	b.n	8008fec <__sflush_r+0xd4>
 800901c:	20400001 	.word	0x20400001

08009020 <_fflush_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	690b      	ldr	r3, [r1, #16]
 8009024:	4605      	mov	r5, r0
 8009026:	460c      	mov	r4, r1
 8009028:	b913      	cbnz	r3, 8009030 <_fflush_r+0x10>
 800902a:	2500      	movs	r5, #0
 800902c:	4628      	mov	r0, r5
 800902e:	bd38      	pop	{r3, r4, r5, pc}
 8009030:	b118      	cbz	r0, 800903a <_fflush_r+0x1a>
 8009032:	6a03      	ldr	r3, [r0, #32]
 8009034:	b90b      	cbnz	r3, 800903a <_fflush_r+0x1a>
 8009036:	f7fe f94d 	bl	80072d4 <__sinit>
 800903a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0f3      	beq.n	800902a <_fflush_r+0xa>
 8009042:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009044:	07d0      	lsls	r0, r2, #31
 8009046:	d404      	bmi.n	8009052 <_fflush_r+0x32>
 8009048:	0599      	lsls	r1, r3, #22
 800904a:	d402      	bmi.n	8009052 <_fflush_r+0x32>
 800904c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800904e:	f7fe fb3c 	bl	80076ca <__retarget_lock_acquire_recursive>
 8009052:	4628      	mov	r0, r5
 8009054:	4621      	mov	r1, r4
 8009056:	f7ff ff5f 	bl	8008f18 <__sflush_r>
 800905a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800905c:	07da      	lsls	r2, r3, #31
 800905e:	4605      	mov	r5, r0
 8009060:	d4e4      	bmi.n	800902c <_fflush_r+0xc>
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	059b      	lsls	r3, r3, #22
 8009066:	d4e1      	bmi.n	800902c <_fflush_r+0xc>
 8009068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800906a:	f7fe fb2f 	bl	80076cc <__retarget_lock_release_recursive>
 800906e:	e7dd      	b.n	800902c <_fflush_r+0xc>

08009070 <__swhatbuf_r>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	460c      	mov	r4, r1
 8009074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009078:	2900      	cmp	r1, #0
 800907a:	b096      	sub	sp, #88	@ 0x58
 800907c:	4615      	mov	r5, r2
 800907e:	461e      	mov	r6, r3
 8009080:	da0d      	bge.n	800909e <__swhatbuf_r+0x2e>
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009088:	f04f 0100 	mov.w	r1, #0
 800908c:	bf14      	ite	ne
 800908e:	2340      	movne	r3, #64	@ 0x40
 8009090:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009094:	2000      	movs	r0, #0
 8009096:	6031      	str	r1, [r6, #0]
 8009098:	602b      	str	r3, [r5, #0]
 800909a:	b016      	add	sp, #88	@ 0x58
 800909c:	bd70      	pop	{r4, r5, r6, pc}
 800909e:	466a      	mov	r2, sp
 80090a0:	f000 f848 	bl	8009134 <_fstat_r>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	dbec      	blt.n	8009082 <__swhatbuf_r+0x12>
 80090a8:	9901      	ldr	r1, [sp, #4]
 80090aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090b2:	4259      	negs	r1, r3
 80090b4:	4159      	adcs	r1, r3
 80090b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090ba:	e7eb      	b.n	8009094 <__swhatbuf_r+0x24>

080090bc <__smakebuf_r>:
 80090bc:	898b      	ldrh	r3, [r1, #12]
 80090be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090c0:	079d      	lsls	r5, r3, #30
 80090c2:	4606      	mov	r6, r0
 80090c4:	460c      	mov	r4, r1
 80090c6:	d507      	bpl.n	80090d8 <__smakebuf_r+0x1c>
 80090c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	6123      	str	r3, [r4, #16]
 80090d0:	2301      	movs	r3, #1
 80090d2:	6163      	str	r3, [r4, #20]
 80090d4:	b003      	add	sp, #12
 80090d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090d8:	ab01      	add	r3, sp, #4
 80090da:	466a      	mov	r2, sp
 80090dc:	f7ff ffc8 	bl	8009070 <__swhatbuf_r>
 80090e0:	9f00      	ldr	r7, [sp, #0]
 80090e2:	4605      	mov	r5, r0
 80090e4:	4639      	mov	r1, r7
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7ff f9ce 	bl	8008488 <_malloc_r>
 80090ec:	b948      	cbnz	r0, 8009102 <__smakebuf_r+0x46>
 80090ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090f2:	059a      	lsls	r2, r3, #22
 80090f4:	d4ee      	bmi.n	80090d4 <__smakebuf_r+0x18>
 80090f6:	f023 0303 	bic.w	r3, r3, #3
 80090fa:	f043 0302 	orr.w	r3, r3, #2
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	e7e2      	b.n	80090c8 <__smakebuf_r+0xc>
 8009102:	89a3      	ldrh	r3, [r4, #12]
 8009104:	6020      	str	r0, [r4, #0]
 8009106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800910a:	81a3      	strh	r3, [r4, #12]
 800910c:	9b01      	ldr	r3, [sp, #4]
 800910e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009112:	b15b      	cbz	r3, 800912c <__smakebuf_r+0x70>
 8009114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009118:	4630      	mov	r0, r6
 800911a:	f000 f81d 	bl	8009158 <_isatty_r>
 800911e:	b128      	cbz	r0, 800912c <__smakebuf_r+0x70>
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	f023 0303 	bic.w	r3, r3, #3
 8009126:	f043 0301 	orr.w	r3, r3, #1
 800912a:	81a3      	strh	r3, [r4, #12]
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	431d      	orrs	r5, r3
 8009130:	81a5      	strh	r5, [r4, #12]
 8009132:	e7cf      	b.n	80090d4 <__smakebuf_r+0x18>

08009134 <_fstat_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4d07      	ldr	r5, [pc, #28]	@ (8009154 <_fstat_r+0x20>)
 8009138:	2300      	movs	r3, #0
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	4611      	mov	r1, r2
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	f7f8 fca1 	bl	8001a88 <_fstat>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	d102      	bne.n	8009150 <_fstat_r+0x1c>
 800914a:	682b      	ldr	r3, [r5, #0]
 800914c:	b103      	cbz	r3, 8009150 <_fstat_r+0x1c>
 800914e:	6023      	str	r3, [r4, #0]
 8009150:	bd38      	pop	{r3, r4, r5, pc}
 8009152:	bf00      	nop
 8009154:	200004ac 	.word	0x200004ac

08009158 <_isatty_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4d06      	ldr	r5, [pc, #24]	@ (8009174 <_isatty_r+0x1c>)
 800915c:	2300      	movs	r3, #0
 800915e:	4604      	mov	r4, r0
 8009160:	4608      	mov	r0, r1
 8009162:	602b      	str	r3, [r5, #0]
 8009164:	f7f8 fca0 	bl	8001aa8 <_isatty>
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	d102      	bne.n	8009172 <_isatty_r+0x1a>
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	b103      	cbz	r3, 8009172 <_isatty_r+0x1a>
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	200004ac 	.word	0x200004ac

08009178 <_sbrk_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4d06      	ldr	r5, [pc, #24]	@ (8009194 <_sbrk_r+0x1c>)
 800917c:	2300      	movs	r3, #0
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	602b      	str	r3, [r5, #0]
 8009184:	f7f8 fca8 	bl	8001ad8 <_sbrk>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_sbrk_r+0x1a>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_sbrk_r+0x1a>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	200004ac 	.word	0x200004ac

08009198 <__assert_func>:
 8009198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800919a:	4614      	mov	r4, r2
 800919c:	461a      	mov	r2, r3
 800919e:	4b09      	ldr	r3, [pc, #36]	@ (80091c4 <__assert_func+0x2c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4605      	mov	r5, r0
 80091a4:	68d8      	ldr	r0, [r3, #12]
 80091a6:	b14c      	cbz	r4, 80091bc <__assert_func+0x24>
 80091a8:	4b07      	ldr	r3, [pc, #28]	@ (80091c8 <__assert_func+0x30>)
 80091aa:	9100      	str	r1, [sp, #0]
 80091ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091b0:	4906      	ldr	r1, [pc, #24]	@ (80091cc <__assert_func+0x34>)
 80091b2:	462b      	mov	r3, r5
 80091b4:	f000 f842 	bl	800923c <fiprintf>
 80091b8:	f000 f852 	bl	8009260 <abort>
 80091bc:	4b04      	ldr	r3, [pc, #16]	@ (80091d0 <__assert_func+0x38>)
 80091be:	461c      	mov	r4, r3
 80091c0:	e7f3      	b.n	80091aa <__assert_func+0x12>
 80091c2:	bf00      	nop
 80091c4:	20000018 	.word	0x20000018
 80091c8:	08009515 	.word	0x08009515
 80091cc:	08009522 	.word	0x08009522
 80091d0:	08009550 	.word	0x08009550

080091d4 <_calloc_r>:
 80091d4:	b570      	push	{r4, r5, r6, lr}
 80091d6:	fba1 5402 	umull	r5, r4, r1, r2
 80091da:	b934      	cbnz	r4, 80091ea <_calloc_r+0x16>
 80091dc:	4629      	mov	r1, r5
 80091de:	f7ff f953 	bl	8008488 <_malloc_r>
 80091e2:	4606      	mov	r6, r0
 80091e4:	b928      	cbnz	r0, 80091f2 <_calloc_r+0x1e>
 80091e6:	4630      	mov	r0, r6
 80091e8:	bd70      	pop	{r4, r5, r6, pc}
 80091ea:	220c      	movs	r2, #12
 80091ec:	6002      	str	r2, [r0, #0]
 80091ee:	2600      	movs	r6, #0
 80091f0:	e7f9      	b.n	80091e6 <_calloc_r+0x12>
 80091f2:	462a      	mov	r2, r5
 80091f4:	4621      	mov	r1, r4
 80091f6:	f7fe f9eb 	bl	80075d0 <memset>
 80091fa:	e7f4      	b.n	80091e6 <_calloc_r+0x12>

080091fc <__ascii_mbtowc>:
 80091fc:	b082      	sub	sp, #8
 80091fe:	b901      	cbnz	r1, 8009202 <__ascii_mbtowc+0x6>
 8009200:	a901      	add	r1, sp, #4
 8009202:	b142      	cbz	r2, 8009216 <__ascii_mbtowc+0x1a>
 8009204:	b14b      	cbz	r3, 800921a <__ascii_mbtowc+0x1e>
 8009206:	7813      	ldrb	r3, [r2, #0]
 8009208:	600b      	str	r3, [r1, #0]
 800920a:	7812      	ldrb	r2, [r2, #0]
 800920c:	1e10      	subs	r0, r2, #0
 800920e:	bf18      	it	ne
 8009210:	2001      	movne	r0, #1
 8009212:	b002      	add	sp, #8
 8009214:	4770      	bx	lr
 8009216:	4610      	mov	r0, r2
 8009218:	e7fb      	b.n	8009212 <__ascii_mbtowc+0x16>
 800921a:	f06f 0001 	mvn.w	r0, #1
 800921e:	e7f8      	b.n	8009212 <__ascii_mbtowc+0x16>

08009220 <__ascii_wctomb>:
 8009220:	4603      	mov	r3, r0
 8009222:	4608      	mov	r0, r1
 8009224:	b141      	cbz	r1, 8009238 <__ascii_wctomb+0x18>
 8009226:	2aff      	cmp	r2, #255	@ 0xff
 8009228:	d904      	bls.n	8009234 <__ascii_wctomb+0x14>
 800922a:	228a      	movs	r2, #138	@ 0x8a
 800922c:	601a      	str	r2, [r3, #0]
 800922e:	f04f 30ff 	mov.w	r0, #4294967295
 8009232:	4770      	bx	lr
 8009234:	700a      	strb	r2, [r1, #0]
 8009236:	2001      	movs	r0, #1
 8009238:	4770      	bx	lr
	...

0800923c <fiprintf>:
 800923c:	b40e      	push	{r1, r2, r3}
 800923e:	b503      	push	{r0, r1, lr}
 8009240:	4601      	mov	r1, r0
 8009242:	ab03      	add	r3, sp, #12
 8009244:	4805      	ldr	r0, [pc, #20]	@ (800925c <fiprintf+0x20>)
 8009246:	f853 2b04 	ldr.w	r2, [r3], #4
 800924a:	6800      	ldr	r0, [r0, #0]
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	f7ff fd4b 	bl	8008ce8 <_vfiprintf_r>
 8009252:	b002      	add	sp, #8
 8009254:	f85d eb04 	ldr.w	lr, [sp], #4
 8009258:	b003      	add	sp, #12
 800925a:	4770      	bx	lr
 800925c:	20000018 	.word	0x20000018

08009260 <abort>:
 8009260:	b508      	push	{r3, lr}
 8009262:	2006      	movs	r0, #6
 8009264:	f000 f82c 	bl	80092c0 <raise>
 8009268:	2001      	movs	r0, #1
 800926a:	f7f8 fbbd 	bl	80019e8 <_exit>

0800926e <_raise_r>:
 800926e:	291f      	cmp	r1, #31
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	4605      	mov	r5, r0
 8009274:	460c      	mov	r4, r1
 8009276:	d904      	bls.n	8009282 <_raise_r+0x14>
 8009278:	2316      	movs	r3, #22
 800927a:	6003      	str	r3, [r0, #0]
 800927c:	f04f 30ff 	mov.w	r0, #4294967295
 8009280:	bd38      	pop	{r3, r4, r5, pc}
 8009282:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009284:	b112      	cbz	r2, 800928c <_raise_r+0x1e>
 8009286:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800928a:	b94b      	cbnz	r3, 80092a0 <_raise_r+0x32>
 800928c:	4628      	mov	r0, r5
 800928e:	f000 f831 	bl	80092f4 <_getpid_r>
 8009292:	4622      	mov	r2, r4
 8009294:	4601      	mov	r1, r0
 8009296:	4628      	mov	r0, r5
 8009298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800929c:	f000 b818 	b.w	80092d0 <_kill_r>
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d00a      	beq.n	80092ba <_raise_r+0x4c>
 80092a4:	1c59      	adds	r1, r3, #1
 80092a6:	d103      	bne.n	80092b0 <_raise_r+0x42>
 80092a8:	2316      	movs	r3, #22
 80092aa:	6003      	str	r3, [r0, #0]
 80092ac:	2001      	movs	r0, #1
 80092ae:	e7e7      	b.n	8009280 <_raise_r+0x12>
 80092b0:	2100      	movs	r1, #0
 80092b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80092b6:	4620      	mov	r0, r4
 80092b8:	4798      	blx	r3
 80092ba:	2000      	movs	r0, #0
 80092bc:	e7e0      	b.n	8009280 <_raise_r+0x12>
	...

080092c0 <raise>:
 80092c0:	4b02      	ldr	r3, [pc, #8]	@ (80092cc <raise+0xc>)
 80092c2:	4601      	mov	r1, r0
 80092c4:	6818      	ldr	r0, [r3, #0]
 80092c6:	f7ff bfd2 	b.w	800926e <_raise_r>
 80092ca:	bf00      	nop
 80092cc:	20000018 	.word	0x20000018

080092d0 <_kill_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4d07      	ldr	r5, [pc, #28]	@ (80092f0 <_kill_r+0x20>)
 80092d4:	2300      	movs	r3, #0
 80092d6:	4604      	mov	r4, r0
 80092d8:	4608      	mov	r0, r1
 80092da:	4611      	mov	r1, r2
 80092dc:	602b      	str	r3, [r5, #0]
 80092de:	f7f8 fb73 	bl	80019c8 <_kill>
 80092e2:	1c43      	adds	r3, r0, #1
 80092e4:	d102      	bne.n	80092ec <_kill_r+0x1c>
 80092e6:	682b      	ldr	r3, [r5, #0]
 80092e8:	b103      	cbz	r3, 80092ec <_kill_r+0x1c>
 80092ea:	6023      	str	r3, [r4, #0]
 80092ec:	bd38      	pop	{r3, r4, r5, pc}
 80092ee:	bf00      	nop
 80092f0:	200004ac 	.word	0x200004ac

080092f4 <_getpid_r>:
 80092f4:	f7f8 bb60 	b.w	80019b8 <_getpid>

080092f8 <_init>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	bf00      	nop
 80092fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fe:	bc08      	pop	{r3}
 8009300:	469e      	mov	lr, r3
 8009302:	4770      	bx	lr

08009304 <_fini>:
 8009304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009306:	bf00      	nop
 8009308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930a:	bc08      	pop	{r3}
 800930c:	469e      	mov	lr, r3
 800930e:	4770      	bx	lr
